
Lab6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800667c  0800667c  0000767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006704  08006704  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006704  08006704  00007704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800670c  0800670c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800670c  0800670c  0000770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006710  08006710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006714  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000068  0800677c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800677c  00008558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166db  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aca  00000000  00000000  0001e773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00021240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001009  00000000  00000000  000226d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad2b  00000000  00000000  000236d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a74  00000000  00000000  0004e404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001101b8  00000000  00000000  00065e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe0  00000000  00000000  00176074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0017c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006664 	.word	0x08006664

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006664 	.word	0x08006664

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <__NVIC_SetVector+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	3310      	adds	r3, #16
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	461a      	mov	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <__io_putchar+0x20>)
 80005aa:	f004 fb91 	bl	8004cd0 <HAL_UART_Transmit>
	return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000084 	.word	0x20000084

080005bc <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <HAL_ADC_MspInit+0x38>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	50040000 	.word	0x50040000
 80005f8:	40021000 	.word	0x40021000

080005fc <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800061e:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <ADC1_Init+0xf8>)
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <ADC1_Init+0xfc>)
 8000622:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <ADC1_Init+0xf8>)
 8000626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <ADC1_Init+0xf8>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <ADC1_Init+0xf8>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <ADC1_Init+0xf8>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <ADC1_Init+0xf8>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <ADC1_Init+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <ADC1_Init+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <ADC1_Init+0xf8>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <ADC1_Init+0xf8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <ADC1_Init+0xf8>)
 8000660:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <ADC1_Init+0xf8>)
 8000668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <ADC1_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <ADC1_Init+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <ADC1_Init+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <ADC1_Init+0xf8>)
 8000686:	f000 fe7f 	bl	8001388 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000690:	f000 fa04 	bl	8000a9c <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000694:	217f      	movs	r1, #127	@ 0x7f
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <ADC1_Init+0xf8>)
 8000698:	f001 fe4a 	bl	8002330 <HAL_ADCEx_Calibration_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80006a2:	f000 f9fb 	bl	8000a9c <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <ADC1_Init+0xf8>)
 80006b2:	f001 fe9d 	bl	80023f0 <HAL_ADCEx_MultiModeConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <ADC1_Init+0xc4>
    {
        Error_Handler();
 80006bc:	f000 f9ee 	bl	8000a9c <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ADC1_Init+0x100>)
 80006c2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	@ 0x7f
 80006ce:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <ADC1_Init+0xf8>)
 80006de:	f001 f869 	bl	80017b4 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <ADC1_Init+0xf0>
    {
        Error_Handler();
 80006e8:	f000 f9d8 	bl	8000a9c <Error_Handler>
    }

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000158 	.word	0x20000158
 80006f8:	50040000 	.word	0x50040000
 80006fc:	c7520000 	.word	0xc7520000

08000700 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	//to do: inform RTOS task to print out sensor data
	int i;
	for(i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; ++i)
 8000708:	2380      	movs	r3, #128	@ 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00b      	b.n	8000726 <HAL_ADC_ConvCpltCallback+0x26>
		printf("%d : %d \r\n",i ,  sample_buffer[i]);
 800070e:	4a0b      	ldr	r2, [pc, #44]	@ (800073c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000716:	461a      	mov	r2, r3
 8000718:	68f9      	ldr	r1, [r7, #12]
 800071a:	4809      	ldr	r0, [pc, #36]	@ (8000740 <HAL_ADC_ConvCpltCallback+0x40>)
 800071c:	f005 f8f8 	bl	8005910 <iprintf>
	for(i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; ++i)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3301      	adds	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2bff      	cmp	r3, #255	@ 0xff
 800072a:	ddf0      	ble.n	800070e <HAL_ADC_ConvCpltCallback+0xe>

	printf("\n");
 800072c:	200a      	movs	r0, #10
 800072e:	f005 f901 	bl	8005934 <putchar>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000204 	.word	0x20000204
 8000740:	0800667c 	.word	0x0800667c

08000744 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    //to do: inform RTOS task to print out sensor data
	int i;
	for(i = 0; i < SAMPLE_BUFFER_SIZE / 2; ++i)
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e00b      	b.n	800076a <HAL_ADC_ConvHalfCpltCallback+0x26>
		printf("%d : %d \r\n",i , sample_buffer[i]);
 8000752:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075a:	461a      	mov	r2, r3
 800075c:	68f9      	ldr	r1, [r7, #12]
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000760:	f005 f8d6 	bl	8005910 <iprintf>
	for(i = 0; i < SAMPLE_BUFFER_SIZE / 2; ++i)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b7f      	cmp	r3, #127	@ 0x7f
 800076e:	ddf0      	ble.n	8000752 <HAL_ADC_ConvHalfCpltCallback+0xe>

	printf("\n");
 8000770:	200a      	movs	r0, #10
 8000772:	f005 f8df 	bl	8005934 <putchar>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000204 	.word	0x20000204
 8000784:	0800667c 	.word	0x0800667c

08000788 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <DMA1_Channel1_IRQHandler+0x20>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <DMA1_Channel1_IRQHandler+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0202 	orr.w	r2, r2, #2
 800079a:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 800079c:	4803      	ldr	r0, [pc, #12]	@ (80007ac <DMA1_Channel1_IRQHandler+0x24>)
 800079e:	f002 f901 	bl	80029a4 <HAL_DMA_IRQHandler>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000158 	.word	0x20000158
 80007ac:	200001bc 	.word	0x200001bc

080007b0 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 80007b6:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <ADC1_DMA1CH1_init+0x98>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ba:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <ADC1_DMA1CH1_init+0x98>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007c2:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <ADC1_DMA1CH1_init+0x98>)
 80007c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000850 <ADC1_DMA1CH1_init+0xa0>)
 80007d2:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007e6:	4b19      	ldr	r3, [pc, #100]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007ec:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007f4:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007f8:	2220      	movs	r2, #32
 80007fa:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 80007fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000802:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 8000806:	f001 ffb5 	bl	8002774 <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 8000810:	f000 f944 	bl	8000a9c <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <ADC1_DMA1CH1_init+0xa4>)
 8000816:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 8000818:	64da      	str	r2, [r3, #76]	@ 0x4c
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <ADC1_DMA1CH1_init+0x9c>)
 800081c:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <ADC1_DMA1CH1_init+0xa4>)
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 8000820:	f7ff feec 	bl	80005fc <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <ADC1_DMA1CH1_init+0xa8>)
 8000826:	4619      	mov	r1, r3
 8000828:	200b      	movs	r0, #11
 800082a:	f7ff fe99 	bl	8000560 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200b      	movs	r0, #11
 8000834:	f001 ff67 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000838:	200b      	movs	r0, #11
 800083a:	f001 ff80 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000
 800084c:	200001bc 	.word	0x200001bc
 8000850:	40020008 	.word	0x40020008
 8000854:	20000158 	.word	0x20000158
 8000858:	08000789 	.word	0x08000789

0800085c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <HAL_TIM_Base_MspInit+0x38>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10b      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000872:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000878:	6613      	str	r3, [r2, #96]	@ 0x60
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40021000 	.word	0x40021000

0800089c <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <TIM1_Init+0x98>)
 80008bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000938 <TIM1_Init+0x9c>)
 80008be:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 4000 - 1;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <TIM1_Init+0x98>)
 80008c2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80008c6:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <TIM1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <TIM1_Init+0x98>)
 80008d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <TIM1_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <TIM1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e2:	4814      	ldr	r0, [pc, #80]	@ (8000934 <TIM1_Init+0x98>)
 80008e4:	f003 fe4c 	bl	8004580 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <TIM1_Init+0x56>
    {
        Error_Handler();
 80008ee:	f000 f8d5 	bl	8000a9c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	@ (8000934 <TIM1_Init+0x98>)
 8000900:	f003 ff06 	bl	8004710 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <TIM1_Init+0x72>
    {
        Error_Handler();
 800090a:	f000 f8c7 	bl	8000a9c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800090e:	2320      	movs	r3, #32
 8000910:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <TIM1_Init+0x98>)
 800091c:	f004 f902 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <TIM1_Init+0x8e>
    {
        Error_Handler();
 8000926:	f000 f8b9 	bl	8000a9c <Error_Handler>
    }
}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000010c 	.word	0x2000010c
 8000938:	40012c00 	.word	0x40012c00

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fab1 	bl	8000ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f818 	bl	8000978 <SystemClock_Config>
  //MX_GPIO_Init();
  //MX_DFSDM1_Init();
  //MX_I2C2_Init();
  //MX_QUADSPI_Init();
  //MX_SPI3_Init();
  MX_USART1_UART_Init();
 8000948:	f000 f878 	bl	8000a3c <MX_USART1_UART_Init>
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */
  TIM1_Init();
 800094c:	f7ff ffa6 	bl	800089c <TIM1_Init>
  ADC1_DMA1CH1_init();
 8000950:	f7ff ff2e 	bl	80007b0 <ADC1_DMA1CH1_init>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sample_buffer[0], SAMPLE_BUFFER_SIZE);
 8000954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000958:	4904      	ldr	r1, [pc, #16]	@ (800096c <main+0x30>)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <main+0x34>)
 800095c:	f000 fe64 	bl	8001628 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <main+0x38>)
 8000962:	f003 fe65 	bl	8004630 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000966:	bf00      	nop
 8000968:	e7fd      	b.n	8000966 <main+0x2a>
 800096a:	bf00      	nop
 800096c:	20000204 	.word	0x20000204
 8000970:	20000158 	.word	0x20000158
 8000974:	2000010c 	.word	0x2000010c

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b096      	sub	sp, #88	@ 0x58
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2244      	movs	r2, #68	@ 0x44
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 f81f 	bl	80059ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800099a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800099e:	f002 facd 	bl	8002f3c <HAL_PWREx_ControlVoltageScaling>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009a8:	f000 f878 	bl	8000a9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009ac:	f002 faa8 	bl	8002f00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <SystemClock_Config+0xc0>)
 80009b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009b6:	4a20      	ldr	r2, [pc, #128]	@ (8000a38 <SystemClock_Config+0xc0>)
 80009b8:	f023 0318 	bic.w	r3, r3, #24
 80009bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009c0:	2314      	movs	r3, #20
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009d0:	2360      	movs	r3, #96	@ 0x60
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	2302      	movs	r3, #2
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009d8:	2301      	movs	r3, #1
 80009da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009e0:	2328      	movs	r3, #40	@ 0x28
 80009e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009e4:	2307      	movs	r3, #7
 80009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 faf7 	bl	8002fe8 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f84c 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 febf 	bl	80037a0 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a28:	f000 f838 	bl	8000a9c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a2c:	f003 fbc6 	bl	80041bc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a30:	bf00      	nop
 8000a32:	3758      	adds	r7, #88	@ 0x58
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000

08000a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	@ (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART1_UART_Init+0x58>)
 8000a80:	f004 f8d8 	bl	8004c34 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f807 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000084 	.word	0x20000084
 8000a98:	40013800 	.word	0x40013800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <HAL_MspInit+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_MspInit+0x44>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x44>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ae      	sub	sp, #184	@ 0xb8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2288      	movs	r2, #136	@ 0x88
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f004 ff5a 	bl	80059ca <memset>
  if(huart->Instance==USART1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a42      	ldr	r2, [pc, #264]	@ (8000c24 <HAL_UART_MspInit+0x134>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d13b      	bne.n	8000b98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b24:	2300      	movs	r3, #0
 8000b26:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 f85b 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b38:	f7ff ffb0 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b40:	4a39      	ldr	r2, [pc, #228]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b46:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b48:	4b37      	ldr	r3, [pc, #220]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b58:	4a33      	ldr	r2, [pc, #204]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b60:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000b6c:	23c0      	movs	r3, #192	@ 0xc0
 8000b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4826      	ldr	r0, [pc, #152]	@ (8000c2c <HAL_UART_MspInit+0x13c>)
 8000b92:	f001 ffe7 	bl	8002b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b96:	e040      	b.n	8000c1a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a24      	ldr	r2, [pc, #144]	@ (8000c30 <HAL_UART_MspInit+0x140>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d13b      	bne.n	8000c1a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 f81a 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000bba:	f7ff ff6f 	bl	8000a9c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc2:	4a19      	ldr	r2, [pc, #100]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_UART_MspInit+0x138>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000bee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	@ (8000c34 <HAL_UART_MspInit+0x144>)
 8000c16:	f001 ffa5 	bl	8002b64 <HAL_GPIO_Init>
}
 8000c1a:	bf00      	nop
 8000c1c:	37b8      	adds	r7, #184	@ 0xb8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40013800 	.word	0x40013800
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	40004800 	.word	0x40004800
 8000c34:	48000c00 	.word	0x48000c00

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <NMI_Handler+0x4>

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f95f 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000c9a:	2020      	movs	r0, #32
 8000c9c:	f002 f90c 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000ca0:	2040      	movs	r0, #64	@ 0x40
 8000ca2:	f002 f909 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000ca6:	2080      	movs	r0, #128	@ 0x80
 8000ca8:	f002 f906 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000cac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000cb0:	f002 f902 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000cbc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000cc0:	f002 f8fa 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000cc4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000cc8:	f002 f8f6 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000ccc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cd0:	f002 f8f2 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000cd4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000cd8:	f002 f8ee 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000cdc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ce0:	f002 f8ea 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
  }

  return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fc2b 	bl	8000598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
  }
  return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f004 fe38 	bl	8005a68 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20018000 	.word	0x20018000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	20000404 	.word	0x20000404
 8000e2c:	20000558 	.word	0x20000558

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f004 fdf7 	bl	8005a74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff fd59 	bl	800093c <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e98:	08006714 	.word	0x08006714
  ldr r2, =_sbss
 8000e9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea0:	20000558 	.word	0x20000558

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>

08000ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f001 fc1d 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f80e 	bl	8000ed8 <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d002      	beq.n	8000ec8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e001      	b.n	8000ecc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec8:	f7ff fdee 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_InitTick+0x6c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d023      	beq.n	8000f34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_InitTick+0x70>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <HAL_InitTick+0x6c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fc29 	bl	800275a <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10f      	bne.n	8000f2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d809      	bhi.n	8000f28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f001 fbf3 	bl	8002706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f20:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <HAL_InitTick+0x74>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e007      	b.n	8000f38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e004      	b.n	8000f38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e001      	b.n	8000f38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000408 	.word	0x20000408

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000408 	.word	0x20000408

08000f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	609a      	str	r2, [r3, #8]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3360      	adds	r3, #96	@ 0x60
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <LL_ADC_SetOffset+0x44>)
 800101a:	4013      	ands	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	4313      	orrs	r3, r2
 8001028:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001030:	bf00      	nop
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	03fff000 	.word	0x03fff000

08001040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3360      	adds	r3, #96	@ 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3360      	adds	r3, #96	@ 0x60
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3330      	adds	r3, #48	@ 0x30
 80010d8:	461a      	mov	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	4413      	add	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	211f      	movs	r1, #31
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	0e9b      	lsrs	r3, r3, #26
 8001100:	f003 011f 	and.w	r1, r3, #31
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	431a      	orrs	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3314      	adds	r3, #20
 8001130:	461a      	mov	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	0e5b      	lsrs	r3, r3, #25
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	0d1b      	lsrs	r3, r3, #20
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2107      	movs	r1, #7
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	401a      	ands	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	0d1b      	lsrs	r3, r3, #20
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0318 	and.w	r3, r3, #24
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800119c:	40d9      	lsrs	r1, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	400b      	ands	r3, r1
 80011a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	0007ffff 	.word	0x0007ffff

080011c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 031f 	and.w	r3, r3, #31
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6093      	str	r3, [r2, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001214:	d101      	bne.n	800121a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001238:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800123c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001264:	d101      	bne.n	800126a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001288:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012b4:	f043 0202 	orr.w	r2, r3, #2
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <LL_ADC_IsEnabled+0x18>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <LL_ADC_IsEnabled+0x1a>
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d101      	bne.n	8001306 <LL_ADC_IsDisableOngoing+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_IsDisableOngoing+0x1a>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001324:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001328:	f043 0204 	orr.w	r2, r3, #4
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b04      	cmp	r3, #4
 800134e:	d101      	bne.n	8001354 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b08      	cmp	r3, #8
 8001374:	d101      	bne.n	800137a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e130      	b.n	8001604 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f903 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff19 	bl	8001200 <LL_ADC_IsDeepPowerDownEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff feff 	bl	80011dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff34 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d115      	bne.n	800141a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff18 	bl	8001228 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013f8:	4b84      	ldr	r3, [pc, #528]	@ (800160c <HAL_ADC_Init+0x284>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	4a84      	ldr	r2, [pc, #528]	@ (8001610 <HAL_ADC_Init+0x288>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800140c:	e002      	b.n	8001414 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3b01      	subs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f9      	bne.n	800140e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff16 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142e:	f043 0210 	orr.w	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff76 	bl	800133c <LL_ADC_REG_IsConversionOngoing>
 8001450:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 80c9 	bne.w	80015f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80c5 	bne.w	80015f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff23 	bl	80012c8 <LL_ADC_IsEnabled>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d115      	bne.n	80014b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001488:	4862      	ldr	r0, [pc, #392]	@ (8001614 <HAL_ADC_Init+0x28c>)
 800148a:	f7ff ff1d 	bl	80012c8 <LL_ADC_IsEnabled>
 800148e:	4604      	mov	r4, r0
 8001490:	4861      	ldr	r0, [pc, #388]	@ (8001618 <HAL_ADC_Init+0x290>)
 8001492:	f7ff ff19 	bl	80012c8 <LL_ADC_IsEnabled>
 8001496:	4603      	mov	r3, r0
 8001498:	431c      	orrs	r4, r3
 800149a:	4860      	ldr	r0, [pc, #384]	@ (800161c <HAL_ADC_Init+0x294>)
 800149c:	f7ff ff14 	bl	80012c8 <LL_ADC_IsEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4323      	orrs	r3, r4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	485c      	ldr	r0, [pc, #368]	@ (8001620 <HAL_ADC_Init+0x298>)
 80014b0:	f7ff fd6e 	bl	8000f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e5b      	ldrb	r3, [r3, #25]
 80014b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	3b01      	subs	r3, #1
 80014e8:	045b      	lsls	r3, r3, #17
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001504:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	4b44      	ldr	r3, [pc, #272]	@ (8001624 <HAL_ADC_Init+0x29c>)
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	430b      	orrs	r3, r1
 800151e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff1c 	bl	8001362 <LL_ADC_INJ_IsConversionOngoing>
 800152a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d13d      	bne.n	80015ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d13a      	bne.n	80015ae <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800153c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001544:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001554:	f023 0302 	bic.w	r3, r3, #2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	69b9      	ldr	r1, [r7, #24]
 800155e:	430b      	orrs	r3, r1
 8001560:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001568:	2b01      	cmp	r3, #1
 800156a:	d118      	bne.n	800159e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001576:	f023 0304 	bic.w	r3, r3, #4
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001582:	4311      	orrs	r1, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001588:	4311      	orrs	r1, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800158e:	430a      	orrs	r2, r1
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	e007      	b.n	80015ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10c      	bne.n	80015d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015bc:	f023 010f 	bic.w	r1, r3, #15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	1e5a      	subs	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ce:	e007      	b.n	80015e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 020f 	bic.w	r2, r2, #15
 80015de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e4:	f023 0303 	bic.w	r3, r3, #3
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80015f0:	e007      	b.n	8001602 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f6:	f043 0210 	orr.w	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001602:	7ffb      	ldrb	r3, [r7, #31]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3724      	adds	r7, #36	@ 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000000 	.word	0x20000000
 8001610:	053e2d63 	.word	0x053e2d63
 8001614:	50040000 	.word	0x50040000
 8001618:	50040100 	.word	0x50040100
 800161c:	50040200 	.word	0x50040200
 8001620:	50040300 	.word	0x50040300
 8001624:	fff0c007 	.word	0xfff0c007

08001628 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001634:	4853      	ldr	r0, [pc, #332]	@ (8001784 <HAL_ADC_Start_DMA+0x15c>)
 8001636:	f7ff fdc3 	bl	80011c0 <LL_ADC_GetMultimode>
 800163a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe7b 	bl	800133c <LL_ADC_REG_IsConversionOngoing>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	f040 8093 	bne.w	8001774 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_ADC_Start_DMA+0x34>
 8001658:	2302      	movs	r3, #2
 800165a:	e08e      	b.n	800177a <HAL_ADC_Start_DMA+0x152>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a47      	ldr	r2, [pc, #284]	@ (8001788 <HAL_ADC_Start_DMA+0x160>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d008      	beq.n	8001680 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d002      	beq.n	8001680 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d172      	bne.n	8001766 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fc89 	bl	8001f98 <ADC_Enable>
 8001686:	4603      	mov	r3, r0
 8001688:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d165      	bne.n	800175c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001694:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a38      	ldr	r2, [pc, #224]	@ (800178c <HAL_ADC_Start_DMA+0x164>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d002      	beq.n	80016b4 <HAL_ADC_Start_DMA+0x8c>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	e000      	b.n	80016b6 <HAL_ADC_Start_DMA+0x8e>
 80016b4:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <HAL_ADC_Start_DMA+0x168>)
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d002      	beq.n	80016c4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	f023 0206 	bic.w	r2, r3, #6
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80016e8:	e002      	b.n	80016f0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f4:	4a27      	ldr	r2, [pc, #156]	@ (8001794 <HAL_ADC_Start_DMA+0x16c>)
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fc:	4a26      	ldr	r2, [pc, #152]	@ (8001798 <HAL_ADC_Start_DMA+0x170>)
 80016fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	4a25      	ldr	r2, [pc, #148]	@ (800179c <HAL_ADC_Start_DMA+0x174>)
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	221c      	movs	r2, #28
 800170e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0210 	orr.w	r2, r2, #16
 8001726:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3340      	adds	r3, #64	@ 0x40
 8001742:	4619      	mov	r1, r3
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f001 f8cc 	bl	80028e4 <HAL_DMA_Start_IT>
 800174c:	4603      	mov	r3, r0
 800174e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fddd 	bl	8001314 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800175a:	e00d      	b.n	8001778 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001764:	e008      	b.n	8001778 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001772:	e001      	b.n	8001778 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001774:	2302      	movs	r3, #2
 8001776:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001778:	7dfb      	ldrb	r3, [r7, #23]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	50040300 	.word	0x50040300
 8001788:	50040200 	.word	0x50040200
 800178c:	50040100 	.word	0x50040100
 8001790:	50040000 	.word	0x50040000
 8001794:	08002163 	.word	0x08002163
 8001798:	0800223b 	.word	0x0800223b
 800179c:	08002257 	.word	0x08002257

080017a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0b6      	sub	sp, #216	@ 0xd8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x22>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e3c9      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x7b6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fdaa 	bl	800133c <LL_ADC_REG_IsConversionOngoing>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 83aa 	bne.w	8001f44 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d824      	bhi.n	800184a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	3b02      	subs	r3, #2
 8001806:	2b03      	cmp	r3, #3
 8001808:	d81b      	bhi.n	8001842 <HAL_ADC_ConfigChannel+0x8e>
 800180a:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <HAL_ADC_ConfigChannel+0x5c>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	08001821 	.word	0x08001821
 8001814:	08001829 	.word	0x08001829
 8001818:	08001831 	.word	0x08001831
 800181c:	08001839 	.word	0x08001839
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001820:	230c      	movs	r3, #12
 8001822:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001826:	e010      	b.n	800184a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001828:	2312      	movs	r3, #18
 800182a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800182e:	e00c      	b.n	800184a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001830:	2318      	movs	r3, #24
 8001832:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001836:	e008      	b.n	800184a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001840:	e003      	b.n	800184a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001842:	2306      	movs	r3, #6
 8001844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001848:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001858:	f7ff fc36 	bl	80010c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fd6b 	bl	800133c <LL_ADC_REG_IsConversionOngoing>
 8001866:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd77 	bl	8001362 <LL_ADC_INJ_IsConversionOngoing>
 8001874:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 81a4 	bne.w	8001bca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 819f 	bne.w	8001bca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	461a      	mov	r2, r3
 800189a:	f7ff fc41 	bl	8001120 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d00a      	beq.n	80018d6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6919      	ldr	r1, [r3, #16]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018d0:	f7ff fb92 	bl	8000ff8 <LL_ADC_SetOffset>
 80018d4:	e179      	b.n	8001bca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fbaf 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10a      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x14e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fba4 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	0e9b      	lsrs	r3, r3, #26
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	e01e      	b.n	8001940 <HAL_ADC_ConfigChannel+0x18c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fb99 	bl	8001040 <LL_ADC_GetOffsetChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001920:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001924:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001928:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001930:	2320      	movs	r3, #32
 8001932:	e004      	b.n	800193e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1a4>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	e018      	b.n	800198a <HAL_ADC_ConfigChannel+0x1d6>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800196c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001970:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800197c:	2320      	movs	r3, #32
 800197e:	e004      	b.n	800198a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800198a:	429a      	cmp	r2, r3
 800198c:	d106      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fb68 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb4c 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x214>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2101      	movs	r1, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb41 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	f003 021f 	and.w	r2, r3, #31
 80019c6:	e01e      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x252>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb36 	bl	8001040 <LL_ADC_GetOffsetChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80019ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80019f6:	2320      	movs	r3, #32
 80019f8:	e004      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80019fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x26a>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0e9b      	lsrs	r3, r3, #26
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	e018      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x29c>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e004      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d106      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fb05 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2102      	movs	r1, #2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fae9 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x2da>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fade 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	0e9b      	lsrs	r3, r3, #26
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	e01e      	b.n	8001acc <HAL_ADC_ConfigChannel+0x318>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2102      	movs	r1, #2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fad3 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ab0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001abc:	2320      	movs	r3, #32
 8001abe:	e004      	b.n	8001aca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x330>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0e9b      	lsrs	r3, r3, #26
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	e014      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x35a>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e004      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff faa6 	bl	800106c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2103      	movs	r1, #3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa8a 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x398>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fa7f 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	f003 021f 	and.w	r2, r3, #31
 8001b4a:	e017      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x3c8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2103      	movs	r1, #3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fa74 	bl	8001040 <LL_ADC_GetOffsetChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	e003      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x3e0>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	e011      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x404>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d106      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fa51 	bl	800106c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fb7a 	bl	80012c8 <LL_ADC_IsEnabled>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 8140 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f7ff fac5 	bl	8001178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	4a8f      	ldr	r2, [pc, #572]	@ (8001e30 <HAL_ADC_ConfigChannel+0x67c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	f040 8131 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x46e>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	3301      	adds	r3, #1
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	bf94      	ite	ls
 8001c1a:	2301      	movls	r3, #1
 8001c1c:	2300      	movhi	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e019      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x4a2>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e003      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	bf94      	ite	ls
 8001c50:	2301      	movls	r3, #1
 8001c52:	2300      	movhi	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d079      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d107      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x4c2>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	069b      	lsls	r3, r3, #26
 8001c70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c74:	e015      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x4ee>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c86:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e003      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	069b      	lsls	r3, r3, #26
 8001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x50e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	e017      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x53e>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	ea42 0103 	orr.w	r1, r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x564>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 021f 	and.w	r2, r3, #31
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	051b      	lsls	r3, r3, #20
 8001d16:	e018      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x596>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e003      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f003 021f 	and.w	r2, r3, #31
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	e081      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x5b6>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	3301      	adds	r3, #1
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d68:	e015      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x5e2>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e003      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	069b      	lsls	r3, r3, #26
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x602>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	e017      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x632>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	61bb      	str	r3, [r7, #24]
  return result;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	ea42 0103 	orr.w	r1, r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x65e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	3b1e      	subs	r3, #30
 8001e0a:	051b      	lsls	r3, r3, #20
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e10:	e01e      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x69c>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	60fb      	str	r3, [r7, #12]
  return result;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	e006      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x688>
 8001e2e:	bf00      	nop
 8001e30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	051b      	lsls	r3, r3, #20
 8001e4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7ff f962 	bl	8001120 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b44      	ldr	r3, [pc, #272]	@ (8001f74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d07a      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e68:	4843      	ldr	r0, [pc, #268]	@ (8001f78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e6a:	f7ff f8b7 	bl	8000fdc <LL_ADC_GetCommonPathInternalCh>
 8001e6e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a41      	ldr	r2, [pc, #260]	@ (8001f7c <HAL_ADC_ConfigChannel+0x7c8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12c      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d126      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x6e8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a3b      	ldr	r2, [pc, #236]	@ (8001f84 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d15d      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4834      	ldr	r0, [pc, #208]	@ (8001f78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ea8:	f7ff f885 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eac:	4b36      	ldr	r3, [pc, #216]	@ (8001f88 <HAL_ADC_ConfigChannel+0x7d4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	4a36      	ldr	r2, [pc, #216]	@ (8001f8c <HAL_ADC_ConfigChannel+0x7d8>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed4:	e040      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a2d      	ldr	r2, [pc, #180]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7dc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d118      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d112      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a23      	ldr	r2, [pc, #140]	@ (8001f80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x74c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a22      	ldr	r2, [pc, #136]	@ (8001f84 <HAL_ADC_ConfigChannel+0x7d0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d12d      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481b      	ldr	r0, [pc, #108]	@ (8001f78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f0c:	f7ff f853 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f10:	e024      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1f      	ldr	r2, [pc, #124]	@ (8001f94 <HAL_ADC_ConfigChannel+0x7e0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d120      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11a      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d115      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480e      	ldr	r0, [pc, #56]	@ (8001f78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f3e:	f7ff f83a 	bl	8000fb6 <LL_ADC_SetCommonPathInternalCh>
 8001f42:	e00c      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f56:	e002      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f66:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	37d8      	adds	r7, #216	@ 0xd8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	80080000 	.word	0x80080000
 8001f78:	50040300 	.word	0x50040300
 8001f7c:	c7520000 	.word	0xc7520000
 8001f80:	50040000 	.word	0x50040000
 8001f84:	50040200 	.word	0x50040200
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	053e2d63 	.word	0x053e2d63
 8001f90:	cb840000 	.word	0xcb840000
 8001f94:	80000001 	.word	0x80000001

08001f98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f98d 	bl	80012c8 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d169      	bne.n	8002088 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <ADC_Enable+0xfc>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00d      	beq.n	8001fde <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc6:	f043 0210 	orr.w	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e055      	b.n	800208a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f948 	bl	8001278 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fe8:	482b      	ldr	r0, [pc, #172]	@ (8002098 <ADC_Enable+0x100>)
 8001fea:	f7fe fff7 	bl	8000fdc <LL_ADC_GetCommonPathInternalCh>
 8001fee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ff8:	4b28      	ldr	r3, [pc, #160]	@ (800209c <ADC_Enable+0x104>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	4a28      	ldr	r2, [pc, #160]	@ (80020a0 <ADC_Enable+0x108>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002012:	e002      	b.n	800201a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3b01      	subs	r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002020:	f7fe ffaa 	bl	8000f78 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002026:	e028      	b.n	800207a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f94b 	bl	80012c8 <LL_ADC_IsEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f91b 	bl	8001278 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002042:	f7fe ff99 	bl	8000f78 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d914      	bls.n	800207a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d00d      	beq.n	800207a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e007      	b.n	800208a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d1cf      	bne.n	8002028 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	8000003f 	.word	0x8000003f
 8002098:	50040300 	.word	0x50040300
 800209c:	20000000 	.word	0x20000000
 80020a0:	053e2d63 	.word	0x053e2d63

080020a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f91c 	bl	80012ee <LL_ADC_IsDisableOngoing>
 80020b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f903 	bl	80012c8 <LL_ADC_IsEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d047      	beq.n	8002158 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d144      	bne.n	8002158 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030d 	and.w	r3, r3, #13
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10c      	bne.n	80020f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f8dd 	bl	80012a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2203      	movs	r2, #3
 80020ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ee:	f7fe ff43 	bl	8000f78 <HAL_GetTick>
 80020f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020f4:	e029      	b.n	800214a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	f043 0210 	orr.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e023      	b.n	800215a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002112:	f7fe ff31 	bl	8000f78 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d914      	bls.n	800214a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	f043 0210 	orr.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e007      	b.n	800215a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1dc      	bne.n	8002112 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002174:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002178:	2b00      	cmp	r3, #0
 800217a:	d14b      	bne.n	8002214 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d021      	beq.n	80021da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe ff81 	bl	80010a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d032      	beq.n	800220c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d12b      	bne.n	800220c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11f      	bne.n	800220c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80021d8:	e018      	b.n	800220c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7fe fa77 	bl	8000700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002212:	e00e      	b.n	8002232 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff fabd 	bl	80017a0 <HAL_ADC_ErrorCallback>
}
 8002226:	e004      	b.n	8002232 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7fe fa7b 	bl	8000744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fa8f 	bl	80017a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <LL_ADC_IsEnabled>:
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <LL_ADC_IsEnabled+0x18>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_IsEnabled+0x1a>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_StartCalibration>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80022c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022f6:	d101      	bne.n	80022fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_REG_IsConversionOngoing>:
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d101      	bne.n	8002322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_ADCEx_Calibration_Start+0x1c>
 8002348:	2302      	movs	r3, #2
 800234a:	e04d      	b.n	80023e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fea5 	bl	80020a4 <ADC_Disable>
 800235a:	4603      	mov	r3, r0
 800235c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d136      	bne.n	80023d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800236c:	f023 0302 	bic.w	r3, r3, #2
 8002370:	f043 0202 	orr.w	r2, r3, #2
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff96 	bl	80022b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002384:	e014      	b.n	80023b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3301      	adds	r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002392:	d30d      	bcc.n	80023b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002398:	f023 0312 	bic.w	r3, r3, #18
 800239c:	f043 0210 	orr.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e01b      	b.n	80023e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff94 	bl	80022e2 <LL_ADC_IsCalibrationOnGoing>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e2      	bne.n	8002386 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	f023 0303 	bic.w	r3, r3, #3
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80023d0:	e005      	b.n	80023de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b09f      	sub	sp, #124	@ 0x7c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800240a:	2302      	movs	r3, #2
 800240c:	e093      	b.n	8002536 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002416:	2300      	movs	r3, #0
 8002418:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800241a:	2300      	movs	r3, #0
 800241c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a47      	ldr	r2, [pc, #284]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d102      	bne.n	800242e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002428:	4b46      	ldr	r3, [pc, #280]	@ (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	e001      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e072      	b.n	8002536 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff59 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 8002458:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff53 	bl	800230a <LL_ADC_REG_IsConversionOngoing>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d154      	bne.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800246a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800246c:	2b00      	cmp	r3, #0
 800246e:	d151      	bne.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002472:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02c      	beq.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800247c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800248e:	035b      	lsls	r3, r3, #13
 8002490:	430b      	orrs	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002496:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002498:	4829      	ldr	r0, [pc, #164]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800249a:	f7ff fef6 	bl	800228a <LL_ADC_IsEnabled>
 800249e:	4604      	mov	r4, r0
 80024a0:	4828      	ldr	r0, [pc, #160]	@ (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024a2:	f7ff fef2 	bl	800228a <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	431c      	orrs	r4, r3
 80024aa:	4828      	ldr	r0, [pc, #160]	@ (800254c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024ac:	f7ff feed 	bl	800228a <LL_ADC_IsEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4323      	orrs	r3, r4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d137      	bne.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024c0:	f023 030f 	bic.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	6811      	ldr	r1, [r2, #0]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024d4:	e028      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e2:	4817      	ldr	r0, [pc, #92]	@ (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024e4:	f7ff fed1 	bl	800228a <LL_ADC_IsEnabled>
 80024e8:	4604      	mov	r4, r0
 80024ea:	4816      	ldr	r0, [pc, #88]	@ (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024ec:	f7ff fecd 	bl	800228a <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	431c      	orrs	r4, r3
 80024f4:	4815      	ldr	r0, [pc, #84]	@ (800254c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024f6:	f7ff fec8 	bl	800228a <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4323      	orrs	r3, r4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d112      	bne.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800250a:	f023 030f 	bic.w	r3, r3, #15
 800250e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002510:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002512:	e009      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002526:	e000      	b.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002528:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002532:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002536:	4618      	mov	r0, r3
 8002538:	377c      	adds	r7, #124	@ 0x7c
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	50040000 	.word	0x50040000
 8002544:	50040100 	.word	0x50040100
 8002548:	50040300 	.word	0x50040300
 800254c:	50040200 	.word	0x50040200

08002550 <__NVIC_SetPriorityGrouping>:
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	@ (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	@ (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	@ (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	@ 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e098      	b.n	80028b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b4d      	ldr	r3, [pc, #308]	@ (80028c4 <HAL_DMA_Init+0x150>)
 800278e:	429a      	cmp	r2, r3
 8002790:	d80f      	bhi.n	80027b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	4b4b      	ldr	r3, [pc, #300]	@ (80028c8 <HAL_DMA_Init+0x154>)
 800279a:	4413      	add	r3, r2
 800279c:	4a4b      	ldr	r2, [pc, #300]	@ (80028cc <HAL_DMA_Init+0x158>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	009a      	lsls	r2, r3, #2
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a48      	ldr	r2, [pc, #288]	@ (80028d0 <HAL_DMA_Init+0x15c>)
 80027ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80027b0:	e00e      	b.n	80027d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b46      	ldr	r3, [pc, #280]	@ (80028d4 <HAL_DMA_Init+0x160>)
 80027ba:	4413      	add	r3, r2
 80027bc:	4a43      	ldr	r2, [pc, #268]	@ (80028cc <HAL_DMA_Init+0x158>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	009a      	lsls	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a42      	ldr	r2, [pc, #264]	@ (80028d8 <HAL_DMA_Init+0x164>)
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800282a:	d039      	beq.n	80028a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <HAL_DMA_Init+0x15c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d11a      	bne.n	800286c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002836:	4b29      	ldr	r3, [pc, #164]	@ (80028dc <HAL_DMA_Init+0x168>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f003 031c 	and.w	r3, r3, #28
 8002842:	210f      	movs	r1, #15
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	4924      	ldr	r1, [pc, #144]	@ (80028dc <HAL_DMA_Init+0x168>)
 800284c:	4013      	ands	r3, r2
 800284e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002850:	4b22      	ldr	r3, [pc, #136]	@ (80028dc <HAL_DMA_Init+0x168>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	f003 031c 	and.w	r3, r3, #28
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	491d      	ldr	r1, [pc, #116]	@ (80028dc <HAL_DMA_Init+0x168>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
 800286a:	e019      	b.n	80028a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800286c:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <HAL_DMA_Init+0x16c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	f003 031c 	and.w	r3, r3, #28
 8002878:	210f      	movs	r1, #15
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	4917      	ldr	r1, [pc, #92]	@ (80028e0 <HAL_DMA_Init+0x16c>)
 8002882:	4013      	ands	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002886:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <HAL_DMA_Init+0x16c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f003 031c 	and.w	r3, r3, #28
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	4911      	ldr	r1, [pc, #68]	@ (80028e0 <HAL_DMA_Init+0x16c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40020407 	.word	0x40020407
 80028c8:	bffdfff8 	.word	0xbffdfff8
 80028cc:	cccccccd 	.word	0xcccccccd
 80028d0:	40020000 	.word	0x40020000
 80028d4:	bffdfbf8 	.word	0xbffdfbf8
 80028d8:	40020400 	.word	0x40020400
 80028dc:	400200a8 	.word	0x400200a8
 80028e0:	400204a8 	.word	0x400204a8

080028e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_DMA_Start_IT+0x20>
 8002900:	2302      	movs	r3, #2
 8002902:	e04b      	b.n	800299c <HAL_DMA_Start_IT+0xb8>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d13a      	bne.n	800298e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f8e0 	bl	8002b02 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 020e 	orr.w	r2, r2, #14
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e00f      	b.n	800297c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0204 	bic.w	r2, r2, #4
 800296a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 020a 	orr.w	r2, r2, #10
 800297a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e005      	b.n	800299a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002996:	2302      	movs	r3, #2
 8002998:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c0:	f003 031c 	and.w	r3, r3, #28
 80029c4:	2204      	movs	r2, #4
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d026      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x7a>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d021      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f003 021c 	and.w	r2, r3, #28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	2104      	movs	r1, #4
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d071      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a1c:	e06c      	b.n	8002af8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f003 031c 	and.w	r3, r3, #28
 8002a26:	2202      	movs	r2, #2
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02e      	beq.n	8002a90 <HAL_DMA_IRQHandler+0xec>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d029      	beq.n	8002a90 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10b      	bne.n	8002a62 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 020a 	bic.w	r2, r2, #10
 8002a58:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f003 021c 	and.w	r2, r3, #28
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	2102      	movs	r1, #2
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d038      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a8e:	e033      	b.n	8002af8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	f003 031c 	and.w	r3, r3, #28
 8002a98:	2208      	movs	r2, #8
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d02a      	beq.n	8002afa <HAL_DMA_IRQHandler+0x156>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 020e 	bic.w	r2, r2, #14
 8002abc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f003 021c 	and.w	r2, r3, #28
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
}
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	f003 021c 	and.w	r2, r3, #28
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d108      	bne.n	8002b46 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b44:	e007      	b.n	8002b56 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	60da      	str	r2, [r3, #12]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b72:	e17f      	b.n	8002e74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8171 	beq.w	8002e6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d005      	beq.n	8002ba4 <HAL_GPIO_Init+0x40>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d130      	bne.n	8002c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bda:	2201      	movs	r2, #1
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 0201 	and.w	r2, r3, #1
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d118      	bne.n	8002c44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	f003 0201 	and.w	r2, r3, #1
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d017      	beq.n	8002c80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d123      	bne.n	8002cd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	6939      	ldr	r1, [r7, #16]
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0203 	and.w	r2, r3, #3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80ac 	beq.w	8002e6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	4b5f      	ldr	r3, [pc, #380]	@ (8002e94 <HAL_GPIO_Init+0x330>)
 8002d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8002e94 <HAL_GPIO_Init+0x330>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d22:	4b5c      	ldr	r3, [pc, #368]	@ (8002e94 <HAL_GPIO_Init+0x330>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d2e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e98 <HAL_GPIO_Init+0x334>)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d58:	d025      	beq.n	8002da6 <HAL_GPIO_Init+0x242>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e9c <HAL_GPIO_Init+0x338>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_GPIO_Init+0x23e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea0 <HAL_GPIO_Init+0x33c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x23a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ea4 <HAL_GPIO_Init+0x340>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x236>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4c      	ldr	r2, [pc, #304]	@ (8002ea8 <HAL_GPIO_Init+0x344>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x232>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002eac <HAL_GPIO_Init+0x348>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x22e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb0 <HAL_GPIO_Init+0x34c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x22a>
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	e00c      	b.n	8002da8 <HAL_GPIO_Init+0x244>
 8002d8e:	2307      	movs	r3, #7
 8002d90:	e00a      	b.n	8002da8 <HAL_GPIO_Init+0x244>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x244>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x244>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x244>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x244>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x244>
 8002da6:	2300      	movs	r3, #0
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002db8:	4937      	ldr	r1, [pc, #220]	@ (8002e98 <HAL_GPIO_Init+0x334>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dea:	4a32      	ldr	r2, [pc, #200]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002df0:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e14:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e68:	4a12      	ldr	r2, [pc, #72]	@ (8002eb4 <HAL_GPIO_Init+0x350>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3301      	adds	r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f ae78 	bne.w	8002b74 <HAL_GPIO_Init+0x10>
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	48000400 	.word	0x48000400
 8002ea0:	48000800 	.word	0x48000800
 8002ea4:	48000c00 	.word	0x48000c00
 8002ea8:	48001000 	.word	0x48001000
 8002eac:	48001400 	.word	0x48001400
 8002eb0:	48001800 	.word	0x48001800
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ece:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f806 	bl	8002ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40010400 	.word	0x40010400

08002ee8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a04      	ldr	r2, [pc, #16]	@ (8002f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40007000 	.word	0x40007000

08002f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40007000 	.word	0x40007000

08002f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f4a:	d130      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4c:	4b23      	ldr	r3, [pc, #140]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f58:	d038      	beq.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f62:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2232      	movs	r2, #50	@ 0x32
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f80:	e002      	b.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f88:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f94:	d102      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f2      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa8:	d110      	bne.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e00f      	b.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fba:	d007      	beq.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fbc:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc4:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	431bde83 	.word	0x431bde83

08002fe8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e3ca      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	4b97      	ldr	r3, [pc, #604]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003004:	4b94      	ldr	r3, [pc, #592]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80e4 	beq.w	80031e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_RCC_OscConfig+0x4a>
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b0c      	cmp	r3, #12
 8003026:	f040 808b 	bne.w	8003140 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b01      	cmp	r3, #1
 800302e:	f040 8087 	bne.w	8003140 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003032:	4b89      	ldr	r3, [pc, #548]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x62>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e3a2      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	4b82      	ldr	r3, [pc, #520]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <HAL_RCC_OscConfig+0x7c>
 800305a:	4b7f      	ldr	r3, [pc, #508]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003062:	e005      	b.n	8003070 <HAL_RCC_OscConfig+0x88>
 8003064:	4b7c      	ldr	r3, [pc, #496]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003070:	4293      	cmp	r3, r2
 8003072:	d223      	bcs.n	80030bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fd55 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e383      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003088:	4b73      	ldr	r3, [pc, #460]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a72      	ldr	r2, [pc, #456]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800308e:	f043 0308 	orr.w	r3, r3, #8
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	496d      	ldr	r1, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	4968      	ldr	r1, [pc, #416]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
 80030ba:	e025      	b.n	8003108 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a65      	ldr	r2, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4960      	ldr	r1, [pc, #384]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030da:	4b5f      	ldr	r3, [pc, #380]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	495b      	ldr	r1, [pc, #364]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fd15 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e343      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003108:	f000 fc4a 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b52      	ldr	r3, [pc, #328]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4950      	ldr	r1, [pc, #320]	@ (800325c <HAL_RCC_OscConfig+0x274>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	4a4e      	ldr	r2, [pc, #312]	@ (8003260 <HAL_RCC_OscConfig+0x278>)
 8003126:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003128:	4b4e      	ldr	r3, [pc, #312]	@ (8003264 <HAL_RCC_OscConfig+0x27c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fed3 	bl	8000ed8 <HAL_InitTick>
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d052      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	e327      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d032      	beq.n	80031ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003148:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a42      	ldr	r2, [pc, #264]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003154:	f7fd ff10 	bl	8000f78 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800315c:	f7fd ff0c 	bl	8000f78 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e310      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316e:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317a:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a36      	ldr	r2, [pc, #216]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b34      	ldr	r3, [pc, #208]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4931      	ldr	r1, [pc, #196]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003198:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	492c      	ldr	r1, [pc, #176]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
 80031ac:	e01a      	b.n	80031e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ba:	f7fd fedd 	bl	8000f78 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c2:	f7fd fed9 	bl	8000f78 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e2dd      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d4:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x1da>
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d074      	beq.n	80032da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x21a>
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d10e      	bne.n	800321a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d064      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d160      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e2ba      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x24a>
 8003224:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0b      	ldr	r2, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e026      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800323a:	d115      	bne.n	8003268 <HAL_RCC_OscConfig+0x280>
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a02      	ldr	r2, [pc, #8]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e014      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	08006688 	.word	0x08006688
 8003260:	20000000 	.word	0x20000000
 8003264:	20000004 	.word	0x20000004
 8003268:	4ba0      	ldr	r3, [pc, #640]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a9f      	ldr	r2, [pc, #636]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b9d      	ldr	r3, [pc, #628]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a9c      	ldr	r2, [pc, #624]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd fe76 	bl	8000f78 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd fe72 	bl	8000f78 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e276      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a2:	4b92      	ldr	r3, [pc, #584]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x2a8>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd fe62 	bl	8000f78 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd fe5e 	bl	8000f78 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	@ 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e262      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	4b88      	ldr	r3, [pc, #544]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2d0>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d060      	beq.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x310>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d119      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d116      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	4b7c      	ldr	r3, [pc, #496]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x328>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e23f      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b76      	ldr	r3, [pc, #472]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	4973      	ldr	r1, [pc, #460]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003324:	e040      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d023      	beq.n	8003376 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332e:	4b6f      	ldr	r3, [pc, #444]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6e      	ldr	r2, [pc, #440]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fd fe1d 	bl	8000f78 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7fd fe19 	bl	8000f78 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e21d      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	4b65      	ldr	r3, [pc, #404]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b62      	ldr	r3, [pc, #392]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	495f      	ldr	r1, [pc, #380]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
 8003374:	e018      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b5d      	ldr	r3, [pc, #372]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800337c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fd fdf9 	bl	8000f78 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fd fdf5 	bl	8000f78 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1f9      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	4b53      	ldr	r3, [pc, #332]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b4b      	ldr	r3, [pc, #300]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c2:	4a4a      	ldr	r2, [pc, #296]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fd fdd4 	bl	8000f78 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fd fdd0 	bl	8000f78 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1d4      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e6:	4b41      	ldr	r3, [pc, #260]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3ec>
 80033f4:	e01b      	b.n	800342e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033fc:	4a3b      	ldr	r2, [pc, #236]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fd fdb7 	bl	8000f78 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340e:	f7fd fdb3 	bl	8000f78 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1b7      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	4b32      	ldr	r3, [pc, #200]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a6 	beq.w	8003588 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003440:	4b2a      	ldr	r3, [pc, #168]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	4a26      	ldr	r2, [pc, #152]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003456:	6593      	str	r3, [r2, #88]	@ 0x58
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003464:	2301      	movs	r3, #1
 8003466:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	4b21      	ldr	r3, [pc, #132]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003474:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fd fd7a 	bl	8000f78 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fd fd76 	bl	8000f78 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e17a      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349a:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4d8>
 80034ae:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	4a0d      	ldr	r2, [pc, #52]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034be:	e029      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d115      	bne.n	80034f4 <HAL_RCC_OscConfig+0x50c>
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ce:	4a07      	ldr	r2, [pc, #28]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034de:	4a03      	ldr	r2, [pc, #12]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
 80034f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	4a9b      	ldr	r2, [pc, #620]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003504:	4b98      	ldr	r3, [pc, #608]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	4a97      	ldr	r2, [pc, #604]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fd2c 	bl	8000f78 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fd fd28 	bl	8000f78 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e12a      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353a:	4b8b      	ldr	r3, [pc, #556]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ed      	beq.n	8003524 <HAL_RCC_OscConfig+0x53c>
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fd fd15 	bl	8000f78 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fd fd11 	bl	8000f78 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e113      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003568:	4b7f      	ldr	r3, [pc, #508]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ed      	bne.n	8003552 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b7a      	ldr	r3, [pc, #488]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	4a79      	ldr	r2, [pc, #484]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80fe 	beq.w	800378e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	2b02      	cmp	r3, #2
 8003598:	f040 80d0 	bne.w	800373c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800359c:	4b72      	ldr	r3, [pc, #456]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d130      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	3b01      	subs	r3, #1
 80035bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d127      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d11f      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035dc:	2a07      	cmp	r2, #7
 80035de:	bf14      	ite	ne
 80035e0:	2201      	movne	r2, #1
 80035e2:	2200      	moveq	r2, #0
 80035e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d113      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	3b01      	subs	r3, #1
 80035f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d06e      	beq.n	80036f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d069      	beq.n	80036ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003624:	4b50      	ldr	r3, [pc, #320]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0ad      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003634:	4b4c      	ldr	r3, [pc, #304]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a4b      	ldr	r2, [pc, #300]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003640:	f7fd fc9a 	bl	8000f78 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fd fc96 	bl	8000f78 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e09a      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365a:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003666:	4b40      	ldr	r3, [pc, #256]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_RCC_OscConfig+0x784>)
 800366c:	4013      	ands	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003676:	3a01      	subs	r2, #1
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003680:	0212      	lsls	r2, r2, #8
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003688:	0852      	lsrs	r2, r2, #1
 800368a:	3a01      	subs	r2, #1
 800368c:	0552      	lsls	r2, r2, #21
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003694:	0852      	lsrs	r2, r2, #1
 8003696:	3a01      	subs	r2, #1
 8003698:	0652      	lsls	r2, r2, #25
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036a0:	0912      	lsrs	r2, r2, #4
 80036a2:	0452      	lsls	r2, r2, #17
 80036a4:	430a      	orrs	r2, r1
 80036a6:	4930      	ldr	r1, [pc, #192]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c4:	f7fd fc58 	bl	8000f78 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd fc54 	bl	8000f78 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e058      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	4b22      	ldr	r3, [pc, #136]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ea:	e050      	b.n	800378e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e04f      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d148      	bne.n	800378e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003708:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800370e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003712:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003714:	f7fd fc30 	bl	8000f78 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fc2c 	bl	8000f78 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e030      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x734>
 800373a:	e028      	b.n	800378e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d023      	beq.n	800378a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a08      	ldr	r2, [pc, #32]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003748:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd fc13 	bl	8000f78 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	e00c      	b.n	8003770 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fd fc0f 	bl	8000f78 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d905      	bls.n	8003770 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e013      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
 8003768:	40021000 	.word	0x40021000
 800376c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003770:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_RCC_OscConfig+0x7b0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ec      	bne.n	8003756 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_OscConfig+0x7b0>)
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	4905      	ldr	r1, [pc, #20]	@ (8003798 <HAL_RCC_OscConfig+0x7b0>)
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_OscConfig+0x7b4>)
 8003784:	4013      	ands	r3, r2
 8003786:	60cb      	str	r3, [r1, #12]
 8003788:	e001      	b.n	800378e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	feeefffc 	.word	0xfeeefffc

080037a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0e7      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b75      	ldr	r3, [pc, #468]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b72      	ldr	r3, [pc, #456]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4970      	ldr	r1, [pc, #448]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b6e      	ldr	r3, [pc, #440]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0cf      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d010      	beq.n	8003812 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	4b66      	ldr	r3, [pc, #408]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d908      	bls.n	8003812 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b63      	ldr	r3, [pc, #396]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4960      	ldr	r1, [pc, #384]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d04c      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003826:	4b5a      	ldr	r3, [pc, #360]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d121      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0a6      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	4b54      	ldr	r3, [pc, #336]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d115      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e09a      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003856:	4b4e      	ldr	r3, [pc, #312]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e08e      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003866:	4b4a      	ldr	r3, [pc, #296]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e086      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b46      	ldr	r3, [pc, #280]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4943      	ldr	r1, [pc, #268]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003888:	f7fd fb76 	bl	8000f78 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fd fb72 	bl	8000f78 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e06e      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d208      	bcs.n	80038e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	492b      	ldr	r1, [pc, #172]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e6:	4b29      	ldr	r3, [pc, #164]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d210      	bcs.n	8003916 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 0207 	bic.w	r2, r3, #7
 80038fc:	4923      	ldr	r1, [pc, #140]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003904:	4b21      	ldr	r3, [pc, #132]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e036      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003922:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4918      	ldr	r1, [pc, #96]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4910      	ldr	r1, [pc, #64]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003954:	f000 f824 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	490b      	ldr	r1, [pc, #44]	@ (8003994 <HAL_RCC_ClockConfig+0x1f4>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1f8>)
 8003972:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1fc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd faad 	bl	8000ed8 <HAL_InitTick>
 800397e:	4603      	mov	r3, r0
 8003980:	72fb      	strb	r3, [r7, #11]

  return status;
 8003982:	7afb      	ldrb	r3, [r7, #11]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
 8003994:	08006688 	.word	0x08006688
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	@ 0x24
 80039a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ae:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b8:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d121      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d11e      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039d4:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039e0:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e005      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039f0:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039fc:	4a2b      	ldr	r2, [pc, #172]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x10c>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d102      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a18:	4b25      	ldr	r3, [pc, #148]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	e004      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a24:	4b23      	ldr	r3, [pc, #140]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d134      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d003      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0xac>
 8003a44:	e005      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a46:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a48:	617b      	str	r3, [r7, #20]
      break;
 8003a4a:	e005      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a4e:	617b      	str	r3, [r7, #20]
      break;
 8003a50:	e002      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	617b      	str	r3, [r7, #20]
      break;
 8003a56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	3301      	adds	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	fb03 f202 	mul.w	r2, r3, r2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	0e5b      	lsrs	r3, r3, #25
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a98:	69bb      	ldr	r3, [r7, #24]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	080066a0 	.word	0x080066a0
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	007a1200 	.word	0x007a1200

08003ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b03      	ldr	r3, [pc, #12]	@ (8003acc <HAL_RCC_GetHCLKFreq+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000000 	.word	0x20000000

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ad4:	f7ff fff0 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4904      	ldr	r1, [pc, #16]	@ (8003af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08006698 	.word	0x08006698

08003afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b00:	f7ff ffda 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0adb      	lsrs	r3, r3, #11
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4904      	ldr	r1, [pc, #16]	@ (8003b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08006698 	.word	0x08006698

08003b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b34:	4b2a      	ldr	r3, [pc, #168]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b40:	f7ff f9ee 	bl	8002f20 <HAL_PWREx_GetVoltageRange>
 8003b44:	6178      	str	r0, [r7, #20]
 8003b46:	e014      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b48:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	4a24      	ldr	r2, [pc, #144]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b54:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b60:	f7ff f9de 	bl	8002f20 <HAL_PWREx_GetVoltageRange>
 8003b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b78:	d10b      	bne.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b80      	cmp	r3, #128	@ 0x80
 8003b7e:	d919      	bls.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b84:	d902      	bls.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b86:	2302      	movs	r3, #2
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e013      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e010      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b80      	cmp	r3, #128	@ 0x80
 8003b96:	d902      	bls.n	8003b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b98:	2303      	movs	r3, #3
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	e00a      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b80      	cmp	r3, #128	@ 0x80
 8003ba2:	d102      	bne.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e004      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b70      	cmp	r3, #112	@ 0x70
 8003bae:	d101      	bne.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 0207 	bic.w	r2, r3, #7
 8003bbc:	4909      	ldr	r1, [pc, #36]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bc4:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d041      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c0c:	d02a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c12:	d824      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c1e:	d81e      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c28:	d010      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c2a:	e018      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c2c:	4b86      	ldr	r3, [pc, #536]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a85      	ldr	r2, [pc, #532]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c38:	e015      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 facb 	bl	80041dc <RCCEx_PLLSAI1_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4a:	e00c      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3320      	adds	r3, #32
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fbb6 	bl	80043c4 <RCCEx_PLLSAI2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	74fb      	strb	r3, [r7, #19]
      break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6c:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c7a:	4973      	ldr	r1, [pc, #460]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d041      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ca2:	d824      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ca8:	d008      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003caa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cae:	d81e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cba:	e018      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cbc:	4b62      	ldr	r3, [pc, #392]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a61      	ldr	r2, [pc, #388]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fa83 	bl	80041dc <RCCEx_PLLSAI1_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cda:	e00c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fb6e 	bl	80043c4 <RCCEx_PLLSAI2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cfc:	4b52      	ldr	r3, [pc, #328]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d0a:	494f      	ldr	r1, [pc, #316]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a0 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b41      	ldr	r3, [pc, #260]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d44:	4a40      	ldr	r2, [pc, #256]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3a      	ldr	r2, [pc, #232]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d68:	f7fd f906 	bl	8000f78 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fd f902 	bl	8000f78 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	74fb      	strb	r3, [r7, #19]
        break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d84:	4b31      	ldr	r3, [pc, #196]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d15c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01f      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d019      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db4:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc0:	4b21      	ldr	r3, [pc, #132]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	4a20      	ldr	r2, [pc, #128]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de0:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd f8c1 	bl	8000f78 <HAL_GetTick>
 8003df6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df8:	e00b      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd f8bd 	bl	8000f78 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d902      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e10:	e006      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ec      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e36:	4904      	ldr	r1, [pc, #16]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e3e:	e009      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e54:	7c7b      	ldrb	r3, [r7, #17]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	4a9d      	ldr	r2, [pc, #628]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e72:	4b98      	ldr	r3, [pc, #608]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	4994      	ldr	r1, [pc, #592]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e94:	4b8f      	ldr	r3, [pc, #572]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f023 020c 	bic.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	498c      	ldr	r1, [pc, #560]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb6:	4b87      	ldr	r3, [pc, #540]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4983      	ldr	r1, [pc, #524]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	497b      	ldr	r1, [pc, #492]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efa:	4b76      	ldr	r3, [pc, #472]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f08:	4972      	ldr	r1, [pc, #456]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1c:	4b6d      	ldr	r3, [pc, #436]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2a:	496a      	ldr	r1, [pc, #424]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	4961      	ldr	r1, [pc, #388]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f60:	4b5c      	ldr	r3, [pc, #368]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6e:	4959      	ldr	r1, [pc, #356]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f82:	4b54      	ldr	r3, [pc, #336]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	4950      	ldr	r1, [pc, #320]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	4948      	ldr	r1, [pc, #288]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc6:	4b43      	ldr	r3, [pc, #268]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	493f      	ldr	r1, [pc, #252]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d028      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff6:	4937      	ldr	r1, [pc, #220]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004006:	d106      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b32      	ldr	r3, [pc, #200]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a31      	ldr	r2, [pc, #196]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
 8004014:	e011      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800401a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800401e:	d10c      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f8d8 	bl	80041dc <RCCEx_PLLSAI1_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d028      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004046:	4b23      	ldr	r3, [pc, #140]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	491f      	ldr	r1, [pc, #124]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004064:	d106      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a1a      	ldr	r2, [pc, #104]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004070:	60d3      	str	r3, [r2, #12]
 8004072:	e011      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f8a9 	bl	80041dc <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02b      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b2:	4908      	ldr	r1, [pc, #32]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c2:	d109      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a02      	ldr	r2, [pc, #8]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ce:	60d3      	str	r3, [r2, #12]
 80040d0:	e014      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f877 	bl	80041dc <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02f      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004108:	4b2b      	ldr	r3, [pc, #172]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004116:	4928      	ldr	r1, [pc, #160]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004126:	d10d      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f854 	bl	80041dc <RCCEx_PLLSAI1_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	74bb      	strb	r3, [r7, #18]
 8004142:	e011      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800414c:	d10c      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3320      	adds	r3, #32
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f935 	bl	80043c4 <RCCEx_PLLSAI2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004174:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004182:	490d      	ldr	r1, [pc, #52]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a6:	4904      	ldr	r1, [pc, #16]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000

080041bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a04      	ldr	r2, [pc, #16]	@ (80041d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	6013      	str	r3, [r2, #0]
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041ea:	4b75      	ldr	r3, [pc, #468]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041f6:	4b72      	ldr	r3, [pc, #456]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0203 	and.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d10d      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
       ||
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800420e:	4b6c      	ldr	r3, [pc, #432]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
       ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d047      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
 8004226:	e044      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d018      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x86>
 8004230:	2b03      	cmp	r3, #3
 8004232:	d825      	bhi.n	8004280 <RCCEx_PLLSAI1_Config+0xa4>
 8004234:	2b01      	cmp	r3, #1
 8004236:	d002      	beq.n	800423e <RCCEx_PLLSAI1_Config+0x62>
 8004238:	2b02      	cmp	r3, #2
 800423a:	d009      	beq.n	8004250 <RCCEx_PLLSAI1_Config+0x74>
 800423c:	e020      	b.n	8004280 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800423e:	4b60      	ldr	r3, [pc, #384]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11d      	bne.n	8004286 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424e:	e01a      	b.n	8004286 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004250:	4b5b      	ldr	r3, [pc, #364]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d116      	bne.n	800428a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004260:	e013      	b.n	800428a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004262:	4b57      	ldr	r3, [pc, #348]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800426e:	4b54      	ldr	r3, [pc, #336]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800427e:	e006      	b.n	800428e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e004      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004286:	bf00      	nop
 8004288:	e002      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800428e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10d      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004296:	4b4a      	ldr	r3, [pc, #296]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6819      	ldr	r1, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	430b      	orrs	r3, r1
 80042ac:	4944      	ldr	r1, [pc, #272]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d17d      	bne.n	80043b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042b8:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a40      	ldr	r2, [pc, #256]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fc fe58 	bl	8000f78 <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ca:	e009      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042cc:	f7fc fe54 	bl	8000f78 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d902      	bls.n	80042e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	73fb      	strb	r3, [r7, #15]
        break;
 80042de:	e005      	b.n	80042ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042e0:	4b37      	ldr	r3, [pc, #220]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ef      	bne.n	80042cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d160      	bne.n	80043b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d111      	bne.n	800431c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f8:	4b31      	ldr	r3, [pc, #196]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6892      	ldr	r2, [r2, #8]
 8004308:	0211      	lsls	r1, r2, #8
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68d2      	ldr	r2, [r2, #12]
 800430e:	0912      	lsrs	r2, r2, #4
 8004310:	0452      	lsls	r2, r2, #17
 8004312:	430a      	orrs	r2, r1
 8004314:	492a      	ldr	r1, [pc, #168]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	610b      	str	r3, [r1, #16]
 800431a:	e027      	b.n	800436c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d112      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004322:	4b27      	ldr	r3, [pc, #156]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800432a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	0211      	lsls	r1, r2, #8
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6912      	ldr	r2, [r2, #16]
 8004338:	0852      	lsrs	r2, r2, #1
 800433a:	3a01      	subs	r2, #1
 800433c:	0552      	lsls	r2, r2, #21
 800433e:	430a      	orrs	r2, r1
 8004340:	491f      	ldr	r1, [pc, #124]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	610b      	str	r3, [r1, #16]
 8004346:	e011      	b.n	800436c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004348:	4b1d      	ldr	r3, [pc, #116]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004350:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6892      	ldr	r2, [r2, #8]
 8004358:	0211      	lsls	r1, r2, #8
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6952      	ldr	r2, [r2, #20]
 800435e:	0852      	lsrs	r2, r2, #1
 8004360:	3a01      	subs	r2, #1
 8004362:	0652      	lsls	r2, r2, #25
 8004364:	430a      	orrs	r2, r1
 8004366:	4916      	ldr	r1, [pc, #88]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800436c:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a13      	ldr	r2, [pc, #76]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004372:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fc fdfe 	bl	8000f78 <HAL_GetTick>
 800437c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800437e:	e009      	b.n	8004394 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004380:	f7fc fdfa 	bl	8000f78 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d902      	bls.n	8004394 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	73fb      	strb	r3, [r7, #15]
          break;
 8004392:	e005      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ef      	beq.n	8004380 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	4904      	ldr	r1, [pc, #16]	@ (80043c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000

080043c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043d2:	4b6a      	ldr	r3, [pc, #424]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043de:	4b67      	ldr	r3, [pc, #412]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0203 	and.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d10d      	bne.n	800440a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
       ||
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043f6:	4b61      	ldr	r3, [pc, #388]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
       ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d047      	beq.n	800449a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e044      	b.n	800449a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d018      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x86>
 8004418:	2b03      	cmp	r3, #3
 800441a:	d825      	bhi.n	8004468 <RCCEx_PLLSAI2_Config+0xa4>
 800441c:	2b01      	cmp	r3, #1
 800441e:	d002      	beq.n	8004426 <RCCEx_PLLSAI2_Config+0x62>
 8004420:	2b02      	cmp	r3, #2
 8004422:	d009      	beq.n	8004438 <RCCEx_PLLSAI2_Config+0x74>
 8004424:	e020      	b.n	8004468 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004426:	4b55      	ldr	r3, [pc, #340]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11d      	bne.n	800446e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004436:	e01a      	b.n	800446e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004438:	4b50      	ldr	r3, [pc, #320]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d116      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004448:	e013      	b.n	8004472 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800444a:	4b4c      	ldr	r3, [pc, #304]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004456:	4b49      	ldr	r3, [pc, #292]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004466:	e006      	b.n	8004476 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e004      	b.n	8004478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800446e:	bf00      	nop
 8004470:	e002      	b.n	8004478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004476:	bf00      	nop
    }

    if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800447e:	4b3f      	ldr	r3, [pc, #252]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	430b      	orrs	r3, r1
 8004494:	4939      	ldr	r1, [pc, #228]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d167      	bne.n	8004570 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044a0:	4b36      	ldr	r3, [pc, #216]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a35      	ldr	r2, [pc, #212]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ac:	f7fc fd64 	bl	8000f78 <HAL_GetTick>
 80044b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044b2:	e009      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044b4:	f7fc fd60 	bl	8000f78 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	73fb      	strb	r3, [r7, #15]
        break;
 80044c6:	e005      	b.n	80044d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044c8:	4b2c      	ldr	r3, [pc, #176]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ef      	bne.n	80044b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d14a      	bne.n	8004570 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044e0:	4b26      	ldr	r3, [pc, #152]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80044e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	0211      	lsls	r1, r2, #8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	0912      	lsrs	r2, r2, #4
 80044f8:	0452      	lsls	r2, r2, #17
 80044fa:	430a      	orrs	r2, r1
 80044fc:	491f      	ldr	r1, [pc, #124]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	614b      	str	r3, [r1, #20]
 8004502:	e011      	b.n	8004528 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004504:	4b1d      	ldr	r3, [pc, #116]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800450c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6892      	ldr	r2, [r2, #8]
 8004514:	0211      	lsls	r1, r2, #8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6912      	ldr	r2, [r2, #16]
 800451a:	0852      	lsrs	r2, r2, #1
 800451c:	3a01      	subs	r2, #1
 800451e:	0652      	lsls	r2, r2, #25
 8004520:	430a      	orrs	r2, r1
 8004522:	4916      	ldr	r1, [pc, #88]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004528:	4b14      	ldr	r3, [pc, #80]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a13      	ldr	r2, [pc, #76]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fc fd20 	bl	8000f78 <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800453a:	e009      	b.n	8004550 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800453c:	f7fc fd1c 	bl	8000f78 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
          break;
 800454e:	e005      	b.n	800455c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004550:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ef      	beq.n	800453c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	4904      	ldr	r1, [pc, #16]	@ (800457c <RCCEx_PLLSAI2_Config+0x1b8>)
 800456c:	4313      	orrs	r3, r2
 800456e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e049      	b.n	8004626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc f958 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 f970 	bl	80048a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d001      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e04f      	b.n	80046e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a23      	ldr	r2, [pc, #140]	@ (80046f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004672:	d018      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1f      	ldr	r2, [pc, #124]	@ (80046f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1e      	ldr	r2, [pc, #120]	@ (80046fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <HAL_TIM_Base_Start_IT+0xd0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <HAL_TIM_Base_Start_IT+0xd4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x76>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a19      	ldr	r2, [pc, #100]	@ (8004708 <HAL_TIM_Base_Start_IT+0xd8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d115      	bne.n	80046d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4b17      	ldr	r3, [pc, #92]	@ (800470c <HAL_TIM_Base_Start_IT+0xdc>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d015      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046be:	d011      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	e008      	b.n	80046e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40000800 	.word	0x40000800
 8004700:	40000c00 	.word	0x40000c00
 8004704:	40013400 	.word	0x40013400
 8004708:	40014000 	.word	0x40014000
 800470c:	00010007 	.word	0x00010007

08004710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIM_ConfigClockSource+0x1c>
 8004728:	2302      	movs	r3, #2
 800472a:	e0b6      	b.n	800489a <HAL_TIM_ConfigClockSource+0x18a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800474e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004768:	d03e      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0xd8>
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800476e:	f200 8087 	bhi.w	8004880 <HAL_TIM_ConfigClockSource+0x170>
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004776:	f000 8086 	beq.w	8004886 <HAL_TIM_ConfigClockSource+0x176>
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477e:	d87f      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
 8004780:	2b70      	cmp	r3, #112	@ 0x70
 8004782:	d01a      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xaa>
 8004784:	2b70      	cmp	r3, #112	@ 0x70
 8004786:	d87b      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
 8004788:	2b60      	cmp	r3, #96	@ 0x60
 800478a:	d050      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x11e>
 800478c:	2b60      	cmp	r3, #96	@ 0x60
 800478e:	d877      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
 8004790:	2b50      	cmp	r3, #80	@ 0x50
 8004792:	d03c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xfe>
 8004794:	2b50      	cmp	r3, #80	@ 0x50
 8004796:	d873      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
 8004798:	2b40      	cmp	r3, #64	@ 0x40
 800479a:	d058      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x13e>
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d86f      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
 80047a0:	2b30      	cmp	r3, #48	@ 0x30
 80047a2:	d064      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15e>
 80047a4:	2b30      	cmp	r3, #48	@ 0x30
 80047a6:	d86b      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d060      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15e>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d867      	bhi.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d05c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15e>
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d05a      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x15e>
 80047b8:	e062      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ca:	f000 f98b 	bl	8004ae4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	609a      	str	r2, [r3, #8]
      break;
 80047e6:	e04f      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f8:	f000 f974 	bl	8004ae4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800480a:	609a      	str	r2, [r3, #8]
      break;
 800480c:	e03c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f8e8 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2150      	movs	r1, #80	@ 0x50
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f941 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 800482c:	e02c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f907 	bl	8004a4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2160      	movs	r1, #96	@ 0x60
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f931 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 800484c:	e01c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f8c8 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2140      	movs	r1, #64	@ 0x40
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f921 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 800486c:	e00c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f000 f918 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 800487e:	e003      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e000      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a46      	ldr	r2, [pc, #280]	@ (80049d0 <TIM_Base_SetConfig+0x12c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c2:	d00f      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a43      	ldr	r2, [pc, #268]	@ (80049d4 <TIM_Base_SetConfig+0x130>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00b      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a42      	ldr	r2, [pc, #264]	@ (80049d8 <TIM_Base_SetConfig+0x134>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d007      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a41      	ldr	r2, [pc, #260]	@ (80049dc <TIM_Base_SetConfig+0x138>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a40      	ldr	r2, [pc, #256]	@ (80049e0 <TIM_Base_SetConfig+0x13c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d108      	bne.n	80048f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a35      	ldr	r2, [pc, #212]	@ (80049d0 <TIM_Base_SetConfig+0x12c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a32      	ldr	r2, [pc, #200]	@ (80049d4 <TIM_Base_SetConfig+0x130>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a31      	ldr	r2, [pc, #196]	@ (80049d8 <TIM_Base_SetConfig+0x134>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a30      	ldr	r2, [pc, #192]	@ (80049dc <TIM_Base_SetConfig+0x138>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2f      	ldr	r2, [pc, #188]	@ (80049e0 <TIM_Base_SetConfig+0x13c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2e      	ldr	r2, [pc, #184]	@ (80049e4 <TIM_Base_SetConfig+0x140>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <TIM_Base_SetConfig+0x144>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <TIM_Base_SetConfig+0x148>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00f      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <TIM_Base_SetConfig+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a17      	ldr	r2, [pc, #92]	@ (80049e4 <TIM_Base_SetConfig+0x140>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <TIM_Base_SetConfig+0x144>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a15      	ldr	r2, [pc, #84]	@ (80049ec <TIM_Base_SetConfig+0x148>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d103      	bne.n	80049a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f023 0201 	bic.w	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	611a      	str	r2, [r3, #16]
  }
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40013400 	.word	0x40013400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 030a 	bic.w	r3, r3, #10
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b087      	sub	sp, #28
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f023 0210 	bic.w	r2, r3, #16
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f043 0307 	orr.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	609a      	str	r2, [r3, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e068      	b.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2e      	ldr	r2, [pc, #184]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d108      	bne.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01d      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bae:	d018      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a13      	ldr	r2, [pc, #76]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	@ (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10c      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40013400 	.word	0x40013400
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40014000 	.word	0x40014000

08004c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e040      	b.n	8004cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fb ff4a 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	@ 0x24
 8004c60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fb6a 	bl	8005354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f8af 	bl	8004de4 <UART_SetConfig>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e01b      	b.n	8004cc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fbe9 	bl	8005498 <UART_CheckIdleState>
 8004cc6:	4603      	mov	r3, r0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d177      	bne.n	8004dd8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_UART_Transmit+0x24>
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e070      	b.n	8004dda <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2221      	movs	r2, #33	@ 0x21
 8004d04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d06:	f7fc f937 	bl	8000f78 <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d24:	d108      	bne.n	8004d38 <HAL_UART_Transmit+0x68>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e003      	b.n	8004d40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d40:	e02f      	b.n	8004da2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fc4b 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e03b      	b.n	8004dda <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	881a      	ldrh	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d74:	b292      	uxth	r2, r2
 8004d76:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	e007      	b.n	8004d90 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	781a      	ldrb	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1c9      	bne.n	8004d42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2140      	movs	r1, #64	@ 0x40
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fc15 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e005      	b.n	8004dda <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b08a      	sub	sp, #40	@ 0x28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4ba4      	ldr	r3, [pc, #656]	@ (80050a4 <UART_SetConfig+0x2c0>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a99      	ldr	r2, [pc, #612]	@ (80050a8 <UART_SetConfig+0x2c4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e60:	430a      	orrs	r2, r1
 8004e62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a90      	ldr	r2, [pc, #576]	@ (80050ac <UART_SetConfig+0x2c8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d126      	bne.n	8004ebc <UART_SetConfig+0xd8>
 8004e6e:	4b90      	ldr	r3, [pc, #576]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d81b      	bhi.n	8004eb4 <UART_SetConfig+0xd0>
 8004e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e84 <UART_SetConfig+0xa0>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004ea5 	.word	0x08004ea5
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ead 	.word	0x08004ead
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e116      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e112      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eaa:	e10e      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb2:	e10a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eba:	e106      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7c      	ldr	r2, [pc, #496]	@ (80050b4 <UART_SetConfig+0x2d0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d138      	bne.n	8004f38 <UART_SetConfig+0x154>
 8004ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d82d      	bhi.n	8004f30 <UART_SetConfig+0x14c>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0xf8>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08004f31 	.word	0x08004f31
 8004ee8:	08004f31 	.word	0x08004f31
 8004eec:	08004f21 	.word	0x08004f21
 8004ef0:	08004f31 	.word	0x08004f31
 8004ef4:	08004f31 	.word	0x08004f31
 8004ef8:	08004f31 	.word	0x08004f31
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	08004f31 	.word	0x08004f31
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f29 	.word	0x08004f29
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e0d8      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e0d4      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e0d0      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e0cc      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e0c8      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80050b8 <UART_SetConfig+0x2d4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d125      	bne.n	8004f8e <UART_SetConfig+0x1aa>
 8004f42:	4b5b      	ldr	r3, [pc, #364]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f4c:	2b30      	cmp	r3, #48	@ 0x30
 8004f4e:	d016      	beq.n	8004f7e <UART_SetConfig+0x19a>
 8004f50:	2b30      	cmp	r3, #48	@ 0x30
 8004f52:	d818      	bhi.n	8004f86 <UART_SetConfig+0x1a2>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d00a      	beq.n	8004f6e <UART_SetConfig+0x18a>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d814      	bhi.n	8004f86 <UART_SetConfig+0x1a2>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <UART_SetConfig+0x182>
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d008      	beq.n	8004f76 <UART_SetConfig+0x192>
 8004f64:	e00f      	b.n	8004f86 <UART_SetConfig+0x1a2>
 8004f66:	2300      	movs	r3, #0
 8004f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6c:	e0ad      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f74:	e0a9      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f76:	2304      	movs	r3, #4
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7c:	e0a5      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f7e:	2308      	movs	r3, #8
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f84:	e0a1      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f86:	2310      	movs	r3, #16
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8c:	e09d      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4a      	ldr	r2, [pc, #296]	@ (80050bc <UART_SetConfig+0x2d8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d125      	bne.n	8004fe4 <UART_SetConfig+0x200>
 8004f98:	4b45      	ldr	r3, [pc, #276]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa4:	d016      	beq.n	8004fd4 <UART_SetConfig+0x1f0>
 8004fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa8:	d818      	bhi.n	8004fdc <UART_SetConfig+0x1f8>
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d00a      	beq.n	8004fc4 <UART_SetConfig+0x1e0>
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d814      	bhi.n	8004fdc <UART_SetConfig+0x1f8>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <UART_SetConfig+0x1d8>
 8004fb6:	2b40      	cmp	r3, #64	@ 0x40
 8004fb8:	d008      	beq.n	8004fcc <UART_SetConfig+0x1e8>
 8004fba:	e00f      	b.n	8004fdc <UART_SetConfig+0x1f8>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e082      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e07e      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e07a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e076      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e072      	b.n	80050ca <UART_SetConfig+0x2e6>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a35      	ldr	r2, [pc, #212]	@ (80050c0 <UART_SetConfig+0x2dc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d12a      	bne.n	8005044 <UART_SetConfig+0x260>
 8004fee:	4b30      	ldr	r3, [pc, #192]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ffc:	d01a      	beq.n	8005034 <UART_SetConfig+0x250>
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005002:	d81b      	bhi.n	800503c <UART_SetConfig+0x258>
 8005004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005008:	d00c      	beq.n	8005024 <UART_SetConfig+0x240>
 800500a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800500e:	d815      	bhi.n	800503c <UART_SetConfig+0x258>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <UART_SetConfig+0x238>
 8005014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005018:	d008      	beq.n	800502c <UART_SetConfig+0x248>
 800501a:	e00f      	b.n	800503c <UART_SetConfig+0x258>
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e052      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e04e      	b.n	80050ca <UART_SetConfig+0x2e6>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e04a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e046      	b.n	80050ca <UART_SetConfig+0x2e6>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e042      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a17      	ldr	r2, [pc, #92]	@ (80050a8 <UART_SetConfig+0x2c4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d13a      	bne.n	80050c4 <UART_SetConfig+0x2e0>
 800504e:	4b18      	ldr	r3, [pc, #96]	@ (80050b0 <UART_SetConfig+0x2cc>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800505c:	d01a      	beq.n	8005094 <UART_SetConfig+0x2b0>
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005062:	d81b      	bhi.n	800509c <UART_SetConfig+0x2b8>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005068:	d00c      	beq.n	8005084 <UART_SetConfig+0x2a0>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506e:	d815      	bhi.n	800509c <UART_SetConfig+0x2b8>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x298>
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005078:	d008      	beq.n	800508c <UART_SetConfig+0x2a8>
 800507a:	e00f      	b.n	800509c <UART_SetConfig+0x2b8>
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e022      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e01e      	b.n	80050ca <UART_SetConfig+0x2e6>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e01a      	b.n	80050ca <UART_SetConfig+0x2e6>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e016      	b.n	80050ca <UART_SetConfig+0x2e6>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a2:	e012      	b.n	80050ca <UART_SetConfig+0x2e6>
 80050a4:	efff69f3 	.word	0xefff69f3
 80050a8:	40008000 	.word	0x40008000
 80050ac:	40013800 	.word	0x40013800
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40004400 	.word	0x40004400
 80050b8:	40004800 	.word	0x40004800
 80050bc:	40004c00 	.word	0x40004c00
 80050c0:	40005000 	.word	0x40005000
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a9f      	ldr	r2, [pc, #636]	@ (800534c <UART_SetConfig+0x568>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d17a      	bne.n	80051ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d824      	bhi.n	8005126 <UART_SetConfig+0x342>
 80050dc:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <UART_SetConfig+0x300>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005117 	.word	0x08005117
 80050f8:	08005127 	.word	0x08005127
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005127 	.word	0x08005127
 8005104:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe fce2 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 800510c:	61f8      	str	r0, [r7, #28]
        break;
 800510e:	e010      	b.n	8005132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b8f      	ldr	r3, [pc, #572]	@ (8005350 <UART_SetConfig+0x56c>)
 8005112:	61fb      	str	r3, [r7, #28]
        break;
 8005114:	e00d      	b.n	8005132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fe fc43 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800511a:	61f8      	str	r0, [r7, #28]
        break;
 800511c:	e009      	b.n	8005132 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005122:	61fb      	str	r3, [r7, #28]
        break;
 8005124:	e005      	b.n	8005132 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80fb 	beq.w	8005330 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	d305      	bcc.n	8005156 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	429a      	cmp	r2, r3
 8005154:	d903      	bls.n	800515e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800515c:	e0e8      	b.n	8005330 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2200      	movs	r2, #0
 8005162:	461c      	mov	r4, r3
 8005164:	4615      	mov	r5, r2
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	022b      	lsls	r3, r5, #8
 8005170:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005174:	0222      	lsls	r2, r4, #8
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	6849      	ldr	r1, [r1, #4]
 800517a:	0849      	lsrs	r1, r1, #1
 800517c:	2000      	movs	r0, #0
 800517e:	4688      	mov	r8, r1
 8005180:	4681      	mov	r9, r0
 8005182:	eb12 0a08 	adds.w	sl, r2, r8
 8005186:	eb43 0b09 	adc.w	fp, r3, r9
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005198:	4650      	mov	r0, sl
 800519a:	4659      	mov	r1, fp
 800519c:	f7fb f868 	bl	8000270 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4613      	mov	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ae:	d308      	bcc.n	80051c2 <UART_SetConfig+0x3de>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b6:	d204      	bcs.n	80051c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	60da      	str	r2, [r3, #12]
 80051c0:	e0b6      	b.n	8005330 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051c8:	e0b2      	b.n	8005330 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d2:	d15e      	bne.n	8005292 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d828      	bhi.n	800522e <UART_SetConfig+0x44a>
 80051dc:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <UART_SetConfig+0x400>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800522f 	.word	0x0800522f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fe fc62 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e014      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fe fc74 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b4d      	ldr	r3, [pc, #308]	@ (8005350 <UART_SetConfig+0x56c>)
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fe fbbf 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8005222:	61f8      	str	r0, [r7, #28]
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d077      	beq.n	8005330 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	005a      	lsls	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	441a      	add	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d916      	bls.n	800528a <UART_SetConfig+0x4a6>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005262:	d212      	bcs.n	800528a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f023 030f 	bic.w	r3, r3, #15
 800526c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	b29a      	uxth	r2, r3
 800527a:	8afb      	ldrh	r3, [r7, #22]
 800527c:	4313      	orrs	r3, r2
 800527e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	8afa      	ldrh	r2, [r7, #22]
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e052      	b.n	8005330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005290:	e04e      	b.n	8005330 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005292:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005296:	2b08      	cmp	r3, #8
 8005298:	d827      	bhi.n	80052ea <UART_SetConfig+0x506>
 800529a:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <UART_SetConfig+0x4bc>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	080052eb 	.word	0x080052eb
 80052b0:	080052db 	.word	0x080052db
 80052b4:	080052eb 	.word	0x080052eb
 80052b8:	080052eb 	.word	0x080052eb
 80052bc:	080052eb 	.word	0x080052eb
 80052c0:	080052e3 	.word	0x080052e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7fe fc04 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 80052c8:	61f8      	str	r0, [r7, #28]
        break;
 80052ca:	e014      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7fe fc16 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 80052d0:	61f8      	str	r0, [r7, #28]
        break;
 80052d2:	e010      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005350 <UART_SetConfig+0x56c>)
 80052d6:	61fb      	str	r3, [r7, #28]
        break;
 80052d8:	e00d      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052da:	f7fe fb61 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 80052de:	61f8      	str	r0, [r7, #28]
        break;
 80052e0:	e009      	b.n	80052f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e6:	61fb      	str	r3, [r7, #28]
        break;
 80052e8:	e005      	b.n	80052f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052f4:	bf00      	nop
    }

    if (pclk != 0U)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d019      	beq.n	8005330 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	085a      	lsrs	r2, r3, #1
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	fbb2 f3f3 	udiv	r3, r2, r3
 800530e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	d909      	bls.n	800532a <UART_SetConfig+0x546>
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531c:	d205      	bcs.n	800532a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	e002      	b.n	8005330 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800533c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005340:	4618      	mov	r0, r3
 8005342:	3728      	adds	r7, #40	@ 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534a:	bf00      	nop
 800534c:	40008000 	.word	0x40008000
 8005350:	00f42400 	.word	0x00f42400

08005354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005452:	d10a      	bne.n	800546a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b098      	sub	sp, #96	@ 0x60
 800549c:	af02      	add	r7, sp, #8
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a8:	f7fb fd66 	bl	8000f78 <HAL_GetTick>
 80054ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d12e      	bne.n	800551a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f88c 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d021      	beq.n	800551a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e6      	bne.n	80054d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e062      	b.n	80055e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b04      	cmp	r3, #4
 8005526:	d149      	bne.n	80055bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005530:	2200      	movs	r2, #0
 8005532:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f856 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d03c      	beq.n	80055bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	623b      	str	r3, [r7, #32]
   return(result);
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005560:	633b      	str	r3, [r7, #48]	@ 0x30
 8005562:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	60fb      	str	r3, [r7, #12]
   return(result);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005594:	61fa      	str	r2, [r7, #28]
 8005596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	617b      	str	r3, [r7, #20]
   return(result);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e011      	b.n	80055e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3758      	adds	r7, #88	@ 0x58
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f8:	e04f      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d04b      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fb fcb9 	bl	8000f78 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <UART_WaitOnFlagUntilTimeout+0x30>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e04e      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d037      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b80      	cmp	r3, #128	@ 0x80
 800562e:	d034      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d031      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d110      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2208      	movs	r2, #8
 800564a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f838 	bl	80056c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2208      	movs	r2, #8
 8005656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e029      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005674:	d111      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800567e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f81e 	bl	80056c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e00f      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d0a0      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b095      	sub	sp, #84	@ 0x54
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	61fb      	str	r3, [r7, #28]
   return(result);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800571c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005734:	2b01      	cmp	r3, #1
 8005736:	d118      	bne.n	800576a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	60bb      	str	r3, [r7, #8]
   return(result);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0310 	bic.w	r3, r3, #16
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6979      	ldr	r1, [r7, #20]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	613b      	str	r3, [r7, #16]
   return(result);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800577e:	bf00      	nop
 8005780:	3754      	adds	r7, #84	@ 0x54
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <std>:
 800578c:	2300      	movs	r3, #0
 800578e:	b510      	push	{r4, lr}
 8005790:	4604      	mov	r4, r0
 8005792:	e9c0 3300 	strd	r3, r3, [r0]
 8005796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800579a:	6083      	str	r3, [r0, #8]
 800579c:	8181      	strh	r1, [r0, #12]
 800579e:	6643      	str	r3, [r0, #100]	@ 0x64
 80057a0:	81c2      	strh	r2, [r0, #14]
 80057a2:	6183      	str	r3, [r0, #24]
 80057a4:	4619      	mov	r1, r3
 80057a6:	2208      	movs	r2, #8
 80057a8:	305c      	adds	r0, #92	@ 0x5c
 80057aa:	f000 f90e 	bl	80059ca <memset>
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <std+0x58>)
 80057b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <std+0x5c>)
 80057b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <std+0x60>)
 80057b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <std+0x64>)
 80057bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <std+0x68>)
 80057c0:	6224      	str	r4, [r4, #32]
 80057c2:	429c      	cmp	r4, r3
 80057c4:	d006      	beq.n	80057d4 <std+0x48>
 80057c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057ca:	4294      	cmp	r4, r2
 80057cc:	d002      	beq.n	80057d4 <std+0x48>
 80057ce:	33d0      	adds	r3, #208	@ 0xd0
 80057d0:	429c      	cmp	r4, r3
 80057d2:	d105      	bne.n	80057e0 <std+0x54>
 80057d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057dc:	f000 b96e 	b.w	8005abc <__retarget_lock_init_recursive>
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	bf00      	nop
 80057e4:	08005945 	.word	0x08005945
 80057e8:	08005967 	.word	0x08005967
 80057ec:	0800599f 	.word	0x0800599f
 80057f0:	080059c3 	.word	0x080059c3
 80057f4:	2000040c 	.word	0x2000040c

080057f8 <stdio_exit_handler>:
 80057f8:	4a02      	ldr	r2, [pc, #8]	@ (8005804 <stdio_exit_handler+0xc>)
 80057fa:	4903      	ldr	r1, [pc, #12]	@ (8005808 <stdio_exit_handler+0x10>)
 80057fc:	4803      	ldr	r0, [pc, #12]	@ (800580c <stdio_exit_handler+0x14>)
 80057fe:	f000 b869 	b.w	80058d4 <_fwalk_sglue>
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c
 8005808:	0800635d 	.word	0x0800635d
 800580c:	2000001c 	.word	0x2000001c

08005810 <cleanup_stdio>:
 8005810:	6841      	ldr	r1, [r0, #4]
 8005812:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <cleanup_stdio+0x34>)
 8005814:	4299      	cmp	r1, r3
 8005816:	b510      	push	{r4, lr}
 8005818:	4604      	mov	r4, r0
 800581a:	d001      	beq.n	8005820 <cleanup_stdio+0x10>
 800581c:	f000 fd9e 	bl	800635c <_fflush_r>
 8005820:	68a1      	ldr	r1, [r4, #8]
 8005822:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <cleanup_stdio+0x38>)
 8005824:	4299      	cmp	r1, r3
 8005826:	d002      	beq.n	800582e <cleanup_stdio+0x1e>
 8005828:	4620      	mov	r0, r4
 800582a:	f000 fd97 	bl	800635c <_fflush_r>
 800582e:	68e1      	ldr	r1, [r4, #12]
 8005830:	4b06      	ldr	r3, [pc, #24]	@ (800584c <cleanup_stdio+0x3c>)
 8005832:	4299      	cmp	r1, r3
 8005834:	d004      	beq.n	8005840 <cleanup_stdio+0x30>
 8005836:	4620      	mov	r0, r4
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	f000 bd8e 	b.w	800635c <_fflush_r>
 8005840:	bd10      	pop	{r4, pc}
 8005842:	bf00      	nop
 8005844:	2000040c 	.word	0x2000040c
 8005848:	20000474 	.word	0x20000474
 800584c:	200004dc 	.word	0x200004dc

08005850 <global_stdio_init.part.0>:
 8005850:	b510      	push	{r4, lr}
 8005852:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <global_stdio_init.part.0+0x30>)
 8005854:	4c0b      	ldr	r4, [pc, #44]	@ (8005884 <global_stdio_init.part.0+0x34>)
 8005856:	4a0c      	ldr	r2, [pc, #48]	@ (8005888 <global_stdio_init.part.0+0x38>)
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	4620      	mov	r0, r4
 800585c:	2200      	movs	r2, #0
 800585e:	2104      	movs	r1, #4
 8005860:	f7ff ff94 	bl	800578c <std>
 8005864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005868:	2201      	movs	r2, #1
 800586a:	2109      	movs	r1, #9
 800586c:	f7ff ff8e 	bl	800578c <std>
 8005870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005874:	2202      	movs	r2, #2
 8005876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800587a:	2112      	movs	r1, #18
 800587c:	f7ff bf86 	b.w	800578c <std>
 8005880:	20000544 	.word	0x20000544
 8005884:	2000040c 	.word	0x2000040c
 8005888:	080057f9 	.word	0x080057f9

0800588c <__sfp_lock_acquire>:
 800588c:	4801      	ldr	r0, [pc, #4]	@ (8005894 <__sfp_lock_acquire+0x8>)
 800588e:	f000 b916 	b.w	8005abe <__retarget_lock_acquire_recursive>
 8005892:	bf00      	nop
 8005894:	2000054d 	.word	0x2000054d

08005898 <__sfp_lock_release>:
 8005898:	4801      	ldr	r0, [pc, #4]	@ (80058a0 <__sfp_lock_release+0x8>)
 800589a:	f000 b911 	b.w	8005ac0 <__retarget_lock_release_recursive>
 800589e:	bf00      	nop
 80058a0:	2000054d 	.word	0x2000054d

080058a4 <__sinit>:
 80058a4:	b510      	push	{r4, lr}
 80058a6:	4604      	mov	r4, r0
 80058a8:	f7ff fff0 	bl	800588c <__sfp_lock_acquire>
 80058ac:	6a23      	ldr	r3, [r4, #32]
 80058ae:	b11b      	cbz	r3, 80058b8 <__sinit+0x14>
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b4:	f7ff bff0 	b.w	8005898 <__sfp_lock_release>
 80058b8:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <__sinit+0x28>)
 80058ba:	6223      	str	r3, [r4, #32]
 80058bc:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <__sinit+0x2c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f5      	bne.n	80058b0 <__sinit+0xc>
 80058c4:	f7ff ffc4 	bl	8005850 <global_stdio_init.part.0>
 80058c8:	e7f2      	b.n	80058b0 <__sinit+0xc>
 80058ca:	bf00      	nop
 80058cc:	08005811 	.word	0x08005811
 80058d0:	20000544 	.word	0x20000544

080058d4 <_fwalk_sglue>:
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	4607      	mov	r7, r0
 80058da:	4688      	mov	r8, r1
 80058dc:	4614      	mov	r4, r2
 80058de:	2600      	movs	r6, #0
 80058e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058e4:	f1b9 0901 	subs.w	r9, r9, #1
 80058e8:	d505      	bpl.n	80058f6 <_fwalk_sglue+0x22>
 80058ea:	6824      	ldr	r4, [r4, #0]
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	d1f7      	bne.n	80058e0 <_fwalk_sglue+0xc>
 80058f0:	4630      	mov	r0, r6
 80058f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d907      	bls.n	800590c <_fwalk_sglue+0x38>
 80058fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005900:	3301      	adds	r3, #1
 8005902:	d003      	beq.n	800590c <_fwalk_sglue+0x38>
 8005904:	4629      	mov	r1, r5
 8005906:	4638      	mov	r0, r7
 8005908:	47c0      	blx	r8
 800590a:	4306      	orrs	r6, r0
 800590c:	3568      	adds	r5, #104	@ 0x68
 800590e:	e7e9      	b.n	80058e4 <_fwalk_sglue+0x10>

08005910 <iprintf>:
 8005910:	b40f      	push	{r0, r1, r2, r3}
 8005912:	b507      	push	{r0, r1, r2, lr}
 8005914:	4906      	ldr	r1, [pc, #24]	@ (8005930 <iprintf+0x20>)
 8005916:	ab04      	add	r3, sp, #16
 8005918:	6808      	ldr	r0, [r1, #0]
 800591a:	f853 2b04 	ldr.w	r2, [r3], #4
 800591e:	6881      	ldr	r1, [r0, #8]
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	f000 f9f1 	bl	8005d08 <_vfiprintf_r>
 8005926:	b003      	add	sp, #12
 8005928:	f85d eb04 	ldr.w	lr, [sp], #4
 800592c:	b004      	add	sp, #16
 800592e:	4770      	bx	lr
 8005930:	20000018 	.word	0x20000018

08005934 <putchar>:
 8005934:	4b02      	ldr	r3, [pc, #8]	@ (8005940 <putchar+0xc>)
 8005936:	4601      	mov	r1, r0
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	6882      	ldr	r2, [r0, #8]
 800593c:	f000 bd36 	b.w	80063ac <_putc_r>
 8005940:	20000018 	.word	0x20000018

08005944 <__sread>:
 8005944:	b510      	push	{r4, lr}
 8005946:	460c      	mov	r4, r1
 8005948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594c:	f000 f868 	bl	8005a20 <_read_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	bfab      	itete	ge
 8005954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005956:	89a3      	ldrhlt	r3, [r4, #12]
 8005958:	181b      	addge	r3, r3, r0
 800595a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800595e:	bfac      	ite	ge
 8005960:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005962:	81a3      	strhlt	r3, [r4, #12]
 8005964:	bd10      	pop	{r4, pc}

08005966 <__swrite>:
 8005966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596a:	461f      	mov	r7, r3
 800596c:	898b      	ldrh	r3, [r1, #12]
 800596e:	05db      	lsls	r3, r3, #23
 8005970:	4605      	mov	r5, r0
 8005972:	460c      	mov	r4, r1
 8005974:	4616      	mov	r6, r2
 8005976:	d505      	bpl.n	8005984 <__swrite+0x1e>
 8005978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597c:	2302      	movs	r3, #2
 800597e:	2200      	movs	r2, #0
 8005980:	f000 f83c 	bl	80059fc <_lseek_r>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800598a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	4632      	mov	r2, r6
 8005992:	463b      	mov	r3, r7
 8005994:	4628      	mov	r0, r5
 8005996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599a:	f000 b853 	b.w	8005a44 <_write_r>

0800599e <__sseek>:
 800599e:	b510      	push	{r4, lr}
 80059a0:	460c      	mov	r4, r1
 80059a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a6:	f000 f829 	bl	80059fc <_lseek_r>
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	bf15      	itete	ne
 80059b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059ba:	81a3      	strheq	r3, [r4, #12]
 80059bc:	bf18      	it	ne
 80059be:	81a3      	strhne	r3, [r4, #12]
 80059c0:	bd10      	pop	{r4, pc}

080059c2 <__sclose>:
 80059c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c6:	f000 b809 	b.w	80059dc <_close_r>

080059ca <memset>:
 80059ca:	4402      	add	r2, r0
 80059cc:	4603      	mov	r3, r0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d100      	bne.n	80059d4 <memset+0xa>
 80059d2:	4770      	bx	lr
 80059d4:	f803 1b01 	strb.w	r1, [r3], #1
 80059d8:	e7f9      	b.n	80059ce <memset+0x4>
	...

080059dc <_close_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d06      	ldr	r5, [pc, #24]	@ (80059f8 <_close_r+0x1c>)
 80059e0:	2300      	movs	r3, #0
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	f7fb f9b7 	bl	8000d5a <_close>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_close_r+0x1a>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_close_r+0x1a>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20000548 	.word	0x20000548

080059fc <_lseek_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d07      	ldr	r5, [pc, #28]	@ (8005a1c <_lseek_r+0x20>)
 8005a00:	4604      	mov	r4, r0
 8005a02:	4608      	mov	r0, r1
 8005a04:	4611      	mov	r1, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	602a      	str	r2, [r5, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f7fb f9cc 	bl	8000da8 <_lseek>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_lseek_r+0x1e>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_lseek_r+0x1e>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	20000548 	.word	0x20000548

08005a20 <_read_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d07      	ldr	r5, [pc, #28]	@ (8005a40 <_read_r+0x20>)
 8005a24:	4604      	mov	r4, r0
 8005a26:	4608      	mov	r0, r1
 8005a28:	4611      	mov	r1, r2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb f95a 	bl	8000ce8 <_read>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_read_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_read_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20000548 	.word	0x20000548

08005a44 <_write_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d07      	ldr	r5, [pc, #28]	@ (8005a64 <_write_r+0x20>)
 8005a48:	4604      	mov	r4, r0
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	602a      	str	r2, [r5, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f7fb f965 	bl	8000d22 <_write>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_write_r+0x1e>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_write_r+0x1e>
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	20000548 	.word	0x20000548

08005a68 <__errno>:
 8005a68:	4b01      	ldr	r3, [pc, #4]	@ (8005a70 <__errno+0x8>)
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000018 	.word	0x20000018

08005a74 <__libc_init_array>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4d0d      	ldr	r5, [pc, #52]	@ (8005aac <__libc_init_array+0x38>)
 8005a78:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab0 <__libc_init_array+0x3c>)
 8005a7a:	1b64      	subs	r4, r4, r5
 8005a7c:	10a4      	asrs	r4, r4, #2
 8005a7e:	2600      	movs	r6, #0
 8005a80:	42a6      	cmp	r6, r4
 8005a82:	d109      	bne.n	8005a98 <__libc_init_array+0x24>
 8005a84:	4d0b      	ldr	r5, [pc, #44]	@ (8005ab4 <__libc_init_array+0x40>)
 8005a86:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab8 <__libc_init_array+0x44>)
 8005a88:	f000 fdec 	bl	8006664 <_init>
 8005a8c:	1b64      	subs	r4, r4, r5
 8005a8e:	10a4      	asrs	r4, r4, #2
 8005a90:	2600      	movs	r6, #0
 8005a92:	42a6      	cmp	r6, r4
 8005a94:	d105      	bne.n	8005aa2 <__libc_init_array+0x2e>
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9c:	4798      	blx	r3
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	e7ee      	b.n	8005a80 <__libc_init_array+0xc>
 8005aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa6:	4798      	blx	r3
 8005aa8:	3601      	adds	r6, #1
 8005aaa:	e7f2      	b.n	8005a92 <__libc_init_array+0x1e>
 8005aac:	0800670c 	.word	0x0800670c
 8005ab0:	0800670c 	.word	0x0800670c
 8005ab4:	0800670c 	.word	0x0800670c
 8005ab8:	08006710 	.word	0x08006710

08005abc <__retarget_lock_init_recursive>:
 8005abc:	4770      	bx	lr

08005abe <__retarget_lock_acquire_recursive>:
 8005abe:	4770      	bx	lr

08005ac0 <__retarget_lock_release_recursive>:
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_free_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	d041      	beq.n	8005b50 <_free_r+0x8c>
 8005acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad0:	1f0c      	subs	r4, r1, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bfb8      	it	lt
 8005ad6:	18e4      	addlt	r4, r4, r3
 8005ad8:	f000 f8e0 	bl	8005c9c <__malloc_lock>
 8005adc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b54 <_free_r+0x90>)
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	b933      	cbnz	r3, 8005af0 <_free_r+0x2c>
 8005ae2:	6063      	str	r3, [r4, #4]
 8005ae4:	6014      	str	r4, [r2, #0]
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aec:	f000 b8dc 	b.w	8005ca8 <__malloc_unlock>
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	d908      	bls.n	8005b06 <_free_r+0x42>
 8005af4:	6820      	ldr	r0, [r4, #0]
 8005af6:	1821      	adds	r1, r4, r0
 8005af8:	428b      	cmp	r3, r1
 8005afa:	bf01      	itttt	eq
 8005afc:	6819      	ldreq	r1, [r3, #0]
 8005afe:	685b      	ldreq	r3, [r3, #4]
 8005b00:	1809      	addeq	r1, r1, r0
 8005b02:	6021      	streq	r1, [r4, #0]
 8005b04:	e7ed      	b.n	8005ae2 <_free_r+0x1e>
 8005b06:	461a      	mov	r2, r3
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	b10b      	cbz	r3, 8005b10 <_free_r+0x4c>
 8005b0c:	42a3      	cmp	r3, r4
 8005b0e:	d9fa      	bls.n	8005b06 <_free_r+0x42>
 8005b10:	6811      	ldr	r1, [r2, #0]
 8005b12:	1850      	adds	r0, r2, r1
 8005b14:	42a0      	cmp	r0, r4
 8005b16:	d10b      	bne.n	8005b30 <_free_r+0x6c>
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	4401      	add	r1, r0
 8005b1c:	1850      	adds	r0, r2, r1
 8005b1e:	4283      	cmp	r3, r0
 8005b20:	6011      	str	r1, [r2, #0]
 8005b22:	d1e0      	bne.n	8005ae6 <_free_r+0x22>
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	6053      	str	r3, [r2, #4]
 8005b2a:	4408      	add	r0, r1
 8005b2c:	6010      	str	r0, [r2, #0]
 8005b2e:	e7da      	b.n	8005ae6 <_free_r+0x22>
 8005b30:	d902      	bls.n	8005b38 <_free_r+0x74>
 8005b32:	230c      	movs	r3, #12
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	e7d6      	b.n	8005ae6 <_free_r+0x22>
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	1821      	adds	r1, r4, r0
 8005b3c:	428b      	cmp	r3, r1
 8005b3e:	bf04      	itt	eq
 8005b40:	6819      	ldreq	r1, [r3, #0]
 8005b42:	685b      	ldreq	r3, [r3, #4]
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	bf04      	itt	eq
 8005b48:	1809      	addeq	r1, r1, r0
 8005b4a:	6021      	streq	r1, [r4, #0]
 8005b4c:	6054      	str	r4, [r2, #4]
 8005b4e:	e7ca      	b.n	8005ae6 <_free_r+0x22>
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
 8005b52:	bf00      	nop
 8005b54:	20000554 	.word	0x20000554

08005b58 <sbrk_aligned>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b98 <sbrk_aligned+0x40>)
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	6831      	ldr	r1, [r6, #0]
 8005b60:	4605      	mov	r5, r0
 8005b62:	b911      	cbnz	r1, 8005b6a <sbrk_aligned+0x12>
 8005b64:	f000 fcea 	bl	800653c <_sbrk_r>
 8005b68:	6030      	str	r0, [r6, #0]
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 fce5 	bl	800653c <_sbrk_r>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	d103      	bne.n	8005b7e <sbrk_aligned+0x26>
 8005b76:	f04f 34ff 	mov.w	r4, #4294967295
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	1cc4      	adds	r4, r0, #3
 8005b80:	f024 0403 	bic.w	r4, r4, #3
 8005b84:	42a0      	cmp	r0, r4
 8005b86:	d0f8      	beq.n	8005b7a <sbrk_aligned+0x22>
 8005b88:	1a21      	subs	r1, r4, r0
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f000 fcd6 	bl	800653c <_sbrk_r>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d1f2      	bne.n	8005b7a <sbrk_aligned+0x22>
 8005b94:	e7ef      	b.n	8005b76 <sbrk_aligned+0x1e>
 8005b96:	bf00      	nop
 8005b98:	20000550 	.word	0x20000550

08005b9c <_malloc_r>:
 8005b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	1ccd      	adds	r5, r1, #3
 8005ba2:	f025 0503 	bic.w	r5, r5, #3
 8005ba6:	3508      	adds	r5, #8
 8005ba8:	2d0c      	cmp	r5, #12
 8005baa:	bf38      	it	cc
 8005bac:	250c      	movcc	r5, #12
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	db01      	blt.n	8005bb8 <_malloc_r+0x1c>
 8005bb4:	42a9      	cmp	r1, r5
 8005bb6:	d904      	bls.n	8005bc2 <_malloc_r+0x26>
 8005bb8:	230c      	movs	r3, #12
 8005bba:	6033      	str	r3, [r6, #0]
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c98 <_malloc_r+0xfc>
 8005bc6:	f000 f869 	bl	8005c9c <__malloc_lock>
 8005bca:	f8d8 3000 	ldr.w	r3, [r8]
 8005bce:	461c      	mov	r4, r3
 8005bd0:	bb44      	cbnz	r4, 8005c24 <_malloc_r+0x88>
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff ffbf 	bl	8005b58 <sbrk_aligned>
 8005bda:	1c43      	adds	r3, r0, #1
 8005bdc:	4604      	mov	r4, r0
 8005bde:	d158      	bne.n	8005c92 <_malloc_r+0xf6>
 8005be0:	f8d8 4000 	ldr.w	r4, [r8]
 8005be4:	4627      	mov	r7, r4
 8005be6:	2f00      	cmp	r7, #0
 8005be8:	d143      	bne.n	8005c72 <_malloc_r+0xd6>
 8005bea:	2c00      	cmp	r4, #0
 8005bec:	d04b      	beq.n	8005c86 <_malloc_r+0xea>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	eb04 0903 	add.w	r9, r4, r3
 8005bf8:	f000 fca0 	bl	800653c <_sbrk_r>
 8005bfc:	4581      	cmp	r9, r0
 8005bfe:	d142      	bne.n	8005c86 <_malloc_r+0xea>
 8005c00:	6821      	ldr	r1, [r4, #0]
 8005c02:	1a6d      	subs	r5, r5, r1
 8005c04:	4629      	mov	r1, r5
 8005c06:	4630      	mov	r0, r6
 8005c08:	f7ff ffa6 	bl	8005b58 <sbrk_aligned>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d03a      	beq.n	8005c86 <_malloc_r+0xea>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	442b      	add	r3, r5
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	bb62      	cbnz	r2, 8005c78 <_malloc_r+0xdc>
 8005c1e:	f8c8 7000 	str.w	r7, [r8]
 8005c22:	e00f      	b.n	8005c44 <_malloc_r+0xa8>
 8005c24:	6822      	ldr	r2, [r4, #0]
 8005c26:	1b52      	subs	r2, r2, r5
 8005c28:	d420      	bmi.n	8005c6c <_malloc_r+0xd0>
 8005c2a:	2a0b      	cmp	r2, #11
 8005c2c:	d917      	bls.n	8005c5e <_malloc_r+0xc2>
 8005c2e:	1961      	adds	r1, r4, r5
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	6025      	str	r5, [r4, #0]
 8005c34:	bf18      	it	ne
 8005c36:	6059      	strne	r1, [r3, #4]
 8005c38:	6863      	ldr	r3, [r4, #4]
 8005c3a:	bf08      	it	eq
 8005c3c:	f8c8 1000 	streq.w	r1, [r8]
 8005c40:	5162      	str	r2, [r4, r5]
 8005c42:	604b      	str	r3, [r1, #4]
 8005c44:	4630      	mov	r0, r6
 8005c46:	f000 f82f 	bl	8005ca8 <__malloc_unlock>
 8005c4a:	f104 000b 	add.w	r0, r4, #11
 8005c4e:	1d23      	adds	r3, r4, #4
 8005c50:	f020 0007 	bic.w	r0, r0, #7
 8005c54:	1ac2      	subs	r2, r0, r3
 8005c56:	bf1c      	itt	ne
 8005c58:	1a1b      	subne	r3, r3, r0
 8005c5a:	50a3      	strne	r3, [r4, r2]
 8005c5c:	e7af      	b.n	8005bbe <_malloc_r+0x22>
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	bf0c      	ite	eq
 8005c64:	f8c8 2000 	streq.w	r2, [r8]
 8005c68:	605a      	strne	r2, [r3, #4]
 8005c6a:	e7eb      	b.n	8005c44 <_malloc_r+0xa8>
 8005c6c:	4623      	mov	r3, r4
 8005c6e:	6864      	ldr	r4, [r4, #4]
 8005c70:	e7ae      	b.n	8005bd0 <_malloc_r+0x34>
 8005c72:	463c      	mov	r4, r7
 8005c74:	687f      	ldr	r7, [r7, #4]
 8005c76:	e7b6      	b.n	8005be6 <_malloc_r+0x4a>
 8005c78:	461a      	mov	r2, r3
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d1fb      	bne.n	8005c78 <_malloc_r+0xdc>
 8005c80:	2300      	movs	r3, #0
 8005c82:	6053      	str	r3, [r2, #4]
 8005c84:	e7de      	b.n	8005c44 <_malloc_r+0xa8>
 8005c86:	230c      	movs	r3, #12
 8005c88:	6033      	str	r3, [r6, #0]
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f000 f80c 	bl	8005ca8 <__malloc_unlock>
 8005c90:	e794      	b.n	8005bbc <_malloc_r+0x20>
 8005c92:	6005      	str	r5, [r0, #0]
 8005c94:	e7d6      	b.n	8005c44 <_malloc_r+0xa8>
 8005c96:	bf00      	nop
 8005c98:	20000554 	.word	0x20000554

08005c9c <__malloc_lock>:
 8005c9c:	4801      	ldr	r0, [pc, #4]	@ (8005ca4 <__malloc_lock+0x8>)
 8005c9e:	f7ff bf0e 	b.w	8005abe <__retarget_lock_acquire_recursive>
 8005ca2:	bf00      	nop
 8005ca4:	2000054c 	.word	0x2000054c

08005ca8 <__malloc_unlock>:
 8005ca8:	4801      	ldr	r0, [pc, #4]	@ (8005cb0 <__malloc_unlock+0x8>)
 8005caa:	f7ff bf09 	b.w	8005ac0 <__retarget_lock_release_recursive>
 8005cae:	bf00      	nop
 8005cb0:	2000054c 	.word	0x2000054c

08005cb4 <__sfputc_r>:
 8005cb4:	6893      	ldr	r3, [r2, #8]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	b410      	push	{r4}
 8005cbc:	6093      	str	r3, [r2, #8]
 8005cbe:	da08      	bge.n	8005cd2 <__sfputc_r+0x1e>
 8005cc0:	6994      	ldr	r4, [r2, #24]
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	db01      	blt.n	8005cca <__sfputc_r+0x16>
 8005cc6:	290a      	cmp	r1, #10
 8005cc8:	d103      	bne.n	8005cd2 <__sfputc_r+0x1e>
 8005cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cce:	f000 bba1 	b.w	8006414 <__swbuf_r>
 8005cd2:	6813      	ldr	r3, [r2, #0]
 8005cd4:	1c58      	adds	r0, r3, #1
 8005cd6:	6010      	str	r0, [r2, #0]
 8005cd8:	7019      	strb	r1, [r3, #0]
 8005cda:	4608      	mov	r0, r1
 8005cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <__sfputs_r>:
 8005ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	460f      	mov	r7, r1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	18d5      	adds	r5, r2, r3
 8005cec:	42ac      	cmp	r4, r5
 8005cee:	d101      	bne.n	8005cf4 <__sfputs_r+0x12>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e007      	b.n	8005d04 <__sfputs_r+0x22>
 8005cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf8:	463a      	mov	r2, r7
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff ffda 	bl	8005cb4 <__sfputc_r>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d1f3      	bne.n	8005cec <__sfputs_r+0xa>
 8005d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d08 <_vfiprintf_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	460d      	mov	r5, r1
 8005d0e:	b09d      	sub	sp, #116	@ 0x74
 8005d10:	4614      	mov	r4, r2
 8005d12:	4698      	mov	r8, r3
 8005d14:	4606      	mov	r6, r0
 8005d16:	b118      	cbz	r0, 8005d20 <_vfiprintf_r+0x18>
 8005d18:	6a03      	ldr	r3, [r0, #32]
 8005d1a:	b90b      	cbnz	r3, 8005d20 <_vfiprintf_r+0x18>
 8005d1c:	f7ff fdc2 	bl	80058a4 <__sinit>
 8005d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d22:	07d9      	lsls	r1, r3, #31
 8005d24:	d405      	bmi.n	8005d32 <_vfiprintf_r+0x2a>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	059a      	lsls	r2, r3, #22
 8005d2a:	d402      	bmi.n	8005d32 <_vfiprintf_r+0x2a>
 8005d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d2e:	f7ff fec6 	bl	8005abe <__retarget_lock_acquire_recursive>
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	071b      	lsls	r3, r3, #28
 8005d36:	d501      	bpl.n	8005d3c <_vfiprintf_r+0x34>
 8005d38:	692b      	ldr	r3, [r5, #16]
 8005d3a:	b99b      	cbnz	r3, 8005d64 <_vfiprintf_r+0x5c>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 fba6 	bl	8006490 <__swsetup_r>
 8005d44:	b170      	cbz	r0, 8005d64 <_vfiprintf_r+0x5c>
 8005d46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d48:	07dc      	lsls	r4, r3, #31
 8005d4a:	d504      	bpl.n	8005d56 <_vfiprintf_r+0x4e>
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	b01d      	add	sp, #116	@ 0x74
 8005d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	89ab      	ldrh	r3, [r5, #12]
 8005d58:	0598      	lsls	r0, r3, #22
 8005d5a:	d4f7      	bmi.n	8005d4c <_vfiprintf_r+0x44>
 8005d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d5e:	f7ff feaf 	bl	8005ac0 <__retarget_lock_release_recursive>
 8005d62:	e7f3      	b.n	8005d4c <_vfiprintf_r+0x44>
 8005d64:	2300      	movs	r3, #0
 8005d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d72:	2330      	movs	r3, #48	@ 0x30
 8005d74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f24 <_vfiprintf_r+0x21c>
 8005d78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d7c:	f04f 0901 	mov.w	r9, #1
 8005d80:	4623      	mov	r3, r4
 8005d82:	469a      	mov	sl, r3
 8005d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d88:	b10a      	cbz	r2, 8005d8e <_vfiprintf_r+0x86>
 8005d8a:	2a25      	cmp	r2, #37	@ 0x25
 8005d8c:	d1f9      	bne.n	8005d82 <_vfiprintf_r+0x7a>
 8005d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d92:	d00b      	beq.n	8005dac <_vfiprintf_r+0xa4>
 8005d94:	465b      	mov	r3, fp
 8005d96:	4622      	mov	r2, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ffa1 	bl	8005ce2 <__sfputs_r>
 8005da0:	3001      	adds	r0, #1
 8005da2:	f000 80a7 	beq.w	8005ef4 <_vfiprintf_r+0x1ec>
 8005da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da8:	445a      	add	r2, fp
 8005daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dac:	f89a 3000 	ldrb.w	r3, [sl]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 809f 	beq.w	8005ef4 <_vfiprintf_r+0x1ec>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc0:	f10a 0a01 	add.w	sl, sl, #1
 8005dc4:	9304      	str	r3, [sp, #16]
 8005dc6:	9307      	str	r3, [sp, #28]
 8005dc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dce:	4654      	mov	r4, sl
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd6:	4853      	ldr	r0, [pc, #332]	@ (8005f24 <_vfiprintf_r+0x21c>)
 8005dd8:	f7fa f9fa 	bl	80001d0 <memchr>
 8005ddc:	9a04      	ldr	r2, [sp, #16]
 8005dde:	b9d8      	cbnz	r0, 8005e18 <_vfiprintf_r+0x110>
 8005de0:	06d1      	lsls	r1, r2, #27
 8005de2:	bf44      	itt	mi
 8005de4:	2320      	movmi	r3, #32
 8005de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dea:	0713      	lsls	r3, r2, #28
 8005dec:	bf44      	itt	mi
 8005dee:	232b      	movmi	r3, #43	@ 0x2b
 8005df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005df4:	f89a 3000 	ldrb.w	r3, [sl]
 8005df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfa:	d015      	beq.n	8005e28 <_vfiprintf_r+0x120>
 8005dfc:	9a07      	ldr	r2, [sp, #28]
 8005dfe:	4654      	mov	r4, sl
 8005e00:	2000      	movs	r0, #0
 8005e02:	f04f 0c0a 	mov.w	ip, #10
 8005e06:	4621      	mov	r1, r4
 8005e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e0c:	3b30      	subs	r3, #48	@ 0x30
 8005e0e:	2b09      	cmp	r3, #9
 8005e10:	d94b      	bls.n	8005eaa <_vfiprintf_r+0x1a2>
 8005e12:	b1b0      	cbz	r0, 8005e42 <_vfiprintf_r+0x13a>
 8005e14:	9207      	str	r2, [sp, #28]
 8005e16:	e014      	b.n	8005e42 <_vfiprintf_r+0x13a>
 8005e18:	eba0 0308 	sub.w	r3, r0, r8
 8005e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	9304      	str	r3, [sp, #16]
 8005e24:	46a2      	mov	sl, r4
 8005e26:	e7d2      	b.n	8005dce <_vfiprintf_r+0xc6>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	1d19      	adds	r1, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	9103      	str	r1, [sp, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bfbb      	ittet	lt
 8005e34:	425b      	neglt	r3, r3
 8005e36:	f042 0202 	orrlt.w	r2, r2, #2
 8005e3a:	9307      	strge	r3, [sp, #28]
 8005e3c:	9307      	strlt	r3, [sp, #28]
 8005e3e:	bfb8      	it	lt
 8005e40:	9204      	strlt	r2, [sp, #16]
 8005e42:	7823      	ldrb	r3, [r4, #0]
 8005e44:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e46:	d10a      	bne.n	8005e5e <_vfiprintf_r+0x156>
 8005e48:	7863      	ldrb	r3, [r4, #1]
 8005e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e4c:	d132      	bne.n	8005eb4 <_vfiprintf_r+0x1ac>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	1d1a      	adds	r2, r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	9203      	str	r2, [sp, #12]
 8005e56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e5a:	3402      	adds	r4, #2
 8005e5c:	9305      	str	r3, [sp, #20]
 8005e5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f34 <_vfiprintf_r+0x22c>
 8005e62:	7821      	ldrb	r1, [r4, #0]
 8005e64:	2203      	movs	r2, #3
 8005e66:	4650      	mov	r0, sl
 8005e68:	f7fa f9b2 	bl	80001d0 <memchr>
 8005e6c:	b138      	cbz	r0, 8005e7e <_vfiprintf_r+0x176>
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	eba0 000a 	sub.w	r0, r0, sl
 8005e74:	2240      	movs	r2, #64	@ 0x40
 8005e76:	4082      	lsls	r2, r0
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	3401      	adds	r4, #1
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e82:	4829      	ldr	r0, [pc, #164]	@ (8005f28 <_vfiprintf_r+0x220>)
 8005e84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e88:	2206      	movs	r2, #6
 8005e8a:	f7fa f9a1 	bl	80001d0 <memchr>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d03f      	beq.n	8005f12 <_vfiprintf_r+0x20a>
 8005e92:	4b26      	ldr	r3, [pc, #152]	@ (8005f2c <_vfiprintf_r+0x224>)
 8005e94:	bb1b      	cbnz	r3, 8005ede <_vfiprintf_r+0x1d6>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	3307      	adds	r3, #7
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	9303      	str	r3, [sp, #12]
 8005ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea4:	443b      	add	r3, r7
 8005ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea8:	e76a      	b.n	8005d80 <_vfiprintf_r+0x78>
 8005eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eae:	460c      	mov	r4, r1
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	e7a8      	b.n	8005e06 <_vfiprintf_r+0xfe>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	3401      	adds	r4, #1
 8005eb8:	9305      	str	r3, [sp, #20]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f04f 0c0a 	mov.w	ip, #10
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec6:	3a30      	subs	r2, #48	@ 0x30
 8005ec8:	2a09      	cmp	r2, #9
 8005eca:	d903      	bls.n	8005ed4 <_vfiprintf_r+0x1cc>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0c6      	beq.n	8005e5e <_vfiprintf_r+0x156>
 8005ed0:	9105      	str	r1, [sp, #20]
 8005ed2:	e7c4      	b.n	8005e5e <_vfiprintf_r+0x156>
 8005ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ed8:	4604      	mov	r4, r0
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7f0      	b.n	8005ec0 <_vfiprintf_r+0x1b8>
 8005ede:	ab03      	add	r3, sp, #12
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	4b12      	ldr	r3, [pc, #72]	@ (8005f30 <_vfiprintf_r+0x228>)
 8005ee6:	a904      	add	r1, sp, #16
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f3af 8000 	nop.w
 8005eee:	4607      	mov	r7, r0
 8005ef0:	1c78      	adds	r0, r7, #1
 8005ef2:	d1d6      	bne.n	8005ea2 <_vfiprintf_r+0x19a>
 8005ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ef6:	07d9      	lsls	r1, r3, #31
 8005ef8:	d405      	bmi.n	8005f06 <_vfiprintf_r+0x1fe>
 8005efa:	89ab      	ldrh	r3, [r5, #12]
 8005efc:	059a      	lsls	r2, r3, #22
 8005efe:	d402      	bmi.n	8005f06 <_vfiprintf_r+0x1fe>
 8005f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f02:	f7ff fddd 	bl	8005ac0 <__retarget_lock_release_recursive>
 8005f06:	89ab      	ldrh	r3, [r5, #12]
 8005f08:	065b      	lsls	r3, r3, #25
 8005f0a:	f53f af1f 	bmi.w	8005d4c <_vfiprintf_r+0x44>
 8005f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f10:	e71e      	b.n	8005d50 <_vfiprintf_r+0x48>
 8005f12:	ab03      	add	r3, sp, #12
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	462a      	mov	r2, r5
 8005f18:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <_vfiprintf_r+0x228>)
 8005f1a:	a904      	add	r1, sp, #16
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f000 f879 	bl	8006014 <_printf_i>
 8005f22:	e7e4      	b.n	8005eee <_vfiprintf_r+0x1e6>
 8005f24:	080066d0 	.word	0x080066d0
 8005f28:	080066da 	.word	0x080066da
 8005f2c:	00000000 	.word	0x00000000
 8005f30:	08005ce3 	.word	0x08005ce3
 8005f34:	080066d6 	.word	0x080066d6

08005f38 <_printf_common>:
 8005f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	4698      	mov	r8, r3
 8005f40:	688a      	ldr	r2, [r1, #8]
 8005f42:	690b      	ldr	r3, [r1, #16]
 8005f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	bfb8      	it	lt
 8005f4c:	4613      	movlt	r3, r2
 8005f4e:	6033      	str	r3, [r6, #0]
 8005f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f54:	4607      	mov	r7, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	b10a      	cbz	r2, 8005f5e <_printf_common+0x26>
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	0699      	lsls	r1, r3, #26
 8005f62:	bf42      	ittt	mi
 8005f64:	6833      	ldrmi	r3, [r6, #0]
 8005f66:	3302      	addmi	r3, #2
 8005f68:	6033      	strmi	r3, [r6, #0]
 8005f6a:	6825      	ldr	r5, [r4, #0]
 8005f6c:	f015 0506 	ands.w	r5, r5, #6
 8005f70:	d106      	bne.n	8005f80 <_printf_common+0x48>
 8005f72:	f104 0a19 	add.w	sl, r4, #25
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	6832      	ldr	r2, [r6, #0]
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	42ab      	cmp	r3, r5
 8005f7e:	dc26      	bgt.n	8005fce <_printf_common+0x96>
 8005f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	3b00      	subs	r3, #0
 8005f88:	bf18      	it	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	0692      	lsls	r2, r2, #26
 8005f8e:	d42b      	bmi.n	8005fe8 <_printf_common+0xb0>
 8005f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f94:	4641      	mov	r1, r8
 8005f96:	4638      	mov	r0, r7
 8005f98:	47c8      	blx	r9
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d01e      	beq.n	8005fdc <_printf_common+0xa4>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	6922      	ldr	r2, [r4, #16]
 8005fa2:	f003 0306 	and.w	r3, r3, #6
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	bf02      	ittt	eq
 8005faa:	68e5      	ldreq	r5, [r4, #12]
 8005fac:	6833      	ldreq	r3, [r6, #0]
 8005fae:	1aed      	subeq	r5, r5, r3
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	bf0c      	ite	eq
 8005fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb8:	2500      	movne	r5, #0
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	bfc4      	itt	gt
 8005fbe:	1a9b      	subgt	r3, r3, r2
 8005fc0:	18ed      	addgt	r5, r5, r3
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	341a      	adds	r4, #26
 8005fc6:	42b5      	cmp	r5, r6
 8005fc8:	d11a      	bne.n	8006000 <_printf_common+0xc8>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e008      	b.n	8005fe0 <_printf_common+0xa8>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4652      	mov	r2, sl
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	47c8      	blx	r9
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d103      	bne.n	8005fe4 <_printf_common+0xac>
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	e7c6      	b.n	8005f76 <_printf_common+0x3e>
 8005fe8:	18e1      	adds	r1, r4, r3
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	2030      	movs	r0, #48	@ 0x30
 8005fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ff2:	4422      	add	r2, r4
 8005ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	e7c7      	b.n	8005f90 <_printf_common+0x58>
 8006000:	2301      	movs	r3, #1
 8006002:	4622      	mov	r2, r4
 8006004:	4641      	mov	r1, r8
 8006006:	4638      	mov	r0, r7
 8006008:	47c8      	blx	r9
 800600a:	3001      	adds	r0, #1
 800600c:	d0e6      	beq.n	8005fdc <_printf_common+0xa4>
 800600e:	3601      	adds	r6, #1
 8006010:	e7d9      	b.n	8005fc6 <_printf_common+0x8e>
	...

08006014 <_printf_i>:
 8006014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	7e0f      	ldrb	r7, [r1, #24]
 800601a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800601c:	2f78      	cmp	r7, #120	@ 0x78
 800601e:	4691      	mov	r9, r2
 8006020:	4680      	mov	r8, r0
 8006022:	460c      	mov	r4, r1
 8006024:	469a      	mov	sl, r3
 8006026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800602a:	d807      	bhi.n	800603c <_printf_i+0x28>
 800602c:	2f62      	cmp	r7, #98	@ 0x62
 800602e:	d80a      	bhi.n	8006046 <_printf_i+0x32>
 8006030:	2f00      	cmp	r7, #0
 8006032:	f000 80d2 	beq.w	80061da <_printf_i+0x1c6>
 8006036:	2f58      	cmp	r7, #88	@ 0x58
 8006038:	f000 80b9 	beq.w	80061ae <_printf_i+0x19a>
 800603c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006044:	e03a      	b.n	80060bc <_printf_i+0xa8>
 8006046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800604a:	2b15      	cmp	r3, #21
 800604c:	d8f6      	bhi.n	800603c <_printf_i+0x28>
 800604e:	a101      	add	r1, pc, #4	@ (adr r1, 8006054 <_printf_i+0x40>)
 8006050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006054:	080060ad 	.word	0x080060ad
 8006058:	080060c1 	.word	0x080060c1
 800605c:	0800603d 	.word	0x0800603d
 8006060:	0800603d 	.word	0x0800603d
 8006064:	0800603d 	.word	0x0800603d
 8006068:	0800603d 	.word	0x0800603d
 800606c:	080060c1 	.word	0x080060c1
 8006070:	0800603d 	.word	0x0800603d
 8006074:	0800603d 	.word	0x0800603d
 8006078:	0800603d 	.word	0x0800603d
 800607c:	0800603d 	.word	0x0800603d
 8006080:	080061c1 	.word	0x080061c1
 8006084:	080060eb 	.word	0x080060eb
 8006088:	0800617b 	.word	0x0800617b
 800608c:	0800603d 	.word	0x0800603d
 8006090:	0800603d 	.word	0x0800603d
 8006094:	080061e3 	.word	0x080061e3
 8006098:	0800603d 	.word	0x0800603d
 800609c:	080060eb 	.word	0x080060eb
 80060a0:	0800603d 	.word	0x0800603d
 80060a4:	0800603d 	.word	0x0800603d
 80060a8:	08006183 	.word	0x08006183
 80060ac:	6833      	ldr	r3, [r6, #0]
 80060ae:	1d1a      	adds	r2, r3, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6032      	str	r2, [r6, #0]
 80060b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060bc:	2301      	movs	r3, #1
 80060be:	e09d      	b.n	80061fc <_printf_i+0x1e8>
 80060c0:	6833      	ldr	r3, [r6, #0]
 80060c2:	6820      	ldr	r0, [r4, #0]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	6031      	str	r1, [r6, #0]
 80060c8:	0606      	lsls	r6, r0, #24
 80060ca:	d501      	bpl.n	80060d0 <_printf_i+0xbc>
 80060cc:	681d      	ldr	r5, [r3, #0]
 80060ce:	e003      	b.n	80060d8 <_printf_i+0xc4>
 80060d0:	0645      	lsls	r5, r0, #25
 80060d2:	d5fb      	bpl.n	80060cc <_printf_i+0xb8>
 80060d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060d8:	2d00      	cmp	r5, #0
 80060da:	da03      	bge.n	80060e4 <_printf_i+0xd0>
 80060dc:	232d      	movs	r3, #45	@ 0x2d
 80060de:	426d      	negs	r5, r5
 80060e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e4:	4859      	ldr	r0, [pc, #356]	@ (800624c <_printf_i+0x238>)
 80060e6:	230a      	movs	r3, #10
 80060e8:	e011      	b.n	800610e <_printf_i+0xfa>
 80060ea:	6821      	ldr	r1, [r4, #0]
 80060ec:	6833      	ldr	r3, [r6, #0]
 80060ee:	0608      	lsls	r0, r1, #24
 80060f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80060f4:	d402      	bmi.n	80060fc <_printf_i+0xe8>
 80060f6:	0649      	lsls	r1, r1, #25
 80060f8:	bf48      	it	mi
 80060fa:	b2ad      	uxthmi	r5, r5
 80060fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80060fe:	4853      	ldr	r0, [pc, #332]	@ (800624c <_printf_i+0x238>)
 8006100:	6033      	str	r3, [r6, #0]
 8006102:	bf14      	ite	ne
 8006104:	230a      	movne	r3, #10
 8006106:	2308      	moveq	r3, #8
 8006108:	2100      	movs	r1, #0
 800610a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800610e:	6866      	ldr	r6, [r4, #4]
 8006110:	60a6      	str	r6, [r4, #8]
 8006112:	2e00      	cmp	r6, #0
 8006114:	bfa2      	ittt	ge
 8006116:	6821      	ldrge	r1, [r4, #0]
 8006118:	f021 0104 	bicge.w	r1, r1, #4
 800611c:	6021      	strge	r1, [r4, #0]
 800611e:	b90d      	cbnz	r5, 8006124 <_printf_i+0x110>
 8006120:	2e00      	cmp	r6, #0
 8006122:	d04b      	beq.n	80061bc <_printf_i+0x1a8>
 8006124:	4616      	mov	r6, r2
 8006126:	fbb5 f1f3 	udiv	r1, r5, r3
 800612a:	fb03 5711 	mls	r7, r3, r1, r5
 800612e:	5dc7      	ldrb	r7, [r0, r7]
 8006130:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006134:	462f      	mov	r7, r5
 8006136:	42bb      	cmp	r3, r7
 8006138:	460d      	mov	r5, r1
 800613a:	d9f4      	bls.n	8006126 <_printf_i+0x112>
 800613c:	2b08      	cmp	r3, #8
 800613e:	d10b      	bne.n	8006158 <_printf_i+0x144>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	07df      	lsls	r7, r3, #31
 8006144:	d508      	bpl.n	8006158 <_printf_i+0x144>
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	6861      	ldr	r1, [r4, #4]
 800614a:	4299      	cmp	r1, r3
 800614c:	bfde      	ittt	le
 800614e:	2330      	movle	r3, #48	@ 0x30
 8006150:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006154:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006158:	1b92      	subs	r2, r2, r6
 800615a:	6122      	str	r2, [r4, #16]
 800615c:	f8cd a000 	str.w	sl, [sp]
 8006160:	464b      	mov	r3, r9
 8006162:	aa03      	add	r2, sp, #12
 8006164:	4621      	mov	r1, r4
 8006166:	4640      	mov	r0, r8
 8006168:	f7ff fee6 	bl	8005f38 <_printf_common>
 800616c:	3001      	adds	r0, #1
 800616e:	d14a      	bne.n	8006206 <_printf_i+0x1f2>
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	b004      	add	sp, #16
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f043 0320 	orr.w	r3, r3, #32
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	4833      	ldr	r0, [pc, #204]	@ (8006250 <_printf_i+0x23c>)
 8006184:	2778      	movs	r7, #120	@ 0x78
 8006186:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	6831      	ldr	r1, [r6, #0]
 800618e:	061f      	lsls	r7, r3, #24
 8006190:	f851 5b04 	ldr.w	r5, [r1], #4
 8006194:	d402      	bmi.n	800619c <_printf_i+0x188>
 8006196:	065f      	lsls	r7, r3, #25
 8006198:	bf48      	it	mi
 800619a:	b2ad      	uxthmi	r5, r5
 800619c:	6031      	str	r1, [r6, #0]
 800619e:	07d9      	lsls	r1, r3, #31
 80061a0:	bf44      	itt	mi
 80061a2:	f043 0320 	orrmi.w	r3, r3, #32
 80061a6:	6023      	strmi	r3, [r4, #0]
 80061a8:	b11d      	cbz	r5, 80061b2 <_printf_i+0x19e>
 80061aa:	2310      	movs	r3, #16
 80061ac:	e7ac      	b.n	8006108 <_printf_i+0xf4>
 80061ae:	4827      	ldr	r0, [pc, #156]	@ (800624c <_printf_i+0x238>)
 80061b0:	e7e9      	b.n	8006186 <_printf_i+0x172>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f023 0320 	bic.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	e7f6      	b.n	80061aa <_printf_i+0x196>
 80061bc:	4616      	mov	r6, r2
 80061be:	e7bd      	b.n	800613c <_printf_i+0x128>
 80061c0:	6833      	ldr	r3, [r6, #0]
 80061c2:	6825      	ldr	r5, [r4, #0]
 80061c4:	6961      	ldr	r1, [r4, #20]
 80061c6:	1d18      	adds	r0, r3, #4
 80061c8:	6030      	str	r0, [r6, #0]
 80061ca:	062e      	lsls	r6, r5, #24
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	d501      	bpl.n	80061d4 <_printf_i+0x1c0>
 80061d0:	6019      	str	r1, [r3, #0]
 80061d2:	e002      	b.n	80061da <_printf_i+0x1c6>
 80061d4:	0668      	lsls	r0, r5, #25
 80061d6:	d5fb      	bpl.n	80061d0 <_printf_i+0x1bc>
 80061d8:	8019      	strh	r1, [r3, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	6123      	str	r3, [r4, #16]
 80061de:	4616      	mov	r6, r2
 80061e0:	e7bc      	b.n	800615c <_printf_i+0x148>
 80061e2:	6833      	ldr	r3, [r6, #0]
 80061e4:	1d1a      	adds	r2, r3, #4
 80061e6:	6032      	str	r2, [r6, #0]
 80061e8:	681e      	ldr	r6, [r3, #0]
 80061ea:	6862      	ldr	r2, [r4, #4]
 80061ec:	2100      	movs	r1, #0
 80061ee:	4630      	mov	r0, r6
 80061f0:	f7f9 ffee 	bl	80001d0 <memchr>
 80061f4:	b108      	cbz	r0, 80061fa <_printf_i+0x1e6>
 80061f6:	1b80      	subs	r0, r0, r6
 80061f8:	6060      	str	r0, [r4, #4]
 80061fa:	6863      	ldr	r3, [r4, #4]
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	2300      	movs	r3, #0
 8006200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006204:	e7aa      	b.n	800615c <_printf_i+0x148>
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	4632      	mov	r2, r6
 800620a:	4649      	mov	r1, r9
 800620c:	4640      	mov	r0, r8
 800620e:	47d0      	blx	sl
 8006210:	3001      	adds	r0, #1
 8006212:	d0ad      	beq.n	8006170 <_printf_i+0x15c>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	079b      	lsls	r3, r3, #30
 8006218:	d413      	bmi.n	8006242 <_printf_i+0x22e>
 800621a:	68e0      	ldr	r0, [r4, #12]
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	4298      	cmp	r0, r3
 8006220:	bfb8      	it	lt
 8006222:	4618      	movlt	r0, r3
 8006224:	e7a6      	b.n	8006174 <_printf_i+0x160>
 8006226:	2301      	movs	r3, #1
 8006228:	4632      	mov	r2, r6
 800622a:	4649      	mov	r1, r9
 800622c:	4640      	mov	r0, r8
 800622e:	47d0      	blx	sl
 8006230:	3001      	adds	r0, #1
 8006232:	d09d      	beq.n	8006170 <_printf_i+0x15c>
 8006234:	3501      	adds	r5, #1
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	9903      	ldr	r1, [sp, #12]
 800623a:	1a5b      	subs	r3, r3, r1
 800623c:	42ab      	cmp	r3, r5
 800623e:	dcf2      	bgt.n	8006226 <_printf_i+0x212>
 8006240:	e7eb      	b.n	800621a <_printf_i+0x206>
 8006242:	2500      	movs	r5, #0
 8006244:	f104 0619 	add.w	r6, r4, #25
 8006248:	e7f5      	b.n	8006236 <_printf_i+0x222>
 800624a:	bf00      	nop
 800624c:	080066e1 	.word	0x080066e1
 8006250:	080066f2 	.word	0x080066f2

08006254 <__sflush_r>:
 8006254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625c:	0716      	lsls	r6, r2, #28
 800625e:	4605      	mov	r5, r0
 8006260:	460c      	mov	r4, r1
 8006262:	d454      	bmi.n	800630e <__sflush_r+0xba>
 8006264:	684b      	ldr	r3, [r1, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	dc02      	bgt.n	8006270 <__sflush_r+0x1c>
 800626a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	dd48      	ble.n	8006302 <__sflush_r+0xae>
 8006270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006272:	2e00      	cmp	r6, #0
 8006274:	d045      	beq.n	8006302 <__sflush_r+0xae>
 8006276:	2300      	movs	r3, #0
 8006278:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800627c:	682f      	ldr	r7, [r5, #0]
 800627e:	6a21      	ldr	r1, [r4, #32]
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	d030      	beq.n	80062e6 <__sflush_r+0x92>
 8006284:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	0759      	lsls	r1, r3, #29
 800628a:	d505      	bpl.n	8006298 <__sflush_r+0x44>
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006292:	b10b      	cbz	r3, 8006298 <__sflush_r+0x44>
 8006294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	2300      	movs	r3, #0
 800629a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	4628      	mov	r0, r5
 80062a0:	47b0      	blx	r6
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	d106      	bne.n	80062b6 <__sflush_r+0x62>
 80062a8:	6829      	ldr	r1, [r5, #0]
 80062aa:	291d      	cmp	r1, #29
 80062ac:	d82b      	bhi.n	8006306 <__sflush_r+0xb2>
 80062ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006358 <__sflush_r+0x104>)
 80062b0:	410a      	asrs	r2, r1
 80062b2:	07d6      	lsls	r6, r2, #31
 80062b4:	d427      	bmi.n	8006306 <__sflush_r+0xb2>
 80062b6:	2200      	movs	r2, #0
 80062b8:	6062      	str	r2, [r4, #4]
 80062ba:	04d9      	lsls	r1, r3, #19
 80062bc:	6922      	ldr	r2, [r4, #16]
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	d504      	bpl.n	80062cc <__sflush_r+0x78>
 80062c2:	1c42      	adds	r2, r0, #1
 80062c4:	d101      	bne.n	80062ca <__sflush_r+0x76>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	b903      	cbnz	r3, 80062cc <__sflush_r+0x78>
 80062ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80062cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ce:	602f      	str	r7, [r5, #0]
 80062d0:	b1b9      	cbz	r1, 8006302 <__sflush_r+0xae>
 80062d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062d6:	4299      	cmp	r1, r3
 80062d8:	d002      	beq.n	80062e0 <__sflush_r+0x8c>
 80062da:	4628      	mov	r0, r5
 80062dc:	f7ff fbf2 	bl	8005ac4 <_free_r>
 80062e0:	2300      	movs	r3, #0
 80062e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80062e4:	e00d      	b.n	8006302 <__sflush_r+0xae>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b0      	blx	r6
 80062ec:	4602      	mov	r2, r0
 80062ee:	1c50      	adds	r0, r2, #1
 80062f0:	d1c9      	bne.n	8006286 <__sflush_r+0x32>
 80062f2:	682b      	ldr	r3, [r5, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0c6      	beq.n	8006286 <__sflush_r+0x32>
 80062f8:	2b1d      	cmp	r3, #29
 80062fa:	d001      	beq.n	8006300 <__sflush_r+0xac>
 80062fc:	2b16      	cmp	r3, #22
 80062fe:	d11e      	bne.n	800633e <__sflush_r+0xea>
 8006300:	602f      	str	r7, [r5, #0]
 8006302:	2000      	movs	r0, #0
 8006304:	e022      	b.n	800634c <__sflush_r+0xf8>
 8006306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800630a:	b21b      	sxth	r3, r3
 800630c:	e01b      	b.n	8006346 <__sflush_r+0xf2>
 800630e:	690f      	ldr	r7, [r1, #16]
 8006310:	2f00      	cmp	r7, #0
 8006312:	d0f6      	beq.n	8006302 <__sflush_r+0xae>
 8006314:	0793      	lsls	r3, r2, #30
 8006316:	680e      	ldr	r6, [r1, #0]
 8006318:	bf08      	it	eq
 800631a:	694b      	ldreq	r3, [r1, #20]
 800631c:	600f      	str	r7, [r1, #0]
 800631e:	bf18      	it	ne
 8006320:	2300      	movne	r3, #0
 8006322:	eba6 0807 	sub.w	r8, r6, r7
 8006326:	608b      	str	r3, [r1, #8]
 8006328:	f1b8 0f00 	cmp.w	r8, #0
 800632c:	dde9      	ble.n	8006302 <__sflush_r+0xae>
 800632e:	6a21      	ldr	r1, [r4, #32]
 8006330:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006332:	4643      	mov	r3, r8
 8006334:	463a      	mov	r2, r7
 8006336:	4628      	mov	r0, r5
 8006338:	47b0      	blx	r6
 800633a:	2800      	cmp	r0, #0
 800633c:	dc08      	bgt.n	8006350 <__sflush_r+0xfc>
 800633e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	4407      	add	r7, r0
 8006352:	eba8 0800 	sub.w	r8, r8, r0
 8006356:	e7e7      	b.n	8006328 <__sflush_r+0xd4>
 8006358:	dfbffffe 	.word	0xdfbffffe

0800635c <_fflush_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	690b      	ldr	r3, [r1, #16]
 8006360:	4605      	mov	r5, r0
 8006362:	460c      	mov	r4, r1
 8006364:	b913      	cbnz	r3, 800636c <_fflush_r+0x10>
 8006366:	2500      	movs	r5, #0
 8006368:	4628      	mov	r0, r5
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	b118      	cbz	r0, 8006376 <_fflush_r+0x1a>
 800636e:	6a03      	ldr	r3, [r0, #32]
 8006370:	b90b      	cbnz	r3, 8006376 <_fflush_r+0x1a>
 8006372:	f7ff fa97 	bl	80058a4 <__sinit>
 8006376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f3      	beq.n	8006366 <_fflush_r+0xa>
 800637e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006380:	07d0      	lsls	r0, r2, #31
 8006382:	d404      	bmi.n	800638e <_fflush_r+0x32>
 8006384:	0599      	lsls	r1, r3, #22
 8006386:	d402      	bmi.n	800638e <_fflush_r+0x32>
 8006388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800638a:	f7ff fb98 	bl	8005abe <__retarget_lock_acquire_recursive>
 800638e:	4628      	mov	r0, r5
 8006390:	4621      	mov	r1, r4
 8006392:	f7ff ff5f 	bl	8006254 <__sflush_r>
 8006396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006398:	07da      	lsls	r2, r3, #31
 800639a:	4605      	mov	r5, r0
 800639c:	d4e4      	bmi.n	8006368 <_fflush_r+0xc>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	059b      	lsls	r3, r3, #22
 80063a2:	d4e1      	bmi.n	8006368 <_fflush_r+0xc>
 80063a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063a6:	f7ff fb8b 	bl	8005ac0 <__retarget_lock_release_recursive>
 80063aa:	e7dd      	b.n	8006368 <_fflush_r+0xc>

080063ac <_putc_r>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	460d      	mov	r5, r1
 80063b0:	4614      	mov	r4, r2
 80063b2:	4606      	mov	r6, r0
 80063b4:	b118      	cbz	r0, 80063be <_putc_r+0x12>
 80063b6:	6a03      	ldr	r3, [r0, #32]
 80063b8:	b90b      	cbnz	r3, 80063be <_putc_r+0x12>
 80063ba:	f7ff fa73 	bl	80058a4 <__sinit>
 80063be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063c0:	07d8      	lsls	r0, r3, #31
 80063c2:	d405      	bmi.n	80063d0 <_putc_r+0x24>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	0599      	lsls	r1, r3, #22
 80063c8:	d402      	bmi.n	80063d0 <_putc_r+0x24>
 80063ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063cc:	f7ff fb77 	bl	8005abe <__retarget_lock_acquire_recursive>
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	60a3      	str	r3, [r4, #8]
 80063d8:	da05      	bge.n	80063e6 <_putc_r+0x3a>
 80063da:	69a2      	ldr	r2, [r4, #24]
 80063dc:	4293      	cmp	r3, r2
 80063de:	db12      	blt.n	8006406 <_putc_r+0x5a>
 80063e0:	b2eb      	uxtb	r3, r5
 80063e2:	2b0a      	cmp	r3, #10
 80063e4:	d00f      	beq.n	8006406 <_putc_r+0x5a>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	6022      	str	r2, [r4, #0]
 80063ec:	701d      	strb	r5, [r3, #0]
 80063ee:	b2ed      	uxtb	r5, r5
 80063f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f2:	07da      	lsls	r2, r3, #31
 80063f4:	d405      	bmi.n	8006402 <_putc_r+0x56>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	059b      	lsls	r3, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_putc_r+0x56>
 80063fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fe:	f7ff fb5f 	bl	8005ac0 <__retarget_lock_release_recursive>
 8006402:	4628      	mov	r0, r5
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	4629      	mov	r1, r5
 8006408:	4622      	mov	r2, r4
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f802 	bl	8006414 <__swbuf_r>
 8006410:	4605      	mov	r5, r0
 8006412:	e7ed      	b.n	80063f0 <_putc_r+0x44>

08006414 <__swbuf_r>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	460e      	mov	r6, r1
 8006418:	4614      	mov	r4, r2
 800641a:	4605      	mov	r5, r0
 800641c:	b118      	cbz	r0, 8006426 <__swbuf_r+0x12>
 800641e:	6a03      	ldr	r3, [r0, #32]
 8006420:	b90b      	cbnz	r3, 8006426 <__swbuf_r+0x12>
 8006422:	f7ff fa3f 	bl	80058a4 <__sinit>
 8006426:	69a3      	ldr	r3, [r4, #24]
 8006428:	60a3      	str	r3, [r4, #8]
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	071a      	lsls	r2, r3, #28
 800642e:	d501      	bpl.n	8006434 <__swbuf_r+0x20>
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	b943      	cbnz	r3, 8006446 <__swbuf_r+0x32>
 8006434:	4621      	mov	r1, r4
 8006436:	4628      	mov	r0, r5
 8006438:	f000 f82a 	bl	8006490 <__swsetup_r>
 800643c:	b118      	cbz	r0, 8006446 <__swbuf_r+0x32>
 800643e:	f04f 37ff 	mov.w	r7, #4294967295
 8006442:	4638      	mov	r0, r7
 8006444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	6922      	ldr	r2, [r4, #16]
 800644a:	1a98      	subs	r0, r3, r2
 800644c:	6963      	ldr	r3, [r4, #20]
 800644e:	b2f6      	uxtb	r6, r6
 8006450:	4283      	cmp	r3, r0
 8006452:	4637      	mov	r7, r6
 8006454:	dc05      	bgt.n	8006462 <__swbuf_r+0x4e>
 8006456:	4621      	mov	r1, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f7ff ff7f 	bl	800635c <_fflush_r>
 800645e:	2800      	cmp	r0, #0
 8006460:	d1ed      	bne.n	800643e <__swbuf_r+0x2a>
 8006462:	68a3      	ldr	r3, [r4, #8]
 8006464:	3b01      	subs	r3, #1
 8006466:	60a3      	str	r3, [r4, #8]
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	6022      	str	r2, [r4, #0]
 800646e:	701e      	strb	r6, [r3, #0]
 8006470:	6962      	ldr	r2, [r4, #20]
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	429a      	cmp	r2, r3
 8006476:	d004      	beq.n	8006482 <__swbuf_r+0x6e>
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	07db      	lsls	r3, r3, #31
 800647c:	d5e1      	bpl.n	8006442 <__swbuf_r+0x2e>
 800647e:	2e0a      	cmp	r6, #10
 8006480:	d1df      	bne.n	8006442 <__swbuf_r+0x2e>
 8006482:	4621      	mov	r1, r4
 8006484:	4628      	mov	r0, r5
 8006486:	f7ff ff69 	bl	800635c <_fflush_r>
 800648a:	2800      	cmp	r0, #0
 800648c:	d0d9      	beq.n	8006442 <__swbuf_r+0x2e>
 800648e:	e7d6      	b.n	800643e <__swbuf_r+0x2a>

08006490 <__swsetup_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4b29      	ldr	r3, [pc, #164]	@ (8006538 <__swsetup_r+0xa8>)
 8006494:	4605      	mov	r5, r0
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	460c      	mov	r4, r1
 800649a:	b118      	cbz	r0, 80064a4 <__swsetup_r+0x14>
 800649c:	6a03      	ldr	r3, [r0, #32]
 800649e:	b90b      	cbnz	r3, 80064a4 <__swsetup_r+0x14>
 80064a0:	f7ff fa00 	bl	80058a4 <__sinit>
 80064a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a8:	0719      	lsls	r1, r3, #28
 80064aa:	d422      	bmi.n	80064f2 <__swsetup_r+0x62>
 80064ac:	06da      	lsls	r2, r3, #27
 80064ae:	d407      	bmi.n	80064c0 <__swsetup_r+0x30>
 80064b0:	2209      	movs	r2, #9
 80064b2:	602a      	str	r2, [r5, #0]
 80064b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	f04f 30ff 	mov.w	r0, #4294967295
 80064be:	e033      	b.n	8006528 <__swsetup_r+0x98>
 80064c0:	0758      	lsls	r0, r3, #29
 80064c2:	d512      	bpl.n	80064ea <__swsetup_r+0x5a>
 80064c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064c6:	b141      	cbz	r1, 80064da <__swsetup_r+0x4a>
 80064c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <__swsetup_r+0x46>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f7ff faf7 	bl	8005ac4 <_free_r>
 80064d6:	2300      	movs	r3, #0
 80064d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	2300      	movs	r3, #0
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f043 0308 	orr.w	r3, r3, #8
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	b94b      	cbnz	r3, 800650a <__swsetup_r+0x7a>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006500:	d003      	beq.n	800650a <__swsetup_r+0x7a>
 8006502:	4621      	mov	r1, r4
 8006504:	4628      	mov	r0, r5
 8006506:	f000 f84f 	bl	80065a8 <__smakebuf_r>
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	f013 0201 	ands.w	r2, r3, #1
 8006512:	d00a      	beq.n	800652a <__swsetup_r+0x9a>
 8006514:	2200      	movs	r2, #0
 8006516:	60a2      	str	r2, [r4, #8]
 8006518:	6962      	ldr	r2, [r4, #20]
 800651a:	4252      	negs	r2, r2
 800651c:	61a2      	str	r2, [r4, #24]
 800651e:	6922      	ldr	r2, [r4, #16]
 8006520:	b942      	cbnz	r2, 8006534 <__swsetup_r+0xa4>
 8006522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006526:	d1c5      	bne.n	80064b4 <__swsetup_r+0x24>
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	0799      	lsls	r1, r3, #30
 800652c:	bf58      	it	pl
 800652e:	6962      	ldrpl	r2, [r4, #20]
 8006530:	60a2      	str	r2, [r4, #8]
 8006532:	e7f4      	b.n	800651e <__swsetup_r+0x8e>
 8006534:	2000      	movs	r0, #0
 8006536:	e7f7      	b.n	8006528 <__swsetup_r+0x98>
 8006538:	20000018 	.word	0x20000018

0800653c <_sbrk_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d06      	ldr	r5, [pc, #24]	@ (8006558 <_sbrk_r+0x1c>)
 8006540:	2300      	movs	r3, #0
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7fa fc3c 	bl	8000dc4 <_sbrk>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_sbrk_r+0x1a>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_sbrk_r+0x1a>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20000548 	.word	0x20000548

0800655c <__swhatbuf_r>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	460c      	mov	r4, r1
 8006560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006564:	2900      	cmp	r1, #0
 8006566:	b096      	sub	sp, #88	@ 0x58
 8006568:	4615      	mov	r5, r2
 800656a:	461e      	mov	r6, r3
 800656c:	da0d      	bge.n	800658a <__swhatbuf_r+0x2e>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	bf14      	ite	ne
 800657a:	2340      	movne	r3, #64	@ 0x40
 800657c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006580:	2000      	movs	r0, #0
 8006582:	6031      	str	r1, [r6, #0]
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	b016      	add	sp, #88	@ 0x58
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	466a      	mov	r2, sp
 800658c:	f000 f848 	bl	8006620 <_fstat_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	dbec      	blt.n	800656e <__swhatbuf_r+0x12>
 8006594:	9901      	ldr	r1, [sp, #4]
 8006596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800659a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800659e:	4259      	negs	r1, r3
 80065a0:	4159      	adcs	r1, r3
 80065a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065a6:	e7eb      	b.n	8006580 <__swhatbuf_r+0x24>

080065a8 <__smakebuf_r>:
 80065a8:	898b      	ldrh	r3, [r1, #12]
 80065aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ac:	079d      	lsls	r5, r3, #30
 80065ae:	4606      	mov	r6, r0
 80065b0:	460c      	mov	r4, r1
 80065b2:	d507      	bpl.n	80065c4 <__smakebuf_r+0x1c>
 80065b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	2301      	movs	r3, #1
 80065be:	6163      	str	r3, [r4, #20]
 80065c0:	b003      	add	sp, #12
 80065c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c4:	ab01      	add	r3, sp, #4
 80065c6:	466a      	mov	r2, sp
 80065c8:	f7ff ffc8 	bl	800655c <__swhatbuf_r>
 80065cc:	9f00      	ldr	r7, [sp, #0]
 80065ce:	4605      	mov	r5, r0
 80065d0:	4639      	mov	r1, r7
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7ff fae2 	bl	8005b9c <_malloc_r>
 80065d8:	b948      	cbnz	r0, 80065ee <__smakebuf_r+0x46>
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	059a      	lsls	r2, r3, #22
 80065e0:	d4ee      	bmi.n	80065c0 <__smakebuf_r+0x18>
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	f043 0302 	orr.w	r3, r3, #2
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	e7e2      	b.n	80065b4 <__smakebuf_r+0xc>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	6020      	str	r0, [r4, #0]
 80065f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	9b01      	ldr	r3, [sp, #4]
 80065fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80065fe:	b15b      	cbz	r3, 8006618 <__smakebuf_r+0x70>
 8006600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006604:	4630      	mov	r0, r6
 8006606:	f000 f81d 	bl	8006644 <_isatty_r>
 800660a:	b128      	cbz	r0, 8006618 <__smakebuf_r+0x70>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	431d      	orrs	r5, r3
 800661c:	81a5      	strh	r5, [r4, #12]
 800661e:	e7cf      	b.n	80065c0 <__smakebuf_r+0x18>

08006620 <_fstat_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4d07      	ldr	r5, [pc, #28]	@ (8006640 <_fstat_r+0x20>)
 8006624:	2300      	movs	r3, #0
 8006626:	4604      	mov	r4, r0
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	602b      	str	r3, [r5, #0]
 800662e:	f7fa fba0 	bl	8000d72 <_fstat>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d102      	bne.n	800663c <_fstat_r+0x1c>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	b103      	cbz	r3, 800663c <_fstat_r+0x1c>
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	bd38      	pop	{r3, r4, r5, pc}
 800663e:	bf00      	nop
 8006640:	20000548 	.word	0x20000548

08006644 <_isatty_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4d06      	ldr	r5, [pc, #24]	@ (8006660 <_isatty_r+0x1c>)
 8006648:	2300      	movs	r3, #0
 800664a:	4604      	mov	r4, r0
 800664c:	4608      	mov	r0, r1
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	f7fa fb9f 	bl	8000d92 <_isatty>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_isatty_r+0x1a>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	b103      	cbz	r3, 800665e <_isatty_r+0x1a>
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	20000548 	.word	0x20000548

08006664 <_init>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr

08006670 <_fini>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr
