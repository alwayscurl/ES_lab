
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f638  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800f7c8  0800f7c8  000107c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd6c  0800fd6c  00011228  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd6c  0800fd6c  00010d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd74  0800fd74  00011228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd74  0800fd74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fd78  0800fd78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  0800fd7c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004898  20000228  0800ffa4  00011228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ac0  0800ffa4  00011ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e424  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000668a  00000000  00000000  0003f67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a0  00000000  00000000  00045d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e84  00000000  00000000  000484a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030edb  00000000  00000000  0004a32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030d55  00000000  00000000  0007b207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116436  00000000  00000000  000abf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c2392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b760  00000000  00000000  001c23d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001cdb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7b0 	.word	0x0800f7b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800f7b0 	.word	0x0800f7b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001078 <MX_BlueNRG_MS_Init+0x140>)
 8000f40:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000f42:	f000 f8ad 	bl	80010a0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f001 ff48 	bl	8002ddc <BSP_PB_GetState>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <MX_BlueNRG_MS_Init+0x144>)
 8000f52:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f54:	2100      	movs	r1, #0
 8000f56:	484a      	ldr	r0, [pc, #296]	@ (8001080 <MX_BlueNRG_MS_Init+0x148>)
 8000f58:	f008 f8ee 	bl	8009138 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f5c:	1dba      	adds	r2, r7, #6
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f007 ff5c 	bl	8008e22 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000f6a:	f007 ff9e 	bl	8008eaa <hci_reset>
  HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	@ 0x64
 8000f70:	f002 fca0 	bl	80038b4 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f74:	7a3b      	ldrb	r3, [r7, #8]
 8000f76:	2b30      	cmp	r3, #48	@ 0x30
 8000f78:	d902      	bls.n	8000f80 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000f80:	f107 0209 	add.w	r2, r7, #9
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f86:	2106      	movs	r1, #6
 8000f88:	2080      	movs	r0, #128	@ 0x80
 8000f8a:	f007 fec4 	bl	8008d16 <aci_hal_read_config_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f9c:	d001      	beq.n	8000fa2 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000fa2:	f007 fc84 	bl	80088ae <aci_gatt_init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000faa:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d110      	bne.n	8000fd4 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fb2:	f107 020e 	add.w	r2, r7, #14
 8000fb6:	f107 030a 	add.w	r3, r7, #10
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f007 fa44 	bl	8008456 <aci_gap_init_IDB05A1>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e00a      	b.n	8000fea <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fd4:	f107 030a 	add.w	r3, r7, #10
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	f107 010e 	add.w	r1, r7, #14
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f007 fa88 	bl	80084f6 <aci_gap_init_IDB04A1>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000fea:	89fc      	ldrh	r4, [r7, #14]
 8000fec:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff f93e 	bl	8000270 <strlen>
 8000ff4:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	4629      	mov	r1, r5
 8001002:	4620      	mov	r0, r4
 8001004:	f007 fdca 	bl	8008b9c <aci_gatt_update_char_value>
 8001008:	4603      	mov	r3, r0
 800100a:	613b      	str	r3, [r7, #16]
  if (ret) {
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8001012:	bf00      	nop
 8001014:	e7fd      	b.n	8001012 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001016:	2301      	movs	r3, #1
 8001018:	9303      	str	r3, [sp, #12]
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_BlueNRG_MS_Init+0x154>)
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2300      	movs	r3, #0
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	2310      	movs	r3, #16
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2307      	movs	r3, #7
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2001      	movs	r0, #1
 800102e:	f007 fb96 	bl	800875e <aci_gap_set_auth_requirement>
 8001032:	4603      	mov	r3, r0
 8001034:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8001040:	f000 f860 	bl	8001104 <Add_HWServW2ST_Service>
 8001044:	4603      	mov	r3, r0
 8001046:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8001052:	f000 f9ad 	bl	80013b0 <Add_SWServW2ST_Service>
 8001056:	4603      	mov	r3, r0
 8001058:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8001064:	2104      	movs	r1, #4
 8001066:	2001      	movs	r0, #1
 8001068:	f007 feaa 	bl	8008dc0 <aci_hal_set_tx_power_level>
 800106c:	4603      	mov	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bdb0      	pop	{r4, r5, r7, pc}
 8001078:	0800f7c8 	.word	0x0800f7c8
 800107c:	20000000 	.word	0x20000000
 8001080:	080018a5 	.word	0x080018a5
 8001084:	20000244 	.word	0x20000244
 8001088:	20000248 	.word	0x20000248
 800108c:	0001e240 	.word	0x0001e240

08001090 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8001094:	f000 f812 	bl	80010bc <User_Process>
  hci_user_evt_proc();
 8001098:	f008 f9c8 	bl	800942c <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2000      	movs	r0, #0
 80010a8:	f001 fe44 	bl	8002d34 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f001 fdd9 	bl	8002c64 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f001 fef0 	bl	8002e98 <BSP_COM_Init>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <User_Process+0x24>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <User_Process+0x18>
  {
    Set_DeviceConnectable();
 80010ca:	f000 fb77 	bl	80017bc <Set_DeviceConnectable>
    set_connectable = FALSE;
 80010ce:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <User_Process+0x24>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f001 fdd7 	bl	8002c88 <BSP_LED_Toggle>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000001 	.word	0x20000001

080010e4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <BSP_PB_Callback+0x1c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	2000024e 	.word	0x2000024e

08001104 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08d      	sub	sp, #52	@ 0x34
 8001108:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800110a:	231b      	movs	r3, #27
 800110c:	713b      	strb	r3, [r7, #4]
 800110e:	23c5      	movs	r3, #197	@ 0xc5
 8001110:	717b      	strb	r3, [r7, #5]
 8001112:	23d5      	movs	r3, #213	@ 0xd5
 8001114:	71bb      	strb	r3, [r7, #6]
 8001116:	23a5      	movs	r3, #165	@ 0xa5
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	2302      	movs	r3, #2
 800111c:	723b      	strb	r3, [r7, #8]
 800111e:	2300      	movs	r3, #0
 8001120:	727b      	strb	r3, [r7, #9]
 8001122:	23b4      	movs	r3, #180	@ 0xb4
 8001124:	72bb      	strb	r3, [r7, #10]
 8001126:	239a      	movs	r3, #154	@ 0x9a
 8001128:	72fb      	strb	r3, [r7, #11]
 800112a:	23e1      	movs	r3, #225	@ 0xe1
 800112c:	733b      	strb	r3, [r7, #12]
 800112e:	2311      	movs	r3, #17
 8001130:	737b      	strb	r3, [r7, #13]
 8001132:	2301      	movs	r3, #1
 8001134:	73bb      	strb	r3, [r7, #14]
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	2300      	movs	r3, #0
 800113c:	743b      	strb	r3, [r7, #16]
 800113e:	2300      	movs	r3, #0
 8001140:	747b      	strb	r3, [r7, #17]
 8001142:	2300      	movs	r3, #0
 8001144:	74bb      	strb	r3, [r7, #18]
 8001146:	2300      	movs	r3, #0
 8001148:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800114a:	4b92      	ldr	r3, [pc, #584]	@ (8001394 <Add_HWServW2ST_Service+0x290>)
 800114c:	461c      	mov	r4, r3
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001156:	4b90      	ldr	r3, [pc, #576]	@ (8001398 <Add_HWServW2ST_Service+0x294>)
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2310      	movs	r3, #16
 800115c:	2201      	movs	r2, #1
 800115e:	498d      	ldr	r1, [pc, #564]	@ (8001394 <Add_HWServW2ST_Service+0x290>)
 8001160:	2002      	movs	r0, #2
 8001162:	f007 fbc7 	bl	80088f4 <aci_gatt_add_serv>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8001170:	2347      	movs	r3, #71	@ 0x47
 8001172:	e10a      	b.n	800138a <Add_HWServW2ST_Service+0x286>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001174:	231b      	movs	r3, #27
 8001176:	713b      	strb	r3, [r7, #4]
 8001178:	23c5      	movs	r3, #197	@ 0xc5
 800117a:	717b      	strb	r3, [r7, #5]
 800117c:	23d5      	movs	r3, #213	@ 0xd5
 800117e:	71bb      	strb	r3, [r7, #6]
 8001180:	23a5      	movs	r3, #165	@ 0xa5
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	2302      	movs	r3, #2
 8001186:	723b      	strb	r3, [r7, #8]
 8001188:	2300      	movs	r3, #0
 800118a:	727b      	strb	r3, [r7, #9]
 800118c:	2336      	movs	r3, #54	@ 0x36
 800118e:	72bb      	strb	r3, [r7, #10]
 8001190:	23ac      	movs	r3, #172	@ 0xac
 8001192:	72fb      	strb	r3, [r7, #11]
 8001194:	23e1      	movs	r3, #225	@ 0xe1
 8001196:	733b      	strb	r3, [r7, #12]
 8001198:	2311      	movs	r3, #17
 800119a:	737b      	strb	r3, [r7, #13]
 800119c:	2301      	movs	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	2300      	movs	r3, #0
 80011a6:	743b      	strb	r3, [r7, #16]
 80011a8:	2300      	movs	r3, #0
 80011aa:	747b      	strb	r3, [r7, #17]
 80011ac:	2300      	movs	r3, #0
 80011ae:	74bb      	strb	r3, [r7, #18]
 80011b0:	2300      	movs	r3, #0
 80011b2:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80011b4:	7cbb      	ldrb	r3, [r7, #18]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80011be:	7cbb      	ldrb	r3, [r7, #18]
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80011c8:	4b74      	ldr	r3, [pc, #464]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 80011ca:	461c      	mov	r4, r3
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80011d4:	4b70      	ldr	r3, [pc, #448]	@ (8001398 <Add_HWServW2ST_Service+0x294>)
 80011d6:	8818      	ldrh	r0, [r3, #0]
 80011d8:	4b71      	ldr	r3, [pc, #452]	@ (80013a0 <Add_HWServW2ST_Service+0x29c>)
 80011da:	9305      	str	r3, [sp, #20]
 80011dc:	2300      	movs	r3, #0
 80011de:	9304      	str	r3, [sp, #16]
 80011e0:	2310      	movs	r3, #16
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	2304      	movs	r3, #4
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2300      	movs	r3, #0
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	2310      	movs	r3, #16
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2302      	movs	r3, #2
 80011f2:	4a6a      	ldr	r2, [pc, #424]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 80011f4:	2102      	movs	r1, #2
 80011f6:	f007 fc06 	bl	8008a06 <aci_gatt_add_char>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
                           2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8001204:	2347      	movs	r3, #71	@ 0x47
 8001206:	e0c0      	b.n	800138a <Add_HWServW2ST_Service+0x286>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001208:	231b      	movs	r3, #27
 800120a:	713b      	strb	r3, [r7, #4]
 800120c:	23c5      	movs	r3, #197	@ 0xc5
 800120e:	717b      	strb	r3, [r7, #5]
 8001210:	23d5      	movs	r3, #213	@ 0xd5
 8001212:	71bb      	strb	r3, [r7, #6]
 8001214:	23a5      	movs	r3, #165	@ 0xa5
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	2302      	movs	r3, #2
 800121a:	723b      	strb	r3, [r7, #8]
 800121c:	2300      	movs	r3, #0
 800121e:	727b      	strb	r3, [r7, #9]
 8001220:	2336      	movs	r3, #54	@ 0x36
 8001222:	72bb      	strb	r3, [r7, #10]
 8001224:	23ac      	movs	r3, #172	@ 0xac
 8001226:	72fb      	strb	r3, [r7, #11]
 8001228:	23e1      	movs	r3, #225	@ 0xe1
 800122a:	733b      	strb	r3, [r7, #12]
 800122c:	2311      	movs	r3, #17
 800122e:	737b      	strb	r3, [r7, #13]
 8001230:	2301      	movs	r3, #1
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	2300      	movs	r3, #0
 800123a:	743b      	strb	r3, [r7, #16]
 800123c:	2300      	movs	r3, #0
 800123e:	747b      	strb	r3, [r7, #17]
 8001240:	23e0      	movs	r3, #224	@ 0xe0
 8001242:	74bb      	strb	r3, [r7, #18]
 8001244:	2300      	movs	r3, #0
 8001246:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001248:	4b54      	ldr	r3, [pc, #336]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 800124a:	461c      	mov	r4, r3
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001254:	4b50      	ldr	r3, [pc, #320]	@ (8001398 <Add_HWServW2ST_Service+0x294>)
 8001256:	8818      	ldrh	r0, [r3, #0]
 8001258:	4b52      	ldr	r3, [pc, #328]	@ (80013a4 <Add_HWServW2ST_Service+0x2a0>)
 800125a:	9305      	str	r3, [sp, #20]
 800125c:	2300      	movs	r3, #0
 800125e:	9304      	str	r3, [sp, #16]
 8001260:	2310      	movs	r3, #16
 8001262:	9303      	str	r3, [sp, #12]
 8001264:	2304      	movs	r3, #4
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2300      	movs	r3, #0
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	2310      	movs	r3, #16
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2302      	movs	r3, #2
 8001272:	4a4a      	ldr	r2, [pc, #296]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 8001274:	2102      	movs	r1, #2
 8001276:	f007 fbc6 	bl	8008a06 <aci_gatt_add_char>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
                           2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8001284:	2347      	movs	r3, #71	@ 0x47
 8001286:	e080      	b.n	800138a <Add_HWServW2ST_Service+0x286>

  COPY_REMIND_INTERVAL_W2ST_CHAR_UUID(uuid);
 8001288:	2300      	movs	r3, #0
 800128a:	713b      	strb	r3, [r7, #4]
 800128c:	23c5      	movs	r3, #197	@ 0xc5
 800128e:	717b      	strb	r3, [r7, #5]
 8001290:	23d5      	movs	r3, #213	@ 0xd5
 8001292:	71bb      	strb	r3, [r7, #6]
 8001294:	23a5      	movs	r3, #165	@ 0xa5
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	2302      	movs	r3, #2
 800129a:	723b      	strb	r3, [r7, #8]
 800129c:	2300      	movs	r3, #0
 800129e:	727b      	strb	r3, [r7, #9]
 80012a0:	2336      	movs	r3, #54	@ 0x36
 80012a2:	72bb      	strb	r3, [r7, #10]
 80012a4:	23ac      	movs	r3, #172	@ 0xac
 80012a6:	72fb      	strb	r3, [r7, #11]
 80012a8:	23e1      	movs	r3, #225	@ 0xe1
 80012aa:	733b      	strb	r3, [r7, #12]
 80012ac:	2311      	movs	r3, #17
 80012ae:	737b      	strb	r3, [r7, #13]
 80012b0:	2301      	movs	r3, #1
 80012b2:	73bb      	strb	r3, [r7, #14]
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	2300      	movs	r3, #0
 80012ba:	743b      	strb	r3, [r7, #16]
 80012bc:	2300      	movs	r3, #0
 80012be:	747b      	strb	r3, [r7, #17]
 80012c0:	2300      	movs	r3, #0
 80012c2:	74bb      	strb	r3, [r7, #18]
 80012c4:	2300      	movs	r3, #0
 80012c6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 80012ca:	461c      	mov	r4, r3
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80012d4:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <Add_HWServW2ST_Service+0x294>)
 80012d6:	8818      	ldrh	r0, [r3, #0]
 80012d8:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <Add_HWServW2ST_Service+0x2a4>)
 80012da:	9305      	str	r3, [sp, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	9304      	str	r3, [sp, #16]
 80012e0:	2310      	movs	r3, #16
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	2302      	movs	r3, #2
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	2308      	movs	r3, #8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	4a2a      	ldr	r2, [pc, #168]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 80012f4:	2102      	movs	r1, #2
 80012f6:	f007 fb86 	bl	8008a06 <aci_gatt_add_char>
 80012fa:	4603      	mov	r3, r0
 80012fc:	75fb      	strb	r3, [r7, #23]
                           2,
                           CHAR_PROP_WRITE,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &RemindIntervalHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <Add_HWServW2ST_Service+0x204>
    return BLE_STATUS_ERROR;
 8001304:	2347      	movs	r3, #71	@ 0x47
 8001306:	e040      	b.n	800138a <Add_HWServW2ST_Service+0x286>

  COPY_SEND_REMIND_W2ST_CHAR_UUID(uuid);
 8001308:	2301      	movs	r3, #1
 800130a:	713b      	strb	r3, [r7, #4]
 800130c:	23c5      	movs	r3, #197	@ 0xc5
 800130e:	717b      	strb	r3, [r7, #5]
 8001310:	23d5      	movs	r3, #213	@ 0xd5
 8001312:	71bb      	strb	r3, [r7, #6]
 8001314:	23a5      	movs	r3, #165	@ 0xa5
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	2302      	movs	r3, #2
 800131a:	723b      	strb	r3, [r7, #8]
 800131c:	2300      	movs	r3, #0
 800131e:	727b      	strb	r3, [r7, #9]
 8001320:	2336      	movs	r3, #54	@ 0x36
 8001322:	72bb      	strb	r3, [r7, #10]
 8001324:	23ac      	movs	r3, #172	@ 0xac
 8001326:	72fb      	strb	r3, [r7, #11]
 8001328:	23e1      	movs	r3, #225	@ 0xe1
 800132a:	733b      	strb	r3, [r7, #12]
 800132c:	2311      	movs	r3, #17
 800132e:	737b      	strb	r3, [r7, #13]
 8001330:	2301      	movs	r3, #1
 8001332:	73bb      	strb	r3, [r7, #14]
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	2300      	movs	r3, #0
 800133a:	743b      	strb	r3, [r7, #16]
 800133c:	2300      	movs	r3, #0
 800133e:	747b      	strb	r3, [r7, #17]
 8001340:	2300      	movs	r3, #0
 8001342:	74bb      	strb	r3, [r7, #18]
 8001344:	2300      	movs	r3, #0
 8001346:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 800134a:	461c      	mov	r4, r3
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <Add_HWServW2ST_Service+0x294>)
 8001356:	8818      	ldrh	r0, [r3, #0]
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <Add_HWServW2ST_Service+0x2a8>)
 800135a:	9305      	str	r3, [sp, #20]
 800135c:	2300      	movs	r3, #0
 800135e:	9304      	str	r3, [sp, #16]
 8001360:	2310      	movs	r3, #16
 8001362:	9303      	str	r3, [sp, #12]
 8001364:	2304      	movs	r3, #4
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2300      	movs	r3, #0
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	2310      	movs	r3, #16
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2302      	movs	r3, #2
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <Add_HWServW2ST_Service+0x298>)
 8001374:	2102      	movs	r1, #2
 8001376:	f007 fb46 	bl	8008a06 <aci_gatt_add_char>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]
                           2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &SendRemindHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <Add_HWServW2ST_Service+0x284>
    return BLE_STATUS_ERROR;
 8001384:	2347      	movs	r3, #71	@ 0x47
 8001386:	e000      	b.n	800138a <Add_HWServW2ST_Service+0x286>

  return BLE_STATUS_SUCCESS;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	20000260 	.word	0x20000260
 8001398:	20000250 	.word	0x20000250
 800139c:	20000270 	.word	0x20000270
 80013a0:	20000252 	.word	0x20000252
 80013a4:	20000254 	.word	0x20000254
 80013a8:	20000256 	.word	0x20000256
 80013ac:	20000258 	.word	0x20000258

080013b0 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08d      	sub	sp, #52	@ 0x34
 80013b4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80013ba:	231b      	movs	r3, #27
 80013bc:	703b      	strb	r3, [r7, #0]
 80013be:	23c5      	movs	r3, #197	@ 0xc5
 80013c0:	707b      	strb	r3, [r7, #1]
 80013c2:	23d5      	movs	r3, #213	@ 0xd5
 80013c4:	70bb      	strb	r3, [r7, #2]
 80013c6:	23a5      	movs	r3, #165	@ 0xa5
 80013c8:	70fb      	strb	r3, [r7, #3]
 80013ca:	2302      	movs	r3, #2
 80013cc:	713b      	strb	r3, [r7, #4]
 80013ce:	2300      	movs	r3, #0
 80013d0:	717b      	strb	r3, [r7, #5]
 80013d2:	23b4      	movs	r3, #180	@ 0xb4
 80013d4:	71bb      	strb	r3, [r7, #6]
 80013d6:	239a      	movs	r3, #154	@ 0x9a
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	23e1      	movs	r3, #225	@ 0xe1
 80013dc:	723b      	strb	r3, [r7, #8]
 80013de:	2311      	movs	r3, #17
 80013e0:	727b      	strb	r3, [r7, #9]
 80013e2:	2302      	movs	r3, #2
 80013e4:	72bb      	strb	r3, [r7, #10]
 80013e6:	2300      	movs	r3, #0
 80013e8:	72fb      	strb	r3, [r7, #11]
 80013ea:	2300      	movs	r3, #0
 80013ec:	733b      	strb	r3, [r7, #12]
 80013ee:	2300      	movs	r3, #0
 80013f0:	737b      	strb	r3, [r7, #13]
 80013f2:	2300      	movs	r3, #0
 80013f4:	73bb      	strb	r3, [r7, #14]
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80013fa:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <Add_SWServW2ST_Service+0x110>)
 80013fc:	461c      	mov	r4, r3
 80013fe:	463b      	mov	r3, r7
 8001400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	0052      	lsls	r2, r2, #1
 800140e:	4413      	add	r3, r2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3301      	adds	r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4a2b      	ldr	r2, [pc, #172]	@ (80014c4 <Add_SWServW2ST_Service+0x114>)
 8001418:	9200      	str	r2, [sp, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4928      	ldr	r1, [pc, #160]	@ (80014c0 <Add_SWServW2ST_Service+0x110>)
 800141e:	2002      	movs	r0, #2
 8001420:	f007 fa68 	bl	80088f4 <aci_gatt_add_serv>
 8001424:	4603      	mov	r3, r0
 8001426:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001428:	7cfb      	ldrb	r3, [r7, #19]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d13f      	bne.n	80014ae <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 800142e:	231b      	movs	r3, #27
 8001430:	703b      	strb	r3, [r7, #0]
 8001432:	23c5      	movs	r3, #197	@ 0xc5
 8001434:	707b      	strb	r3, [r7, #1]
 8001436:	23d5      	movs	r3, #213	@ 0xd5
 8001438:	70bb      	strb	r3, [r7, #2]
 800143a:	23a5      	movs	r3, #165	@ 0xa5
 800143c:	70fb      	strb	r3, [r7, #3]
 800143e:	2302      	movs	r3, #2
 8001440:	713b      	strb	r3, [r7, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	717b      	strb	r3, [r7, #5]
 8001446:	2336      	movs	r3, #54	@ 0x36
 8001448:	71bb      	strb	r3, [r7, #6]
 800144a:	23ac      	movs	r3, #172	@ 0xac
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	23e1      	movs	r3, #225	@ 0xe1
 8001450:	723b      	strb	r3, [r7, #8]
 8001452:	2311      	movs	r3, #17
 8001454:	727b      	strb	r3, [r7, #9]
 8001456:	2301      	movs	r3, #1
 8001458:	72bb      	strb	r3, [r7, #10]
 800145a:	2300      	movs	r3, #0
 800145c:	72fb      	strb	r3, [r7, #11]
 800145e:	2300      	movs	r3, #0
 8001460:	733b      	strb	r3, [r7, #12]
 8001462:	2301      	movs	r3, #1
 8001464:	737b      	strb	r3, [r7, #13]
 8001466:	2300      	movs	r3, #0
 8001468:	73bb      	strb	r3, [r7, #14]
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800146e:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <Add_SWServW2ST_Service+0x118>)
 8001470:	461c      	mov	r4, r3
 8001472:	463b      	mov	r3, r7
 8001474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <Add_SWServW2ST_Service+0x114>)
 800147c:	8818      	ldrh	r0, [r3, #0]
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <Add_SWServW2ST_Service+0x11c>)
 8001480:	9305      	str	r3, [sp, #20]
 8001482:	2300      	movs	r3, #0
 8001484:	9304      	str	r3, [sp, #16]
 8001486:	2310      	movs	r3, #16
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	2304      	movs	r3, #4
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2300      	movs	r3, #0
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	2310      	movs	r3, #16
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2308      	movs	r3, #8
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <Add_SWServW2ST_Service+0x118>)
 800149a:	2102      	movs	r1, #2
 800149c:	f007 fab3 	bl	8008a06 <aci_gatt_add_char>
 80014a0:	4603      	mov	r3, r0
 80014a2:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80014a4:	7cfb      	ldrb	r3, [r7, #19]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e003      	b.n	80014b6 <Add_SWServW2ST_Service+0x106>
    goto fail;
 80014ae:	bf00      	nop
 80014b0:	e000      	b.n	80014b4 <Add_SWServW2ST_Service+0x104>
    goto fail;
 80014b2:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80014b4:	2347      	movs	r3, #71	@ 0x47
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000260 	.word	0x20000260
 80014c4:	2000025a 	.word	0x2000025a
 80014c8:	20000270 	.word	0x20000270
 80014cc:	2000025c 	.word	0x2000025c

080014d0 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(int waterintake)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
  tBleStatus ret;

//  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
//
//  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
  HOST_TO_LE_16(buff, waterintake);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	737b      	strb	r3, [r7, #13]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	121b      	asrs	r3, r3, #8
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <Acc_Update+0x44>)
 80014e8:	8818      	ldrh	r0, [r3, #0]
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <Acc_Update+0x48>)
 80014ec:	8819      	ldrh	r1, [r3, #0]
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2302      	movs	r3, #2
 80014f6:	2200      	movs	r2, #0
 80014f8:	f007 fb50 	bl	8008b9c <aci_gatt_update_char_value>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
				   0, 2, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <Acc_Update+0x3a>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001506:	2347      	movs	r3, #71	@ 0x47
 8001508:	e000      	b.n	800150c <Acc_Update+0x3c>
  }

  return BLE_STATUS_SUCCESS;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000250 	.word	0x20000250
 8001518:	20000254 	.word	0x20000254

0800151c <Remind_Update>:

tBleStatus Remind_Update(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af02      	add	r7, sp, #8
	uint8_t buff[2];
	tBleStatus ret;
	int reminder = 1;
 8001522:	2301      	movs	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
	HOST_TO_LE_16(buff, reminder);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	707b      	strb	r3, [r7, #1]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	121b      	asrs	r3, r3, #8
 8001530:	b2db      	uxtb	r3, r3
 8001532:	703b      	strb	r3, [r7, #0]

	ret = aci_gatt_update_char_value(HWServW2STHandle, SendRemindHandle,
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <Remind_Update+0x44>)
 8001536:	8818      	ldrh	r0, [r3, #0]
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <Remind_Update+0x48>)
 800153a:	8819      	ldrh	r1, [r3, #0]
 800153c:	463b      	mov	r3, r7
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	2200      	movs	r2, #0
 8001544:	f007 fb2a 	bl	8008b9c <aci_gatt_update_char_value>
 8001548:	4603      	mov	r3, r0
 800154a:	70fb      	strb	r3, [r7, #3]
					 0, 2, buff);
	if (ret != BLE_STATUS_SUCCESS){
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <Remind_Update+0x3a>
	    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
	    return BLE_STATUS_ERROR ;
 8001552:	2347      	movs	r3, #71	@ 0x47
 8001554:	e000      	b.n	8001558 <Remind_Update+0x3c>
	}

	return BLE_STATUS_SUCCESS;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000250 	.word	0x20000250
 8001564:	20000258 	.word	0x20000258

08001568 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800156c:	b08e      	sub	sp, #56	@ 0x38
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001574:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001576:	4b54      	ldr	r3, [pc, #336]	@ (80016c8 <Read_Request_CB+0x160>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	429a      	cmp	r2, r3
 800157e:	f000 8092 	beq.w	80016a6 <Read_Request_CB+0x13e>
  {
//    Acc_Update(&x_axes, &g_axes, &m_axes);
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001582:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001584:	4b51      	ldr	r3, [pc, #324]	@ (80016cc <Read_Request_CB+0x164>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	429a      	cmp	r2, r3
 800158c:	f040 808b 	bne.w	80016a6 <Read_Request_CB+0x13e>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001590:	f00b fbe2 	bl	800cd58 <rand>
 8001594:	4603      	mov	r3, r0
 8001596:	17da      	asrs	r2, r3, #31
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	61fa      	str	r2, [r7, #28]
 800159c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015a0:	f04f 0000 	mov.w	r0, #0
 80015a4:	f04f 0100 	mov.w	r1, #0
 80015a8:	0099      	lsls	r1, r3, #2
 80015aa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80015ae:	0090      	lsls	r0, r2, #2
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	69b9      	ldr	r1, [r7, #24]
 80015b6:	1851      	adds	r1, r2, r1
 80015b8:	6139      	str	r1, [r7, #16]
 80015ba:	69f9      	ldr	r1, [r7, #28]
 80015bc:	eb43 0101 	adc.w	r1, r3, r1
 80015c0:	6179      	str	r1, [r7, #20]
 80015c2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015ce:	f7ff fb3b 	bl	8000c48 <__aeabi_uldivmod>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7fe ffd7 	bl	800058c <__aeabi_ul2d>
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b3b      	ldr	r3, [pc, #236]	@ (80016d0 <Read_Request_CB+0x168>)
 80015e4:	f7fe fe52 	bl	800028c <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fada 	bl	8000ba8 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80015f8:	f00b fbae 	bl	800cd58 <rand>
 80015fc:	4603      	mov	r3, r0
 80015fe:	17da      	asrs	r2, r3, #31
 8001600:	4698      	mov	r8, r3
 8001602:	4691      	mov	r9, r2
 8001604:	4642      	mov	r2, r8
 8001606:	464b      	mov	r3, r9
 8001608:	1891      	adds	r1, r2, r2
 800160a:	6039      	str	r1, [r7, #0]
 800160c:	415b      	adcs	r3, r3
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001614:	eb12 0408 	adds.w	r4, r2, r8
 8001618:	eb43 0509 	adc.w	r5, r3, r9
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	016b      	lsls	r3, r5, #5
 8001626:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800162a:	0162      	lsls	r2, r4, #5
 800162c:	eb14 0a02 	adds.w	sl, r4, r2
 8001630:	eb45 0b03 	adc.w	fp, r5, r3
 8001634:	eb1a 0308 	adds.w	r3, sl, r8
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	eb4b 0309 	adc.w	r3, fp, r9
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800164c:	f7ff fafc 	bl	8000c48 <__aeabi_uldivmod>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7fe ff98 	bl	800058c <__aeabi_ul2d>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <Read_Request_CB+0x16c>)
 8001662:	f7fe fe13 	bl	800028c <__adddf3>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa9b 	bl	8000ba8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001676:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800167a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80016d8 <Read_Request_CB+0x170>
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001686:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800168a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800168e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001696:	ee17 3a90 	vmov	r3, s15
 800169a:	b21b      	sxth	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	ee16 0a90 	vmov	r0, s13
 80016a2:	f000 f845 	bl	8001730 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <Read_Request_CB+0x174>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <Read_Request_CB+0x156>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <Read_Request_CB+0x174>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f007 fb02 	bl	8008cbc <aci_gatt_allow_read>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 80016be:	bf00      	nop
 80016c0:	3738      	adds	r7, #56	@ 0x38
 80016c2:	46bd      	mov	sp, r7
 80016c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c8:	20000254 	.word	0x20000254
 80016cc:	20000252 	.word	0x20000252
 80016d0:	403b0000 	.word	0x403b0000
 80016d4:	408f4000 	.word	0x408f4000
 80016d8:	42c80000 	.word	0x42c80000
 80016dc:	20000280 	.word	0x20000280

080016e0 <Write_Request_CB>:

void Write_Request_CB(uint16_t handle, uint8_t* data)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	80fb      	strh	r3, [r7, #6]
//	PRINTF("HANDLE: %d; EXPECTED: %d\r\n", handle, QuaternionsCharHandle + 1);
	if (handle == RemindIntervalHandle + 1)
 80016ec:	88fa      	ldrh	r2, [r7, #6]
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <Write_Request_CB+0x48>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d111      	bne.n	800171c <Write_Request_CB+0x3c>
	{
//		BSP_LED_Toggle(LED2);
		uint32_t newRemindInterval = data[0] + (data[1] << 8);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
//		PRINTF("Data: %d\r\n", newDelayTime);
		if (newRemindInterval > 0)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <Write_Request_CB+0x3c>
		{
			RemindInterval = newRemindInterval * 100;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2264      	movs	r2, #100	@ 0x64
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <Write_Request_CB+0x4c>)
 800171a:	6013      	str	r3, [r2, #0]
		else
		{
			PRINTF("INVALID DATA VALUE!!!\r\n");
		}
	}
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	20000256 	.word	0x20000256
 800172c:	20000004 	.word	0x20000004

08001730 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 800173c:	f002 f8ae 	bl	800389c <HAL_GetTick>
 8001740:	4603      	mov	r3, r0
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	737b      	strb	r3, [r7, #13]
 8001748:	f002 f8a8 	bl	800389c <HAL_GetTick>
 800174c:	4603      	mov	r3, r0
 800174e:	0adb      	lsrs	r3, r3, #11
 8001750:	b2db      	uxtb	r3, r3
 8001752:	733b      	strb	r3, [r7, #12]

  HOST_TO_LE_32(buff+2,press);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	73bb      	strb	r3, [r7, #14]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	121b      	asrs	r3, r3, #8
 800175e:	b2db      	uxtb	r3, r3
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	141b      	asrs	r3, r3, #16
 8001766:	b2db      	uxtb	r3, r3
 8001768:	743b      	strb	r3, [r7, #16]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	161b      	asrs	r3, r3, #24
 800176e:	b2db      	uxtb	r3, r3
 8001770:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	74fb      	strb	r3, [r7, #19]
 8001778:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800177c:	121b      	asrs	r3, r3, #8
 800177e:	b21b      	sxth	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	74bb      	strb	r3, [r7, #18]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <BlueMS_Environmental_Update+0x84>)
 8001786:	8818      	ldrh	r0, [r3, #0]
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <BlueMS_Environmental_Update+0x88>)
 800178a:	8819      	ldrh	r1, [r3, #0]
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2308      	movs	r3, #8
 8001794:	2200      	movs	r2, #0
 8001796:	f007 fa01 	bl	8008b9c <aci_gatt_update_char_value>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80017a4:	2347      	movs	r3, #71	@ 0x47
 80017a6:	e000      	b.n	80017aa <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000250 	.word	0x20000250
 80017b8:	20000252 	.word	0x20000252

080017bc <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b092      	sub	sp, #72	@ 0x48
 80017c0:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80017c2:	4a36      	ldr	r2, [pc, #216]	@ (800189c <Set_DeviceConnectable+0xe0>)
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017cc:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80017d0:	2302      	movs	r3, #2
 80017d2:	703b      	strb	r3, [r7, #0]
 80017d4:	230a      	movs	r3, #10
 80017d6:	707b      	strb	r3, [r7, #1]
 80017d8:	2300      	movs	r3, #0
 80017da:	70bb      	strb	r3, [r7, #2]
 80017dc:	2308      	movs	r3, #8
 80017de:	70fb      	strb	r3, [r7, #3]
 80017e0:	2309      	movs	r3, #9
 80017e2:	713b      	strb	r3, [r7, #4]
 80017e4:	2342      	movs	r3, #66	@ 0x42
 80017e6:	717b      	strb	r3, [r7, #5]
 80017e8:	236c      	movs	r3, #108	@ 0x6c
 80017ea:	71bb      	strb	r3, [r7, #6]
 80017ec:	2375      	movs	r3, #117	@ 0x75
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	2365      	movs	r3, #101	@ 0x65
 80017f2:	723b      	strb	r3, [r7, #8]
 80017f4:	234e      	movs	r3, #78	@ 0x4e
 80017f6:	727b      	strb	r3, [r7, #9]
 80017f8:	2352      	movs	r3, #82	@ 0x52
 80017fa:	72bb      	strb	r3, [r7, #10]
 80017fc:	2347      	movs	r3, #71	@ 0x47
 80017fe:	72fb      	strb	r3, [r7, #11]
 8001800:	230d      	movs	r3, #13
 8001802:	733b      	strb	r3, [r7, #12]
 8001804:	23ff      	movs	r3, #255	@ 0xff
 8001806:	737b      	strb	r3, [r7, #13]
 8001808:	2301      	movs	r3, #1
 800180a:	73bb      	strb	r3, [r7, #14]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	2300      	movs	r3, #0
 8001812:	743b      	strb	r3, [r7, #16]
 8001814:	23f4      	movs	r3, #244	@ 0xf4
 8001816:	747b      	strb	r3, [r7, #17]
 8001818:	2300      	movs	r3, #0
 800181a:	74bb      	strb	r3, [r7, #18]
 800181c:	2300      	movs	r3, #0
 800181e:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <Set_DeviceConnectable+0xe4>)
 8001822:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001824:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <Set_DeviceConnectable+0xe4>)
 8001828:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 800182a:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 800182c:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <Set_DeviceConnectable+0xe4>)
 800182e:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001830:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001832:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <Set_DeviceConnectable+0xe4>)
 8001834:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8001836:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <Set_DeviceConnectable+0xe4>)
 800183a:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 800183c:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <Set_DeviceConnectable+0xe4>)
 8001840:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001842:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001844:	7cbb      	ldrb	r3, [r7, #18]
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 800184e:	2100      	movs	r1, #0
 8001850:	2000      	movs	r0, #0
 8001852:	f007 fb96 	bl	8008f82 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001856:	2300      	movs	r3, #0
 8001858:	9306      	str	r3, [sp, #24]
 800185a:	2300      	movs	r3, #0
 800185c:	9305      	str	r3, [sp, #20]
 800185e:	2300      	movs	r3, #0
 8001860:	9304      	str	r3, [sp, #16]
 8001862:	2300      	movs	r3, #0
 8001864:	9303      	str	r3, [sp, #12]
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	2308      	movs	r3, #8
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2300      	movs	r3, #0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 800187a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800187e:	2000      	movs	r0, #0
 8001880:	f006 fe83 	bl	800858a <aci_gap_set_discoverable>
 8001884:	4603      	mov	r3, r0
 8001886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800188a:	463b      	mov	r3, r7
 800188c:	4619      	mov	r1, r3
 800188e:	201a      	movs	r0, #26
 8001890:	f006 ffbc 	bl	800880c <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	@ 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	0800f7d0 	.word	0x0800f7d0
 80018a0:	20000248 	.word	0x20000248

080018a4 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	3301      	adds	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]

  if(hci_pckt->type != HCI_EVENT_PKT)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d149      	bne.n	8001952 <user_notify+0xae>
    return;

  switch(event_pckt->evt){
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2bff      	cmp	r3, #255	@ 0xff
 80018c4:	d01f      	beq.n	8001906 <user_notify+0x62>
 80018c6:	2bff      	cmp	r3, #255	@ 0xff
 80018c8:	dc48      	bgt.n	800195c <user_notify+0xb8>
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d002      	beq.n	80018d4 <user_notify+0x30>
 80018ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80018d0:	d003      	beq.n	80018da <user_notify+0x36>
 80018d2:	e043      	b.n	800195c <user_notify+0xb8>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80018d4:	f000 f846 	bl	8001964 <GAP_DisconnectionComplete_CB>
    }
    break;
 80018d8:	e040      	b.n	800195c <user_notify+0xb8>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	3302      	adds	r3, #2
 80018de:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d136      	bne.n	8001956 <user_notify+0xb2>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1d5a      	adds	r2, r3, #5
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f000 f847 	bl	8001990 <GAP_ConnectionComplete_CB>
        }
        break;
 8001902:	bf00      	nop
      }
    }
    break;
 8001904:	e027      	b.n	8001956 <user_notify+0xb2>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	3302      	adds	r3, #2
 800190a:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	f640 4201 	movw	r2, #3073	@ 0xc01
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <user_notify+0x92>
 800191a:	f640 4214 	movw	r2, #3092	@ 0xc14
 800191e:	4293      	cmp	r3, r2
 8001920:	d11b      	bne.n	800195a <user_notify+0xb6>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3302      	adds	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	885b      	ldrh	r3, [r3, #2]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe1a 	bl	8001568 <Read_Request_CB>
        }
        break;
 8001934:	e00c      	b.n	8001950 <user_notify+0xac>
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
		{
		  evt_gatt_attr_modified_IDB05A1 *pr = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3302      	adds	r3, #2
 800193a:	617b      	str	r3, [r7, #20]
		  Write_Request_CB(pr->attr_handle, pr->att_data);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	885b      	ldrh	r3, [r3, #2]
 8001940:	b29a      	uxth	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3307      	adds	r3, #7
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff fec9 	bl	80016e0 <Write_Request_CB>
	    }
	    break;
 800194e:	bf00      	nop
      }

    }
    break;
 8001950:	e003      	b.n	800195a <user_notify+0xb6>
    return;
 8001952:	bf00      	nop
 8001954:	e002      	b.n	800195c <user_notify+0xb8>
    break;
 8001956:	bf00      	nop
 8001958:	e000      	b.n	800195c <user_notify+0xb8>
    break;
 800195a:	bf00      	nop
  }
}
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <GAP_DisconnectionComplete_CB+0x20>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <GAP_DisconnectionComplete_CB+0x24>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <GAP_DisconnectionComplete_CB+0x28>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20000284 	.word	0x20000284
 8001988:	20000001 	.word	0x20000001
 800198c:	20000282 	.word	0x20000282

08001990 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <GAP_ConnectionComplete_CB+0x38>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <GAP_ConnectionComplete_CB+0x3c>)
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 80019a8:	2305      	movs	r3, #5
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e002      	b.n	80019b4 <GAP_ConnectionComplete_CB+0x24>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f9      	bne.n	80019ae <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000284 	.word	0x20000284
 80019cc:	20000280 	.word	0x20000280

080019d0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <HCI_TL_SPI_Init+0x88>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a58 <HCI_TL_SPI_Init+0x88>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <HCI_TL_SPI_Init+0x88>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80019f0:	2340      	movs	r3, #64	@ 0x40
 80019f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	4619      	mov	r1, r3
 8001a04:	4815      	ldr	r0, [pc, #84]	@ (8001a5c <HCI_TL_SPI_Init+0x8c>)
 8001a06:	f002 f9f5 	bl	8003df4 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a26:	f002 f9e5 	bl	8003df4 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <HCI_TL_SPI_Init+0x90>)
 8001a44:	f002 f9d6 	bl	8003df4 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001a48:	f001 fc62 	bl	8003310 <BSP_SPI3_Init>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48001000 	.word	0x48001000
 8001a60:	48000c00 	.word	0x48000c00

08001a64 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001a68:	2140      	movs	r1, #64	@ 0x40
 8001a6a:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <HCI_TL_SPI_DeInit+0x28>)
 8001a6c:	f002 fb6c 	bl	8004148 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001a70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a74:	4806      	ldr	r0, [pc, #24]	@ (8001a90 <HCI_TL_SPI_DeInit+0x2c>)
 8001a76:	f002 fb67 	bl	8004148 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001a7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a82:	f002 fb61 	bl	8004148 <HAL_GPIO_DeInit>
  return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	48001000 	.word	0x48001000
 8001a90:	48000c00 	.word	0x48000c00

08001a94 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a9e:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <HCI_TL_SPI_Reset+0x40>)
 8001aa0:	f002 fc5e 	bl	8004360 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aae:	f002 fc57 	bl	8004360 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f001 fefe 	bl	80038b4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac2:	f002 fc4d 	bl	8004360 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001ac6:	2005      	movs	r0, #5
 8001ac8:	f001 fef4 	bl	80038b4 <HAL_Delay>
  return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	48000c00 	.word	0x48000c00

08001ad8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001ae8:	23ff      	movs	r3, #255	@ 0xff
 8001aea:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001aec:	4a26      	ldr	r2, [pc, #152]	@ (8001b88 <HCI_TL_SPI_Receive+0xb0>)
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af6:	6018      	str	r0, [r3, #0]
 8001af8:	3304      	adds	r3, #4
 8001afa:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b02:	4822      	ldr	r0, [pc, #136]	@ (8001b8c <HCI_TL_SPI_Receive+0xb4>)
 8001b04:	f002 fc2c 	bl	8004360 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001b08:	f107 010c 	add.w	r1, r7, #12
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2205      	movs	r2, #5
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fc2c 	bl	8003370 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d129      	bne.n	8001b72 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001b1e:	7c3b      	ldrb	r3, [r7, #16]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001b2e:	8bfb      	ldrh	r3, [r7, #30]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01e      	beq.n	8001b72 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001b34:	8bfa      	ldrh	r2, [r7, #30]
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d901      	bls.n	8001b40 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	777b      	strb	r3, [r7, #29]
 8001b44:	e010      	b.n	8001b68 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001b46:	f107 011b 	add.w	r1, r7, #27
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 fc0d 	bl	8003370 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001b56:	7f7b      	ldrb	r3, [r7, #29]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	7efa      	ldrb	r2, [r7, #27]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001b62:	7f7b      	ldrb	r3, [r7, #29]
 8001b64:	3301      	adds	r3, #1
 8001b66:	777b      	strb	r3, [r7, #29]
 8001b68:	7f7b      	ldrb	r3, [r7, #29]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	8bfa      	ldrh	r2, [r7, #30]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d8e9      	bhi.n	8001b46 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <HCI_TL_SPI_Receive+0xb4>)
 8001b7a:	f002 fbf1 	bl	8004360 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001b7e:	7f7b      	ldrb	r3, [r7, #29]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	0800f7d8 	.word	0x0800f7d8
 8001b8c:	48000c00 	.word	0x48000c00

08001b90 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001b9c:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <HCI_TL_SPI_Send+0xa0>)
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba6:	6018      	str	r0, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f001 fe76 	bl	800389c <HAL_GetTick>
 8001bb0:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bbc:	481d      	ldr	r0, [pc, #116]	@ (8001c34 <HCI_TL_SPI_Send+0xa4>)
 8001bbe:	f002 fbcf 	bl	8004360 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001bc2:	f107 0108 	add.w	r1, r7, #8
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	2205      	movs	r2, #5
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fbcf 	bl	8003370 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001bd2:	7a3b      	ldrb	r3, [r7, #8]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d10f      	bne.n	8001bf8 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001bd8:	7a7b      	ldrb	r3, [r7, #9]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d806      	bhi.n	8001bf0 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4914      	ldr	r1, [pc, #80]	@ (8001c38 <HCI_TL_SPI_Send+0xa8>)
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f001 fbc1 	bl	8003370 <BSP_SPI3_SendRecv>
 8001bee:	e006      	b.n	8001bfe <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001bf0:	f06f 0301 	mvn.w	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e002      	b.n	8001bfe <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c04:	480b      	ldr	r0, [pc, #44]	@ (8001c34 <HCI_TL_SPI_Send+0xa4>)
 8001c06:	f002 fbab 	bl	8004360 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001c0a:	f001 fe47 	bl	800389c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d903      	bls.n	8001c20 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001c18:	f06f 0302 	mvn.w	r3, #2
 8001c1c:	61fb      	str	r3, [r7, #28]
      break;
 8001c1e:	e002      	b.n	8001c26 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dbc5      	blt.n	8001bb2 <HCI_TL_SPI_Send+0x22>

  return result;
 8001c26:	69fb      	ldr	r3, [r7, #28]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	0800f7e0 	.word	0x0800f7e0
 8001c34:	48000c00 	.word	0x48000c00
 8001c38:	20000290 	.word	0x20000290

08001c3c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001c40:	2140      	movs	r1, #64	@ 0x40
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <IsDataAvailable+0x1c>)
 8001c44:	f002 fb74 	bl	8004330 <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	48001000 	.word	0x48001000

08001c5c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <hci_tl_lowlevel_init+0x50>)
 8001c64:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <hci_tl_lowlevel_init+0x54>)
 8001c68:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <hci_tl_lowlevel_init+0x58>)
 8001c6c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <hci_tl_lowlevel_init+0x5c>)
 8001c70:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <hci_tl_lowlevel_init+0x60>)
 8001c74:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <hci_tl_lowlevel_init+0x64>)
 8001c78:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f007 fa9d 	bl	80091bc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001c82:	4910      	ldr	r1, [pc, #64]	@ (8001cc4 <hci_tl_lowlevel_init+0x68>)
 8001c84:	4810      	ldr	r0, [pc, #64]	@ (8001cc8 <hci_tl_lowlevel_init+0x6c>)
 8001c86:	f002 f871 	bl	8003d6c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001c8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <hci_tl_lowlevel_init+0x70>)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	480e      	ldr	r0, [pc, #56]	@ (8001cc8 <hci_tl_lowlevel_init+0x6c>)
 8001c90:	f002 f852 	bl	8003d38 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2017      	movs	r0, #23
 8001c9a:	f001 ff0a 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c9e:	2017      	movs	r0, #23
 8001ca0:	f001 ff23 	bl	8003aea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	080019d1 	.word	0x080019d1
 8001cb0:	08001a65 	.word	0x08001a65
 8001cb4:	08001b91 	.word	0x08001b91
 8001cb8:	08001ad9 	.word	0x08001ad9
 8001cbc:	08001a95 	.word	0x08001a95
 8001cc0:	080033b1 	.word	0x080033b1
 8001cc4:	16000006 	.word	0x16000006
 8001cc8:	20000288 	.word	0x20000288
 8001ccc:	08001cd1 	.word	0x08001cd1

08001cd0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001cd4:	e005      	b.n	8001ce2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f007 fbd4 	bl	8009484 <hci_notify_asynch_evt>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001ce2:	f7ff ffab 	bl	8001c3c <IsDataAvailable>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f4      	bne.n	8001cd6 <hci_tl_lowlevel_isr+0x6>
 8001cec:	e000      	b.n	8001cf0 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001cee:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf8:	f001 fd68 	bl	80037cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfc:	f000 f866 	bl	8001dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d00:	f000 f9c0 	bl	8002084 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001d04:	f000 f8c4 	bl	8001e90 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001d08:	f000 f8fa 	bl	8001f00 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001d0c:	f000 f936 	bl	8001f7c <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8001d10:	f000 f95a 	bl	8001fc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d14:	f000 f988 	bl	8002028 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8001d18:	f7ff f90e 	bl	8000f38 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8001d1c:	f001 fbea 	bl	80034f4 <BSP_GYRO_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d20:	f007 fd48 	bl	80097b4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemDrinkAction */
  SemDrinkActionHandle = osSemaphoreNew(1, 0, &SemDrinkAction_attributes);
 8001d24:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <main+0x98>)
 8001d26:	2100      	movs	r1, #0
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f007 fe3a 	bl	80099a2 <osSemaphoreNew>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <main+0x9c>)
 8001d32:	6013      	str	r3, [r2, #0]

  /* creation of SemRemind */
  SemRemindHandle = osSemaphoreNew(1, 0, &SemRemind_attributes);
 8001d34:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <main+0xa0>)
 8001d36:	2100      	movs	r1, #0
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f007 fe32 	bl	80099a2 <osSemaphoreNew>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <main+0xa4>)
 8001d42:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDataTrans */
  TaskDataTransHandle = osThreadNew(StartTaskDataTrans, NULL, &TaskDataTrans_attributes);
 8001d44:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <main+0xa8>)
 8001d46:	2100      	movs	r1, #0
 8001d48:	4815      	ldr	r0, [pc, #84]	@ (8001da0 <main+0xac>)
 8001d4a:	f007 fd7d 	bl	8009848 <osThreadNew>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <main+0xb0>)
 8001d52:	6013      	str	r3, [r2, #0]

  /* creation of TaskBLE */
  TaskBLEHandle = osThreadNew(StartTaskBLE, NULL, &TaskBLE_attributes);
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <main+0xb4>)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4814      	ldr	r0, [pc, #80]	@ (8001dac <main+0xb8>)
 8001d5a:	f007 fd75 	bl	8009848 <osThreadNew>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a13      	ldr	r2, [pc, #76]	@ (8001db0 <main+0xbc>)
 8001d62:	6013      	str	r3, [r2, #0]

  /* creation of TaskRemind */
  TaskRemindHandle = osThreadNew(StartTaskRemind, NULL, &TaskRemind_attributes);
 8001d64:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <main+0xc0>)
 8001d66:	2100      	movs	r1, #0
 8001d68:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <main+0xc4>)
 8001d6a:	f007 fd6d 	bl	8009848 <osThreadNew>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <main+0xc8>)
 8001d72:	6013      	str	r3, [r2, #0]

  /* creation of TaskGyro */
  TaskGyroHandle = osThreadNew(StartTaskGyro, NULL, &TaskGyro_attributes);
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <main+0xcc>)
 8001d76:	2100      	movs	r1, #0
 8001d78:	4812      	ldr	r0, [pc, #72]	@ (8001dc4 <main+0xd0>)
 8001d7a:	f007 fd65 	bl	8009848 <osThreadNew>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a11      	ldr	r2, [pc, #68]	@ (8001dc8 <main+0xd4>)
 8001d82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d84:	f007 fd3a 	bl	80097fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <main+0x94>
 8001d8c:	0800f928 	.word	0x0800f928
 8001d90:	20002b4c 	.word	0x20002b4c
 8001d94:	0800f938 	.word	0x0800f938
 8001d98:	20002ba0 	.word	0x20002ba0
 8001d9c:	0800f898 	.word	0x0800f898
 8001da0:	080023c9 	.word	0x080023c9
 8001da4:	200009cc 	.word	0x200009cc
 8001da8:	0800f8bc 	.word	0x0800f8bc
 8001dac:	08002405 	.word	0x08002405
 8001db0:	2000122c 	.word	0x2000122c
 8001db4:	0800f8e0 	.word	0x0800f8e0
 8001db8:	0800241d 	.word	0x0800241d
 8001dbc:	20001a8c 	.word	0x20001a8c
 8001dc0:	0800f904 	.word	0x0800f904
 8001dc4:	08002455 	.word	0x08002455
 8001dc8:	200022ec 	.word	0x200022ec

08001dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b096      	sub	sp, #88	@ 0x58
 8001dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	2244      	movs	r2, #68	@ 0x44
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00b fe5c 	bl	800da98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001dee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001df2:	f003 faad 	bl	8005350 <HAL_PWREx_ControlVoltageScaling>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001dfc:	f000 fb88 	bl	8002510 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e00:	f003 fa88 	bl	8005314 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e04:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <SystemClock_Config+0xc0>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0a:	4a20      	ldr	r2, [pc, #128]	@ (8001e8c <SystemClock_Config+0xc0>)
 8001e0c:	f023 0318 	bic.w	r3, r3, #24
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e14:	2314      	movs	r3, #20
 8001e16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e24:	2360      	movs	r3, #96	@ 0x60
 8001e26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001e34:	2328      	movs	r3, #40	@ 0x28
 8001e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fba3 	bl	8005594 <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e54:	f000 fb5c 	bl	8002510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e58:	230f      	movs	r3, #15
 8001e5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2104      	movs	r1, #4
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 ff6b 	bl	8005d4c <HAL_RCC_ClockConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e7c:	f000 fb48 	bl	8002510 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e80:	f004 fc72 	bl	8006768 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e84:	bf00      	nop
 8001e86:	3758      	adds	r7, #88	@ 0x58
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000

08001e90 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001e94:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001e96:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <MX_DFSDM1_Init+0x6c>)
 8001e98:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ebe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ec8:	2204      	movs	r2, #4
 8001eca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	@ (8001ef8 <MX_DFSDM1_Init+0x68>)
 8001ee6:	f001 fe1b 	bl	8003b20 <HAL_DFSDM_ChannelInit>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001ef0:	f000 fb0e 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000390 	.word	0x20000390
 8001efc:	40016020 	.word	0x40016020

08001f00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f06:	4a1c      	ldr	r2, [pc, #112]	@ (8001f78 <MX_I2C2_Init+0x78>)
 8001f08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f0c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001f10:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f30:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f3c:	480d      	ldr	r0, [pc, #52]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f3e:	f002 fa64 	bl	800440a <HAL_I2C_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f48:	f000 fae2 	bl	8002510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4809      	ldr	r0, [pc, #36]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f50:	f003 f816 	bl	8004f80 <HAL_I2CEx_ConfigAnalogFilter>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001f5a:	f000 fad9 	bl	8002510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_I2C2_Init+0x74>)
 8001f62:	f003 f858 	bl	8005016 <HAL_I2CEx_ConfigDigitalFilter>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001f6c:	f000 fad0 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200003c8 	.word	0x200003c8
 8001f78:	40005800 	.word	0x40005800

08001f7c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <MX_QUADSPI_Init+0x48>)
 8001f84:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001f88:	2202      	movs	r2, #2
 8001f8a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001f8e:	2204      	movs	r2, #4
 8001f90:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001f94:	2210      	movs	r2, #16
 8001f96:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001f9a:	2217      	movs	r2, #23
 8001f9c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <MX_QUADSPI_Init+0x44>)
 8001fac:	f003 fa36 	bl	800541c <HAL_QSPI_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001fb6:	f000 faab 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000041c 	.word	0x2000041c
 8001fc4:	a0001000 	.word	0xa0001000

08001fc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001fce:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <MX_USART3_UART_Init+0x5c>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <MX_USART3_UART_Init+0x58>)
 800200c:	f005 f9cc 	bl	80073a8 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002016:	f000 fa7b 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000460 	.word	0x20000460
 8002024:	40004800 	.word	0x40004800

08002028 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800202e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002032:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002036:	2206      	movs	r2, #6
 8002038:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800203c:	2202      	movs	r2, #2
 800203e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002042:	2202      	movs	r2, #2
 8002044:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800206c:	f003 f81f 	bl	80050ae <HAL_PCD_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002076:	f000 fa4b 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200004e8 	.word	0x200004e8

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800209a:	4bbd      	ldr	r3, [pc, #756]	@ (8002390 <MX_GPIO_Init+0x30c>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	4abc      	ldr	r2, [pc, #752]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a6:	4bba      	ldr	r3, [pc, #744]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4bb7      	ldr	r3, [pc, #732]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4ab6      	ldr	r2, [pc, #728]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4bb4      	ldr	r3, [pc, #720]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4bb1      	ldr	r3, [pc, #708]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4ab0      	ldr	r2, [pc, #704]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4bae      	ldr	r3, [pc, #696]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4bab      	ldr	r3, [pc, #684]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4aaa      	ldr	r2, [pc, #680]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4ba8      	ldr	r3, [pc, #672]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002390 <MX_GPIO_Init+0x30c>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	4aa4      	ldr	r2, [pc, #656]	@ (8002390 <MX_GPIO_Init+0x30c>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002106:	4ba2      	ldr	r3, [pc, #648]	@ (8002390 <MX_GPIO_Init+0x30c>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002118:	489e      	ldr	r0, [pc, #632]	@ (8002394 <MX_GPIO_Init+0x310>)
 800211a:	f002 f921 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002128:	f002 f91a 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800212c:	2200      	movs	r2, #0
 800212e:	f24b 0114 	movw	r1, #45076	@ 0xb014
 8002132:	4899      	ldr	r0, [pc, #612]	@ (8002398 <MX_GPIO_Init+0x314>)
 8002134:	f002 f914 	bl	8004360 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800213e:	4897      	ldr	r0, [pc, #604]	@ (800239c <MX_GPIO_Init+0x318>)
 8002140:	f002 f90e 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800214a:	4894      	ldr	r0, [pc, #592]	@ (800239c <MX_GPIO_Init+0x318>)
 800214c:	f002 f908 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002156:	4892      	ldr	r0, [pc, #584]	@ (80023a0 <MX_GPIO_Init+0x31c>)
 8002158:	f002 f902 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2120      	movs	r1, #32
 8002160:	488d      	ldr	r0, [pc, #564]	@ (8002398 <MX_GPIO_Init+0x314>)
 8002162:	f002 f8fd 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	2101      	movs	r1, #1
 800216a:	488a      	ldr	r0, [pc, #552]	@ (8002394 <MX_GPIO_Init+0x310>)
 800216c:	f002 f8f8 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002170:	f240 1315 	movw	r3, #277	@ 0x115
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4882      	ldr	r0, [pc, #520]	@ (8002394 <MX_GPIO_Init+0x310>)
 800218a:	f001 fe33 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800218e:	236a      	movs	r3, #106	@ 0x6a
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002192:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	487c      	ldr	r0, [pc, #496]	@ (8002394 <MX_GPIO_Init+0x310>)
 80021a4:	f001 fe26 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80021a8:	233f      	movs	r3, #63	@ 0x3f
 80021aa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021ac:	230b      	movs	r3, #11
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4879      	ldr	r0, [pc, #484]	@ (80023a0 <MX_GPIO_Init+0x31c>)
 80021bc:	f001 fe1a 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80021c0:	2303      	movs	r3, #3
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021d0:	2308      	movs	r3, #8
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021de:	f001 fe09 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80021e2:	f248 1304 	movw	r3, #33028	@ 0x8104
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fe:	f001 fdf9 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002202:	2308      	movs	r3, #8
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002212:	2301      	movs	r3, #1
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002220:	f001 fde8 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002224:	2310      	movs	r3, #16
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002228:	230b      	movs	r3, #11
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223a:	f001 fddb 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800223e:	23e0      	movs	r3, #224	@ 0xe0
 8002240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224e:	2305      	movs	r3, #5
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800225c:	f001 fdca 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002264:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4848      	ldr	r0, [pc, #288]	@ (8002398 <MX_GPIO_Init+0x314>)
 8002276:	f001 fdbd 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800227a:	2302      	movs	r3, #2
 800227c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800227e:	230b      	movs	r3, #11
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4842      	ldr	r0, [pc, #264]	@ (8002398 <MX_GPIO_Init+0x314>)
 800228e:	f001 fdb1 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002292:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002296:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	483b      	ldr	r0, [pc, #236]	@ (8002398 <MX_GPIO_Init+0x314>)
 80022ac:	f001 fda2 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80022b0:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80022b4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4835      	ldr	r0, [pc, #212]	@ (800239c <MX_GPIO_Init+0x318>)
 80022c8:	f001 fd94 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80022cc:	f243 0381 	movw	r3, #12417	@ 0x3081
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	482d      	ldr	r0, [pc, #180]	@ (800239c <MX_GPIO_Init+0x318>)
 80022e6:	f001 fd85 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80022ea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4827      	ldr	r0, [pc, #156]	@ (80023a0 <MX_GPIO_Init+0x31c>)
 8002304:	f001 fd76 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002308:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800230c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800230e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4820      	ldr	r0, [pc, #128]	@ (80023a0 <MX_GPIO_Init+0x31c>)
 8002320:	f001 fd68 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002324:	2302      	movs	r3, #2
 8002326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002334:	2305      	movs	r3, #5
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4817      	ldr	r0, [pc, #92]	@ (800239c <MX_GPIO_Init+0x318>)
 8002340:	f001 fd58 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002344:	2378      	movs	r3, #120	@ 0x78
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	480f      	ldr	r0, [pc, #60]	@ (800239c <MX_GPIO_Init+0x318>)
 8002360:	f001 fd48 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002364:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236a:	2312      	movs	r3, #18
 800236c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002376:	2304      	movs	r3, #4
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	@ (8002398 <MX_GPIO_Init+0x314>)
 8002382:	f001 fd37 	bl	8003df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2105      	movs	r1, #5
 800238a:	2017      	movs	r0, #23
 800238c:	e00a      	b.n	80023a4 <MX_GPIO_Init+0x320>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	48001000 	.word	0x48001000
 8002398:	48000400 	.word	0x48000400
 800239c:	48000c00 	.word	0x48000c00
 80023a0:	48000800 	.word	0x48000800
 80023a4:	f001 fb85 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023a8:	2017      	movs	r0, #23
 80023aa:	f001 fb9e 	bl	8003aea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2105      	movs	r1, #5
 80023b2:	2028      	movs	r0, #40	@ 0x28
 80023b4:	f001 fb7d 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023b8:	2028      	movs	r0, #40	@ 0x28
 80023ba:	f001 fb96 	bl	8003aea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	@ 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop

080023c8 <StartTaskDataTrans>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskDataTrans */
void StartTaskDataTrans(void *argument)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemDrinkActionHandle, osWaitForever);
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <StartTaskDataTrans+0x30>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	4618      	mov	r0, r3
 80023da:	f007 fb6b 	bl	8009ab4 <osSemaphoreAcquire>
	  printf("start transfer data\r\n");
 80023de:	4807      	ldr	r0, [pc, #28]	@ (80023fc <StartTaskDataTrans+0x34>)
 80023e0:	f00b fa7a 	bl	800d8d8 <puts>
	  Acc_Update(waterintake);
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <StartTaskDataTrans+0x38>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff f871 	bl	80014d0 <Acc_Update>
	  osDelay(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f007 fabc 	bl	800996c <osDelay>
  {
 80023f4:	bf00      	nop
 80023f6:	e7eb      	b.n	80023d0 <StartTaskDataTrans+0x8>
 80023f8:	20002b4c 	.word	0x20002b4c
 80023fc:	0800f834 	.word	0x0800f834
 8002400:	20002bf4 	.word	0x20002bf4

08002404 <StartTaskBLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBLE */
void StartTaskBLE(void *argument)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBLE */
  /* Infinite loop */
  for(;;)
  {
	MX_BlueNRG_MS_Process();
 800240c:	f7fe fe40 	bl	8001090 <MX_BlueNRG_MS_Process>
    osDelay(1);
 8002410:	2001      	movs	r0, #1
 8002412:	f007 faab 	bl	800996c <osDelay>
	MX_BlueNRG_MS_Process();
 8002416:	bf00      	nop
 8002418:	e7f8      	b.n	800240c <StartTaskBLE+0x8>
	...

0800241c <StartTaskRemind>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRemind */
void StartTaskRemind(void *argument)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRemind */
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	status = osSemaphoreAcquire(SemRemindHandle, RemindInterval);
 8002424:	4b09      	ldr	r3, [pc, #36]	@ (800244c <StartTaskRemind+0x30>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a09      	ldr	r2, [pc, #36]	@ (8002450 <StartTaskRemind+0x34>)
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f007 fb40 	bl	8009ab4 <osSemaphoreAcquire>
 8002434:	60f8      	str	r0, [r7, #12]
	if(status == osErrorTimeout)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f113 0f02 	cmn.w	r3, #2
 800243c:	d101      	bne.n	8002442 <StartTaskRemind+0x26>
	{
		Remind_Update();
 800243e:	f7ff f86d 	bl	800151c <Remind_Update>
	}
    osDelay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f007 fa92 	bl	800996c <osDelay>
	status = osSemaphoreAcquire(SemRemindHandle, RemindInterval);
 8002448:	e7ec      	b.n	8002424 <StartTaskRemind+0x8>
 800244a:	bf00      	nop
 800244c:	20002ba0 	.word	0x20002ba0
 8002450:	20000004 	.word	0x20000004

08002454 <StartTaskGyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGyro */
void StartTaskGyro(void *argument)
{
 8002454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002458:	b088      	sub	sp, #32
 800245a:	af04      	add	r7, sp, #16
 800245c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGyro */
  waterintake = 100;
 800245e:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <StartTaskGyro+0xa4>)
 8002460:	2264      	movs	r2, #100	@ 0x64
 8002462:	601a      	str	r2, [r3, #0]
  int counter = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	BSP_GYRO_GetXYZ(pData);
 8002468:	4824      	ldr	r0, [pc, #144]	@ (80024fc <StartTaskGyro+0xa8>)
 800246a:	f001 f885 	bl	8003578 <BSP_GYRO_GetXYZ>
	printf("start printing gyro data\r\n");
 800246e:	4824      	ldr	r0, [pc, #144]	@ (8002500 <StartTaskGyro+0xac>)
 8002470:	f00b fa32 	bl	800d8d8 <puts>
	printf("(%.2f, %.2f, %.2f)\r\n", pData[0]/1000, pData[1]/1000, pData[2]/1000);
 8002474:	4b21      	ldr	r3, [pc, #132]	@ (80024fc <StartTaskGyro+0xa8>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002504 <StartTaskGyro+0xb0>
 800247e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002482:	ee16 0a90 	vmov	r0, s13
 8002486:	f7fe f85f 	bl	8000548 <__aeabi_f2d>
 800248a:	4680      	mov	r8, r0
 800248c:	4689      	mov	r9, r1
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <StartTaskGyro+0xa8>)
 8002490:	edd3 7a01 	vldr	s15, [r3, #4]
 8002494:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002504 <StartTaskGyro+0xb0>
 8002498:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800249c:	ee16 0a90 	vmov	r0, s13
 80024a0:	f7fe f852 	bl	8000548 <__aeabi_f2d>
 80024a4:	4604      	mov	r4, r0
 80024a6:	460d      	mov	r5, r1
 80024a8:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <StartTaskGyro+0xa8>)
 80024aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80024ae:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002504 <StartTaskGyro+0xb0>
 80024b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024b6:	ee16 0a90 	vmov	r0, s13
 80024ba:	f7fe f845 	bl	8000548 <__aeabi_f2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024c6:	e9cd 4500 	strd	r4, r5, [sp]
 80024ca:	4642      	mov	r2, r8
 80024cc:	464b      	mov	r3, r9
 80024ce:	480e      	ldr	r0, [pc, #56]	@ (8002508 <StartTaskGyro+0xb4>)
 80024d0:	f00b f99a 	bl	800d808 <iprintf>
	//	  printf("%.2f\r\n", pData[1]/1000);
	// Algorithm
	counter += 1;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
	if(counter == 20){	// detect drink action
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b14      	cmp	r3, #20
 80024de:	d106      	bne.n	80024ee <StartTaskGyro+0x9a>
	  osSemaphoreRelease(SemDrinkActionHandle);
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <StartTaskGyro+0xb8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f007 fb37 	bl	8009b58 <osSemaphoreRelease>
	  counter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
	}
	osDelay(200);
 80024ee:	20c8      	movs	r0, #200	@ 0xc8
 80024f0:	f007 fa3c 	bl	800996c <osDelay>
  {
 80024f4:	e7b8      	b.n	8002468 <StartTaskGyro+0x14>
 80024f6:	bf00      	nop
 80024f8:	20002bf4 	.word	0x20002bf4
 80024fc:	20002bf8 	.word	0x20002bf8
 8002500:	0800f84c 	.word	0x0800f84c
 8002504:	447a0000 	.word	0x447a0000
 8002508:	0800f868 	.word	0x0800f868
 800250c:	20002b4c 	.word	0x20002b4c

08002510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002514:	b672      	cpsid	i
}
 8002516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <Error_Handler+0x8>

0800251c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_MspInit+0x4c>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	4a10      	ldr	r2, [pc, #64]	@ (8002568 <HAL_MspInit+0x4c>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6613      	str	r3, [r2, #96]	@ 0x60
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_MspInit+0x4c>)
 8002530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_MspInit+0x4c>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <HAL_MspInit+0x4c>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002544:	6593      	str	r3, [r2, #88]	@ 0x58
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_MspInit+0x4c>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	210f      	movs	r1, #15
 8002556:	f06f 0001 	mvn.w	r0, #1
 800255a:	f001 faaa 	bl	8003ab2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0ac      	sub	sp, #176	@ 0xb0
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2288      	movs	r2, #136	@ 0x88
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f00b fa83 	bl	800da98 <memset>
  if(DFSDM1_Init == 0)
 8002592:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d142      	bne.n	8002620 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800259a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800259e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fdf2 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80025b6:	f7ff ffab 	bl	8002510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	4a1b      	ldr	r2, [pc, #108]	@ (800262c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80025c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d2:	4b16      	ldr	r3, [pc, #88]	@ (800262c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	4a15      	ldr	r2, [pc, #84]	@ (800262c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025de:	4b13      	ldr	r3, [pc, #76]	@ (800262c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80025ea:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80025ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002604:	2306      	movs	r3, #6
 8002606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800260a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002612:	f001 fbef 	bl	8003df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002616:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	4a02      	ldr	r2, [pc, #8]	@ (8002628 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800261e:	6013      	str	r3, [r2, #0]
  }

}
 8002620:	bf00      	nop
 8002622:	37b0      	adds	r7, #176	@ 0xb0
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20002c04 	.word	0x20002c04
 800262c:	40021000 	.word	0x40021000
 8002630:	48001000 	.word	0x48001000

08002634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0ac      	sub	sp, #176	@ 0xb0
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2288      	movs	r2, #136	@ 0x88
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f00b fa1f 	bl	800da98 <memset>
  if(hi2c->Instance==I2C2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a21      	ldr	r2, [pc, #132]	@ (80026e4 <HAL_I2C_MspInit+0xb0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d13b      	bne.n	80026dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002668:	2300      	movs	r3, #0
 800266a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fd8f 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800267c:	f7ff ff48 	bl	8002510 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <HAL_I2C_MspInit+0xb4>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002684:	4a18      	ldr	r2, [pc, #96]	@ (80026e8 <HAL_I2C_MspInit+0xb4>)
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268c:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <HAL_I2C_MspInit+0xb4>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002698:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800269c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a0:	2312      	movs	r3, #18
 80026a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026b2:	2304      	movs	r3, #4
 80026b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026bc:	4619      	mov	r1, r3
 80026be:	480b      	ldr	r0, [pc, #44]	@ (80026ec <HAL_I2C_MspInit+0xb8>)
 80026c0:	f001 fb98 	bl	8003df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_I2C_MspInit+0xb4>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <HAL_I2C_MspInit+0xb4>)
 80026ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_I2C_MspInit+0xb4>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80026dc:	bf00      	nop
 80026de:	37b0      	adds	r7, #176	@ 0xb0
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40005800 	.word	0x40005800
 80026e8:	40021000 	.word	0x40021000
 80026ec:	48000400 	.word	0x48000400

080026f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	@ (800272c <HAL_I2C_MspDeInit+0x3c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10f      	bne.n	8002722 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002702:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_I2C_MspDeInit+0x40>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <HAL_I2C_MspDeInit+0x40>)
 8002708:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800270c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800270e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002712:	4808      	ldr	r0, [pc, #32]	@ (8002734 <HAL_I2C_MspDeInit+0x44>)
 8002714:	f001 fd18 	bl	8004148 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002718:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800271c:	4805      	ldr	r0, [pc, #20]	@ (8002734 <HAL_I2C_MspDeInit+0x44>)
 800271e:	f001 fd13 	bl	8004148 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40005800 	.word	0x40005800
 8002730:	40021000 	.word	0x40021000
 8002734:	48000400 	.word	0x48000400

08002738 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	@ 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_QSPI_MspInit+0x7c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d128      	bne.n	80027ac <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800275a:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_QSPI_MspInit+0x80>)
 800275c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275e:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <HAL_QSPI_MspInit+0x80>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002764:	6513      	str	r3, [r2, #80]	@ 0x50
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_QSPI_MspInit+0x80>)
 8002768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <HAL_QSPI_MspInit+0x80>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	4a10      	ldr	r2, [pc, #64]	@ (80027b8 <HAL_QSPI_MspInit+0x80>)
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <HAL_QSPI_MspInit+0x80>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800278a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800278e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800279c:	230a      	movs	r3, #10
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <HAL_QSPI_MspInit+0x84>)
 80027a8:	f001 fb24 	bl	8003df4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	@ 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	a0001000 	.word	0xa0001000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48001000 	.word	0x48001000

080027c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ac      	sub	sp, #176	@ 0xb0
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2288      	movs	r2, #136	@ 0x88
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f00b f959 	bl	800da98 <memset>
  if(huart->Instance==USART3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a21      	ldr	r2, [pc, #132]	@ (8002870 <HAL_UART_MspInit+0xb0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d13b      	bne.n	8002868 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027f0:	2304      	movs	r3, #4
 80027f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fcc9 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002808:	f7ff fe82 	bl	8002510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_UART_MspInit+0xb4>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002810:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <HAL_UART_MspInit+0xb4>)
 8002812:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002816:	6593      	str	r3, [r2, #88]	@ 0x58
 8002818:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_UART_MspInit+0xb4>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002824:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HAL_UART_MspInit+0xb4>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002828:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <HAL_UART_MspInit+0xb4>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002830:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_UART_MspInit+0xb4>)
 8002832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800283c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002856:	2307      	movs	r3, #7
 8002858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002860:	4619      	mov	r1, r3
 8002862:	4805      	ldr	r0, [pc, #20]	@ (8002878 <HAL_UART_MspInit+0xb8>)
 8002864:	f001 fac6 	bl	8003df4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002868:	bf00      	nop
 800286a:	37b0      	adds	r7, #176	@ 0xb0
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40004800 	.word	0x40004800
 8002874:	40021000 	.word	0x40021000
 8002878:	48000c00 	.word	0x48000c00

0800287c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0ac      	sub	sp, #176	@ 0xb0
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2288      	movs	r2, #136	@ 0x88
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f00b f8fb 	bl	800da98 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028aa:	d17c      	bne.n	80029a6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80028ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80028b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80028c2:	2318      	movs	r3, #24
 80028c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028c6:	2307      	movs	r3, #7
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028ca:	2302      	movs	r3, #2
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028ce:	2302      	movs	r3, #2
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80028d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 fc59 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80028e8:	f7ff fe12 	bl	8002510 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b30      	ldr	r3, [pc, #192]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	4a2f      	ldr	r2, [pc, #188]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 80028fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002922:	f001 fa67 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002926:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800292a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002940:	230a      	movs	r3, #10
 8002942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800294a:	4619      	mov	r1, r3
 800294c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002950:	f001 fa50 	bl	8003df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002954:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002958:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 800295a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800295e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002960:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d114      	bne.n	80029a2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297c:	4a0c      	ldr	r2, [pc, #48]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	@ 0x58
 8002984:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002990:	f002 fd34 	bl	80053fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	4a05      	ldr	r2, [pc, #20]	@ (80029b0 <HAL_PCD_MspInit+0x134>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80029a0:	e001      	b.n	80029a6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80029a2:	f002 fd2b 	bl	80053fc <HAL_PWREx_EnableVddUSB>
}
 80029a6:	bf00      	nop
 80029a8:	37b0      	adds	r7, #176	@ 0xb0
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <NMI_Handler+0x4>

080029bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <MemManage_Handler+0x4>

080029cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <UsageFault_Handler+0x4>

080029dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ee:	f000 ff41 	bl	8003874 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80029f2:	f009 f833 	bl	800ba5c <xTaskGetSchedulerState>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80029fc:	f009 ff2c 	bl	800c858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002a08:	2020      	movs	r0, #32
 8002a0a:	f001 fcdb 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002a0e:	4806      	ldr	r0, [pc, #24]	@ (8002a28 <EXTI9_5_IRQHandler+0x24>)
 8002a10:	f001 f9c0 	bl	8003d94 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002a14:	2080      	movs	r0, #128	@ 0x80
 8002a16:	f001 fcd5 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002a1a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a1e:	f001 fcd1 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000288 	.word	0x20000288

08002a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002a30:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002a34:	f001 fcc6 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002a38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a3c:	f001 fcc2 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002a40:	4806      	ldr	r0, [pc, #24]	@ (8002a5c <EXTI15_10_IRQHandler+0x30>)
 8002a42:	f001 f9a7 	bl	8003d94 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002a46:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a4a:	f001 fcbb 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002a4e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002a52:	f001 fcb7 	bl	80043c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000014 	.word	0x20000014

08002a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return 1;
 8002a64:	2301      	movs	r3, #1
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_kill>:

int _kill(int pid, int sig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a7a:	f00b f85f 	bl	800db3c <__errno>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2216      	movs	r2, #22
 8002a82:	601a      	str	r2, [r3, #0]
  return -1;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_exit>:

void _exit (int status)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ffe7 	bl	8002a70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aa2:	bf00      	nop
 8002aa4:	e7fd      	b.n	8002aa2 <_exit+0x12>

08002aa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e00a      	b.n	8002ace <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ab8:	f3af 8000 	nop.w
 8002abc:	4601      	mov	r1, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	60ba      	str	r2, [r7, #8]
 8002ac4:	b2ca      	uxtb	r2, r1
 8002ac6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dbf0      	blt.n	8002ab8 <_read+0x12>
  }

  return len;
 8002ad6:	687b      	ldr	r3, [r7, #4]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e009      	b.n	8002b06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	60ba      	str	r2, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fb8e 	bl	800321c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3301      	adds	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dbf1      	blt.n	8002af2 <_write+0x12>
  }
  return len;
 8002b0e:	687b      	ldr	r3, [r7, #4]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_close>:

int _close(int file)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b40:	605a      	str	r2, [r3, #4]
  return 0;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <_isatty>:

int _isatty(int file)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b58:	2301      	movs	r3, #1
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	@ (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f00a ffc4 	bl	800db3c <__errno>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	@ (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20018000 	.word	0x20018000
 8002be0:	00000400 	.word	0x00000400
 8002be4:	20002c08 	.word	0x20002c08
 8002be8:	20004ac0 	.word	0x20004ac0

08002bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <SystemInit+0x20>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf6:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <SystemInit+0x20>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c14:	f7ff ffea 	bl	8002bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c18:	480c      	ldr	r0, [pc, #48]	@ (8002c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c1a:	490d      	ldr	r1, [pc, #52]	@ (8002c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c54 <LoopForever+0xe>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c20:	e002      	b.n	8002c28 <LoopCopyDataInit>

08002c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c26:	3304      	adds	r3, #4

08002c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c2c:	d3f9      	bcc.n	8002c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c30:	4c0a      	ldr	r4, [pc, #40]	@ (8002c5c <LoopForever+0x16>)
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c34:	e001      	b.n	8002c3a <LoopFillZerobss>

08002c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c38:	3204      	adds	r2, #4

08002c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c3c:	d3fb      	bcc.n	8002c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f00a ff83 	bl	800db48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c42:	f7ff f857 	bl	8001cf4 <main>

08002c46 <LoopForever>:

LoopForever:
    b LoopForever
 8002c46:	e7fe      	b.n	8002c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c50:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002c54:	0800fd7c 	.word	0x0800fd7c
  ldr r2, =_sbss
 8002c58:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002c5c:	20004ac0 	.word	0x20004ac0

08002c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC1_2_IRQHandler>
	...

08002c64 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <BSP_LED_Init+0x20>)
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	0800f990 	.word	0x0800f990

08002c88 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4a06      	ldr	r2, [pc, #24]	@ (8002cb0 <BSP_LED_Toggle+0x28>)
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fb75 	bl	8004390 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <LED_USER_GPIO_Init+0x78>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002d2c <LED_USER_GPIO_Init+0x78>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cc6:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <LED_USER_GPIO_Init+0x78>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <LED_USER_GPIO_Init+0x78>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce6:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <LED_USER_GPIO_Init+0x78>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cee:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <LED_USER_GPIO_Init+0x78>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d00:	480b      	ldr	r0, [pc, #44]	@ (8002d30 <LED_USER_GPIO_Init+0x7c>)
 8002d02:	f001 fb2d 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002d06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002d18:	f107 030c 	add.w	r3, r7, #12
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4804      	ldr	r0, [pc, #16]	@ (8002d30 <LED_USER_GPIO_Init+0x7c>)
 8002d20:	f001 f868 	bl	8003df4 <HAL_GPIO_Init>

}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	48000400 	.word	0x48000400

08002d34 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	71fb      	strb	r3, [r7, #7]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc8 <BSP_PB_Init+0x94>)
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002d52:	79bb      	ldrb	r3, [r7, #6]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d132      	bne.n	8002dbe <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dcc <BSP_PB_Init+0x98>)
 8002d5e:	441a      	add	r2, r3
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	491b      	ldr	r1, [pc, #108]	@ (8002dd0 <BSP_PB_Init+0x9c>)
 8002d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fffe 	bl	8003d6c <HAL_EXTI_GetHandle>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002d76:	f06f 0303 	mvn.w	r3, #3
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e01f      	b.n	8002dbe <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <BSP_PB_Init+0x98>)
 8002d84:	1898      	adds	r0, r3, r2
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	4a12      	ldr	r2, [pc, #72]	@ (8002dd4 <BSP_PB_Init+0xa0>)
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2100      	movs	r1, #0
 8002d92:	f000 ffd1 	bl	8003d38 <HAL_EXTI_RegisterCallback>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002d9c:	f06f 0303 	mvn.w	r3, #3
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e00c      	b.n	8002dbe <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002da4:	2028      	movs	r0, #40	@ 0x28
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd8 <BSP_PB_Init+0xa4>)
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	2200      	movs	r2, #0
 8002db0:	4619      	mov	r1, r3
 8002db2:	f000 fe7e 	bl	8003ab2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002db6:	2328      	movs	r3, #40	@ 0x28
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fe96 	bl	8003aea <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	0800f994 	.word	0x0800f994
 8002dcc:	20000014 	.word	0x20000014
 8002dd0:	0800f998 	.word	0x0800f998
 8002dd4:	0800f99c 	.word	0x0800f99c
 8002dd8:	0800f9a0 	.word	0x0800f9a0

08002ddc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4a09      	ldr	r2, [pc, #36]	@ (8002e10 <BSP_PB_GetState+0x34>)
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fa9b 	bl	8004330 <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000010 	.word	0x20000010

08002e14 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fe f963 	bl	80010e4 <BSP_PB_Callback>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2a:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	4a18      	ldr	r2, [pc, #96]	@ (8002e90 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e36:	4b16      	ldr	r3, [pc, #88]	@ (8002e90 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e42:	f107 030c 	add.w	r3, r7, #12
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e56:	4a0e      	ldr	r2, [pc, #56]	@ (8002e90 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e70:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002e7a:	f107 030c 	add.w	r3, r7, #12
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4804      	ldr	r0, [pc, #16]	@ (8002e94 <BUTTON_USER_GPIO_Init+0x70>)
 8002e82:	f000 ffb7 	bl	8003df4 <HAL_GPIO_Init>

}
 8002e86:	bf00      	nop
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	48000800 	.word	0x48000800

08002e98 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d903      	bls.n	8002eb4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002eac:	f06f 0301 	mvn.w	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e025      	b.n	8002f00 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	79fa      	ldrb	r2, [r7, #7]
 8002eb8:	4914      	ldr	r1, [pc, #80]	@ (8002f0c <BSP_COM_Init+0x74>)
 8002eba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002ebe:	4814      	ldr	r0, [pc, #80]	@ (8002f10 <BSP_COM_Init+0x78>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4403      	add	r3, r0
 8002eca:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002ecc:	79fa      	ldrb	r2, [r7, #7]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f10 <BSP_COM_Init+0x78>)
 8002ed8:	4413      	add	r3, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f9ba 	bl	8003254 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002ee0:	79fa      	ldrb	r2, [r7, #7]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4a09      	ldr	r2, [pc, #36]	@ (8002f10 <BSP_COM_Init+0x78>)
 8002eec:	4413      	add	r3, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f960 	bl	80031b4 <MX_USART1_UART_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002efa:	f06f 0303 	mvn.w	r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000001c 	.word	0x2000001c
 8002f10:	20002c0c 	.word	0x20002c0c

08002f14 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f1c:	4b27      	ldr	r3, [pc, #156]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f20:	4a26      	ldr	r2, [pc, #152]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f28:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002f34:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f38:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f3a:	2312      	movs	r3, #18
 8002f3c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002f46:	2304      	movs	r3, #4
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	481b      	ldr	r0, [pc, #108]	@ (8002fc0 <I2Cx_MspInit+0xac>)
 8002f52:	f000 ff4f 	bl	8003df4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4818      	ldr	r0, [pc, #96]	@ (8002fc0 <I2Cx_MspInit+0xac>)
 8002f5e:	f000 ff49 	bl	8003df4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002f62:	4b16      	ldr	r3, [pc, #88]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f66:	4a15      	ldr	r2, [pc, #84]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f6e:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002f7a:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f84:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002f86:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002fbc <I2Cx_MspInit+0xa8>)
 8002f8c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f90:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	210f      	movs	r1, #15
 8002f96:	2021      	movs	r0, #33	@ 0x21
 8002f98:	f000 fd8b 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f9c:	2021      	movs	r0, #33	@ 0x21
 8002f9e:	f000 fda4 	bl	8003aea <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	2022      	movs	r0, #34	@ 0x22
 8002fa8:	f000 fd83 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002fac:	2022      	movs	r0, #34	@ 0x22
 8002fae:	f000 fd9c 	bl	8003aea <HAL_NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	@ 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	48000400 	.word	0x48000400

08002fc4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a12      	ldr	r2, [pc, #72]	@ (8003018 <I2Cx_Init+0x54>)
 8002fd0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a11      	ldr	r2, [pc, #68]	@ (800301c <I2Cx_Init+0x58>)
 8002fd6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff89 	bl	8002f14 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f001 fa01 	bl	800440a <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8003008:	2100      	movs	r1, #0
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f001 ffb8 	bl	8004f80 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40005800 	.word	0x40005800
 800301c:	00702681 	.word	0x00702681

08003020 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	@ 0x28
 8003024:	af04      	add	r7, sp, #16
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	72fb      	strb	r3, [r7, #11]
 8003032:	460b      	mov	r3, r1
 8003034:	813b      	strh	r3, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	b299      	uxth	r1, r3
 8003042:	88f8      	ldrh	r0, [r7, #6]
 8003044:	893a      	ldrh	r2, [r7, #8]
 8003046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	4603      	mov	r3, r0
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f001 fbb6 	bl	80047c8 <HAL_I2C_Mem_Read>
 800305c:	4603      	mov	r3, r0
 800305e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003066:	7afb      	ldrb	r3, [r7, #11]
 8003068:	4619      	mov	r1, r3
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f832 	bl	80030d4 <I2Cx_Error>
  }
  return status;
 8003070:	7dfb      	ldrb	r3, [r7, #23]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b08a      	sub	sp, #40	@ 0x28
 800307e:	af04      	add	r7, sp, #16
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	4608      	mov	r0, r1
 8003084:	4611      	mov	r1, r2
 8003086:	461a      	mov	r2, r3
 8003088:	4603      	mov	r3, r0
 800308a:	72fb      	strb	r3, [r7, #11]
 800308c:	460b      	mov	r3, r1
 800308e:	813b      	strh	r3, [r7, #8]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	b299      	uxth	r1, r3
 800309c:	88f8      	ldrh	r0, [r7, #6]
 800309e:	893a      	ldrh	r2, [r7, #8]
 80030a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4603      	mov	r3, r0
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f001 fa75 	bl	80045a0 <HAL_I2C_Mem_Write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80030c0:	7afb      	ldrb	r3, [r7, #11]
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f805 	bl	80030d4 <I2Cx_Error>
  }
  return status;
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 fa2d 	bl	8004540 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff ff6c 	bl	8002fc4 <I2Cx_Init>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80030f8:	4802      	ldr	r0, [pc, #8]	@ (8003104 <SENSOR_IO_Init+0x10>)
 80030fa:	f7ff ff63 	bl	8002fc4 <I2Cx_Init>
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20002c98 	.word	0x20002c98

08003108 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af02      	add	r7, sp, #8
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
 8003112:	460b      	mov	r3, r1
 8003114:	71bb      	strb	r3, [r7, #6]
 8003116:	4613      	mov	r3, r2
 8003118:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800311a:	79bb      	ldrb	r3, [r7, #6]
 800311c:	b29a      	uxth	r2, r3
 800311e:	79f9      	ldrb	r1, [r7, #7]
 8003120:	2301      	movs	r3, #1
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	1d7b      	adds	r3, r7, #5
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2301      	movs	r3, #1
 800312a:	4803      	ldr	r0, [pc, #12]	@ (8003138 <SENSOR_IO_Write+0x30>)
 800312c:	f7ff ffa5 	bl	800307a <I2Cx_WriteMultiple>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20002c98 	.word	0x20002c98

0800313c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	71fb      	strb	r3, [r7, #7]
 8003148:	4613      	mov	r3, r2
 800314a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003150:	79bb      	ldrb	r3, [r7, #6]
 8003152:	b29a      	uxth	r2, r3
 8003154:	79f9      	ldrb	r1, [r7, #7]
 8003156:	2301      	movs	r3, #1
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	f107 030f 	add.w	r3, r7, #15
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2301      	movs	r3, #1
 8003162:	4804      	ldr	r0, [pc, #16]	@ (8003174 <SENSOR_IO_Read+0x38>)
 8003164:	f7ff ff5c 	bl	8003020 <I2Cx_ReadMultiple>

  return read_value;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20002c98 	.word	0x20002c98

08003178 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af02      	add	r7, sp, #8
 800317e:	603a      	str	r2, [r7, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	460b      	mov	r3, r1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800318e:	79bb      	ldrb	r3, [r7, #6]
 8003190:	b29a      	uxth	r2, r3
 8003192:	79f9      	ldrb	r1, [r7, #7]
 8003194:	88bb      	ldrh	r3, [r7, #4]
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2301      	movs	r3, #1
 800319e:	4804      	ldr	r0, [pc, #16]	@ (80031b0 <SENSOR_IO_ReadMultiple+0x38>)
 80031a0:	f7ff ff3e 	bl	8003020 <I2Cx_ReadMultiple>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20002c98 	.word	0x20002c98

080031b4 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a15      	ldr	r2, [pc, #84]	@ (8003218 <MX_USART1_UART_Init+0x64>)
 80031c4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031cc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	220c      	movs	r2, #12
 80031e4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f004 f8d2 	bl	80073a8 <HAL_UART_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40013800 	.word	0x40013800

0800321c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <__io_putchar+0x30>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4a07      	ldr	r2, [pc, #28]	@ (8003250 <__io_putchar+0x34>)
 8003234:	1898      	adds	r0, r3, r2
 8003236:	1d39      	adds	r1, r7, #4
 8003238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800323c:	2201      	movs	r2, #1
 800323e:	f004 f901 	bl	8007444 <HAL_UART_Transmit>
  return ch;
 8003242:	687b      	ldr	r3, [r7, #4]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20002c94 	.word	0x20002c94
 8003250:	20002c0c 	.word	0x20002c0c

08003254 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b0ac      	sub	sp, #176	@ 0xb0
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2288      	movs	r2, #136	@ 0x88
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f00a fc17 	bl	800da98 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800326a:	2301      	movs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800326e:	2300      	movs	r3, #0
 8003270:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4618      	mov	r0, r3
 8003278:	f002 ff8c 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <USART1_MspInit+0xb4>)
 800327e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003280:	4a21      	ldr	r2, [pc, #132]	@ (8003308 <USART1_MspInit+0xb4>)
 8003282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003286:	6613      	str	r3, [r2, #96]	@ 0x60
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <USART1_MspInit+0xb4>)
 800328a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <USART1_MspInit+0xb4>)
 8003296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003298:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <USART1_MspInit+0xb4>)
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <USART1_MspInit+0xb4>)
 80032a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80032ac:	2340      	movs	r3, #64	@ 0x40
 80032ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80032c4:	2307      	movs	r3, #7
 80032c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80032ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032ce:	4619      	mov	r1, r3
 80032d0:	480e      	ldr	r0, [pc, #56]	@ (800330c <USART1_MspInit+0xb8>)
 80032d2:	f000 fd8f 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80032ee:	2307      	movs	r3, #7
 80032f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80032f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80032f8:	4619      	mov	r1, r3
 80032fa:	4804      	ldr	r0, [pc, #16]	@ (800330c <USART1_MspInit+0xb8>)
 80032fc:	f000 fd7a 	bl	8003df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003300:	bf00      	nop
 8003302:	37b0      	adds	r7, #176	@ 0xb0
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	48000400 	.word	0x48000400

08003310 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800331a:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <BSP_SPI3_Init+0x54>)
 800331c:	4a12      	ldr	r2, [pc, #72]	@ (8003368 <BSP_SPI3_Init+0x58>)
 800331e:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003320:	4b12      	ldr	r3, [pc, #72]	@ (800336c <BSP_SPI3_Init+0x5c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	4911      	ldr	r1, [pc, #68]	@ (800336c <BSP_SPI3_Init+0x5c>)
 8003328:	600a      	str	r2, [r1, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d114      	bne.n	8003358 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800332e:	480d      	ldr	r0, [pc, #52]	@ (8003364 <BSP_SPI3_Init+0x54>)
 8003330:	f003 fec8 	bl	80070c4 <HAL_SPI_GetState>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10e      	bne.n	8003358 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 800333a:	480a      	ldr	r0, [pc, #40]	@ (8003364 <BSP_SPI3_Init+0x54>)
 800333c:	f000 f882 	bl	8003444 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8003346:	4807      	ldr	r0, [pc, #28]	@ (8003364 <BSP_SPI3_Init+0x54>)
 8003348:	f000 f83a 	bl	80033c0 <MX_SPI3_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003352:	f06f 0307 	mvn.w	r3, #7
 8003356:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20002cec 	.word	0x20002cec
 8003368:	40003c00 	.word	0x40003c00
 800336c:	20002d50 	.word	0x20002d50

08003370 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003388:	9200      	str	r2, [sp, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	4807      	ldr	r0, [pc, #28]	@ (80033ac <BSP_SPI3_SendRecv+0x3c>)
 8003390:	f003 fc79 	bl	8006c86 <HAL_SPI_TransmitReceive>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800339a:	f06f 0305 	mvn.w	r3, #5
 800339e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80033a0:	697b      	ldr	r3, [r7, #20]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20002cec 	.word	0x20002cec

080033b0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80033b4:	f000 fa72 	bl	800389c <HAL_GetTick>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003440 <MX_SPI3_Init+0x80>)
 80033d0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033d8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80033e6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033fa:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2207      	movs	r2, #7
 8003418:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2208      	movs	r2, #8
 8003424:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f003 fb80 	bl	8006b2c <HAL_SPI_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40003c00 	.word	0x40003c00

08003444 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <SPI3_MspInit+0xa8>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	4a26      	ldr	r2, [pc, #152]	@ (80034ec <SPI3_MspInit+0xa8>)
 8003452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003456:	6593      	str	r3, [r2, #88]	@ 0x58
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <SPI3_MspInit+0xa8>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003464:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <SPI3_MspInit+0xa8>)
 8003466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003468:	4a20      	ldr	r2, [pc, #128]	@ (80034ec <SPI3_MspInit+0xa8>)
 800346a:	f043 0304 	orr.w	r3, r3, #4
 800346e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003470:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <SPI3_MspInit+0xa8>)
 8003472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 800347c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348a:	2303      	movs	r3, #3
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800348e:	2306      	movs	r3, #6
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	4815      	ldr	r0, [pc, #84]	@ (80034f0 <SPI3_MspInit+0xac>)
 800349a:	f000 fcab 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800349e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80034b0:	2306      	movs	r3, #6
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4619      	mov	r1, r3
 80034ba:	480d      	ldr	r0, [pc, #52]	@ (80034f0 <SPI3_MspInit+0xac>)
 80034bc:	f000 fc9a 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80034c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80034d2:	2306      	movs	r3, #6
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4804      	ldr	r0, [pc, #16]	@ (80034f0 <SPI3_MspInit+0xac>)
 80034de:	f000 fc89 	bl	8003df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	@ 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	48000800 	.word	0x48000800

080034f4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80034fe:	2300      	movs	r3, #0
 8003500:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003502:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <BSP_GYRO_Init+0x7c>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4798      	blx	r3
 8003508:	4603      	mov	r3, r0
 800350a:	2b6a      	cmp	r3, #106	@ 0x6a
 800350c:	d002      	beq.n	8003514 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e028      	b.n	8003566 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003514:	4b17      	ldr	r3, [pc, #92]	@ (8003574 <BSP_GYRO_Init+0x80>)
 8003516:	4a16      	ldr	r2, [pc, #88]	@ (8003570 <BSP_GYRO_Init+0x7c>)
 8003518:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800351e:	2330      	movs	r3, #48	@ 0x30
 8003520:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800352a:	2340      	movs	r3, #64	@ 0x40
 800352c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8003532:	230c      	movs	r3, #12
 8003534:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8003536:	7aba      	ldrb	r2, [r7, #10]
 8003538:	797b      	ldrb	r3, [r7, #5]
 800353a:	4313      	orrs	r3, r2
 800353c:	b2db      	uxtb	r3, r3
 800353e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003540:	7a3b      	ldrb	r3, [r7, #8]
 8003542:	f043 0304 	orr.w	r3, r3, #4
 8003546:	b2db      	uxtb	r3, r3
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b21a      	sxth	r2, r3
 800354c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	b21b      	sxth	r3, r3
 8003554:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <BSP_GYRO_Init+0x80>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	89ba      	ldrh	r2, [r7, #12]
 800355e:	4610      	mov	r0, r2
 8003560:	4798      	blx	r3
    
    ret = GYRO_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000020 	.word	0x20000020
 8003574:	20002d54 	.word	0x20002d54

08003578 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8003580:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <BSP_GYRO_GetXYZ+0x2c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003588:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <BSP_GYRO_GetXYZ+0x2c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8003592:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <BSP_GYRO_GetXYZ+0x2c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
    }
  }
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20002d54 	.word	0x20002d54

080035a8 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80035b6:	2111      	movs	r1, #17
 80035b8:	20d4      	movs	r0, #212	@ 0xd4
 80035ba:	f7ff fdbf 	bl	800313c <SENSOR_IO_Read>
 80035be:	4603      	mov	r3, r0
 80035c0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80035c6:	7bbb      	ldrb	r3, [r7, #14]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80035ce:	7bba      	ldrb	r2, [r7, #14]
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80035d6:	7bbb      	ldrb	r3, [r7, #14]
 80035d8:	461a      	mov	r2, r3
 80035da:	2111      	movs	r1, #17
 80035dc:	20d4      	movs	r0, #212	@ 0xd4
 80035de:	f7ff fd93 	bl	8003108 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80035e2:	2112      	movs	r1, #18
 80035e4:	20d4      	movs	r0, #212	@ 0xd4
 80035e6:	f7ff fda9 	bl	800313c <SENSOR_IO_Read>
 80035ea:	4603      	mov	r3, r0
 80035ec:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80035f6:	7bbb      	ldrb	r3, [r7, #14]
 80035f8:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80035fc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80035fe:	7bba      	ldrb	r2, [r7, #14]
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	4313      	orrs	r3, r2
 8003604:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003606:	7bbb      	ldrb	r3, [r7, #14]
 8003608:	461a      	mov	r2, r3
 800360a:	2112      	movs	r1, #18
 800360c:	20d4      	movs	r0, #212	@ 0xd4
 800360e:	f7ff fd7b 	bl	8003108 <SENSOR_IO_Write>
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003620:	2300      	movs	r3, #0
 8003622:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003624:	2111      	movs	r1, #17
 8003626:	20d4      	movs	r0, #212	@ 0xd4
 8003628:	f7ff fd88 	bl	800313c <SENSOR_IO_Read>
 800362c:	4603      	mov	r3, r0
 800362e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	461a      	mov	r2, r3
 800363c:	2111      	movs	r1, #17
 800363e:	20d4      	movs	r0, #212	@ 0xd4
 8003640:	f7ff fd62 	bl	8003108 <SENSOR_IO_Write>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003650:	f7ff fd50 	bl	80030f4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003654:	210f      	movs	r1, #15
 8003656:	20d4      	movs	r0, #212	@ 0xd4
 8003658:	f7ff fd70 	bl	800313c <SENSOR_IO_Read>
 800365c:	4603      	mov	r3, r0
}
 800365e:	4618      	mov	r0, r3
 8003660:	bd80      	pop	{r7, pc}

08003662 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003670:	2116      	movs	r1, #22
 8003672:	20d4      	movs	r0, #212	@ 0xd4
 8003674:	f7ff fd62 	bl	800313c <SENSOR_IO_Read>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003682:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003690:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	461a      	mov	r2, r3
 8003696:	2116      	movs	r1, #22
 8003698:	20d4      	movs	r0, #212	@ 0xd4
 800369a:	f7ff fd35 	bl	8003108 <SENSOR_IO_Write>
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80036be:	2111      	movs	r1, #17
 80036c0:	20d4      	movs	r0, #212	@ 0xd4
 80036c2:	f7ff fd3b 	bl	800313c <SENSOR_IO_Read>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80036ca:	f107 0208 	add.w	r2, r7, #8
 80036ce:	2306      	movs	r3, #6
 80036d0:	2122      	movs	r1, #34	@ 0x22
 80036d2:	20d4      	movs	r0, #212	@ 0xd4
 80036d4:	f7ff fd50 	bl	8003178 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e01a      	b.n	8003714 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	3301      	adds	r3, #1
 80036e4:	3320      	adds	r3, #32
 80036e6:	443b      	add	r3, r7
 80036e8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	7ffa      	ldrb	r2, [r7, #31]
 80036f2:	0052      	lsls	r2, r2, #1
 80036f4:	3220      	adds	r2, #32
 80036f6:	443a      	add	r2, r7
 80036f8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80036fc:	4413      	add	r3, r2
 80036fe:	b29a      	uxth	r2, r3
 8003700:	7ffb      	ldrb	r3, [r7, #31]
 8003702:	b212      	sxth	r2, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	3320      	adds	r3, #32
 8003708:	443b      	add	r3, r7
 800370a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800370e:	7ffb      	ldrb	r3, [r7, #31]
 8003710:	3301      	adds	r3, #1
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	7ffb      	ldrb	r3, [r7, #31]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d9e1      	bls.n	80036de <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d829      	bhi.n	8003778 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8003724:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003761 	.word	0x08003761
 8003730:	08003779 	.word	0x08003779
 8003734:	08003779 	.word	0x08003779
 8003738:	08003779 	.word	0x08003779
 800373c:	08003767 	.word	0x08003767
 8003740:	08003779 	.word	0x08003779
 8003744:	08003779 	.word	0x08003779
 8003748:	08003779 	.word	0x08003779
 800374c:	0800376d 	.word	0x0800376d
 8003750:	08003779 	.word	0x08003779
 8003754:	08003779 	.word	0x08003779
 8003758:	08003779 	.word	0x08003779
 800375c:	08003773 	.word	0x08003773
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003760:	4b16      	ldr	r3, [pc, #88]	@ (80037bc <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8003762:	61bb      	str	r3, [r7, #24]
    break;
 8003764:	e008      	b.n	8003778 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003766:	4b16      	ldr	r3, [pc, #88]	@ (80037c0 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003768:	61bb      	str	r3, [r7, #24]
    break;
 800376a:	e005      	b.n	8003778 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800376c:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800376e:	61bb      	str	r3, [r7, #24]
    break;
 8003770:	e002      	b.n	8003778 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003774:	61bb      	str	r3, [r7, #24]
    break;    
 8003776:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e016      	b.n	80037ac <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800377e:	7ffb      	ldrb	r3, [r7, #31]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	3320      	adds	r3, #32
 8003784:	443b      	add	r3, r7
 8003786:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	edd7 7a06 	vldr	s15, [r7, #24]
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80037a6:	7ffb      	ldrb	r3, [r7, #31]
 80037a8:	3301      	adds	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d9e5      	bls.n	800377e <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 80037b2:	bf00      	nop
 80037b4:	bf00      	nop
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	410c0000 	.word	0x410c0000
 80037c0:	418c0000 	.word	0x418c0000
 80037c4:	420c0000 	.word	0x420c0000
 80037c8:	428c0000 	.word	0x428c0000

080037cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d6:	2003      	movs	r0, #3
 80037d8:	f000 f960 	bl	8003a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037dc:	200f      	movs	r0, #15
 80037de:	f000 f80d 	bl	80037fc <HAL_InitTick>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	e001      	b.n	80037f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037ee:	f7fe fe95 	bl	800251c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037f2:	79fb      	ldrb	r3, [r7, #7]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003808:	4b17      	ldr	r3, [pc, #92]	@ (8003868 <HAL_InitTick+0x6c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d023      	beq.n	8003858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003810:	4b16      	ldr	r3, [pc, #88]	@ (800386c <HAL_InitTick+0x70>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <HAL_InitTick+0x6c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800381e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f96d 	bl	8003b06 <HAL_SYSTICK_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d809      	bhi.n	800384c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003838:	2200      	movs	r2, #0
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	f000 f937 	bl	8003ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003844:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <HAL_InitTick+0x74>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e007      	b.n	800385c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e004      	b.n	800385c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e001      	b.n	800385c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000058 	.word	0x20000058
 800386c:	20000008 	.word	0x20000008
 8003870:	20000054 	.word	0x20000054

08003874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_IncTick+0x20>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <HAL_IncTick+0x24>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4413      	add	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <HAL_IncTick+0x24>)
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000058 	.word	0x20000058
 8003898:	20002d58 	.word	0x20002d58

0800389c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return uwTick;
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_GetTick+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20002d58 	.word	0x20002d58

080038b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff ffee 	bl	800389c <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d005      	beq.n	80038da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80038ce:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <HAL_Delay+0x44>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038da:	bf00      	nop
 80038dc:	f7ff ffde 	bl	800389c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d8f7      	bhi.n	80038dc <HAL_Delay+0x28>
  {
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000058 	.word	0x20000058

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	@ (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	@ (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	@ (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	@ 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
         );
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	@ 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a68:	d301      	bcc.n	8003a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00f      	b.n	8003a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <SysTick_Config+0x40>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a76:	210f      	movs	r1, #15
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f7ff ff8e 	bl	800399c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <SysTick_Config+0x40>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a86:	4b04      	ldr	r3, [pc, #16]	@ (8003a98 <SysTick_Config+0x40>)
 8003a88:	2207      	movs	r2, #7
 8003a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	e000e010 	.word	0xe000e010

08003a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff29 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac4:	f7ff ff3e 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	6978      	ldr	r0, [r7, #20]
 8003ad0:	f7ff ff8e 	bl	80039f0 <NVIC_EncodePriority>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff5d 	bl	800399c <__NVIC_SetPriority>
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff31 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffa2 	bl	8003a58 <SysTick_Config>
 8003b14:	4603      	mov	r3, r0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0ac      	b.n	8003c8c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f8b2 	bl	8003ca0 <DFSDM_GetChannelFromInstance>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4a55      	ldr	r2, [pc, #340]	@ (8003c94 <HAL_DFSDM_ChannelInit+0x174>)
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e09f      	b.n	8003c8c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fe fd0d 	bl	800256c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b52:	4b51      	ldr	r3, [pc, #324]	@ (8003c98 <HAL_DFSDM_ChannelInit+0x178>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4a4f      	ldr	r2, [pc, #316]	@ (8003c98 <HAL_DFSDM_ChannelInit+0x178>)
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <HAL_DFSDM_ChannelInit+0x178>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d125      	bne.n	8003bb0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b64:	4b4d      	ldr	r3, [pc, #308]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b6e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b70:	4b4a      	ldr	r3, [pc, #296]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4948      	ldr	r1, [pc, #288]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b7e:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a46      	ldr	r2, [pc, #280]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b84:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003b88:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	791b      	ldrb	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d108      	bne.n	8003ba4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b92:	4b42      	ldr	r3, [pc, #264]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	493f      	ldr	r1, [pc, #252]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bae:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003bbe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bce:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bd4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 020f 	bic.w	r2, r2, #15
 8003bec:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003c14:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	3b01      	subs	r3, #1
 8003c26:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f002 0207 	and.w	r2, r2, #7
 8003c40:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f810 	bl	8003ca0 <DFSDM_GetChannelFromInstance>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4904      	ldr	r1, [pc, #16]	@ (8003c94 <HAL_DFSDM_ChannelInit+0x174>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20002d60 	.word	0x20002d60
 8003c98:	20002d5c 	.word	0x20002d5c
 8003c9c:	40016000 	.word	0x40016000

08003ca0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	@ (8003d1c <DFSDM_GetChannelFromInstance+0x7c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d102      	bne.n	8003cb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e02b      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	@ (8003d20 <DFSDM_GetChannelFromInstance+0x80>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d102      	bne.n	8003cc4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e024      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a17      	ldr	r2, [pc, #92]	@ (8003d24 <DFSDM_GetChannelFromInstance+0x84>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d102      	bne.n	8003cd2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e01d      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	@ (8003d28 <DFSDM_GetChannelFromInstance+0x88>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d102      	bne.n	8003ce0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003cda:	2304      	movs	r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e016      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a12      	ldr	r2, [pc, #72]	@ (8003d2c <DFSDM_GetChannelFromInstance+0x8c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d102      	bne.n	8003cee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003ce8:	2305      	movs	r3, #5
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e00f      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d30 <DFSDM_GetChannelFromInstance+0x90>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d102      	bne.n	8003cfc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003cf6:	2306      	movs	r3, #6
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e008      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8003d34 <DFSDM_GetChannelFromInstance+0x94>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d102      	bne.n	8003d0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003d04:	2307      	movs	r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e001      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40016000 	.word	0x40016000
 8003d20:	40016020 	.word	0x40016020
 8003d24:	40016040 	.word	0x40016040
 8003d28:	40016080 	.word	0x40016080
 8003d2c:	400160a0 	.word	0x400160a0
 8003d30:	400160c0 	.word	0x400160c0
 8003d34:	400160e0 	.word	0x400160e0

08003d38 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	460b      	mov	r3, r1
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	bf00      	nop
  }

  return status;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e003      	b.n	8003d88 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2201      	movs	r2, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <HAL_EXTI_IRQHandler+0x5c>)
 8003dbe:	4413      	add	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4798      	blx	r3
    }
  }
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40010414 	.word	0x40010414

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e02:	e17f      	b.n	8004104 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	2101      	movs	r1, #1
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8171 	beq.w	80040fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d005      	beq.n	8003e34 <HAL_GPIO_Init+0x40>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d130      	bne.n	8003e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	2203      	movs	r2, #3
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0201 	and.w	r2, r3, #1
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d118      	bne.n	8003ed4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	f003 0201 	and.w	r2, r3, #1
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d017      	beq.n	8003f10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d123      	bne.n	8003f64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	08da      	lsrs	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3208      	adds	r2, #8
 8003f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	220f      	movs	r2, #15
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	08da      	lsrs	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	6939      	ldr	r1, [r7, #16]
 8003f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0203 	and.w	r2, r3, #3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80ac 	beq.w	80040fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	4b5f      	ldr	r3, [pc, #380]	@ (8004124 <HAL_GPIO_Init+0x330>)
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003faa:	4a5e      	ldr	r2, [pc, #376]	@ (8004124 <HAL_GPIO_Init+0x330>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004124 <HAL_GPIO_Init+0x330>)
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8004128 <HAL_GPIO_Init+0x334>)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	220f      	movs	r2, #15
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fe8:	d025      	beq.n	8004036 <HAL_GPIO_Init+0x242>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4f      	ldr	r2, [pc, #316]	@ (800412c <HAL_GPIO_Init+0x338>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <HAL_GPIO_Init+0x23e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8004130 <HAL_GPIO_Init+0x33c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d019      	beq.n	800402e <HAL_GPIO_Init+0x23a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8004134 <HAL_GPIO_Init+0x340>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0x236>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4c      	ldr	r2, [pc, #304]	@ (8004138 <HAL_GPIO_Init+0x344>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00d      	beq.n	8004026 <HAL_GPIO_Init+0x232>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4b      	ldr	r2, [pc, #300]	@ (800413c <HAL_GPIO_Init+0x348>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <HAL_GPIO_Init+0x22e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4a      	ldr	r2, [pc, #296]	@ (8004140 <HAL_GPIO_Init+0x34c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_GPIO_Init+0x22a>
 800401a:	2306      	movs	r3, #6
 800401c:	e00c      	b.n	8004038 <HAL_GPIO_Init+0x244>
 800401e:	2307      	movs	r3, #7
 8004020:	e00a      	b.n	8004038 <HAL_GPIO_Init+0x244>
 8004022:	2305      	movs	r3, #5
 8004024:	e008      	b.n	8004038 <HAL_GPIO_Init+0x244>
 8004026:	2304      	movs	r3, #4
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x244>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_Init+0x244>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_Init+0x244>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_Init+0x244>
 8004036:	2300      	movs	r3, #0
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004048:	4937      	ldr	r1, [pc, #220]	@ (8004128 <HAL_GPIO_Init+0x334>)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004056:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <HAL_GPIO_Init+0x350>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	43db      	mvns	r3, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800407a:	4a32      	ldr	r2, [pc, #200]	@ (8004144 <HAL_GPIO_Init+0x350>)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004080:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <HAL_GPIO_Init+0x350>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	43db      	mvns	r3, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040a4:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <HAL_GPIO_Init+0x350>)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040aa:	4b26      	ldr	r3, [pc, #152]	@ (8004144 <HAL_GPIO_Init+0x350>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004144 <HAL_GPIO_Init+0x350>)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004144 <HAL_GPIO_Init+0x350>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	43db      	mvns	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040f8:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <HAL_GPIO_Init+0x350>)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3301      	adds	r3, #1
 8004102:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	f47f ae78 	bne.w	8003e04 <HAL_GPIO_Init+0x10>
  }
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	40010000 	.word	0x40010000
 800412c:	48000400 	.word	0x48000400
 8004130:	48000800 	.word	0x48000800
 8004134:	48000c00 	.word	0x48000c00
 8004138:	48001000 	.word	0x48001000
 800413c:	48001400 	.word	0x48001400
 8004140:	48001800 	.word	0x48001800
 8004144:	40010400 	.word	0x40010400

08004148 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004156:	e0cd      	b.n	80042f4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004158:	2201      	movs	r2, #1
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80c0 	beq.w	80042ee <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800416e:	4a68      	ldr	r2, [pc, #416]	@ (8004310 <HAL_GPIO_DeInit+0x1c8>)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3302      	adds	r3, #2
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004196:	d025      	beq.n	80041e4 <HAL_GPIO_DeInit+0x9c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a5e      	ldr	r2, [pc, #376]	@ (8004314 <HAL_GPIO_DeInit+0x1cc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01f      	beq.n	80041e0 <HAL_GPIO_DeInit+0x98>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004318 <HAL_GPIO_DeInit+0x1d0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d019      	beq.n	80041dc <HAL_GPIO_DeInit+0x94>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a5c      	ldr	r2, [pc, #368]	@ (800431c <HAL_GPIO_DeInit+0x1d4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d013      	beq.n	80041d8 <HAL_GPIO_DeInit+0x90>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004320 <HAL_GPIO_DeInit+0x1d8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00d      	beq.n	80041d4 <HAL_GPIO_DeInit+0x8c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_GPIO_DeInit+0x1dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <HAL_GPIO_DeInit+0x88>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a59      	ldr	r2, [pc, #356]	@ (8004328 <HAL_GPIO_DeInit+0x1e0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_GPIO_DeInit+0x84>
 80041c8:	2306      	movs	r3, #6
 80041ca:	e00c      	b.n	80041e6 <HAL_GPIO_DeInit+0x9e>
 80041cc:	2307      	movs	r3, #7
 80041ce:	e00a      	b.n	80041e6 <HAL_GPIO_DeInit+0x9e>
 80041d0:	2305      	movs	r3, #5
 80041d2:	e008      	b.n	80041e6 <HAL_GPIO_DeInit+0x9e>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e006      	b.n	80041e6 <HAL_GPIO_DeInit+0x9e>
 80041d8:	2303      	movs	r3, #3
 80041da:	e004      	b.n	80041e6 <HAL_GPIO_DeInit+0x9e>
 80041dc:	2302      	movs	r3, #2
 80041de:	e002      	b.n	80041e6 <HAL_GPIO_DeInit+0x9e>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_GPIO_DeInit+0x9e>
 80041e4:	2300      	movs	r3, #0
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	f002 0203 	and.w	r2, r2, #3
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	4093      	lsls	r3, r2
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d132      	bne.n	800425c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041f6:	4b4d      	ldr	r3, [pc, #308]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	494b      	ldr	r1, [pc, #300]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 8004200:	4013      	ands	r3, r2
 8004202:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004204:	4b49      	ldr	r3, [pc, #292]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	4947      	ldr	r1, [pc, #284]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 800420e:	4013      	ands	r3, r2
 8004210:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004212:	4b46      	ldr	r3, [pc, #280]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	4944      	ldr	r1, [pc, #272]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 800421c:	4013      	ands	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004220:	4b42      	ldr	r3, [pc, #264]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	4940      	ldr	r1, [pc, #256]	@ (800432c <HAL_GPIO_DeInit+0x1e4>)
 800422a:	4013      	ands	r3, r2
 800422c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	220f      	movs	r2, #15
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800423e:	4a34      	ldr	r2, [pc, #208]	@ (8004310 <HAL_GPIO_DeInit+0x1c8>)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43da      	mvns	r2, r3
 800424e:	4830      	ldr	r0, [pc, #192]	@ (8004310 <HAL_GPIO_DeInit+0x1c8>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	400a      	ands	r2, r1
 8004256:	3302      	adds	r3, #2
 8004258:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	2103      	movs	r1, #3
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	08da      	lsrs	r2, r3, #3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3208      	adds	r2, #8
 8004278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	08d2      	lsrs	r2, r2, #3
 8004290:	4019      	ands	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3208      	adds	r2, #8
 8004296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2103      	movs	r1, #3
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	2101      	movs	r1, #1
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	401a      	ands	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2103      	movs	r1, #3
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	401a      	ands	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	2101      	movs	r1, #1
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	401a      	ands	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3301      	adds	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f47f af2b 	bne.w	8004158 <HAL_GPIO_DeInit+0x10>
  }
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40010000 	.word	0x40010000
 8004314:	48000400 	.word	0x48000400
 8004318:	48000800 	.word	0x48000800
 800431c:	48000c00 	.word	0x48000c00
 8004320:	48001000 	.word	0x48001000
 8004324:	48001400 	.word	0x48001400
 8004328:	48001800 	.word	0x48001800
 800432c:	40010400 	.word	0x40010400

08004330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e001      	b.n	8004352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
 800436c:	4613      	mov	r3, r2
 800436e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004370:	787b      	ldrb	r3, [r7, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800437c:	e002      	b.n	8004384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	041a      	lsls	r2, r3, #16
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	43d9      	mvns	r1, r3
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	400b      	ands	r3, r1
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	619a      	str	r2, [r3, #24]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043ce:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043da:	4a05      	ldr	r2, [pc, #20]	@ (80043f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f806 	bl	80043f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e08d      	b.n	8004538 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7fe f8ff 	bl	8002634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2224      	movs	r2, #36	@ 0x24
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800445a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800446a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004480:	609a      	str	r2, [r3, #8]
 8004482:	e006      	b.n	8004492 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004490:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d108      	bne.n	80044ac <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	e007      	b.n	80044bc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69d9      	ldr	r1, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e021      	b.n	8004596 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2224      	movs	r2, #36	@ 0x24
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fe f8c0 	bl	80026f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	4608      	mov	r0, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	461a      	mov	r2, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	817b      	strh	r3, [r7, #10]
 80045b2:	460b      	mov	r3, r1
 80045b4:	813b      	strh	r3, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	f040 80f9 	bne.w	80047ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_I2C_Mem_Write+0x34>
 80045ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0ed      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_I2C_Mem_Write+0x4e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e0e6      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045f6:	f7ff f951 	bl	800389c <HAL_GetTick>
 80045fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	2319      	movs	r3, #25
 8004602:	2201      	movs	r2, #1
 8004604:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fac3 	bl	8004b94 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0d1      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2221      	movs	r2, #33	@ 0x21
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2240      	movs	r2, #64	@ 0x40
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004640:	88f8      	ldrh	r0, [r7, #6]
 8004642:	893a      	ldrh	r2, [r7, #8]
 8004644:	8979      	ldrh	r1, [r7, #10]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4603      	mov	r3, r0
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f9d3 	bl	80049fc <I2C_RequestMemoryWrite>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0a9      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2bff      	cmp	r3, #255	@ 0xff
 8004670:	d90e      	bls.n	8004690 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	22ff      	movs	r2, #255	@ 0xff
 8004676:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467c:	b2da      	uxtb	r2, r3
 800467e:	8979      	ldrh	r1, [r7, #10]
 8004680:	2300      	movs	r3, #0
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fc47 	bl	8004f1c <I2C_TransferConfig>
 800468e:	e00f      	b.n	80046b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	8979      	ldrh	r1, [r7, #10]
 80046a2:	2300      	movs	r3, #0
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fc36 	bl	8004f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fac6 	bl	8004c46 <I2C_WaitOnTXISFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e07b      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d034      	beq.n	8004768 <HAL_I2C_Mem_Write+0x1c8>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d130      	bne.n	8004768 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470c:	2200      	movs	r2, #0
 800470e:	2180      	movs	r1, #128	@ 0x80
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fa3f 	bl	8004b94 <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e04d      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2bff      	cmp	r3, #255	@ 0xff
 8004728:	d90e      	bls.n	8004748 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	@ 0xff
 800472e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004734:	b2da      	uxtb	r2, r3
 8004736:	8979      	ldrh	r1, [r7, #10]
 8004738:	2300      	movs	r3, #0
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fbeb 	bl	8004f1c <I2C_TransferConfig>
 8004746:	e00f      	b.n	8004768 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004756:	b2da      	uxtb	r2, r3
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fbda 	bl	8004f1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d19e      	bne.n	80046b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 faac 	bl	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e01a      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2220      	movs	r2, #32
 800478c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <HAL_I2C_Mem_Write+0x224>)
 800479a:	400b      	ands	r3, r1
 800479c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	fe00e800 	.word	0xfe00e800

080047c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	817b      	strh	r3, [r7, #10]
 80047da:	460b      	mov	r3, r1
 80047dc:	813b      	strh	r3, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	f040 80fd 	bne.w	80049ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_I2C_Mem_Read+0x34>
 80047f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004802:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0f1      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Mem_Read+0x4e>
 8004812:	2302      	movs	r3, #2
 8004814:	e0ea      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800481e:	f7ff f83d 	bl	800389c <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2319      	movs	r3, #25
 800482a:	2201      	movs	r2, #1
 800482c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f9af 	bl	8004b94 <I2C_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0d5      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2222      	movs	r2, #34	@ 0x22
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004860:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004868:	88f8      	ldrh	r0, [r7, #6]
 800486a:	893a      	ldrh	r2, [r7, #8]
 800486c:	8979      	ldrh	r1, [r7, #10]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	4603      	mov	r3, r0
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f913 	bl	8004aa4 <I2C_RequestMemoryRead>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0ad      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2bff      	cmp	r3, #255	@ 0xff
 8004898:	d90e      	bls.n	80048b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	8979      	ldrh	r1, [r7, #10]
 80048a8:	4b52      	ldr	r3, [pc, #328]	@ (80049f4 <HAL_I2C_Mem_Read+0x22c>)
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fb33 	bl	8004f1c <I2C_TransferConfig>
 80048b6:	e00f      	b.n	80048d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	8979      	ldrh	r1, [r7, #10]
 80048ca:	4b4a      	ldr	r3, [pc, #296]	@ (80049f4 <HAL_I2C_Mem_Read+0x22c>)
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fb22 	bl	8004f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	2200      	movs	r2, #0
 80048e0:	2104      	movs	r1, #4
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f956 	bl	8004b94 <I2C_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07c      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d034      	beq.n	8004998 <HAL_I2C_Mem_Read+0x1d0>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d130      	bne.n	8004998 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	2200      	movs	r2, #0
 800493e:	2180      	movs	r1, #128	@ 0x80
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f927 	bl	8004b94 <I2C_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e04d      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2bff      	cmp	r3, #255	@ 0xff
 8004958:	d90e      	bls.n	8004978 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004964:	b2da      	uxtb	r2, r3
 8004966:	8979      	ldrh	r1, [r7, #10]
 8004968:	2300      	movs	r3, #0
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fad3 	bl	8004f1c <I2C_TransferConfig>
 8004976:	e00f      	b.n	8004998 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004986:	b2da      	uxtb	r2, r3
 8004988:	8979      	ldrh	r1, [r7, #10]
 800498a:	2300      	movs	r3, #0
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fac2 	bl	8004f1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d19a      	bne.n	80048d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f994 	bl	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e01a      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2220      	movs	r2, #32
 80049bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <HAL_I2C_Mem_Read+0x230>)
 80049ca:	400b      	ands	r3, r1
 80049cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e000      	b.n	80049ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	80002400 	.word	0x80002400
 80049f8:	fe00e800 	.word	0xfe00e800

080049fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	813b      	strh	r3, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	8979      	ldrh	r1, [r7, #10]
 8004a1c:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <I2C_RequestMemoryWrite+0xa4>)
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fa79 	bl	8004f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f909 	bl	8004c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e02c      	b.n	8004a98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a4e:	e015      	b.n	8004a7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	69b9      	ldr	r1, [r7, #24]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f8ef 	bl	8004c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e012      	b.n	8004a98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a72:	893b      	ldrh	r3, [r7, #8]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2180      	movs	r1, #128	@ 0x80
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f884 	bl	8004b94 <I2C_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	80002000 	.word	0x80002000

08004aa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	817b      	strh	r3, [r7, #10]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	813b      	strh	r3, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	8979      	ldrh	r1, [r7, #10]
 8004ac4:	4b20      	ldr	r3, [pc, #128]	@ (8004b48 <I2C_RequestMemoryRead+0xa4>)
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fa26 	bl	8004f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	69b9      	ldr	r1, [r7, #24]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f8b6 	bl	8004c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e02c      	b.n	8004b3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d105      	bne.n	8004af6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aea:	893b      	ldrh	r3, [r7, #8]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004af4:	e015      	b.n	8004b22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	69b9      	ldr	r1, [r7, #24]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f89c 	bl	8004c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e012      	b.n	8004b3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2140      	movs	r1, #64	@ 0x40
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f831 	bl	8004b94 <I2C_WaitOnFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	80002000 	.word	0x80002000

08004b4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d103      	bne.n	8004b6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d007      	beq.n	8004b88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	619a      	str	r2, [r3, #24]
  }
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba4:	e03b      	b.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	6839      	ldr	r1, [r7, #0]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f8d6 	bl	8004d5c <I2C_IsErrorOccurred>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e041      	b.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d02d      	beq.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fe fe6b 	bl	800389c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d122      	bne.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d113      	bne.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e00f      	b.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d0b4      	beq.n	8004ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c52:	e033      	b.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f87f 	bl	8004d5c <I2C_IsErrorOccurred>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e031      	b.n	8004ccc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d025      	beq.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	f7fe fe14 	bl	800389c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11a      	bne.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d013      	beq.n	8004cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e007      	b.n	8004ccc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d1c4      	bne.n	8004c54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce0:	e02f      	b.n	8004d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f838 	bl	8004d5c <I2C_IsErrorOccurred>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e02d      	b.n	8004d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fe fdd1 	bl	800389c <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11a      	bne.n	8004d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d013      	beq.n	8004d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e007      	b.n	8004d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d1c8      	bne.n	8004ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	@ 0x28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d068      	beq.n	8004e5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d90:	e049      	b.n	8004e26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d045      	beq.n	8004e26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d9a:	f7fe fd7f 	bl	800389c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <I2C_IsErrorOccurred+0x54>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d13a      	bne.n	8004e26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd2:	d121      	bne.n	8004e18 <I2C_IsErrorOccurred+0xbc>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dda:	d01d      	beq.n	8004e18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d01a      	beq.n	8004e18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004df0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004df2:	f7fe fd53 	bl	800389c <HAL_GetTick>
 8004df6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df8:	e00e      	b.n	8004e18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dfa:	f7fe fd4f 	bl	800389c <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b19      	cmp	r3, #25
 8004e06:	d907      	bls.n	8004e18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	f043 0320 	orr.w	r3, r3, #32
 8004e0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e16:	e006      	b.n	8004e26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d1e9      	bne.n	8004dfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d003      	beq.n	8004e3c <I2C_IsErrorOccurred+0xe0>
 8004e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0aa      	beq.n	8004d92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d103      	bne.n	8004e4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f043 0304 	orr.w	r3, r3, #4
 8004e52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f043 0308 	orr.w	r3, r3, #8
 8004e94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	f043 0302 	orr.w	r3, r3, #2
 8004eb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01c      	beq.n	8004f0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff fe3b 	bl	8004b4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8004f18 <I2C_IsErrorOccurred+0x1bc>)
 8004ee2:	400b      	ands	r3, r1
 8004ee4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	@ 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	fe00e800 	.word	0xfe00e800

08004f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	817b      	strh	r3, [r7, #10]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f2e:	897b      	ldrh	r3, [r7, #10]
 8004f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f34:	7a7b      	ldrb	r3, [r7, #9]
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	0d5b      	lsrs	r3, r3, #21
 8004f56:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f5a:	4b08      	ldr	r3, [pc, #32]	@ (8004f7c <I2C_TransferConfig+0x60>)
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	ea02 0103 	and.w	r1, r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	03ff63ff 	.word	0x03ff63ff

08004f80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d138      	bne.n	8005008 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e032      	b.n	800500a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2224      	movs	r2, #36	@ 0x24
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e000      	b.n	800500a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005008:	2302      	movs	r3, #2
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b20      	cmp	r3, #32
 800502a:	d139      	bne.n	80050a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005036:	2302      	movs	r3, #2
 8005038:	e033      	b.n	80050a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2224      	movs	r2, #36	@ 0x24
 8005046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
  }
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af02      	add	r7, sp, #8
 80050b4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e101      	b.n	80052c4 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fd fbd1 	bl	800287c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2203      	movs	r2, #3
 80050de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f002 ff33 	bl	8007f58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7c1a      	ldrb	r2, [r3, #16]
 80050fa:	f88d 2000 	strb.w	r2, [sp]
 80050fe:	3304      	adds	r3, #4
 8005100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005102:	f002 fefc 	bl	8007efe <USB_CoreInit>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0d5      	b.n	80052c4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f002 ff2b 	bl	8007f7a <USB_SetCurrentMode>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0c6      	b.n	80052c4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
 800513a:	e04a      	b.n	80051d2 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	3315      	adds	r3, #21
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3314      	adds	r3, #20
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	b298      	uxth	r0, r3
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	332e      	adds	r3, #46	@ 0x2e
 8005178:	4602      	mov	r2, r0
 800517a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3318      	adds	r3, #24
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	331c      	adds	r3, #28
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3320      	adds	r3, #32
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051b8:	7bfa      	ldrb	r2, [r7, #15]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	3324      	adds	r3, #36	@ 0x24
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	3301      	adds	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	7bfa      	ldrb	r2, [r7, #15]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d3af      	bcc.n	800513c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e044      	b.n	800526c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	3301      	adds	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	791b      	ldrb	r3, [r3, #4]
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	429a      	cmp	r2, r3
 8005274:	d3b5      	bcc.n	80051e2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	7c1a      	ldrb	r2, [r3, #16]
 800527e:	f88d 2000 	strb.w	r2, [sp]
 8005282:	3304      	adds	r3, #4
 8005284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005286:	f002 fec5 	bl	8008014 <USB_DevInit>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e013      	b.n	80052c4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7b1b      	ldrb	r3, [r3, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d102      	bne.n	80052b8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f80a 	bl	80052cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f003 f86a 	bl	8008396 <USB_DevDisconnect>

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	f043 0303 	orr.w	r3, r3, #3
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800531e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40007000 	.word	0x40007000

08005334 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005338:	4b04      	ldr	r3, [pc, #16]	@ (800534c <HAL_PWREx_GetVoltageRange+0x18>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40007000 	.word	0x40007000

08005350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800535e:	d130      	bne.n	80053c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005360:	4b23      	ldr	r3, [pc, #140]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800536c:	d038      	beq.n	80053e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800536e:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005376:	4a1e      	ldr	r2, [pc, #120]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005378:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800537c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800537e:	4b1d      	ldr	r3, [pc, #116]	@ (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2232      	movs	r2, #50	@ 0x32
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	4a1b      	ldr	r2, [pc, #108]	@ (80053f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0c9b      	lsrs	r3, r3, #18
 8005390:	3301      	adds	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005394:	e002      	b.n	800539c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3b01      	subs	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800539c:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a8:	d102      	bne.n	80053b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f2      	bne.n	8005396 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053b0:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053bc:	d110      	bne.n	80053e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e00f      	b.n	80053e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053c2:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ce:	d007      	beq.n	80053e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053d0:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053d8:	4a05      	ldr	r2, [pc, #20]	@ (80053f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40007000 	.word	0x40007000
 80053f4:	20000008 	.word	0x20000008
 80053f8:	431bde83 	.word	0x431bde83

080053fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005400:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a04      	ldr	r2, [pc, #16]	@ (8005418 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800540a:	6053      	str	r3, [r2, #4]
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40007000 	.word	0x40007000

0800541c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af02      	add	r7, sp, #8
 8005422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005424:	f7fe fa3a 	bl	800389c <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e063      	b.n	80054fc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10b      	bne.n	8005458 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fd f975 	bl	8002738 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800544e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f858 	bl	8005508 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	3b01      	subs	r3, #1
 8005468:	021a      	lsls	r2, r3, #8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	2120      	movs	r1, #32
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f850 	bl	8005524 <QSPI_WaitFlagStateUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005488:	7afb      	ldrb	r3, [r7, #11]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d131      	bne.n	80054f2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005498:	f023 0310 	bic.w	r3, r3, #16
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6852      	ldr	r2, [r2, #4]
 80054a0:	0611      	lsls	r1, r2, #24
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68d2      	ldr	r2, [r2, #12]
 80054a6:	4311      	orrs	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	4b13      	ldr	r3, [pc, #76]	@ (8005504 <HAL_QSPI_Init+0xe8>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6912      	ldr	r2, [r2, #16]
 80054be:	0411      	lsls	r1, r2, #16
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6952      	ldr	r2, [r2, #20]
 80054c4:	4311      	orrs	r1, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6992      	ldr	r2, [r2, #24]
 80054ca:	4311      	orrs	r1, r2
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80054fa:	7afb      	ldrb	r3, [r7, #11]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	ffe0f8fe 	.word	0xffe0f8fe

08005508 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005534:	e01a      	b.n	800556c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d016      	beq.n	800556c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fe f9ad 	bl	800389c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2204      	movs	r2, #4
 8005558:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005560:	f043 0201 	orr.w	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e00e      	b.n	800558a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	429a      	cmp	r2, r3
 8005586:	d1d6      	bne.n	8005536 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e3ca      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055a6:	4b97      	ldr	r3, [pc, #604]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b0:	4b94      	ldr	r3, [pc, #592]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 80e4 	beq.w	8005790 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <HAL_RCC_OscConfig+0x4a>
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	f040 808b 	bne.w	80056ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	f040 8087 	bne.w	80056ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055de:	4b89      	ldr	r3, [pc, #548]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_RCC_OscConfig+0x62>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e3a2      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	4b82      	ldr	r3, [pc, #520]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <HAL_RCC_OscConfig+0x7c>
 8005606:	4b7f      	ldr	r3, [pc, #508]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800560e:	e005      	b.n	800561c <HAL_RCC_OscConfig+0x88>
 8005610:	4b7c      	ldr	r3, [pc, #496]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800561c:	4293      	cmp	r3, r2
 800561e:	d223      	bcs.n	8005668 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fd55 	bl	80060d4 <RCC_SetFlashLatencyFromMSIRange>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e383      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005634:	4b73      	ldr	r3, [pc, #460]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a72      	ldr	r2, [pc, #456]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 800563a:	f043 0308 	orr.w	r3, r3, #8
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b70      	ldr	r3, [pc, #448]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	496d      	ldr	r1, [pc, #436]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005652:	4b6c      	ldr	r3, [pc, #432]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	4968      	ldr	r1, [pc, #416]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
 8005666:	e025      	b.n	80056b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005668:	4b66      	ldr	r3, [pc, #408]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a65      	ldr	r2, [pc, #404]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 800566e:	f043 0308 	orr.w	r3, r3, #8
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b63      	ldr	r3, [pc, #396]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	4960      	ldr	r1, [pc, #384]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005686:	4b5f      	ldr	r3, [pc, #380]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	495b      	ldr	r1, [pc, #364]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005696:	4313      	orrs	r3, r2
 8005698:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fd15 	bl	80060d4 <RCC_SetFlashLatencyFromMSIRange>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e343      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056b4:	f000 fc4a 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 80056b8:	4602      	mov	r2, r0
 80056ba:	4b52      	ldr	r3, [pc, #328]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	4950      	ldr	r1, [pc, #320]	@ (8005808 <HAL_RCC_OscConfig+0x274>)
 80056c6:	5ccb      	ldrb	r3, [r1, r3]
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
 80056d0:	4a4e      	ldr	r2, [pc, #312]	@ (800580c <HAL_RCC_OscConfig+0x278>)
 80056d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80056d4:	4b4e      	ldr	r3, [pc, #312]	@ (8005810 <HAL_RCC_OscConfig+0x27c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe f88f 	bl	80037fc <HAL_InitTick>
 80056de:	4603      	mov	r3, r0
 80056e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d052      	beq.n	800578e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	e327      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d032      	beq.n	800575a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056f4:	4b43      	ldr	r3, [pc, #268]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a42      	ldr	r2, [pc, #264]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005700:	f7fe f8cc 	bl	800389c <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005708:	f7fe f8c8 	bl	800389c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e310      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800571a:	4b3a      	ldr	r3, [pc, #232]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005726:	4b37      	ldr	r3, [pc, #220]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a36      	ldr	r2, [pc, #216]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b34      	ldr	r3, [pc, #208]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	4931      	ldr	r1, [pc, #196]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005744:	4b2f      	ldr	r3, [pc, #188]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	492c      	ldr	r1, [pc, #176]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
 8005758:	e01a      	b.n	8005790 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800575a:	4b2a      	ldr	r3, [pc, #168]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a29      	ldr	r2, [pc, #164]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005766:	f7fe f899 	bl	800389c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800576e:	f7fe f895 	bl	800389c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e2dd      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005780:	4b20      	ldr	r3, [pc, #128]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x1da>
 800578c:	e000      	b.n	8005790 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800578e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d074      	beq.n	8005886 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d005      	beq.n	80057ae <HAL_RCC_OscConfig+0x21a>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d10e      	bne.n	80057c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d10b      	bne.n	80057c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ae:	4b15      	ldr	r3, [pc, #84]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d064      	beq.n	8005884 <HAL_RCC_OscConfig+0x2f0>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d160      	bne.n	8005884 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e2ba      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ce:	d106      	bne.n	80057de <HAL_RCC_OscConfig+0x24a>
 80057d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80057d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e026      	b.n	800582c <HAL_RCC_OscConfig+0x298>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057e6:	d115      	bne.n	8005814 <HAL_RCC_OscConfig+0x280>
 80057e8:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a05      	ldr	r2, [pc, #20]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80057ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b03      	ldr	r3, [pc, #12]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a02      	ldr	r2, [pc, #8]	@ (8005804 <HAL_RCC_OscConfig+0x270>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e014      	b.n	800582c <HAL_RCC_OscConfig+0x298>
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	0800f948 	.word	0x0800f948
 800580c:	20000008 	.word	0x20000008
 8005810:	20000054 	.word	0x20000054
 8005814:	4ba0      	ldr	r3, [pc, #640]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a9f      	ldr	r2, [pc, #636]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 800581a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4b9d      	ldr	r3, [pc, #628]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a9c      	ldr	r2, [pc, #624]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800582a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fe f832 	bl	800389c <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800583c:	f7fe f82e 	bl	800389c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	@ 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e276      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800584e:	4b92      	ldr	r3, [pc, #584]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x2a8>
 800585a:	e014      	b.n	8005886 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fe f81e 	bl	800389c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005864:	f7fe f81a 	bl	800389c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	@ 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e262      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005876:	4b88      	ldr	r3, [pc, #544]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x2d0>
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d060      	beq.n	8005954 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_OscConfig+0x310>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b0c      	cmp	r3, #12
 800589c:	d119      	bne.n	80058d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d116      	bne.n	80058d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_OscConfig+0x328>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e23f      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	4b76      	ldr	r3, [pc, #472]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	4973      	ldr	r1, [pc, #460]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058d0:	e040      	b.n	8005954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d023      	beq.n	8005922 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058da:	4b6f      	ldr	r3, [pc, #444]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a6e      	ldr	r2, [pc, #440]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80058e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e6:	f7fd ffd9 	bl	800389c <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ee:	f7fd ffd5 	bl	800389c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e21d      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005900:	4b65      	ldr	r3, [pc, #404]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f0      	beq.n	80058ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590c:	4b62      	ldr	r3, [pc, #392]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	495f      	ldr	r1, [pc, #380]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]
 8005920:	e018      	b.n	8005954 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005922:	4b5d      	ldr	r3, [pc, #372]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5c      	ldr	r2, [pc, #368]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800592c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592e:	f7fd ffb5 	bl	800389c <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005936:	f7fd ffb1 	bl	800389c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e1f9      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005948:	4b53      	ldr	r3, [pc, #332]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f0      	bne.n	8005936 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d03c      	beq.n	80059da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005968:	4b4b      	ldr	r3, [pc, #300]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 800596a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800596e:	4a4a      	ldr	r2, [pc, #296]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fd ff90 	bl	800389c <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fd ff8c 	bl	800389c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e1d4      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005992:	4b41      	ldr	r3, [pc, #260]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ef      	beq.n	8005980 <HAL_RCC_OscConfig+0x3ec>
 80059a0:	e01b      	b.n	80059da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80059a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b2:	f7fd ff73 	bl	800389c <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ba:	f7fd ff6f 	bl	800389c <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e1b7      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059cc:	4b32      	ldr	r3, [pc, #200]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80059ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ef      	bne.n	80059ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80a6 	beq.w	8005b34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e8:	2300      	movs	r3, #0
 80059ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10d      	bne.n	8005a14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f8:	4b27      	ldr	r3, [pc, #156]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80059fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fc:	4a26      	ldr	r2, [pc, #152]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 80059fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a04:	4b24      	ldr	r3, [pc, #144]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a10:	2301      	movs	r3, #1
 8005a12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a14:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <HAL_RCC_OscConfig+0x508>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d118      	bne.n	8005a52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a20:	4b1e      	ldr	r3, [pc, #120]	@ (8005a9c <HAL_RCC_OscConfig+0x508>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1d      	ldr	r2, [pc, #116]	@ (8005a9c <HAL_RCC_OscConfig+0x508>)
 8005a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2c:	f7fd ff36 	bl	800389c <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a34:	f7fd ff32 	bl	800389c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e17a      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a46:	4b15      	ldr	r3, [pc, #84]	@ (8005a9c <HAL_RCC_OscConfig+0x508>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f0      	beq.n	8005a34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d108      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4d8>
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a60:	4a0d      	ldr	r2, [pc, #52]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a6a:	e029      	b.n	8005ac0 <HAL_RCC_OscConfig+0x52c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b05      	cmp	r3, #5
 8005a72:	d115      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x50c>
 8005a74:	4b08      	ldr	r3, [pc, #32]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a7a:	4a07      	ldr	r2, [pc, #28]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005a7c:	f043 0304 	orr.w	r3, r3, #4
 8005a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a84:	4b04      	ldr	r3, [pc, #16]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8a:	4a03      	ldr	r2, [pc, #12]	@ (8005a98 <HAL_RCC_OscConfig+0x504>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a94:	e014      	b.n	8005ac0 <HAL_RCC_OscConfig+0x52c>
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40007000 	.word	0x40007000
 8005aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa6:	4a9b      	ldr	r2, [pc, #620]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ab0:	4b98      	ldr	r3, [pc, #608]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	4a97      	ldr	r2, [pc, #604]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d016      	beq.n	8005af6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac8:	f7fd fee8 	bl	800389c <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ace:	e00a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad0:	f7fd fee4 	bl	800389c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e12a      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae6:	4b8b      	ldr	r3, [pc, #556]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ed      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x53c>
 8005af4:	e015      	b.n	8005b22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af6:	f7fd fed1 	bl	800389c <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fd fecd 	bl	800389c <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e113      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b14:	4b7f      	ldr	r3, [pc, #508]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1ed      	bne.n	8005afe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b22:	7ffb      	ldrb	r3, [r7, #31]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b28:	4b7a      	ldr	r3, [pc, #488]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2c:	4a79      	ldr	r2, [pc, #484]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b32:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80fe 	beq.w	8005d3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	f040 80d0 	bne.w	8005ce8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b48:	4b72      	ldr	r3, [pc, #456]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 0203 	and.w	r2, r3, #3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d130      	bne.n	8005bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b66:	3b01      	subs	r3, #1
 8005b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d127      	bne.n	8005bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d11f      	bne.n	8005bbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b88:	2a07      	cmp	r2, #7
 8005b8a:	bf14      	ite	ne
 8005b8c:	2201      	movne	r2, #1
 8005b8e:	2200      	moveq	r2, #0
 8005b90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d113      	bne.n	8005bbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba0:	085b      	lsrs	r3, r3, #1
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d06e      	beq.n	8005c9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	d069      	beq.n	8005c98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bc4:	4b53      	ldr	r3, [pc, #332]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bd0:	4b50      	ldr	r3, [pc, #320]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0ad      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005be0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a4b      	ldr	r2, [pc, #300]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bec:	f7fd fe56 	bl	800389c <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fd fe52 	bl	800389c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e09a      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c06:	4b43      	ldr	r3, [pc, #268]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c12:	4b40      	ldr	r3, [pc, #256]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	4b40      	ldr	r3, [pc, #256]	@ (8005d18 <HAL_RCC_OscConfig+0x784>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c22:	3a01      	subs	r2, #1
 8005c24:	0112      	lsls	r2, r2, #4
 8005c26:	4311      	orrs	r1, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c2c:	0212      	lsls	r2, r2, #8
 8005c2e:	4311      	orrs	r1, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c34:	0852      	lsrs	r2, r2, #1
 8005c36:	3a01      	subs	r2, #1
 8005c38:	0552      	lsls	r2, r2, #21
 8005c3a:	4311      	orrs	r1, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c40:	0852      	lsrs	r2, r2, #1
 8005c42:	3a01      	subs	r2, #1
 8005c44:	0652      	lsls	r2, r2, #25
 8005c46:	4311      	orrs	r1, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c4c:	0912      	lsrs	r2, r2, #4
 8005c4e:	0452      	lsls	r2, r2, #17
 8005c50:	430a      	orrs	r2, r1
 8005c52:	4930      	ldr	r1, [pc, #192]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c58:	4b2e      	ldr	r3, [pc, #184]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c64:	4b2b      	ldr	r3, [pc, #172]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4a2a      	ldr	r2, [pc, #168]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c70:	f7fd fe14 	bl	800389c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c78:	f7fd fe10 	bl	800389c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e058      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8a:	4b22      	ldr	r3, [pc, #136]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c96:	e050      	b.n	8005d3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e04f      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d148      	bne.n	8005d3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a19      	ldr	r2, [pc, #100]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cb4:	4b17      	ldr	r3, [pc, #92]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4a16      	ldr	r2, [pc, #88]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cc0:	f7fd fdec 	bl	800389c <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc8:	f7fd fde8 	bl	800389c <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e030      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cda:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f0      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x734>
 8005ce6:	e028      	b.n	8005d3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b0c      	cmp	r3, #12
 8005cec:	d023      	beq.n	8005d36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cee:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a08      	ldr	r2, [pc, #32]	@ (8005d14 <HAL_RCC_OscConfig+0x780>)
 8005cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfa:	f7fd fdcf 	bl	800389c <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d00:	e00c      	b.n	8005d1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d02:	f7fd fdcb 	bl	800389c <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d905      	bls.n	8005d1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e013      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
 8005d14:	40021000 	.word	0x40021000
 8005d18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1c:	4b09      	ldr	r3, [pc, #36]	@ (8005d44 <HAL_RCC_OscConfig+0x7b0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ec      	bne.n	8005d02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d28:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <HAL_RCC_OscConfig+0x7b0>)
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	4905      	ldr	r1, [pc, #20]	@ (8005d44 <HAL_RCC_OscConfig+0x7b0>)
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCC_OscConfig+0x7b4>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	60cb      	str	r3, [r1, #12]
 8005d34:	e001      	b.n	8005d3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	feeefffc 	.word	0xfeeefffc

08005d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0e7      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d60:	4b75      	ldr	r3, [pc, #468]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d910      	bls.n	8005d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b72      	ldr	r3, [pc, #456]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 0207 	bic.w	r2, r3, #7
 8005d76:	4970      	ldr	r1, [pc, #448]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0cf      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	4b66      	ldr	r3, [pc, #408]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d908      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dac:	4b63      	ldr	r3, [pc, #396]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4960      	ldr	r1, [pc, #384]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d04c      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d107      	bne.n	8005de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d121      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0a6      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d107      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dea:	4b54      	ldr	r3, [pc, #336]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d115      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e09a      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e02:	4b4e      	ldr	r3, [pc, #312]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e08e      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e12:	4b4a      	ldr	r3, [pc, #296]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e086      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e22:	4b46      	ldr	r3, [pc, #280]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f023 0203 	bic.w	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4943      	ldr	r1, [pc, #268]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e34:	f7fd fd32 	bl	800389c <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e3c:	f7fd fd2e 	bl	800389c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e06e      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	4b3a      	ldr	r3, [pc, #232]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 020c 	and.w	r2, r3, #12
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d1eb      	bne.n	8005e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d010      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	4b31      	ldr	r3, [pc, #196]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d208      	bcs.n	8005e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e80:	4b2e      	ldr	r3, [pc, #184]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	492b      	ldr	r1, [pc, #172]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e92:	4b29      	ldr	r3, [pc, #164]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d210      	bcs.n	8005ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea0:	4b25      	ldr	r3, [pc, #148]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 0207 	bic.w	r2, r3, #7
 8005ea8:	4923      	ldr	r1, [pc, #140]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb0:	4b21      	ldr	r3, [pc, #132]	@ (8005f38 <HAL_RCC_ClockConfig+0x1ec>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d001      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e036      	b.n	8005f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ece:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4918      	ldr	r1, [pc, #96]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eec:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4910      	ldr	r1, [pc, #64]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f00:	f000 f824 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	490b      	ldr	r1, [pc, #44]	@ (8005f40 <HAL_RCC_ClockConfig+0x1f4>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	4a09      	ldr	r2, [pc, #36]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f20:	4b09      	ldr	r3, [pc, #36]	@ (8005f48 <HAL_RCC_ClockConfig+0x1fc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fd fc69 	bl	80037fc <HAL_InitTick>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	0800f948 	.word	0x0800f948
 8005f44:	20000008 	.word	0x20000008
 8005f48:	20000054 	.word	0x20000054

08005f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	@ 0x24
 8005f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	2300      	movs	r3, #0
 8005f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f64:	4b3b      	ldr	r3, [pc, #236]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x34>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d121      	bne.n	8005fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d11e      	bne.n	8005fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f80:	4b34      	ldr	r3, [pc, #208]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f8c:	4b31      	ldr	r3, [pc, #196]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d102      	bne.n	8005fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fc4:	4b25      	ldr	r3, [pc, #148]	@ (800605c <HAL_RCC_GetSysClockFreq+0x110>)
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fd0:	4b23      	ldr	r3, [pc, #140]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b0c      	cmp	r3, #12
 8005fd8:	d134      	bne.n	8006044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fda:	4b1e      	ldr	r3, [pc, #120]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8005ff0:	e005      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ff4:	617b      	str	r3, [r7, #20]
      break;
 8005ff6:	e005      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ff8:	4b19      	ldr	r3, [pc, #100]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ffa:	617b      	str	r3, [r7, #20]
      break;
 8005ffc:	e002      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	617b      	str	r3, [r7, #20]
      break;
 8006002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006004:	4b13      	ldr	r3, [pc, #76]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	3301      	adds	r3, #1
 8006010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006012:	4b10      	ldr	r3, [pc, #64]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	fb03 f202 	mul.w	r2, r3, r2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800602a:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x108>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	0e5b      	lsrs	r3, r3, #25
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	3301      	adds	r3, #1
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006044:	69bb      	ldr	r3, [r7, #24]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3724      	adds	r7, #36	@ 0x24
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000
 8006058:	0800f960 	.word	0x0800f960
 800605c:	00f42400 	.word	0x00f42400
 8006060:	007a1200 	.word	0x007a1200

08006064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006068:	4b03      	ldr	r3, [pc, #12]	@ (8006078 <HAL_RCC_GetHCLKFreq+0x14>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000008 	.word	0x20000008

0800607c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006080:	f7ff fff0 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 8006084:	4602      	mov	r2, r0
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	4904      	ldr	r1, [pc, #16]	@ (80060a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006092:	5ccb      	ldrb	r3, [r1, r3]
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	0800f958 	.word	0x0800f958

080060a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060ac:	f7ff ffda 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0adb      	lsrs	r3, r3, #11
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4904      	ldr	r1, [pc, #16]	@ (80060d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800f958 	.word	0x0800f958

080060d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060e0:	4b2a      	ldr	r3, [pc, #168]	@ (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060ec:	f7ff f922 	bl	8005334 <HAL_PWREx_GetVoltageRange>
 80060f0:	6178      	str	r0, [r7, #20]
 80060f2:	e014      	b.n	800611e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060f4:	4b25      	ldr	r3, [pc, #148]	@ (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f8:	4a24      	ldr	r2, [pc, #144]	@ (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006100:	4b22      	ldr	r3, [pc, #136]	@ (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800610c:	f7ff f912 	bl	8005334 <HAL_PWREx_GetVoltageRange>
 8006110:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006112:	4b1e      	ldr	r3, [pc, #120]	@ (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006116:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800611c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006124:	d10b      	bne.n	800613e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b80      	cmp	r3, #128	@ 0x80
 800612a:	d919      	bls.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006130:	d902      	bls.n	8006138 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006132:	2302      	movs	r3, #2
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	e013      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006138:	2301      	movs	r3, #1
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	e010      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b80      	cmp	r3, #128	@ 0x80
 8006142:	d902      	bls.n	800614a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006144:	2303      	movs	r3, #3
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	e00a      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b80      	cmp	r3, #128	@ 0x80
 800614e:	d102      	bne.n	8006156 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006150:	2302      	movs	r3, #2
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	e004      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b70      	cmp	r3, #112	@ 0x70
 800615a:	d101      	bne.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800615c:	2301      	movs	r3, #1
 800615e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006160:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f023 0207 	bic.w	r2, r3, #7
 8006168:	4909      	ldr	r1, [pc, #36]	@ (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	429a      	cmp	r2, r3
 800617c:	d001      	beq.n	8006182 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40021000 	.word	0x40021000
 8006190:	40022000 	.word	0x40022000

08006194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800619c:	2300      	movs	r3, #0
 800619e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061a0:	2300      	movs	r3, #0
 80061a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d041      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061b8:	d02a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061be:	d824      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061c4:	d008      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061ca:	d81e      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061d4:	d010      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061d6:	e018      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061d8:	4b86      	ldr	r3, [pc, #536]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a85      	ldr	r2, [pc, #532]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e4:	e015      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 facb 	bl	8006788 <RCCEx_PLLSAI1_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061f6:	e00c      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3320      	adds	r3, #32
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fbb6 	bl	8006970 <RCCEx_PLLSAI2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006208:	e003      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	74fb      	strb	r3, [r7, #19]
      break;
 800620e:	e000      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006212:	7cfb      	ldrb	r3, [r7, #19]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006218:	4b76      	ldr	r3, [pc, #472]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006226:	4973      	ldr	r1, [pc, #460]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800622e:	e001      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d041      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006244:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006248:	d02a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800624a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800624e:	d824      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006254:	d008      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006256:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800625a:	d81e      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006264:	d010      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006266:	e018      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006268:	4b62      	ldr	r3, [pc, #392]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a61      	ldr	r2, [pc, #388]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800626e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006272:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006274:	e015      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3304      	adds	r3, #4
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fa83 	bl	8006788 <RCCEx_PLLSAI1_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006286:	e00c      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3320      	adds	r3, #32
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fb6e 	bl	8006970 <RCCEx_PLLSAI2_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006298:	e003      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	74fb      	strb	r3, [r7, #19]
      break;
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80062a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a2:	7cfb      	ldrb	r3, [r7, #19]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062a8:	4b52      	ldr	r3, [pc, #328]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062b6:	494f      	ldr	r1, [pc, #316]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80062be:	e001      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	7cfb      	ldrb	r3, [r7, #19]
 80062c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80a0 	beq.w	8006412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062d2:	2300      	movs	r3, #0
 80062d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062d6:	4b47      	ldr	r3, [pc, #284]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ec:	4b41      	ldr	r3, [pc, #260]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f0:	4a40      	ldr	r2, [pc, #256]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f8:	4b3e      	ldr	r3, [pc, #248]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006304:	2301      	movs	r3, #1
 8006306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006308:	4b3b      	ldr	r3, [pc, #236]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3a      	ldr	r2, [pc, #232]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800630e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006314:	f7fd fac2 	bl	800389c <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800631a:	e009      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631c:	f7fd fabe 	bl	800389c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d902      	bls.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	74fb      	strb	r3, [r7, #19]
        break;
 800632e:	e005      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006330:	4b31      	ldr	r3, [pc, #196]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0ef      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800633c:	7cfb      	ldrb	r3, [r7, #19]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d15c      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006342:	4b2c      	ldr	r3, [pc, #176]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800634c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01f      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	429a      	cmp	r2, r3
 800635e:	d019      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006360:	4b24      	ldr	r3, [pc, #144]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800636a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800636c:	4b21      	ldr	r3, [pc, #132]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006372:	4a20      	ldr	r2, [pc, #128]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800637c:	4b1d      	ldr	r3, [pc, #116]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006382:	4a1c      	ldr	r2, [pc, #112]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800638c:	4a19      	ldr	r2, [pc, #100]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639e:	f7fd fa7d 	bl	800389c <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a4:	e00b      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fd fa79 	bl	800389c <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d902      	bls.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	74fb      	strb	r3, [r7, #19]
            break;
 80063bc:	e006      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063be:	4b0d      	ldr	r3, [pc, #52]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0ec      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063d2:	4b08      	ldr	r3, [pc, #32]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063e2:	4904      	ldr	r1, [pc, #16]	@ (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063ea:	e009      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	74bb      	strb	r3, [r7, #18]
 80063f0:	e006      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80063f2:	bf00      	nop
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006400:	7c7b      	ldrb	r3, [r7, #17]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006406:	4b9e      	ldr	r3, [pc, #632]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800640a:	4a9d      	ldr	r2, [pc, #628]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006410:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800641e:	4b98      	ldr	r3, [pc, #608]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	f023 0203 	bic.w	r2, r3, #3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	4994      	ldr	r1, [pc, #592]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006440:	4b8f      	ldr	r3, [pc, #572]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006446:	f023 020c 	bic.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	498c      	ldr	r1, [pc, #560]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006462:	4b87      	ldr	r3, [pc, #540]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006468:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	4983      	ldr	r1, [pc, #524]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006484:	4b7e      	ldr	r3, [pc, #504]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	497b      	ldr	r1, [pc, #492]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064a6:	4b76      	ldr	r3, [pc, #472]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b4:	4972      	ldr	r1, [pc, #456]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c8:	4b6d      	ldr	r3, [pc, #436]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d6:	496a      	ldr	r1, [pc, #424]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ea:	4b65      	ldr	r3, [pc, #404]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f8:	4961      	ldr	r1, [pc, #388]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800650c:	4b5c      	ldr	r3, [pc, #368]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006512:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651a:	4959      	ldr	r1, [pc, #356]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800652e:	4b54      	ldr	r3, [pc, #336]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006534:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653c:	4950      	ldr	r1, [pc, #320]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006550:	4b4b      	ldr	r3, [pc, #300]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006556:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655e:	4948      	ldr	r1, [pc, #288]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006572:	4b43      	ldr	r3, [pc, #268]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006578:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006580:	493f      	ldr	r1, [pc, #252]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d028      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006594:	4b3a      	ldr	r3, [pc, #232]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a2:	4937      	ldr	r1, [pc, #220]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b2:	d106      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b4:	4b32      	ldr	r3, [pc, #200]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4a31      	ldr	r2, [pc, #196]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065be:	60d3      	str	r3, [r2, #12]
 80065c0:	e011      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065ca:	d10c      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	2101      	movs	r1, #1
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f8d8 	bl	8006788 <RCCEx_PLLSAI1_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065dc:	7cfb      	ldrb	r3, [r7, #19]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80065e2:	7cfb      	ldrb	r3, [r7, #19]
 80065e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d028      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065f2:	4b23      	ldr	r3, [pc, #140]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006600:	491f      	ldr	r1, [pc, #124]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006610:	d106      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006612:	4b1b      	ldr	r3, [pc, #108]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	4a1a      	ldr	r2, [pc, #104]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006618:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661c:	60d3      	str	r3, [r2, #12]
 800661e:	e011      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006628:	d10c      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3304      	adds	r3, #4
 800662e:	2101      	movs	r1, #1
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f8a9 	bl	8006788 <RCCEx_PLLSAI1_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800663a:	7cfb      	ldrb	r3, [r7, #19]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006640:	7cfb      	ldrb	r3, [r7, #19]
 8006642:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02b      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006650:	4b0b      	ldr	r3, [pc, #44]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800665e:	4908      	ldr	r1, [pc, #32]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800666a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800666e:	d109      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006670:	4b03      	ldr	r3, [pc, #12]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4a02      	ldr	r2, [pc, #8]	@ (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800667a:	60d3      	str	r3, [r2, #12]
 800667c:	e014      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800667e:	bf00      	nop
 8006680:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800668c:	d10c      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f000 f877 	bl	8006788 <RCCEx_PLLSAI1_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800669e:	7cfb      	ldrb	r3, [r7, #19]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d02f      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066c2:	4928      	ldr	r1, [pc, #160]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066d2:	d10d      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3304      	adds	r3, #4
 80066d8:	2102      	movs	r1, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f854 	bl	8006788 <RCCEx_PLLSAI1_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066e4:	7cfb      	ldrb	r3, [r7, #19]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066ea:	7cfb      	ldrb	r3, [r7, #19]
 80066ec:	74bb      	strb	r3, [r7, #18]
 80066ee:	e011      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f8:	d10c      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3320      	adds	r3, #32
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f000 f935 	bl	8006970 <RCCEx_PLLSAI2_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800670a:	7cfb      	ldrb	r3, [r7, #19]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006710:	7cfb      	ldrb	r3, [r7, #19]
 8006712:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006720:	4b10      	ldr	r3, [pc, #64]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006726:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800672e:	490d      	ldr	r1, [pc, #52]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006742:	4b08      	ldr	r3, [pc, #32]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006748:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006752:	4904      	ldr	r1, [pc, #16]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800675a:	7cbb      	ldrb	r3, [r7, #18]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40021000 	.word	0x40021000

08006768 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800676c:	4b05      	ldr	r3, [pc, #20]	@ (8006784 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a04      	ldr	r2, [pc, #16]	@ (8006784 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006772:	f043 0304 	orr.w	r3, r3, #4
 8006776:	6013      	str	r3, [r2, #0]
}
 8006778:	bf00      	nop
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000

08006788 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006796:	4b75      	ldr	r3, [pc, #468]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d018      	beq.n	80067d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067a2:	4b72      	ldr	r3, [pc, #456]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0203 	and.w	r2, r3, #3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d10d      	bne.n	80067ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
       ||
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067ba:	4b6c      	ldr	r3, [pc, #432]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	091b      	lsrs	r3, r3, #4
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
       ||
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d047      	beq.n	800685e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
 80067d2:	e044      	b.n	800685e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d018      	beq.n	800680e <RCCEx_PLLSAI1_Config+0x86>
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d825      	bhi.n	800682c <RCCEx_PLLSAI1_Config+0xa4>
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d002      	beq.n	80067ea <RCCEx_PLLSAI1_Config+0x62>
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d009      	beq.n	80067fc <RCCEx_PLLSAI1_Config+0x74>
 80067e8:	e020      	b.n	800682c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067ea:	4b60      	ldr	r3, [pc, #384]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d11d      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067fa:	e01a      	b.n	8006832 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067fc:	4b5b      	ldr	r3, [pc, #364]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006804:	2b00      	cmp	r3, #0
 8006806:	d116      	bne.n	8006836 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800680c:	e013      	b.n	8006836 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800680e:	4b57      	ldr	r3, [pc, #348]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800681a:	4b54      	ldr	r3, [pc, #336]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800682a:	e006      	b.n	800683a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	e004      	b.n	800683c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800683a:	bf00      	nop
    }

    if(status == HAL_OK)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10d      	bne.n	800685e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006842:	4b4a      	ldr	r3, [pc, #296]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6819      	ldr	r1, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	3b01      	subs	r3, #1
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	430b      	orrs	r3, r1
 8006858:	4944      	ldr	r1, [pc, #272]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 800685a:	4313      	orrs	r3, r2
 800685c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d17d      	bne.n	8006960 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006864:	4b41      	ldr	r3, [pc, #260]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a40      	ldr	r2, [pc, #256]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 800686a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800686e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006870:	f7fd f814 	bl	800389c <HAL_GetTick>
 8006874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006876:	e009      	b.n	800688c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006878:	f7fd f810 	bl	800389c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d902      	bls.n	800688c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	73fb      	strb	r3, [r7, #15]
        break;
 800688a:	e005      	b.n	8006898 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800688c:	4b37      	ldr	r3, [pc, #220]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ef      	bne.n	8006878 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d160      	bne.n	8006960 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d111      	bne.n	80068c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068a4:	4b31      	ldr	r3, [pc, #196]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80068ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6892      	ldr	r2, [r2, #8]
 80068b4:	0211      	lsls	r1, r2, #8
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68d2      	ldr	r2, [r2, #12]
 80068ba:	0912      	lsrs	r2, r2, #4
 80068bc:	0452      	lsls	r2, r2, #17
 80068be:	430a      	orrs	r2, r1
 80068c0:	492a      	ldr	r1, [pc, #168]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	610b      	str	r3, [r1, #16]
 80068c6:	e027      	b.n	8006918 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d112      	bne.n	80068f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ce:	4b27      	ldr	r3, [pc, #156]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80068d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6892      	ldr	r2, [r2, #8]
 80068de:	0211      	lsls	r1, r2, #8
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6912      	ldr	r2, [r2, #16]
 80068e4:	0852      	lsrs	r2, r2, #1
 80068e6:	3a01      	subs	r2, #1
 80068e8:	0552      	lsls	r2, r2, #21
 80068ea:	430a      	orrs	r2, r1
 80068ec:	491f      	ldr	r1, [pc, #124]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	610b      	str	r3, [r1, #16]
 80068f2:	e011      	b.n	8006918 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068f4:	4b1d      	ldr	r3, [pc, #116]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80068fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6892      	ldr	r2, [r2, #8]
 8006904:	0211      	lsls	r1, r2, #8
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6952      	ldr	r2, [r2, #20]
 800690a:	0852      	lsrs	r2, r2, #1
 800690c:	3a01      	subs	r2, #1
 800690e:	0652      	lsls	r2, r2, #25
 8006910:	430a      	orrs	r2, r1
 8006912:	4916      	ldr	r1, [pc, #88]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006914:	4313      	orrs	r3, r2
 8006916:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006918:	4b14      	ldr	r3, [pc, #80]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a13      	ldr	r2, [pc, #76]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 800691e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fc ffba 	bl	800389c <HAL_GetTick>
 8006928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800692a:	e009      	b.n	8006940 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800692c:	f7fc ffb6 	bl	800389c <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d902      	bls.n	8006940 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	73fb      	strb	r3, [r7, #15]
          break;
 800693e:	e005      	b.n	800694c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006940:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ef      	beq.n	800692c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d106      	bne.n	8006960 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006952:	4b06      	ldr	r3, [pc, #24]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	4904      	ldr	r1, [pc, #16]	@ (800696c <RCCEx_PLLSAI1_Config+0x1e4>)
 800695c:	4313      	orrs	r3, r2
 800695e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40021000 	.word	0x40021000

08006970 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800697e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800698a:	4b67      	ldr	r3, [pc, #412]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0203 	and.w	r2, r3, #3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d10d      	bne.n	80069b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
       ||
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80069a2:	4b61      	ldr	r3, [pc, #388]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	091b      	lsrs	r3, r3, #4
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
       ||
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d047      	beq.n	8006a46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	e044      	b.n	8006a46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d018      	beq.n	80069f6 <RCCEx_PLLSAI2_Config+0x86>
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d825      	bhi.n	8006a14 <RCCEx_PLLSAI2_Config+0xa4>
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d002      	beq.n	80069d2 <RCCEx_PLLSAI2_Config+0x62>
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d009      	beq.n	80069e4 <RCCEx_PLLSAI2_Config+0x74>
 80069d0:	e020      	b.n	8006a14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069d2:	4b55      	ldr	r3, [pc, #340]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d11d      	bne.n	8006a1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e2:	e01a      	b.n	8006a1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069e4:	4b50      	ldr	r3, [pc, #320]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d116      	bne.n	8006a1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f4:	e013      	b.n	8006a1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10f      	bne.n	8006a22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a02:	4b49      	ldr	r3, [pc, #292]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a12:	e006      	b.n	8006a22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
      break;
 8006a18:	e004      	b.n	8006a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a1a:	bf00      	nop
 8006a1c:	e002      	b.n	8006a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a22:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6819      	ldr	r1, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	4939      	ldr	r1, [pc, #228]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d167      	bne.n	8006b1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a4c:	4b36      	ldr	r3, [pc, #216]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a35      	ldr	r2, [pc, #212]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a58:	f7fc ff20 	bl	800389c <HAL_GetTick>
 8006a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a5e:	e009      	b.n	8006a74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a60:	f7fc ff1c 	bl	800389c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d902      	bls.n	8006a74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	73fb      	strb	r3, [r7, #15]
        break;
 8006a72:	e005      	b.n	8006a80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a74:	4b2c      	ldr	r3, [pc, #176]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1ef      	bne.n	8006a60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d14a      	bne.n	8006b1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d111      	bne.n	8006ab0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a8c:	4b26      	ldr	r3, [pc, #152]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6892      	ldr	r2, [r2, #8]
 8006a9c:	0211      	lsls	r1, r2, #8
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68d2      	ldr	r2, [r2, #12]
 8006aa2:	0912      	lsrs	r2, r2, #4
 8006aa4:	0452      	lsls	r2, r2, #17
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	491f      	ldr	r1, [pc, #124]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	614b      	str	r3, [r1, #20]
 8006aae:	e011      	b.n	8006ad4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006ab8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6892      	ldr	r2, [r2, #8]
 8006ac0:	0211      	lsls	r1, r2, #8
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6912      	ldr	r2, [r2, #16]
 8006ac6:	0852      	lsrs	r2, r2, #1
 8006ac8:	3a01      	subs	r2, #1
 8006aca:	0652      	lsls	r2, r2, #25
 8006acc:	430a      	orrs	r2, r1
 8006ace:	4916      	ldr	r1, [pc, #88]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ad4:	4b14      	ldr	r3, [pc, #80]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a13      	ldr	r2, [pc, #76]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ade:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae0:	f7fc fedc 	bl	800389c <HAL_GetTick>
 8006ae4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ae6:	e009      	b.n	8006afc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ae8:	f7fc fed8 	bl	800389c <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d902      	bls.n	8006afc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	73fb      	strb	r3, [r7, #15]
          break;
 8006afa:	e005      	b.n	8006b08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0ef      	beq.n	8006ae8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b0e:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	4904      	ldr	r1, [pc, #16]	@ (8006b28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40021000 	.word	0x40021000

08006b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e095      	b.n	8006c6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b4e:	d009      	beq.n	8006b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	61da      	str	r2, [r3, #28]
 8006b56:	e005      	b.n	8006b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f877 	bl	8006c72 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ba4:	d902      	bls.n	8006bac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e002      	b.n	8006bb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006bba:	d007      	beq.n	8006bcc <HAL_SPI_Init+0xa0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bc4:	d002      	beq.n	8006bcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0e:	ea42 0103 	orr.w	r1, r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	0c1b      	lsrs	r3, r3, #16
 8006c28:	f003 0204 	and.w	r2, r3, #4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c48:	ea42 0103 	orr.w	r1, r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b08a      	sub	sp, #40	@ 0x28
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c94:	2301      	movs	r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c98:	f7fc fe00 	bl	800389c <HAL_GetTick>
 8006c9c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ca4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cb4:	7ffb      	ldrb	r3, [r7, #31]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d00c      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x4e>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc0:	d106      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x4a>
 8006cca:	7ffb      	ldrb	r3, [r7, #31]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d001      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e1f3      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_SPI_TransmitReceive+0x60>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_SPI_TransmitReceive+0x60>
 8006ce0:	887b      	ldrh	r3, [r7, #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e1e8      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x72>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e1e1      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d003      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2205      	movs	r2, #5
 8006d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	887a      	ldrh	r2, [r7, #2]
 8006d24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	887a      	ldrh	r2, [r7, #2]
 8006d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	887a      	ldrh	r2, [r7, #2]
 8006d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	887a      	ldrh	r2, [r7, #2]
 8006d40:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d56:	d802      	bhi.n	8006d5e <HAL_SPI_TransmitReceive+0xd8>
 8006d58:	8abb      	ldrh	r3, [r7, #20]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d908      	bls.n	8006d70 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e007      	b.n	8006d80 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b40      	cmp	r3, #64	@ 0x40
 8006d8c:	d007      	beq.n	8006d9e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da6:	f240 8083 	bls.w	8006eb0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_SPI_TransmitReceive+0x132>
 8006db2:	8afb      	ldrh	r3, [r7, #22]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d16f      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	881a      	ldrh	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ddc:	e05c      	b.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d11b      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x19e>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d016      	beq.n	8006e24 <HAL_SPI_TransmitReceive+0x19e>
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d113      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	881a      	ldrh	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	1c9a      	adds	r2, r3, #2
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d11c      	bne.n	8006e6c <HAL_SPI_TransmitReceive+0x1e6>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d016      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	b292      	uxth	r2, r2
 8006e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e50:	1c9a      	adds	r2, r3, #2
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e6c:	f7fc fd16 	bl	800389c <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d80d      	bhi.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d009      	beq.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e111      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d19d      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x158>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d197      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x158>
 8006eae:	e0e5      	b.n	800707c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x23a>
 8006eb8:	8afb      	ldrh	r3, [r7, #22]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f040 80d1 	bne.w	8007062 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d912      	bls.n	8006ef0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	881a      	ldrh	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	1c9a      	adds	r2, r3, #2
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b02      	subs	r3, #2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eee:	e0b8      	b.n	8007062 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f16:	e0a4      	b.n	8007062 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d134      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x30a>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d02f      	beq.n	8006f90 <HAL_SPI_TransmitReceive+0x30a>
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d12c      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d912      	bls.n	8006f66 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	881a      	ldrh	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	1c9a      	adds	r2, r3, #2
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b02      	subs	r3, #2
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f64:	e012      	b.n	8006f8c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d148      	bne.n	8007030 <HAL_SPI_TransmitReceive+0x3aa>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d042      	beq.n	8007030 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d923      	bls.n	8006ffe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc0:	b292      	uxth	r2, r2
 8006fc2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b02      	subs	r3, #2
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d81f      	bhi.n	800702c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ffa:	605a      	str	r2, [r3, #4]
 8006ffc:	e016      	b.n	800702c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f103 020c 	add.w	r2, r3, #12
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800702c:	2301      	movs	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007030:	f7fc fc34 	bl	800389c <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800703c:	429a      	cmp	r2, r3
 800703e:	d803      	bhi.n	8007048 <HAL_SPI_TransmitReceive+0x3c2>
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d102      	bne.n	800704e <HAL_SPI_TransmitReceive+0x3c8>
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e02c      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	f47f af55 	bne.w	8006f18 <HAL_SPI_TransmitReceive+0x292>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	f47f af4e 	bne.w	8006f18 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800707c:	6a3a      	ldr	r2, [r7, #32]
 800707e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f94b 	bl	800731c <SPI_EndRxTxTransaction>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e00e      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
  }
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3728      	adds	r7, #40	@ 0x28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070d2:	b2db      	uxtb	r3, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070f0:	f7fc fbd4 	bl	800389c <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	4413      	add	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007100:	f7fc fbcc 	bl	800389c <HAL_GetTick>
 8007104:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007106:	4b39      	ldr	r3, [pc, #228]	@ (80071ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	015b      	lsls	r3, r3, #5
 800710c:	0d1b      	lsrs	r3, r3, #20
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007116:	e054      	b.n	80071c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711e:	d050      	beq.n	80071c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007120:	f7fc fbbc 	bl	800389c <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	429a      	cmp	r2, r3
 800712e:	d902      	bls.n	8007136 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d13d      	bne.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800714e:	d111      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007158:	d004      	beq.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007162:	d107      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717c:	d10f      	bne.n	800719e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800719c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e017      	b.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	3b01      	subs	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4013      	ands	r3, r2
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d19b      	bne.n	8007118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3720      	adds	r7, #32
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000008 	.word	0x20000008

080071f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	@ 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007202:	f7fc fb4b 	bl	800389c <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	4413      	add	r3, r2
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007212:	f7fc fb43 	bl	800389c <HAL_GetTick>
 8007216:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007220:	4b3d      	ldr	r3, [pc, #244]	@ (8007318 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	00da      	lsls	r2, r3, #3
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	0d1b      	lsrs	r3, r3, #20
 8007230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007232:	fb02 f303 	mul.w	r3, r2, r3
 8007236:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007238:	e060      	b.n	80072fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007240:	d107      	bne.n	8007252 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007250:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d050      	beq.n	80072fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800725a:	f7fc fb1f 	bl	800389c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007266:	429a      	cmp	r2, r3
 8007268:	d902      	bls.n	8007270 <SPI_WaitFifoStateUntilTimeout+0x80>
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d13d      	bne.n	80072ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800727e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007288:	d111      	bne.n	80072ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007292:	d004      	beq.n	800729e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800729c:	d107      	bne.n	80072ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b6:	d10f      	bne.n	80072d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e010      	b.n	800730e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d196      	bne.n	800723a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3728      	adds	r7, #40	@ 0x28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000008 	.word	0x20000008

0800731c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff ff5b 	bl	80071f0 <SPI_WaitFifoStateUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007344:	f043 0220 	orr.w	r2, r3, #32
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e027      	b.n	80073a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	2180      	movs	r1, #128	@ 0x80
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fec0 	bl	80070e0 <SPI_WaitFlagStateUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736a:	f043 0220 	orr.w	r2, r3, #32
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e014      	b.n	80073a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff ff34 	bl	80071f0 <SPI_WaitFifoStateUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e000      	b.n	80073a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e040      	b.n	800743c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fb f9f8 	bl	80027c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2224      	movs	r2, #36	@ 0x24
 80073d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fb6a 	bl	8007ac8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f8af 	bl	8007558 <UART_SetConfig>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e01b      	b.n	800743c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fbe9 	bl	8007c0c <UART_CheckIdleState>
 800743a:	4603      	mov	r3, r0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	@ 0x28
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007458:	2b20      	cmp	r3, #32
 800745a:	d177      	bne.n	800754c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_UART_Transmit+0x24>
 8007462:	88fb      	ldrh	r3, [r7, #6]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e070      	b.n	800754e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2221      	movs	r2, #33	@ 0x21
 8007478:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800747a:	f7fc fa0f 	bl	800389c <HAL_GetTick>
 800747e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007498:	d108      	bne.n	80074ac <HAL_UART_Transmit+0x68>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	e003      	b.n	80074b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074b4:	e02f      	b.n	8007516 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2200      	movs	r2, #0
 80074be:	2180      	movs	r1, #128	@ 0x80
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 fc4b 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e03b      	b.n	800754e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10b      	bne.n	80074f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074e8:	b292      	uxth	r2, r2
 80074ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3302      	adds	r3, #2
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e007      	b.n	8007504 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	3301      	adds	r3, #1
 8007502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1c9      	bne.n	80074b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2200      	movs	r2, #0
 800752a:	2140      	movs	r1, #64	@ 0x40
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fc15 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e005      	b.n	800754e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800754c:	2302      	movs	r3, #2
  }
}
 800754e:	4618      	mov	r0, r3
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800755c:	b08a      	sub	sp, #40	@ 0x28
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	431a      	orrs	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	431a      	orrs	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	4313      	orrs	r3, r2
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4ba4      	ldr	r3, [pc, #656]	@ (8007818 <UART_SetConfig+0x2c0>)
 8007588:	4013      	ands	r3, r2
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007590:	430b      	orrs	r3, r1
 8007592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a99      	ldr	r2, [pc, #612]	@ (800781c <UART_SetConfig+0x2c4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d004      	beq.n	80075c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c0:	4313      	orrs	r3, r2
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d4:	430a      	orrs	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a90      	ldr	r2, [pc, #576]	@ (8007820 <UART_SetConfig+0x2c8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d126      	bne.n	8007630 <UART_SetConfig+0xd8>
 80075e2:	4b90      	ldr	r3, [pc, #576]	@ (8007824 <UART_SetConfig+0x2cc>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d81b      	bhi.n	8007628 <UART_SetConfig+0xd0>
 80075f0:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <UART_SetConfig+0xa0>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	08007609 	.word	0x08007609
 80075fc:	08007619 	.word	0x08007619
 8007600:	08007611 	.word	0x08007611
 8007604:	08007621 	.word	0x08007621
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760e:	e116      	b.n	800783e <UART_SetConfig+0x2e6>
 8007610:	2302      	movs	r3, #2
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007616:	e112      	b.n	800783e <UART_SetConfig+0x2e6>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761e:	e10e      	b.n	800783e <UART_SetConfig+0x2e6>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007626:	e10a      	b.n	800783e <UART_SetConfig+0x2e6>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e106      	b.n	800783e <UART_SetConfig+0x2e6>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a7c      	ldr	r2, [pc, #496]	@ (8007828 <UART_SetConfig+0x2d0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d138      	bne.n	80076ac <UART_SetConfig+0x154>
 800763a:	4b7a      	ldr	r3, [pc, #488]	@ (8007824 <UART_SetConfig+0x2cc>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007640:	f003 030c 	and.w	r3, r3, #12
 8007644:	2b0c      	cmp	r3, #12
 8007646:	d82d      	bhi.n	80076a4 <UART_SetConfig+0x14c>
 8007648:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <UART_SetConfig+0xf8>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007685 	.word	0x08007685
 8007654:	080076a5 	.word	0x080076a5
 8007658:	080076a5 	.word	0x080076a5
 800765c:	080076a5 	.word	0x080076a5
 8007660:	08007695 	.word	0x08007695
 8007664:	080076a5 	.word	0x080076a5
 8007668:	080076a5 	.word	0x080076a5
 800766c:	080076a5 	.word	0x080076a5
 8007670:	0800768d 	.word	0x0800768d
 8007674:	080076a5 	.word	0x080076a5
 8007678:	080076a5 	.word	0x080076a5
 800767c:	080076a5 	.word	0x080076a5
 8007680:	0800769d 	.word	0x0800769d
 8007684:	2300      	movs	r3, #0
 8007686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768a:	e0d8      	b.n	800783e <UART_SetConfig+0x2e6>
 800768c:	2302      	movs	r3, #2
 800768e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007692:	e0d4      	b.n	800783e <UART_SetConfig+0x2e6>
 8007694:	2304      	movs	r3, #4
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769a:	e0d0      	b.n	800783e <UART_SetConfig+0x2e6>
 800769c:	2308      	movs	r3, #8
 800769e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076a2:	e0cc      	b.n	800783e <UART_SetConfig+0x2e6>
 80076a4:	2310      	movs	r3, #16
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076aa:	e0c8      	b.n	800783e <UART_SetConfig+0x2e6>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a5e      	ldr	r2, [pc, #376]	@ (800782c <UART_SetConfig+0x2d4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d125      	bne.n	8007702 <UART_SetConfig+0x1aa>
 80076b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007824 <UART_SetConfig+0x2cc>)
 80076b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076c0:	2b30      	cmp	r3, #48	@ 0x30
 80076c2:	d016      	beq.n	80076f2 <UART_SetConfig+0x19a>
 80076c4:	2b30      	cmp	r3, #48	@ 0x30
 80076c6:	d818      	bhi.n	80076fa <UART_SetConfig+0x1a2>
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d00a      	beq.n	80076e2 <UART_SetConfig+0x18a>
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d814      	bhi.n	80076fa <UART_SetConfig+0x1a2>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <UART_SetConfig+0x182>
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d008      	beq.n	80076ea <UART_SetConfig+0x192>
 80076d8:	e00f      	b.n	80076fa <UART_SetConfig+0x1a2>
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e0:	e0ad      	b.n	800783e <UART_SetConfig+0x2e6>
 80076e2:	2302      	movs	r3, #2
 80076e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e8:	e0a9      	b.n	800783e <UART_SetConfig+0x2e6>
 80076ea:	2304      	movs	r3, #4
 80076ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f0:	e0a5      	b.n	800783e <UART_SetConfig+0x2e6>
 80076f2:	2308      	movs	r3, #8
 80076f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f8:	e0a1      	b.n	800783e <UART_SetConfig+0x2e6>
 80076fa:	2310      	movs	r3, #16
 80076fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007700:	e09d      	b.n	800783e <UART_SetConfig+0x2e6>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a4a      	ldr	r2, [pc, #296]	@ (8007830 <UART_SetConfig+0x2d8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d125      	bne.n	8007758 <UART_SetConfig+0x200>
 800770c:	4b45      	ldr	r3, [pc, #276]	@ (8007824 <UART_SetConfig+0x2cc>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007712:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007716:	2bc0      	cmp	r3, #192	@ 0xc0
 8007718:	d016      	beq.n	8007748 <UART_SetConfig+0x1f0>
 800771a:	2bc0      	cmp	r3, #192	@ 0xc0
 800771c:	d818      	bhi.n	8007750 <UART_SetConfig+0x1f8>
 800771e:	2b80      	cmp	r3, #128	@ 0x80
 8007720:	d00a      	beq.n	8007738 <UART_SetConfig+0x1e0>
 8007722:	2b80      	cmp	r3, #128	@ 0x80
 8007724:	d814      	bhi.n	8007750 <UART_SetConfig+0x1f8>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <UART_SetConfig+0x1d8>
 800772a:	2b40      	cmp	r3, #64	@ 0x40
 800772c:	d008      	beq.n	8007740 <UART_SetConfig+0x1e8>
 800772e:	e00f      	b.n	8007750 <UART_SetConfig+0x1f8>
 8007730:	2300      	movs	r3, #0
 8007732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007736:	e082      	b.n	800783e <UART_SetConfig+0x2e6>
 8007738:	2302      	movs	r3, #2
 800773a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773e:	e07e      	b.n	800783e <UART_SetConfig+0x2e6>
 8007740:	2304      	movs	r3, #4
 8007742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007746:	e07a      	b.n	800783e <UART_SetConfig+0x2e6>
 8007748:	2308      	movs	r3, #8
 800774a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774e:	e076      	b.n	800783e <UART_SetConfig+0x2e6>
 8007750:	2310      	movs	r3, #16
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007756:	e072      	b.n	800783e <UART_SetConfig+0x2e6>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a35      	ldr	r2, [pc, #212]	@ (8007834 <UART_SetConfig+0x2dc>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d12a      	bne.n	80077b8 <UART_SetConfig+0x260>
 8007762:	4b30      	ldr	r3, [pc, #192]	@ (8007824 <UART_SetConfig+0x2cc>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800776c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007770:	d01a      	beq.n	80077a8 <UART_SetConfig+0x250>
 8007772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007776:	d81b      	bhi.n	80077b0 <UART_SetConfig+0x258>
 8007778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800777c:	d00c      	beq.n	8007798 <UART_SetConfig+0x240>
 800777e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007782:	d815      	bhi.n	80077b0 <UART_SetConfig+0x258>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <UART_SetConfig+0x238>
 8007788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800778c:	d008      	beq.n	80077a0 <UART_SetConfig+0x248>
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x258>
 8007790:	2300      	movs	r3, #0
 8007792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007796:	e052      	b.n	800783e <UART_SetConfig+0x2e6>
 8007798:	2302      	movs	r3, #2
 800779a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779e:	e04e      	b.n	800783e <UART_SetConfig+0x2e6>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a6:	e04a      	b.n	800783e <UART_SetConfig+0x2e6>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ae:	e046      	b.n	800783e <UART_SetConfig+0x2e6>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b6:	e042      	b.n	800783e <UART_SetConfig+0x2e6>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a17      	ldr	r2, [pc, #92]	@ (800781c <UART_SetConfig+0x2c4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d13a      	bne.n	8007838 <UART_SetConfig+0x2e0>
 80077c2:	4b18      	ldr	r3, [pc, #96]	@ (8007824 <UART_SetConfig+0x2cc>)
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077d0:	d01a      	beq.n	8007808 <UART_SetConfig+0x2b0>
 80077d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077d6:	d81b      	bhi.n	8007810 <UART_SetConfig+0x2b8>
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077dc:	d00c      	beq.n	80077f8 <UART_SetConfig+0x2a0>
 80077de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e2:	d815      	bhi.n	8007810 <UART_SetConfig+0x2b8>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <UART_SetConfig+0x298>
 80077e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ec:	d008      	beq.n	8007800 <UART_SetConfig+0x2a8>
 80077ee:	e00f      	b.n	8007810 <UART_SetConfig+0x2b8>
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f6:	e022      	b.n	800783e <UART_SetConfig+0x2e6>
 80077f8:	2302      	movs	r3, #2
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fe:	e01e      	b.n	800783e <UART_SetConfig+0x2e6>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007806:	e01a      	b.n	800783e <UART_SetConfig+0x2e6>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780e:	e016      	b.n	800783e <UART_SetConfig+0x2e6>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007816:	e012      	b.n	800783e <UART_SetConfig+0x2e6>
 8007818:	efff69f3 	.word	0xefff69f3
 800781c:	40008000 	.word	0x40008000
 8007820:	40013800 	.word	0x40013800
 8007824:	40021000 	.word	0x40021000
 8007828:	40004400 	.word	0x40004400
 800782c:	40004800 	.word	0x40004800
 8007830:	40004c00 	.word	0x40004c00
 8007834:	40005000 	.word	0x40005000
 8007838:	2310      	movs	r3, #16
 800783a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a9f      	ldr	r2, [pc, #636]	@ (8007ac0 <UART_SetConfig+0x568>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d17a      	bne.n	800793e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007848:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800784c:	2b08      	cmp	r3, #8
 800784e:	d824      	bhi.n	800789a <UART_SetConfig+0x342>
 8007850:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <UART_SetConfig+0x300>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800787d 	.word	0x0800787d
 800785c:	0800789b 	.word	0x0800789b
 8007860:	08007885 	.word	0x08007885
 8007864:	0800789b 	.word	0x0800789b
 8007868:	0800788b 	.word	0x0800788b
 800786c:	0800789b 	.word	0x0800789b
 8007870:	0800789b 	.word	0x0800789b
 8007874:	0800789b 	.word	0x0800789b
 8007878:	08007893 	.word	0x08007893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fe fbfe 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8007880:	61f8      	str	r0, [r7, #28]
        break;
 8007882:	e010      	b.n	80078a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007884:	4b8f      	ldr	r3, [pc, #572]	@ (8007ac4 <UART_SetConfig+0x56c>)
 8007886:	61fb      	str	r3, [r7, #28]
        break;
 8007888:	e00d      	b.n	80078a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800788a:	f7fe fb5f 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 800788e:	61f8      	str	r0, [r7, #28]
        break;
 8007890:	e009      	b.n	80078a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007896:	61fb      	str	r3, [r7, #28]
        break;
 8007898:	e005      	b.n	80078a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80fb 	beq.w	8007aa4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	4413      	add	r3, r2
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d305      	bcc.n	80078ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d903      	bls.n	80078d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078d0:	e0e8      	b.n	8007aa4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	2200      	movs	r2, #0
 80078d6:	461c      	mov	r4, r3
 80078d8:	4615      	mov	r5, r2
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	022b      	lsls	r3, r5, #8
 80078e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80078e8:	0222      	lsls	r2, r4, #8
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	6849      	ldr	r1, [r1, #4]
 80078ee:	0849      	lsrs	r1, r1, #1
 80078f0:	2000      	movs	r0, #0
 80078f2:	4688      	mov	r8, r1
 80078f4:	4681      	mov	r9, r0
 80078f6:	eb12 0a08 	adds.w	sl, r2, r8
 80078fa:	eb43 0b09 	adc.w	fp, r3, r9
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790c:	4650      	mov	r0, sl
 800790e:	4659      	mov	r1, fp
 8007910:	f7f9 f99a 	bl	8000c48 <__aeabi_uldivmod>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4613      	mov	r3, r2
 800791a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007922:	d308      	bcc.n	8007936 <UART_SetConfig+0x3de>
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800792a:	d204      	bcs.n	8007936 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	60da      	str	r2, [r3, #12]
 8007934:	e0b6      	b.n	8007aa4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800793c:	e0b2      	b.n	8007aa4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007946:	d15e      	bne.n	8007a06 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007948:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800794c:	2b08      	cmp	r3, #8
 800794e:	d828      	bhi.n	80079a2 <UART_SetConfig+0x44a>
 8007950:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <UART_SetConfig+0x400>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	0800797d 	.word	0x0800797d
 800795c:	08007985 	.word	0x08007985
 8007960:	0800798d 	.word	0x0800798d
 8007964:	080079a3 	.word	0x080079a3
 8007968:	08007993 	.word	0x08007993
 800796c:	080079a3 	.word	0x080079a3
 8007970:	080079a3 	.word	0x080079a3
 8007974:	080079a3 	.word	0x080079a3
 8007978:	0800799b 	.word	0x0800799b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800797c:	f7fe fb7e 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8007980:	61f8      	str	r0, [r7, #28]
        break;
 8007982:	e014      	b.n	80079ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007984:	f7fe fb90 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8007988:	61f8      	str	r0, [r7, #28]
        break;
 800798a:	e010      	b.n	80079ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800798c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac4 <UART_SetConfig+0x56c>)
 800798e:	61fb      	str	r3, [r7, #28]
        break;
 8007990:	e00d      	b.n	80079ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007992:	f7fe fadb 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8007996:	61f8      	str	r0, [r7, #28]
        break;
 8007998:	e009      	b.n	80079ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800799a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800799e:	61fb      	str	r3, [r7, #28]
        break;
 80079a0:	e005      	b.n	80079ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d077      	beq.n	8007aa4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	005a      	lsls	r2, r3, #1
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	441a      	add	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b0f      	cmp	r3, #15
 80079ce:	d916      	bls.n	80079fe <UART_SetConfig+0x4a6>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079d6:	d212      	bcs.n	80079fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f023 030f 	bic.w	r3, r3, #15
 80079e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	085b      	lsrs	r3, r3, #1
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	8afb      	ldrh	r3, [r7, #22]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	8afa      	ldrh	r2, [r7, #22]
 80079fa:	60da      	str	r2, [r3, #12]
 80079fc:	e052      	b.n	8007aa4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a04:	e04e      	b.n	8007aa4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d827      	bhi.n	8007a5e <UART_SetConfig+0x506>
 8007a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <UART_SetConfig+0x4bc>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a41 	.word	0x08007a41
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a5f 	.word	0x08007a5f
 8007a24:	08007a4f 	.word	0x08007a4f
 8007a28:	08007a5f 	.word	0x08007a5f
 8007a2c:	08007a5f 	.word	0x08007a5f
 8007a30:	08007a5f 	.word	0x08007a5f
 8007a34:	08007a57 	.word	0x08007a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a38:	f7fe fb20 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8007a3c:	61f8      	str	r0, [r7, #28]
        break;
 8007a3e:	e014      	b.n	8007a6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a40:	f7fe fb32 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8007a44:	61f8      	str	r0, [r7, #28]
        break;
 8007a46:	e010      	b.n	8007a6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a48:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac4 <UART_SetConfig+0x56c>)
 8007a4a:	61fb      	str	r3, [r7, #28]
        break;
 8007a4c:	e00d      	b.n	8007a6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4e:	f7fe fa7d 	bl	8005f4c <HAL_RCC_GetSysClockFreq>
 8007a52:	61f8      	str	r0, [r7, #28]
        break;
 8007a54:	e009      	b.n	8007a6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a5a:	61fb      	str	r3, [r7, #28]
        break;
 8007a5c:	e005      	b.n	8007a6a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a68:	bf00      	nop
    }

    if (pclk != 0U)
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d019      	beq.n	8007aa4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	085a      	lsrs	r2, r3, #1
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	441a      	add	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b0f      	cmp	r3, #15
 8007a88:	d909      	bls.n	8007a9e <UART_SetConfig+0x546>
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a90:	d205      	bcs.n	8007a9e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60da      	str	r2, [r3, #12]
 8007a9c:	e002      	b.n	8007aa4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007ab0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3728      	adds	r7, #40	@ 0x28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007abe:	bf00      	nop
 8007ac0:	40008000 	.word	0x40008000
 8007ac4:	00f42400 	.word	0x00f42400

08007ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01a      	beq.n	8007bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bc6:	d10a      	bne.n	8007bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]
  }
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b098      	sub	sp, #96	@ 0x60
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c1c:	f7fb fe3e 	bl	800389c <HAL_GetTick>
 8007c20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d12e      	bne.n	8007c8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f88c 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d021      	beq.n	8007c8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e6      	bne.n	8007c4a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e062      	b.n	8007d54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d149      	bne.n	8007d30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f856 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d03c      	beq.n	8007d30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0301 	bic.w	r3, r3, #1
 8007cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d08:	61fa      	str	r2, [r7, #28]
 8007d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	69b9      	ldr	r1, [r7, #24]
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	617b      	str	r3, [r7, #20]
   return(result);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e011      	b.n	8007d54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3758      	adds	r7, #88	@ 0x58
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6c:	e04f      	b.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d04b      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d76:	f7fb fd91 	bl	800389c <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e04e      	b.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0304 	and.w	r3, r3, #4
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d037      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b80      	cmp	r3, #128	@ 0x80
 8007da2:	d034      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b40      	cmp	r3, #64	@ 0x40
 8007da8:	d031      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	f003 0308 	and.w	r3, r3, #8
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d110      	bne.n	8007dda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2208      	movs	r2, #8
 8007dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f838 	bl	8007e36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2208      	movs	r2, #8
 8007dca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e029      	b.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de8:	d111      	bne.n	8007e0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f81e 	bl	8007e36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e00f      	b.n	8007e2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4013      	ands	r3, r2
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	bf0c      	ite	eq
 8007e1e:	2301      	moveq	r3, #1
 8007e20:	2300      	movne	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d0a0      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b095      	sub	sp, #84	@ 0x54
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e6      	bne.n	8007e3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f023 0301 	bic.w	r3, r3, #1
 8007e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e5      	bne.n	8007e70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d118      	bne.n	8007ede <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f023 0310 	bic.w	r3, r3, #16
 8007ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6979      	ldr	r1, [r7, #20]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e6      	bne.n	8007eac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ef2:	bf00      	nop
 8007ef4:	3754      	adds	r7, #84	@ 0x54
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007efe:	b084      	sub	sp, #16
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	f107 001c 	add.w	r0, r7, #28
 8007f0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fa69 	bl	80083f4 <USB_CoreReset>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007f26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f3a:	e005      	b.n	8007f48 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f54:	b004      	add	sp, #16
 8007f56:	4770      	bx	lr

08007f58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f023 0201 	bic.w	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d115      	bne.n	8007fc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fa8:	200a      	movs	r0, #10
 8007faa:	f7fb fc83 	bl	80038b4 <HAL_Delay>
      ms += 10U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	330a      	adds	r3, #10
 8007fb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fa0f 	bl	80083d8 <USB_GetMode>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d01e      	beq.n	8007ffe <USB_SetCurrentMode+0x84>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fc4:	d9f0      	bls.n	8007fa8 <USB_SetCurrentMode+0x2e>
 8007fc6:	e01a      	b.n	8007ffe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d115      	bne.n	8007ffa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fda:	200a      	movs	r0, #10
 8007fdc:	f7fb fc6a 	bl	80038b4 <HAL_Delay>
      ms += 10U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	330a      	adds	r3, #10
 8007fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f9f6 	bl	80083d8 <USB_GetMode>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <USB_SetCurrentMode+0x84>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ff6:	d9f0      	bls.n	8007fda <USB_SetCurrentMode+0x60>
 8007ff8:	e001      	b.n	8007ffe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e005      	b.n	800800a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2bc8      	cmp	r3, #200	@ 0xc8
 8008002:	d101      	bne.n	8008008 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008014:	b084      	sub	sp, #16
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800802e:	2300      	movs	r3, #0
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	e009      	b.n	8008048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3340      	adds	r3, #64	@ 0x40
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	2200      	movs	r2, #0
 8008040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b0e      	cmp	r3, #14
 800804c:	d9f2      	bls.n	8008034 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800804e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008052:	2b00      	cmp	r3, #0
 8008054:	d11c      	bne.n	8008090 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008064:	f043 0302 	orr.w	r3, r3, #2
 8008068:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e005      	b.n	800809c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008094:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080a2:	461a      	mov	r2, r3
 80080a4:	2300      	movs	r3, #0
 80080a6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080a8:	2103      	movs	r1, #3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f95a 	bl	8008364 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080b0:	2110      	movs	r1, #16
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f8f6 	bl	80082a4 <USB_FlushTxFifo>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f920 	bl	8008308 <USB_FlushRxFifo>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d8:	461a      	mov	r2, r3
 80080da:	2300      	movs	r3, #0
 80080dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e4:	461a      	mov	r2, r3
 80080e6:	2300      	movs	r3, #0
 80080e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f0:	461a      	mov	r2, r3
 80080f2:	2300      	movs	r3, #0
 80080f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f6:	2300      	movs	r3, #0
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	e043      	b.n	8008184 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800810e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008112:	d118      	bne.n	8008146 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008126:	461a      	mov	r2, r3
 8008128:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	e013      	b.n	8008158 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813c:	461a      	mov	r2, r3
 800813e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	e008      	b.n	8008158 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008152:	461a      	mov	r2, r3
 8008154:	2300      	movs	r3, #0
 8008156:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008164:	461a      	mov	r2, r3
 8008166:	2300      	movs	r3, #0
 8008168:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008176:	461a      	mov	r2, r3
 8008178:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800817c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3301      	adds	r3, #1
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008188:	461a      	mov	r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	4293      	cmp	r3, r2
 800818e:	d3b5      	bcc.n	80080fc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008190:	2300      	movs	r3, #0
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	e043      	b.n	800821e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081ac:	d118      	bne.n	80081e0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c0:	461a      	mov	r2, r3
 80081c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	e013      	b.n	80081f2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d6:	461a      	mov	r2, r3
 80081d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	e008      	b.n	80081f2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ec:	461a      	mov	r2, r3
 80081ee:	2300      	movs	r3, #0
 80081f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fe:	461a      	mov	r2, r3
 8008200:	2300      	movs	r3, #0
 8008202:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008210:	461a      	mov	r2, r3
 8008212:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008216:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3301      	adds	r3, #1
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008222:	461a      	mov	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	4293      	cmp	r3, r2
 8008228:	d3b5      	bcc.n	8008196 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800823c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800824a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	f043 0210 	orr.w	r2, r3, #16
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699a      	ldr	r2, [r3, #24]
 800825c:	4b10      	ldr	r3, [pc, #64]	@ (80082a0 <USB_DevInit+0x28c>)
 800825e:	4313      	orrs	r3, r2
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008264:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f043 0208 	orr.w	r2, r3, #8
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008278:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800827c:	2b01      	cmp	r3, #1
 800827e:	d107      	bne.n	8008290 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008288:	f043 0304 	orr.w	r3, r3, #4
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800829c:	b004      	add	sp, #16
 800829e:	4770      	bx	lr
 80082a0:	803c3800 	.word	0x803c3800

080082a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082be:	d901      	bls.n	80082c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e01b      	b.n	80082fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	daf2      	bge.n	80082b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	019b      	lsls	r3, r3, #6
 80082d4:	f043 0220 	orr.w	r2, r3, #32
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3301      	adds	r3, #1
 80082e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e8:	d901      	bls.n	80082ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e006      	b.n	80082fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d0f0      	beq.n	80082dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008320:	d901      	bls.n	8008326 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e018      	b.n	8008358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	daf2      	bge.n	8008314 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2210      	movs	r2, #16
 8008336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3301      	adds	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008344:	d901      	bls.n	800834a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e006      	b.n	8008358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	2b10      	cmp	r3, #16
 8008354:	d0f0      	beq.n	8008338 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	68f9      	ldr	r1, [r7, #12]
 8008380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008384:	4313      	orrs	r3, r2
 8008386:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083c4:	f043 0302 	orr.w	r3, r3, #2
 80083c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	f003 0301 	and.w	r3, r3, #1
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800840c:	d901      	bls.n	8008412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e01b      	b.n	800844a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	daf2      	bge.n	8008400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f043 0201 	orr.w	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008436:	d901      	bls.n	800843c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e006      	b.n	800844a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b01      	cmp	r3, #1
 8008446:	d0f0      	beq.n	800842a <USB_CoreReset+0x36>

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b08c      	sub	sp, #48	@ 0x30
 800845a:	af00      	add	r7, sp, #0
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]
 8008462:	460b      	mov	r3, r1
 8008464:	71bb      	strb	r3, [r7, #6]
 8008466:	4613      	mov	r3, r2
 8008468:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800846e:	79bb      	ldrb	r3, [r7, #6]
 8008470:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8008472:	797b      	ldrb	r3, [r7, #5]
 8008474:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	2207      	movs	r2, #7
 800847c:	2100      	movs	r1, #0
 800847e:	4618      	mov	r0, r3
 8008480:	f005 fb0a 	bl	800da98 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008484:	f107 0318 	add.w	r3, r7, #24
 8008488:	2218      	movs	r2, #24
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f005 fb03 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008492:	233f      	movs	r3, #63	@ 0x3f
 8008494:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008496:	238a      	movs	r3, #138	@ 0x8a
 8008498:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800849a:	f107 0314 	add.w	r3, r7, #20
 800849e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80084a0:	2303      	movs	r3, #3
 80084a2:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 80084a4:	f107 030c 	add.w	r3, r7, #12
 80084a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80084aa:	2307      	movs	r3, #7
 80084ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80084ae:	f107 0318 	add.w	r3, r7, #24
 80084b2:	2100      	movs	r1, #0
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fea1 	bl	80091fc <hci_send_req>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	da01      	bge.n	80084c4 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80084c0:	23ff      	movs	r3, #255	@ 0xff
 80084c2:	e014      	b.n	80084ee <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80084c4:	7b3b      	ldrb	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80084ca:	7b3b      	ldrb	r3, [r7, #12]
 80084cc:	e00f      	b.n	80084ee <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80084ce:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80084d8:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80084dc:	b29a      	uxth	r2, r3
 80084de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e0:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80084e2:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ea:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3730      	adds	r7, #48	@ 0x30
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b08e      	sub	sp, #56	@ 0x38
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800850a:	f107 0314 	add.w	r3, r7, #20
 800850e:	2207      	movs	r2, #7
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f005 fac0 	bl	800da98 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008518:	f107 0320 	add.w	r3, r7, #32
 800851c:	2218      	movs	r2, #24
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f005 fab9 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008526:	233f      	movs	r3, #63	@ 0x3f
 8008528:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800852a:	238a      	movs	r3, #138	@ 0x8a
 800852c:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 800852e:	f107 031c 	add.w	r3, r7, #28
 8008532:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8008534:	2301      	movs	r3, #1
 8008536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008538:	f107 0314 	add.w	r3, r7, #20
 800853c:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800853e:	2307      	movs	r3, #7
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008542:	f107 0320 	add.w	r3, r7, #32
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fe57 	bl	80091fc <hci_send_req>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	da01      	bge.n	8008558 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008554:	23ff      	movs	r3, #255	@ 0xff
 8008556:	e014      	b.n	8008582 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8008558:	7d3b      	ldrb	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800855e:	7d3b      	ldrb	r3, [r7, #20]
 8008560:	e00f      	b.n	8008582 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008562:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008566:	b29a      	uxth	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800856c:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008576:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800857a:	b29a      	uxth	r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3738      	adds	r7, #56	@ 0x38
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800858a:	b590      	push	{r4, r7, lr}
 800858c:	b095      	sub	sp, #84	@ 0x54
 800858e:	af00      	add	r7, sp, #0
 8008590:	4604      	mov	r4, r0
 8008592:	4608      	mov	r0, r1
 8008594:	4611      	mov	r1, r2
 8008596:	461a      	mov	r2, r3
 8008598:	4623      	mov	r3, r4
 800859a:	71fb      	strb	r3, [r7, #7]
 800859c:	4603      	mov	r3, r0
 800859e:	80bb      	strh	r3, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	807b      	strh	r3, [r7, #2]
 80085a4:	4613      	mov	r3, r2
 80085a6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80085ae:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80085b2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80085b6:	4413      	add	r3, r2
 80085b8:	330e      	adds	r3, #14
 80085ba:	2b28      	cmp	r3, #40	@ 0x28
 80085bc:	d901      	bls.n	80085c2 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80085be:	2342      	movs	r3, #66	@ 0x42
 80085c0:	e0c9      	b.n	8008756 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80085c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80085c6:	3350      	adds	r3, #80	@ 0x50
 80085c8:	443b      	add	r3, r7
 80085ca:	79fa      	ldrb	r2, [r7, #7]
 80085cc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80085d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80085d4:	3301      	adds	r3, #1
 80085d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80085da:	88bb      	ldrh	r3, [r7, #4]
 80085dc:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80085de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80085e2:	f107 0208 	add.w	r2, r7, #8
 80085e6:	4413      	add	r3, r2
 80085e8:	88ba      	ldrh	r2, [r7, #4]
 80085ea:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80085ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80085f0:	3302      	adds	r3, #2
 80085f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80085f6:	887b      	ldrh	r3, [r7, #2]
 80085f8:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80085fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80085fe:	f107 0208 	add.w	r2, r7, #8
 8008602:	4413      	add	r3, r2
 8008604:	887a      	ldrh	r2, [r7, #2]
 8008606:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008608:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800860c:	3302      	adds	r3, #2
 800860e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8008612:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008616:	3350      	adds	r3, #80	@ 0x50
 8008618:	443b      	add	r3, r7
 800861a:	79ba      	ldrb	r2, [r7, #6]
 800861c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008620:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008624:	3301      	adds	r3, #1
 8008626:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800862a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800862e:	3350      	adds	r3, #80	@ 0x50
 8008630:	443b      	add	r3, r7
 8008632:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008636:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800863a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800863e:	3301      	adds	r3, #1
 8008640:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8008644:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008648:	3350      	adds	r3, #80	@ 0x50
 800864a:	443b      	add	r3, r7
 800864c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008650:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008654:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008658:	3301      	adds	r3, #1
 800865a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800865e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008662:	f107 0208 	add.w	r2, r7, #8
 8008666:	4413      	add	r3, r2
 8008668:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800866c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800866e:	4618      	mov	r0, r3
 8008670:	f005 fa91 	bl	800db96 <memcpy>
  indx +=  LocalNameLen;
 8008674:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008678:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800867c:	4413      	add	r3, r2
 800867e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8008682:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008686:	3350      	adds	r3, #80	@ 0x50
 8008688:	443b      	add	r3, r7
 800868a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800868e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008692:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008696:	3301      	adds	r3, #1
 8008698:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800869c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086a0:	f107 0208 	add.w	r2, r7, #8
 80086a4:	4413      	add	r3, r2
 80086a6:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80086aa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80086ac:	4618      	mov	r0, r3
 80086ae:	f005 fa72 	bl	800db96 <memcpy>
  indx +=  ServiceUUIDLen;  
 80086b2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80086b6:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80086ba:	4413      	add	r3, r2
 80086bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80086c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80086c4:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80086c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086cc:	f107 0208 	add.w	r2, r7, #8
 80086d0:	4413      	add	r3, r2
 80086d2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 80086d6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80086d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086dc:	3302      	adds	r3, #2
 80086de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80086e2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80086e6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80086ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086ee:	f107 0208 	add.w	r2, r7, #8
 80086f2:	4413      	add	r3, r2
 80086f4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80086f8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80086fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80086fe:	3302      	adds	r3, #2
 8008700:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008704:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008708:	2218      	movs	r2, #24
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f005 f9c3 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008712:	233f      	movs	r3, #63	@ 0x3f
 8008714:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008716:	2383      	movs	r3, #131	@ 0x83
 8008718:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 800871a:	f107 0308 	add.w	r3, r7, #8
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8008720:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008724:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8008726:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800872a:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 800872c:	2301      	movs	r3, #1
 800872e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8008730:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008734:	2100      	movs	r1, #0
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fd60 	bl	80091fc <hci_send_req>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	da01      	bge.n	8008746 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8008742:	23ff      	movs	r3, #255	@ 0xff
 8008744:	e007      	b.n	8008756 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8008746:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <aci_gap_set_discoverable+0x1ca>
    return status;
 800874e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008752:	e000      	b.n	8008756 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3754      	adds	r7, #84	@ 0x54
 800875a:	46bd      	mov	sp, r7
 800875c:	bd90      	pop	{r4, r7, pc}

0800875e <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800875e:	b590      	push	{r4, r7, lr}
 8008760:	b091      	sub	sp, #68	@ 0x44
 8008762:	af00      	add	r7, sp, #0
 8008764:	603a      	str	r2, [r7, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	4603      	mov	r3, r0
 800876a:	71fb      	strb	r3, [r7, #7]
 800876c:	460b      	mov	r3, r1
 800876e:	71bb      	strb	r3, [r7, #6]
 8008770:	4613      	mov	r3, r2
 8008772:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008778:	79bb      	ldrb	r3, [r7, #6]
 800877a:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800877c:	79bb      	ldrb	r3, [r7, #6]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	f107 030e 	add.w	r3, r7, #14
 8008788:	6814      	ldr	r4, [r2, #0]
 800878a:	6850      	ldr	r0, [r2, #4]
 800878c:	6891      	ldr	r1, [r2, #8]
 800878e:	68d2      	ldr	r2, [r2, #12]
 8008790:	601c      	str	r4, [r3, #0]
 8008792:	6058      	str	r0, [r3, #4]
 8008794:	6099      	str	r1, [r3, #8]
 8008796:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008798:	797b      	ldrb	r3, [r7, #5]
 800879a:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800879c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80087a0:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80087a2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80087a6:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80087aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087ac:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 80087b0:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80087b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80087bc:	2218      	movs	r2, #24
 80087be:	2100      	movs	r1, #0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f005 f969 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80087c6:	233f      	movs	r3, #63	@ 0x3f
 80087c8:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80087ca:	2386      	movs	r3, #134	@ 0x86
 80087cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 80087ce:	f107 030c 	add.w	r3, r7, #12
 80087d2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 80087d4:	231a      	movs	r3, #26
 80087d6:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 80087d8:	f107 030b 	add.w	r3, r7, #11
 80087dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80087e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fd07 	bl	80091fc <hci_send_req>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da01      	bge.n	80087f8 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80087f4:	23ff      	movs	r3, #255	@ 0xff
 80087f6:	e005      	b.n	8008804 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <aci_gap_set_auth_requirement+0xa4>
    return status;
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	e000      	b.n	8008804 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3744      	adds	r7, #68	@ 0x44
 8008808:	46bd      	mov	sp, r7
 800880a:	bd90      	pop	{r4, r7, pc}

0800880c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b092      	sub	sp, #72	@ 0x48
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	2b1f      	cmp	r3, #31
 8008822:	d901      	bls.n	8008828 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008824:	2342      	movs	r3, #66	@ 0x42
 8008826:	e03e      	b.n	80088a6 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8008828:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800882c:	3348      	adds	r3, #72	@ 0x48
 800882e:	443b      	add	r3, r7
 8008830:	79fa      	ldrb	r2, [r7, #7]
 8008832:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8008836:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800883a:	3301      	adds	r3, #1
 800883c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8008840:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008844:	f107 0208 	add.w	r2, r7, #8
 8008848:	4413      	add	r3, r2
 800884a:	79fa      	ldrb	r2, [r7, #7]
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f005 f9a1 	bl	800db96 <memcpy>
  indx +=  AdvLen;
 8008854:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	4413      	add	r3, r2
 800885c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008864:	2218      	movs	r2, #24
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f005 f915 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800886e:	233f      	movs	r3, #63	@ 0x3f
 8008870:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8008872:	238e      	movs	r3, #142	@ 0x8e
 8008874:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800887c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008880:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8008882:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8008888:	2301      	movs	r3, #1
 800888a:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800888c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008890:	2100      	movs	r1, #0
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fcb2 	bl	80091fc <hci_send_req>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	da01      	bge.n	80088a2 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800889e:	23ff      	movs	r3, #255	@ 0xff
 80088a0:	e001      	b.n	80088a6 <aci_gap_update_adv_data+0x9a>
    
  return status;
 80088a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3748      	adds	r7, #72	@ 0x48
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b088      	sub	sp, #32
 80088b2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088b4:	f107 0308 	add.w	r3, r7, #8
 80088b8:	2218      	movs	r2, #24
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f005 f8eb 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80088c2:	233f      	movs	r3, #63	@ 0x3f
 80088c4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80088c6:	f240 1301 	movw	r3, #257	@ 0x101
 80088ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80088cc:	1dfb      	adds	r3, r7, #7
 80088ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80088d0:	2301      	movs	r3, #1
 80088d2:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80088d4:	f107 0308 	add.w	r3, r7, #8
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fc8e 	bl	80091fc <hci_send_req>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da01      	bge.n	80088ea <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80088e6:	23ff      	movs	r3, #255	@ 0xff
 80088e8:	e000      	b.n	80088ec <aci_gatt_init+0x3e>

  return status;
 80088ea:	79fb      	ldrb	r3, [r7, #7]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b090      	sub	sp, #64	@ 0x40
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6039      	str	r1, [r7, #0]
 80088fc:	4611      	mov	r1, r2
 80088fe:	461a      	mov	r2, r3
 8008900:	4603      	mov	r3, r0
 8008902:	71fb      	strb	r3, [r7, #7]
 8008904:	460b      	mov	r3, r1
 8008906:	71bb      	strb	r3, [r7, #6]
 8008908:	4613      	mov	r3, r2
 800890a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8008912:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008916:	3340      	adds	r3, #64	@ 0x40
 8008918:	443b      	add	r3, r7
 800891a:	79fa      	ldrb	r2, [r7, #7]
 800891c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008920:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008924:	3301      	adds	r3, #1
 8008926:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d103      	bne.n	8008938 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8008930:	2302      	movs	r3, #2
 8008932:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008936:	e002      	b.n	800893e <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8008938:	2310      	movs	r3, #16
 800893a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800893e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008942:	f107 020c 	add.w	r2, r7, #12
 8008946:	4413      	add	r3, r2
 8008948:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f005 f921 	bl	800db96 <memcpy>
  indx +=  uuid_len;
 8008954:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8008958:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800895c:	4413      	add	r3, r2
 800895e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8008962:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008966:	3340      	adds	r3, #64	@ 0x40
 8008968:	443b      	add	r3, r7
 800896a:	79ba      	ldrb	r2, [r7, #6]
 800896c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008970:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008974:	3301      	adds	r3, #1
 8008976:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800897a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800897e:	3340      	adds	r3, #64	@ 0x40
 8008980:	443b      	add	r3, r7
 8008982:	797a      	ldrb	r2, [r7, #5]
 8008984:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008988:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800898c:	3301      	adds	r3, #1
 800898e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008992:	f107 0320 	add.w	r3, r7, #32
 8008996:	2203      	movs	r2, #3
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f005 f87c 	bl	800da98 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089a4:	2218      	movs	r2, #24
 80089a6:	2100      	movs	r1, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f005 f875 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80089ae:	233f      	movs	r3, #63	@ 0x3f
 80089b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80089b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80089b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 80089b8:	f107 030c 	add.w	r3, r7, #12
 80089bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 80089be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80089c2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 80089c4:	f107 0320 	add.w	r3, r7, #32
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80089ca:	2303      	movs	r3, #3
 80089cc:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80089ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089d2:	2100      	movs	r1, #0
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fc11 	bl	80091fc <hci_send_req>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da01      	bge.n	80089e4 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80089e0:	23ff      	movs	r3, #255	@ 0xff
 80089e2:	e00c      	b.n	80089fe <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80089e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <aci_gatt_add_serv+0xfe>
    return resp.status;
 80089ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089f0:	e005      	b.n	80089fe <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80089f2:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089fa:	801a      	strh	r2, [r3, #0]

  return 0;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3740      	adds	r7, #64	@ 0x40
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b092      	sub	sp, #72	@ 0x48
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	603a      	str	r2, [r7, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	80fb      	strh	r3, [r7, #6]
 8008a14:	460b      	mov	r3, r1
 8008a16:	717b      	strb	r3, [r7, #5]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008a26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a2a:	f107 020c 	add.w	r2, r7, #12
 8008a2e:	4413      	add	r3, r2
 8008a30:	88fa      	ldrh	r2, [r7, #6]
 8008a32:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008a34:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a38:	3302      	adds	r3, #2
 8008a3a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8008a3e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a42:	3348      	adds	r3, #72	@ 0x48
 8008a44:	443b      	add	r3, r7
 8008a46:	797a      	ldrb	r2, [r7, #5]
 8008a48:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008a4c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a50:	3301      	adds	r3, #1
 8008a52:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008a56:	797b      	ldrb	r3, [r7, #5]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d103      	bne.n	8008a64 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008a62:	e002      	b.n	8008a6a <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008a64:	2310      	movs	r3, #16
 8008a66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008a6a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a6e:	f107 020c 	add.w	r2, r7, #12
 8008a72:	4413      	add	r3, r2
 8008a74:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f005 f88b 	bl	800db96 <memcpy>
  indx +=  uuid_len;
 8008a80:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008a84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008a88:	4413      	add	r3, r2
 8008a8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008a8e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a92:	3348      	adds	r3, #72	@ 0x48
 8008a94:	443b      	add	r3, r7
 8008a96:	793a      	ldrb	r2, [r7, #4]
 8008a98:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008a9c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8008aa6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008aaa:	3348      	adds	r3, #72	@ 0x48
 8008aac:	443b      	add	r3, r7
 8008aae:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008ab2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008ab6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008aba:	3301      	adds	r3, #1
 8008abc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8008ac0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ac4:	3348      	adds	r3, #72	@ 0x48
 8008ac6:	443b      	add	r3, r7
 8008ac8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008acc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008ad0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8008ada:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ade:	3348      	adds	r3, #72	@ 0x48
 8008ae0:	443b      	add	r3, r7
 8008ae2:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8008ae6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008aea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008aee:	3301      	adds	r3, #1
 8008af0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8008af4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008af8:	3348      	adds	r3, #72	@ 0x48
 8008afa:	443b      	add	r3, r7
 8008afc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008b00:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b04:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b08:	3301      	adds	r3, #1
 8008b0a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008b0e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b12:	3348      	adds	r3, #72	@ 0x48
 8008b14:	443b      	add	r3, r7
 8008b16:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008b1a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008b1e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b22:	3301      	adds	r3, #1
 8008b24:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b2c:	2203      	movs	r2, #3
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f004 ffb1 	bl	800da98 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008b3a:	2218      	movs	r2, #24
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f004 ffaa 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b44:	233f      	movs	r3, #63	@ 0x3f
 8008b46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008b48:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008b4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008b4e:	f107 030c 	add.w	r3, r7, #12
 8008b52:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008b54:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8008b5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008b60:	2303      	movs	r3, #3
 8008b62:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fb46 	bl	80091fc <hci_send_req>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	da01      	bge.n	8008b7a <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8008b76:	23ff      	movs	r3, #255	@ 0xff
 8008b78:	e00c      	b.n	8008b94 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8008b7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <aci_gatt_add_char+0x182>
    return resp.status;
 8008b82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b86:	e005      	b.n	8008b94 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008b88:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b90:	801a      	strh	r2, [r3, #0]

  return 0;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3748      	adds	r7, #72	@ 0x48
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b0ab      	sub	sp, #172	@ 0xac
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4623      	mov	r3, r4
 8008bac:	80fb      	strh	r3, [r7, #6]
 8008bae:	4603      	mov	r3, r0
 8008bb0:	80bb      	strh	r3, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008bc0:	78bb      	ldrb	r3, [r7, #2]
 8008bc2:	2b7a      	cmp	r3, #122	@ 0x7a
 8008bc4:	d901      	bls.n	8008bca <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8008bc6:	2342      	movs	r3, #66	@ 0x42
 8008bc8:	e074      	b.n	8008cb4 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008bce:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008bd2:	f107 0208 	add.w	r2, r7, #8
 8008bd6:	4413      	add	r3, r2
 8008bd8:	88fa      	ldrh	r2, [r7, #6]
 8008bda:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008bdc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008be0:	3302      	adds	r3, #2
 8008be2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8008be6:	88bb      	ldrh	r3, [r7, #4]
 8008be8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008bea:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008bee:	f107 0208 	add.w	r2, r7, #8
 8008bf2:	4413      	add	r3, r2
 8008bf4:	88ba      	ldrh	r2, [r7, #4]
 8008bf6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008bf8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8008c02:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c06:	33a8      	adds	r3, #168	@ 0xa8
 8008c08:	443b      	add	r3, r7
 8008c0a:	78fa      	ldrb	r2, [r7, #3]
 8008c0c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008c10:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c14:	3301      	adds	r3, #1
 8008c16:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8008c1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c1e:	33a8      	adds	r3, #168	@ 0xa8
 8008c20:	443b      	add	r3, r7
 8008c22:	78ba      	ldrb	r2, [r7, #2]
 8008c24:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008c28:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008c32:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c36:	f107 0208 	add.w	r2, r7, #8
 8008c3a:	4413      	add	r3, r2
 8008c3c:	78ba      	ldrb	r2, [r7, #2]
 8008c3e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f004 ffa7 	bl	800db96 <memcpy>
  indx +=  charValueLen;
 8008c48:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008c4c:	78bb      	ldrb	r3, [r7, #2]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c54:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008c58:	2218      	movs	r2, #24
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f004 ff1b 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008c62:	233f      	movs	r3, #63	@ 0x3f
 8008c64:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008c68:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008c6c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008c70:	f107 0308 	add.w	r3, r7, #8
 8008c74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008c78:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008c80:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008c8e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fab1 	bl	80091fc <hci_send_req>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	da01      	bge.n	8008ca4 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8008ca0:	23ff      	movs	r3, #255	@ 0xff
 8008ca2:	e007      	b.n	8008cb4 <aci_gatt_update_char_value+0x118>

  if (status) {
 8008ca4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <aci_gatt_update_char_value+0x116>
    return status;
 8008cac:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008cb0:	e000      	b.n	8008cb4 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	37ac      	adds	r7, #172	@ 0xac
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd90      	pop	{r4, r7, pc}

08008cbc <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	@ 0x28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008cca:	f107 0310 	add.w	r3, r7, #16
 8008cce:	2218      	movs	r2, #24
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f004 fee0 	bl	800da98 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008cd8:	233f      	movs	r3, #63	@ 0x3f
 8008cda:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008cdc:	f240 1327 	movw	r3, #295	@ 0x127
 8008ce0:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008cec:	f107 030b 	add.w	r3, r7, #11
 8008cf0:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008cf6:	f107 0310 	add.w	r3, r7, #16
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fa7d 	bl	80091fc <hci_send_req>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	da01      	bge.n	8008d0c <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008d08:	23ff      	movs	r3, #255	@ 0xff
 8008d0a:	e000      	b.n	8008d0e <aci_gatt_allow_read+0x52>

    return status;
 8008d0c:	7afb      	ldrb	r3, [r7, #11]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3728      	adds	r7, #40	@ 0x28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b0ac      	sub	sp, #176	@ 0xb0
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60ba      	str	r2, [r7, #8]
 8008d1e:	607b      	str	r3, [r7, #4]
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
 8008d24:	460b      	mov	r3, r1
 8008d26:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d2e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008d32:	2218      	movs	r2, #24
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f004 feae 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008d3c:	233f      	movs	r3, #63	@ 0x3f
 8008d3e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008d42:	230d      	movs	r3, #13
 8008d44:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008d48:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008d50:	2301      	movs	r3, #1
 8008d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8008d56:	f107 0314 	add.w	r3, r7, #20
 8008d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008d5e:	2380      	movs	r3, #128	@ 0x80
 8008d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008d64:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fa46 	bl	80091fc <hci_send_req>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da01      	bge.n	8008d7a <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8008d76:	23ff      	movs	r3, #255	@ 0xff
 8008d78:	e01e      	b.n	8008db8 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8008d7a:	7d3b      	ldrb	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008d80:	7d3b      	ldrb	r3, [r7, #20]
 8008d82:	e019      	b.n	8008db8 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8008d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	89bb      	ldrh	r3, [r7, #12]
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d201      	bcs.n	8008da2 <aci_hal_read_config_data+0x8c>
 8008d9e:	89ba      	ldrh	r2, [r7, #12]
 8008da0:	e002      	b.n	8008da8 <aci_hal_read_config_data+0x92>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	3301      	adds	r3, #1
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f004 fef0 	bl	800db96 <memcpy>
  
  return 0;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	37b0      	adds	r7, #176	@ 0xb0
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08a      	sub	sp, #40	@ 0x28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	460a      	mov	r2, r1
 8008dca:	71fb      	strb	r3, [r7, #7]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008dd4:	79bb      	ldrb	r3, [r7, #6]
 8008dd6:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dd8:	f107 0310 	add.w	r3, r7, #16
 8008ddc:	2218      	movs	r2, #24
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f004 fe59 	bl	800da98 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008de6:	233f      	movs	r3, #63	@ 0x3f
 8008de8:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008dea:	230f      	movs	r3, #15
 8008dec:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008dee:	f107 030c 	add.w	r3, r7, #12
 8008df2:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008df4:	2302      	movs	r3, #2
 8008df6:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008df8:	f107 030b 	add.w	r3, r7, #11
 8008dfc:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008e02:	f107 0310 	add.w	r3, r7, #16
 8008e06:	2100      	movs	r1, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 f9f7 	bl	80091fc <hci_send_req>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da01      	bge.n	8008e18 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008e14:	23ff      	movs	r3, #255	@ 0xff
 8008e16:	e000      	b.n	8008e1a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008e18:	7afb      	ldrb	r3, [r7, #11]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3728      	adds	r7, #40	@ 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008e22:	b590      	push	{r4, r7, lr}
 8008e24:	b089      	sub	sp, #36	@ 0x24
 8008e26:	af02      	add	r7, sp, #8
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008e2c:	f107 0410 	add.w	r4, r7, #16
 8008e30:	f107 0215 	add.w	r2, r7, #21
 8008e34:	f107 0112 	add.w	r1, r7, #18
 8008e38:	f107 0016 	add.w	r0, r7, #22
 8008e3c:	f107 030e 	add.w	r3, r7, #14
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	4623      	mov	r3, r4
 8008e44:	f000 f853 	bl	8008eee <hci_le_read_local_version>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d126      	bne.n	8008ea0 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008e52:	8a7b      	ldrh	r3, [r7, #18]
 8008e54:	0a1b      	lsrs	r3, r3, #8
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008e5e:	8a7b      	ldrh	r3, [r7, #18]
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b21a      	sxth	r2, r3
 8008e6e:	89fb      	ldrh	r3, [r7, #14]
 8008e70:	091b      	lsrs	r3, r3, #4
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	b21b      	sxth	r3, r3
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	b21b      	sxth	r3, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	b21b      	sxth	r3, r3
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b21a      	sxth	r2, r3
 8008e8c:	89fb      	ldrh	r3, [r7, #14]
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	f003 030f 	and.w	r3, r3, #15
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	4313      	orrs	r3, r2
 8008e98:	b21b      	sxth	r3, r3
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd90      	pop	{r4, r7, pc}

08008eaa <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b088      	sub	sp, #32
 8008eae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008eb0:	f107 0308 	add.w	r3, r7, #8
 8008eb4:	2218      	movs	r2, #24
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f004 fded 	bl	800da98 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008ec6:	1dfb      	adds	r3, r7, #7
 8008ec8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008ece:	f107 0308 	add.w	r3, r7, #8
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 f991 	bl	80091fc <hci_send_req>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	da01      	bge.n	8008ee4 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008ee0:	23ff      	movs	r3, #255	@ 0xff
 8008ee2:	e000      	b.n	8008ee6 <hci_reset+0x3c>
  
  return status;  
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3720      	adds	r7, #32
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b08e      	sub	sp, #56	@ 0x38
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
 8008efa:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	2209      	movs	r2, #9
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f004 fdc7 	bl	800da98 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f0a:	f107 0320 	add.w	r3, r7, #32
 8008f0e:	2218      	movs	r2, #24
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f004 fdc0 	bl	800da98 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008f18:	2304      	movs	r3, #4
 8008f1a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008f2e:	2309      	movs	r3, #9
 8008f30:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008f32:	f107 0320 	add.w	r3, r7, #32
 8008f36:	2100      	movs	r1, #0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 f95f 	bl	80091fc <hci_send_req>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	da01      	bge.n	8008f48 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008f44:	23ff      	movs	r3, #255	@ 0xff
 8008f46:	e018      	b.n	8008f7a <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008f48:	7d3b      	ldrb	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <hci_le_read_local_version+0x64>
    return resp.status;
 8008f4e:	7d3b      	ldrb	r3, [r7, #20]
 8008f50:	e013      	b.n	8008f7a <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008f52:	7d7a      	ldrb	r2, [r7, #21]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008f58:	8afa      	ldrh	r2, [r7, #22]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008f5e:	7e3a      	ldrb	r2, [r7, #24]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008f64:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008f6e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f76:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3738      	adds	r7, #56	@ 0x38
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b092      	sub	sp, #72	@ 0x48
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	4603      	mov	r3, r0
 8008f8a:	6039      	str	r1, [r7, #0]
 8008f8c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008f8e:	f107 0310 	add.w	r3, r7, #16
 8008f92:	2220      	movs	r2, #32
 8008f94:	2100      	movs	r1, #0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f004 fd7e 	bl	800da98 <memset>
  scan_resp_cp.length = length;
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	2b1f      	cmp	r3, #31
 8008fa4:	bf28      	it	cs
 8008fa6:	231f      	movcs	r3, #31
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	461a      	mov	r2, r3
 8008fac:	f107 0310 	add.w	r3, r7, #16
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f004 fdee 	bl	800db96 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008fba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008fbe:	2218      	movs	r2, #24
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f004 fd68 	bl	800da98 <memset>
  rq.ogf = OGF_LE_CTL;
 8008fc8:	2308      	movs	r3, #8
 8008fca:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008fcc:	2309      	movs	r3, #9
 8008fce:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8008fd0:	f107 0310 	add.w	r3, r7, #16
 8008fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008fd6:	2320      	movs	r3, #32
 8008fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8008fda:	f107 030f 	add.w	r3, r7, #15
 8008fde:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008fe4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f906 	bl	80091fc <hci_send_req>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	da01      	bge.n	8008ffa <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008ff6:	23ff      	movs	r3, #255	@ 0xff
 8008ff8:	e000      	b.n	8008ffc <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3748      	adds	r7, #72	@ 0x48
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3308      	adds	r3, #8
 8009010:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b04      	cmp	r3, #4
 8009018:	d001      	beq.n	800901e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800901a:	2301      	movs	r3, #1
 800901c:	e00c      	b.n	8009038 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3302      	adds	r3, #2
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800902c:	3b03      	subs	r3, #3
 800902e:	429a      	cmp	r2, r3
 8009030:	d001      	beq.n	8009036 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009032:	2302      	movs	r3, #2
 8009034:	e000      	b.n	8009038 <verify_packet+0x34>
  
  return 0;      
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b0a6      	sub	sp, #152	@ 0x98
 8009048:	af00      	add	r7, sp, #0
 800904a:	607b      	str	r3, [r7, #4]
 800904c:	4603      	mov	r3, r0
 800904e:	81fb      	strh	r3, [r7, #14]
 8009050:	460b      	mov	r3, r1
 8009052:	81bb      	strh	r3, [r7, #12]
 8009054:	4613      	mov	r3, r2
 8009056:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009058:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800905c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009060:	b21a      	sxth	r2, r3
 8009062:	89fb      	ldrh	r3, [r7, #14]
 8009064:	029b      	lsls	r3, r3, #10
 8009066:	b21b      	sxth	r3, r3
 8009068:	4313      	orrs	r3, r2
 800906a:	b21b      	sxth	r3, r3
 800906c:	b29b      	uxth	r3, r3
 800906e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009074:	2301      	movs	r3, #1
 8009076:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009078:	f107 0318 	add.w	r3, r7, #24
 800907c:	3301      	adds	r3, #1
 800907e:	461a      	mov	r2, r3
 8009080:	f107 0314 	add.w	r3, r7, #20
 8009084:	8819      	ldrh	r1, [r3, #0]
 8009086:	789b      	ldrb	r3, [r3, #2]
 8009088:	8011      	strh	r1, [r2, #0]
 800908a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800908c:	f107 0318 	add.w	r3, r7, #24
 8009090:	3304      	adds	r3, #4
 8009092:	7afa      	ldrb	r2, [r7, #11]
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	4618      	mov	r0, r3
 8009098:	f004 fd7d 	bl	800db96 <memcpy>
  
  if (hciContext.io.Send)
 800909c:	4b08      	ldr	r3, [pc, #32]	@ (80090c0 <send_cmd+0x7c>)
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80090a4:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <send_cmd+0x7c>)
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	7afa      	ldrb	r2, [r7, #11]
 80090aa:	b292      	uxth	r2, r2
 80090ac:	3204      	adds	r2, #4
 80090ae:	b291      	uxth	r1, r2
 80090b0:	f107 0218 	add.w	r2, r7, #24
 80090b4:	4610      	mov	r0, r2
 80090b6:	4798      	blx	r3
  }
}
 80090b8:	bf00      	nop
 80090ba:	3798      	adds	r7, #152	@ 0x98
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	2000304c 	.word	0x2000304c

080090c4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80090ce:	e00a      	b.n	80090e6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80090d0:	f107 030c 	add.w	r3, r7, #12
 80090d4:	4619      	mov	r1, r3
 80090d6:	6838      	ldr	r0, [r7, #0]
 80090d8:	f000 fae8 	bl	80096ac <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fa4f 	bl	8009584 <list_insert_head>
  while (!list_is_empty(src_list))
 80090e6:	6838      	ldr	r0, [r7, #0]
 80090e8:	f000 fa2a 	bl	8009540 <list_is_empty>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0ee      	beq.n	80090d0 <move_list+0xc>
  }
}
 80090f2:	bf00      	nop
 80090f4:	bf00      	nop
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009102:	e009      	b.n	8009118 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009104:	1d3b      	adds	r3, r7, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4809      	ldr	r0, [pc, #36]	@ (8009130 <free_event_list+0x34>)
 800910a:	f000 faa8 	bl	800965e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4619      	mov	r1, r3
 8009112:	4808      	ldr	r0, [pc, #32]	@ (8009134 <free_event_list+0x38>)
 8009114:	f000 fa5c 	bl	80095d0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009118:	4806      	ldr	r0, [pc, #24]	@ (8009134 <free_event_list+0x38>)
 800911a:	f000 faee 	bl	80096fa <list_get_size>
 800911e:	4603      	mov	r3, r0
 8009120:	2b01      	cmp	r3, #1
 8009122:	ddef      	ble.n	8009104 <free_event_list+0x8>
  }
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20002d88 	.word	0x20002d88
 8009134:	20002d80 	.word	0x20002d80

08009138 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009148:	4a18      	ldr	r2, [pc, #96]	@ (80091ac <hci_init+0x74>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800914e:	4818      	ldr	r0, [pc, #96]	@ (80091b0 <hci_init+0x78>)
 8009150:	f000 f9e6 	bl	8009520 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009154:	4817      	ldr	r0, [pc, #92]	@ (80091b4 <hci_init+0x7c>)
 8009156:	f000 f9e3 	bl	8009520 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800915a:	f7f8 fd7f 	bl	8001c5c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
 8009162:	e00c      	b.n	800917e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	228c      	movs	r2, #140	@ 0x8c
 8009168:	fb02 f303 	mul.w	r3, r2, r3
 800916c:	4a12      	ldr	r2, [pc, #72]	@ (80091b8 <hci_init+0x80>)
 800916e:	4413      	add	r3, r2
 8009170:	4619      	mov	r1, r3
 8009172:	480f      	ldr	r0, [pc, #60]	@ (80091b0 <hci_init+0x78>)
 8009174:	f000 fa2c 	bl	80095d0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	3301      	adds	r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	2b04      	cmp	r3, #4
 8009182:	d9ef      	bls.n	8009164 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009184:	4b09      	ldr	r3, [pc, #36]	@ (80091ac <hci_init+0x74>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <hci_init+0x5c>
 800918c:	4b07      	ldr	r3, [pc, #28]	@ (80091ac <hci_init+0x74>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2000      	movs	r0, #0
 8009192:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009194:	4b05      	ldr	r3, [pc, #20]	@ (80091ac <hci_init+0x74>)
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <hci_init+0x6a>
 800919c:	4b03      	ldr	r3, [pc, #12]	@ (80091ac <hci_init+0x74>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	4798      	blx	r3
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	2000304c 	.word	0x2000304c
 80091b0:	20002d80 	.word	0x20002d80
 80091b4:	20002d88 	.word	0x20002d88
 80091b8:	20002d90 	.word	0x20002d90

080091bc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a0b      	ldr	r2, [pc, #44]	@ (80091f8 <hci_register_io_bus+0x3c>)
 80091ca:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	4a09      	ldr	r2, [pc, #36]	@ (80091f8 <hci_register_io_bus+0x3c>)
 80091d2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	4a07      	ldr	r2, [pc, #28]	@ (80091f8 <hci_register_io_bus+0x3c>)
 80091da:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	4a05      	ldr	r2, [pc, #20]	@ (80091f8 <hci_register_io_bus+0x3c>)
 80091e2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	4a03      	ldr	r2, [pc, #12]	@ (80091f8 <hci_register_io_bus+0x3c>)
 80091ea:	6093      	str	r3, [r2, #8]
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	2000304c 	.word	0x2000304c

080091fc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08e      	sub	sp, #56	@ 0x38
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	885b      	ldrh	r3, [r3, #2]
 800920c:	b21b      	sxth	r3, r3
 800920e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009212:	b21a      	sxth	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	029b      	lsls	r3, r3, #10
 800921a:	b21b      	sxth	r3, r3
 800921c:	4313      	orrs	r3, r2
 800921e:	b21b      	sxth	r3, r3
 8009220:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009226:	f107 0308 	add.w	r3, r7, #8
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f978 	bl	8009520 <list_init_head>

  free_event_list();
 8009230:	f7ff ff64 	bl	80090fc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8818      	ldrh	r0, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	8859      	ldrh	r1, [r3, #2]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	b2da      	uxtb	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f7ff fefd 	bl	8009044 <send_cmd>
  
  if (async)
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <hci_send_req+0x58>
  {
    return 0;
 8009250:	2300      	movs	r3, #0
 8009252:	e0e2      	b.n	800941a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009254:	f7fa fb22 	bl	800389c <HAL_GetTick>
 8009258:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800925a:	f7fa fb1f 	bl	800389c <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009268:	f200 80b3 	bhi.w	80093d2 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800926c:	486d      	ldr	r0, [pc, #436]	@ (8009424 <hci_send_req+0x228>)
 800926e:	f000 f967 	bl	8009540 <list_is_empty>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d000      	beq.n	800927a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009278:	e7ef      	b.n	800925a <hci_send_req+0x5e>
      {
        break;
 800927a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800927c:	f107 0310 	add.w	r3, r7, #16
 8009280:	4619      	mov	r1, r3
 8009282:	4868      	ldr	r0, [pc, #416]	@ (8009424 <hci_send_req+0x228>)
 8009284:	f000 f9eb 	bl	800965e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3308      	adds	r3, #8
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800928e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	2b04      	cmp	r3, #4
 8009294:	d17f      	bne.n	8009396 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009298:	3301      	adds	r3, #1
 800929a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3308      	adds	r3, #8
 80092a0:	3303      	adds	r3, #3
 80092a2:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80092aa:	3b03      	subs	r3, #3
 80092ac:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80092b4:	d04c      	beq.n	8009350 <hci_send_req+0x154>
 80092b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80092b8:	dc68      	bgt.n	800938c <hci_send_req+0x190>
 80092ba:	2b10      	cmp	r3, #16
 80092bc:	f000 808b 	beq.w	80093d6 <hci_send_req+0x1da>
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	dc63      	bgt.n	800938c <hci_send_req+0x190>
 80092c4:	2b0e      	cmp	r3, #14
 80092c6:	d023      	beq.n	8009310 <hci_send_req+0x114>
 80092c8:	2b0f      	cmp	r3, #15
 80092ca:	d15f      	bne.n	800938c <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80092cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ce:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80092d8:	429a      	cmp	r2, r3
 80092da:	d17e      	bne.n	80093da <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	2b0f      	cmp	r3, #15
 80092e2:	d004      	beq.n	80092ee <hci_send_req+0xf2>
          if (cs->status) {
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d051      	beq.n	8009390 <hci_send_req+0x194>
            goto failed;
 80092ec:	e078      	b.n	80093e0 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695a      	ldr	r2, [r3, #20]
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	bf28      	it	cs
 80092f8:	461a      	movcs	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6918      	ldr	r0, [r3, #16]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	461a      	mov	r2, r3
 8009308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800930a:	f004 fc44 	bl	800db96 <memcpy>
        goto done;
 800930e:	e078      	b.n	8009402 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009312:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800931a:	b29b      	uxth	r3, r3
 800931c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800931e:	429a      	cmp	r2, r3
 8009320:	d15d      	bne.n	80093de <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	3303      	adds	r3, #3
 8009326:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	3b03      	subs	r3, #3
 800932c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695a      	ldr	r2, [r3, #20]
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	429a      	cmp	r2, r3
 8009336:	bf28      	it	cs
 8009338:	461a      	movcs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6918      	ldr	r0, [r3, #16]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	461a      	mov	r2, r3
 8009348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800934a:	f004 fc24 	bl	800db96 <memcpy>
        goto done;
 800934e:	e058      	b.n	8009402 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d118      	bne.n	8009394 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	3b01      	subs	r3, #1
 8009366:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	695a      	ldr	r2, [r3, #20]
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	429a      	cmp	r2, r3
 8009370:	bf28      	it	cs
 8009372:	461a      	movcs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6918      	ldr	r0, [r3, #16]
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	1c59      	adds	r1, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	461a      	mov	r2, r3
 8009386:	f004 fc06 	bl	800db96 <memcpy>
        goto done;
 800938a:	e03a      	b.n	8009402 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800938c:	bf00      	nop
 800938e:	e002      	b.n	8009396 <hci_send_req+0x19a>
          break;
 8009390:	bf00      	nop
 8009392:	e000      	b.n	8009396 <hci_send_req+0x19a>
          break;
 8009394:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009396:	4824      	ldr	r0, [pc, #144]	@ (8009428 <hci_send_req+0x22c>)
 8009398:	f000 f8d2 	bl	8009540 <list_is_empty>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00d      	beq.n	80093be <hci_send_req+0x1c2>
 80093a2:	4820      	ldr	r0, [pc, #128]	@ (8009424 <hci_send_req+0x228>)
 80093a4:	f000 f8cc 	bl	8009540 <list_is_empty>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4619      	mov	r1, r3
 80093b2:	481d      	ldr	r0, [pc, #116]	@ (8009428 <hci_send_req+0x22c>)
 80093b4:	f000 f90c 	bl	80095d0 <list_insert_tail>
      hciReadPacket=NULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	e008      	b.n	80093d0 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f902 	bl	80095d0 <list_insert_tail>
      hciReadPacket=NULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	613b      	str	r3, [r7, #16]
  {
 80093d0:	e740      	b.n	8009254 <hci_send_req+0x58>
        goto failed;
 80093d2:	bf00      	nop
 80093d4:	e004      	b.n	80093e0 <hci_send_req+0x1e4>
        goto failed;
 80093d6:	bf00      	nop
 80093d8:	e002      	b.n	80093e0 <hci_send_req+0x1e4>
          goto failed;
 80093da:	bf00      	nop
 80093dc:	e000      	b.n	80093e0 <hci_send_req+0x1e4>
          goto failed;
 80093de:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d004      	beq.n	80093f0 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	4619      	mov	r1, r3
 80093ea:	480f      	ldr	r0, [pc, #60]	@ (8009428 <hci_send_req+0x22c>)
 80093ec:	f000 f8ca 	bl	8009584 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80093f0:	f107 0308 	add.w	r3, r7, #8
 80093f4:	4619      	mov	r1, r3
 80093f6:	480b      	ldr	r0, [pc, #44]	@ (8009424 <hci_send_req+0x228>)
 80093f8:	f7ff fe64 	bl	80090c4 <move_list>

  return -1;
 80093fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009400:	e00b      	b.n	800941a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	4619      	mov	r1, r3
 8009406:	4808      	ldr	r0, [pc, #32]	@ (8009428 <hci_send_req+0x22c>)
 8009408:	f000 f8bc 	bl	8009584 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800940c:	f107 0308 	add.w	r3, r7, #8
 8009410:	4619      	mov	r1, r3
 8009412:	4804      	ldr	r0, [pc, #16]	@ (8009424 <hci_send_req+0x228>)
 8009414:	f7ff fe56 	bl	80090c4 <move_list>

  return 0;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3738      	adds	r7, #56	@ 0x38
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20002d88 	.word	0x20002d88
 8009428:	20002d80 	.word	0x20002d80

0800942c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009436:	e013      	b.n	8009460 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009438:	1d3b      	adds	r3, r7, #4
 800943a:	4619      	mov	r1, r3
 800943c:	480e      	ldr	r0, [pc, #56]	@ (8009478 <hci_user_evt_proc+0x4c>)
 800943e:	f000 f90e 	bl	800965e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009442:	4b0e      	ldr	r3, [pc, #56]	@ (800947c <hci_user_evt_proc+0x50>)
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d005      	beq.n	8009456 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800944a:	4b0c      	ldr	r3, [pc, #48]	@ (800947c <hci_user_evt_proc+0x50>)
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	3208      	adds	r2, #8
 8009452:	4610      	mov	r0, r2
 8009454:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4619      	mov	r1, r3
 800945a:	4809      	ldr	r0, [pc, #36]	@ (8009480 <hci_user_evt_proc+0x54>)
 800945c:	f000 f8b8 	bl	80095d0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009460:	4805      	ldr	r0, [pc, #20]	@ (8009478 <hci_user_evt_proc+0x4c>)
 8009462:	f000 f86d 	bl	8009540 <list_is_empty>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0e5      	beq.n	8009438 <hci_user_evt_proc+0xc>
  }
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20002d88 	.word	0x20002d88
 800947c:	2000304c 	.word	0x2000304c
 8009480:	20002d80 	.word	0x20002d80

08009484 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009494:	481f      	ldr	r0, [pc, #124]	@ (8009514 <hci_notify_asynch_evt+0x90>)
 8009496:	f000 f853 	bl	8009540 <list_is_empty>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d132      	bne.n	8009506 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80094a0:	f107 030c 	add.w	r3, r7, #12
 80094a4:	4619      	mov	r1, r3
 80094a6:	481b      	ldr	r0, [pc, #108]	@ (8009514 <hci_notify_asynch_evt+0x90>)
 80094a8:	f000 f8d9 	bl	800965e <list_remove_head>
    
    if (hciContext.io.Receive)
 80094ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009518 <hci_notify_asynch_evt+0x94>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d02a      	beq.n	800950a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80094b4:	4b18      	ldr	r3, [pc, #96]	@ (8009518 <hci_notify_asynch_evt+0x94>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	3208      	adds	r2, #8
 80094bc:	2180      	movs	r1, #128	@ 0x80
 80094be:	4610      	mov	r0, r2
 80094c0:	4798      	blx	r3
 80094c2:	4603      	mov	r3, r0
 80094c4:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80094c6:	7cfb      	ldrb	r3, [r7, #19]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d016      	beq.n	80094fa <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	7cfa      	ldrb	r2, [r7, #19]
 80094d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fd94 	bl	8009004 <verify_packet>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d105      	bne.n	80094ee <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4619      	mov	r1, r3
 80094e6:	480d      	ldr	r0, [pc, #52]	@ (800951c <hci_notify_asynch_evt+0x98>)
 80094e8:	f000 f872 	bl	80095d0 <list_insert_tail>
 80094ec:	e00d      	b.n	800950a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4619      	mov	r1, r3
 80094f2:	4808      	ldr	r0, [pc, #32]	@ (8009514 <hci_notify_asynch_evt+0x90>)
 80094f4:	f000 f846 	bl	8009584 <list_insert_head>
 80094f8:	e007      	b.n	800950a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4619      	mov	r1, r3
 80094fe:	4805      	ldr	r0, [pc, #20]	@ (8009514 <hci_notify_asynch_evt+0x90>)
 8009500:	f000 f840 	bl	8009584 <list_insert_head>
 8009504:	e001      	b.n	800950a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009506:	2301      	movs	r3, #1
 8009508:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800950a:	697b      	ldr	r3, [r7, #20]

}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20002d80 	.word	0x20002d80
 8009518:	2000304c 	.word	0x2000304c
 800951c:	20002d88 	.word	0x20002d88

08009520 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	605a      	str	r2, [r3, #4]
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009548:	f3ef 8310 	mrs	r3, PRIMASK
 800954c:	60fb      	str	r3, [r7, #12]
  return(result);
 800954e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009552:	b672      	cpsid	i
}
 8009554:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	429a      	cmp	r2, r3
 800955e:	d102      	bne.n	8009566 <list_is_empty+0x26>
  {
    return_value = 1;
 8009560:	2301      	movs	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]
 8009564:	e001      	b.n	800956a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f383 8810 	msr	PRIMASK, r3
}
 8009574:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
}
 8009578:	4618      	mov	r0, r3
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800958e:	f3ef 8310 	mrs	r3, PRIMASK
 8009592:	60fb      	str	r3, [r7, #12]
  return(result);
 8009594:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009598:	b672      	cpsid	i
}
 800959a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	605a      	str	r2, [r3, #4]
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f383 8810 	msr	PRIMASK, r3
}
 80095c2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095da:	f3ef 8310 	mrs	r3, PRIMASK
 80095de:	60fb      	str	r3, [r7, #12]
  return(result);
 80095e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095e4:	b672      	cpsid	i
}
 80095e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f383 8810 	msr	PRIMASK, r3
}
 800960e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009624:	f3ef 8310 	mrs	r3, PRIMASK
 8009628:	60fb      	str	r3, [r7, #12]
  return(result);
 800962a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800962c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800962e:	b672      	cpsid	i
}
 8009630:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6812      	ldr	r2, [r2, #0]
 800963a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	6852      	ldr	r2, [r2, #4]
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f383 8810 	msr	PRIMASK, r3
}
 8009650:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b086      	sub	sp, #24
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009668:	f3ef 8310 	mrs	r3, PRIMASK
 800966c:	60fb      	str	r3, [r7, #12]
  return(result);
 800966e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009670:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009672:	b672      	cpsid	i
}
 8009674:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff ffca 	bl	800961c <list_remove_node>
  (*node)->next = NULL;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2200      	movs	r2, #0
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f383 8810 	msr	PRIMASK, r3
}
 80096a2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b6:	f3ef 8310 	mrs	r3, PRIMASK
 80096ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80096bc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80096be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096c0:	b672      	cpsid	i
}
 80096c2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff ffa3 	bl	800961c <list_remove_node>
  (*node)->next = NULL;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2200      	movs	r2, #0
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f383 8810 	msr	PRIMASK, r3
}
 80096f0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80096f2:	bf00      	nop
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b089      	sub	sp, #36	@ 0x24
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  int size = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009706:	f3ef 8310 	mrs	r3, PRIMASK
 800970a:	613b      	str	r3, [r7, #16]
  return(result);
 800970c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800970e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009710:	b672      	cpsid	i
}
 8009712:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800971a:	e005      	b.n	8009728 <list_get_size+0x2e>
  {
    size++;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	3301      	adds	r3, #1
 8009720:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	429a      	cmp	r2, r3
 800972e:	d1f5      	bne.n	800971c <list_get_size+0x22>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f383 8810 	msr	PRIMASK, r3
}
 800973a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800973c:	69fb      	ldr	r3, [r7, #28]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3724      	adds	r7, #36	@ 0x24
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
	...

0800974c <__NVIC_SetPriority>:
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800975c:	2b00      	cmp	r3, #0
 800975e:	db0a      	blt.n	8009776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	b2da      	uxtb	r2, r3
 8009764:	490c      	ldr	r1, [pc, #48]	@ (8009798 <__NVIC_SetPriority+0x4c>)
 8009766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800976a:	0112      	lsls	r2, r2, #4
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	440b      	add	r3, r1
 8009770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009774:	e00a      	b.n	800978c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4908      	ldr	r1, [pc, #32]	@ (800979c <__NVIC_SetPriority+0x50>)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	f003 030f 	and.w	r3, r3, #15
 8009782:	3b04      	subs	r3, #4
 8009784:	0112      	lsls	r2, r2, #4
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	440b      	add	r3, r1
 800978a:	761a      	strb	r2, [r3, #24]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	e000e100 	.word	0xe000e100
 800979c:	e000ed00 	.word	0xe000ed00

080097a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097a4:	2100      	movs	r1, #0
 80097a6:	f06f 0004 	mvn.w	r0, #4
 80097aa:	f7ff ffcf 	bl	800974c <__NVIC_SetPriority>
#endif
}
 80097ae:	bf00      	nop
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ba:	f3ef 8305 	mrs	r3, IPSR
 80097be:	603b      	str	r3, [r7, #0]
  return(result);
 80097c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097c6:	f06f 0305 	mvn.w	r3, #5
 80097ca:	607b      	str	r3, [r7, #4]
 80097cc:	e00c      	b.n	80097e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097ce:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <osKernelInitialize+0x44>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d105      	bne.n	80097e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097d6:	4b08      	ldr	r3, [pc, #32]	@ (80097f8 <osKernelInitialize+0x44>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097dc:	2300      	movs	r3, #0
 80097de:	607b      	str	r3, [r7, #4]
 80097e0:	e002      	b.n	80097e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097e2:	f04f 33ff 	mov.w	r3, #4294967295
 80097e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097e8:	687b      	ldr	r3, [r7, #4]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	2000306c 	.word	0x2000306c

080097fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009802:	f3ef 8305 	mrs	r3, IPSR
 8009806:	603b      	str	r3, [r7, #0]
  return(result);
 8009808:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <osKernelStart+0x1a>
    stat = osErrorISR;
 800980e:	f06f 0305 	mvn.w	r3, #5
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	e010      	b.n	8009838 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009816:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <osKernelStart+0x48>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d109      	bne.n	8009832 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800981e:	f7ff ffbf 	bl	80097a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009822:	4b08      	ldr	r3, [pc, #32]	@ (8009844 <osKernelStart+0x48>)
 8009824:	2202      	movs	r2, #2
 8009826:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009828:	f001 fcca 	bl	800b1c0 <vTaskStartScheduler>
      stat = osOK;
 800982c:	2300      	movs	r3, #0
 800982e:	607b      	str	r3, [r7, #4]
 8009830:	e002      	b.n	8009838 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009832:	f04f 33ff 	mov.w	r3, #4294967295
 8009836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009838:	687b      	ldr	r3, [r7, #4]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	2000306c 	.word	0x2000306c

08009848 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	@ 0x38
 800984c:	af04      	add	r7, sp, #16
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009854:	2300      	movs	r3, #0
 8009856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009858:	f3ef 8305 	mrs	r3, IPSR
 800985c:	617b      	str	r3, [r7, #20]
  return(result);
 800985e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009860:	2b00      	cmp	r3, #0
 8009862:	d17e      	bne.n	8009962 <osThreadNew+0x11a>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d07b      	beq.n	8009962 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800986a:	2380      	movs	r3, #128	@ 0x80
 800986c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800986e:	2318      	movs	r3, #24
 8009870:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009876:	f04f 33ff 	mov.w	r3, #4294967295
 800987a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d045      	beq.n	800990e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d002      	beq.n	8009890 <osThreadNew+0x48>
        name = attr->name;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <osThreadNew+0x6e>
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	2b38      	cmp	r3, #56	@ 0x38
 80098a8:	d805      	bhi.n	80098b6 <osThreadNew+0x6e>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <osThreadNew+0x72>
        return (NULL);
 80098b6:	2300      	movs	r3, #0
 80098b8:	e054      	b.n	8009964 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	089b      	lsrs	r3, r3, #2
 80098c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00e      	beq.n	80098f0 <osThreadNew+0xa8>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80098d8:	d90a      	bls.n	80098f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <osThreadNew+0xa8>
        mem = 1;
 80098ea:	2301      	movs	r3, #1
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	e010      	b.n	8009912 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10c      	bne.n	8009912 <osThreadNew+0xca>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d108      	bne.n	8009912 <osThreadNew+0xca>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d104      	bne.n	8009912 <osThreadNew+0xca>
          mem = 0;
 8009908:	2300      	movs	r3, #0
 800990a:	61bb      	str	r3, [r7, #24]
 800990c:	e001      	b.n	8009912 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d110      	bne.n	800993a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009920:	9202      	str	r2, [sp, #8]
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	6a3a      	ldr	r2, [r7, #32]
 800992c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f001 fa6a 	bl	800ae08 <xTaskCreateStatic>
 8009934:	4603      	mov	r3, r0
 8009936:	613b      	str	r3, [r7, #16]
 8009938:	e013      	b.n	8009962 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d110      	bne.n	8009962 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	b29a      	uxth	r2, r3
 8009944:	f107 0310 	add.w	r3, r7, #16
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f001 fab8 	bl	800aec8 <xTaskCreate>
 8009958:	4603      	mov	r3, r0
 800995a:	2b01      	cmp	r3, #1
 800995c:	d001      	beq.n	8009962 <osThreadNew+0x11a>
            hTask = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009962:	693b      	ldr	r3, [r7, #16]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3728      	adds	r7, #40	@ 0x28
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009974:	f3ef 8305 	mrs	r3, IPSR
 8009978:	60bb      	str	r3, [r7, #8]
  return(result);
 800997a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <osDelay+0x1c>
    stat = osErrorISR;
 8009980:	f06f 0305 	mvn.w	r3, #5
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e007      	b.n	8009998 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fbde 	bl	800b154 <vTaskDelay>
    }
  }

  return (stat);
 8009998:	68fb      	ldr	r3, [r7, #12]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b08a      	sub	sp, #40	@ 0x28
 80099a6:	af02      	add	r7, sp, #8
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b2:	f3ef 8305 	mrs	r3, IPSR
 80099b6:	613b      	str	r3, [r7, #16]
  return(result);
 80099b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d175      	bne.n	8009aaa <osSemaphoreNew+0x108>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d072      	beq.n	8009aaa <osSemaphoreNew+0x108>
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d86e      	bhi.n	8009aaa <osSemaphoreNew+0x108>
    mem = -1;
 80099cc:	f04f 33ff 	mov.w	r3, #4294967295
 80099d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d015      	beq.n	8009a04 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d006      	beq.n	80099ee <osSemaphoreNew+0x4c>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	2b4f      	cmp	r3, #79	@ 0x4f
 80099e6:	d902      	bls.n	80099ee <osSemaphoreNew+0x4c>
        mem = 1;
 80099e8:	2301      	movs	r3, #1
 80099ea:	61bb      	str	r3, [r7, #24]
 80099ec:	e00c      	b.n	8009a08 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d108      	bne.n	8009a08 <osSemaphoreNew+0x66>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <osSemaphoreNew+0x66>
          mem = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]
 8009a02:	e001      	b.n	8009a08 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0e:	d04c      	beq.n	8009aaa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d128      	bne.n	8009a68 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10a      	bne.n	8009a32 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2203      	movs	r2, #3
 8009a22:	9200      	str	r2, [sp, #0]
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	2001      	movs	r0, #1
 8009a2a:	f000 fa2b 	bl	8009e84 <xQueueGenericCreateStatic>
 8009a2e:	61f8      	str	r0, [r7, #28]
 8009a30:	e005      	b.n	8009a3e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a32:	2203      	movs	r2, #3
 8009a34:	2100      	movs	r1, #0
 8009a36:	2001      	movs	r0, #1
 8009a38:	f000 faa1 	bl	8009f7e <xQueueGenericCreate>
 8009a3c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d022      	beq.n	8009a8a <osSemaphoreNew+0xe8>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01f      	beq.n	8009a8a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2100      	movs	r1, #0
 8009a50:	69f8      	ldr	r0, [r7, #28]
 8009a52:	f000 fb61 	bl	800a118 <xQueueGenericSend>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d016      	beq.n	8009a8a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009a5c:	69f8      	ldr	r0, [r7, #28]
 8009a5e:	f000 ffff 	bl	800aa60 <vQueueDelete>
            hSemaphore = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	e010      	b.n	8009a8a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d108      	bne.n	8009a80 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	461a      	mov	r2, r3
 8009a74:	68b9      	ldr	r1, [r7, #8]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 fadf 	bl	800a03a <xQueueCreateCountingSemaphoreStatic>
 8009a7c:	61f8      	str	r0, [r7, #28]
 8009a7e:	e004      	b.n	8009a8a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009a80:	68b9      	ldr	r1, [r7, #8]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fb12 	bl	800a0ac <xQueueCreateCountingSemaphore>
 8009a88:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00c      	beq.n	8009aaa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	e001      	b.n	8009aa2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009aa2:	6979      	ldr	r1, [r7, #20]
 8009aa4:	69f8      	ldr	r0, [r7, #28]
 8009aa6:	f001 f927 	bl	800acf8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009aaa:	69fb      	ldr	r3, [r7, #28]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3720      	adds	r7, #32
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d103      	bne.n	8009ad4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009acc:	f06f 0303 	mvn.w	r3, #3
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	e039      	b.n	8009b48 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad4:	f3ef 8305 	mrs	r3, IPSR
 8009ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ada:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d022      	beq.n	8009b26 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009ae6:	f06f 0303 	mvn.w	r3, #3
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e02c      	b.n	8009b48 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009af2:	f107 0308 	add.w	r3, r7, #8
 8009af6:	461a      	mov	r2, r3
 8009af8:	2100      	movs	r1, #0
 8009afa:	6938      	ldr	r0, [r7, #16]
 8009afc:	f000 ff2e 	bl	800a95c <xQueueReceiveFromISR>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d003      	beq.n	8009b0e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009b06:	f06f 0302 	mvn.w	r3, #2
 8009b0a:	617b      	str	r3, [r7, #20]
 8009b0c:	e01c      	b.n	8009b48 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d019      	beq.n	8009b48 <osSemaphoreAcquire+0x94>
 8009b14:	4b0f      	ldr	r3, [pc, #60]	@ (8009b54 <osSemaphoreAcquire+0xa0>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	e010      	b.n	8009b48 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6938      	ldr	r0, [r7, #16]
 8009b2a:	f000 fe07 	bl	800a73c <xQueueSemaphoreTake>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d009      	beq.n	8009b48 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009b3a:	f06f 0301 	mvn.w	r3, #1
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	e002      	b.n	8009b48 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009b42:	f06f 0302 	mvn.w	r3, #2
 8009b46:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009b48:	697b      	ldr	r3, [r7, #20]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009b6e:	f06f 0303 	mvn.w	r3, #3
 8009b72:	617b      	str	r3, [r7, #20]
 8009b74:	e02c      	b.n	8009bd0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b76:	f3ef 8305 	mrs	r3, IPSR
 8009b7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01a      	beq.n	8009bb8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b86:	f107 0308 	add.w	r3, r7, #8
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6938      	ldr	r0, [r7, #16]
 8009b8e:	f000 fc63 	bl	800a458 <xQueueGiveFromISR>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d003      	beq.n	8009ba0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009b98:	f06f 0302 	mvn.w	r3, #2
 8009b9c:	617b      	str	r3, [r7, #20]
 8009b9e:	e017      	b.n	8009bd0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d014      	beq.n	8009bd0 <osSemaphoreRelease+0x78>
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bdc <osSemaphoreRelease+0x84>)
 8009ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	e00b      	b.n	8009bd0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bb8:	2300      	movs	r3, #0
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	6938      	ldr	r0, [r7, #16]
 8009bc0:	f000 faaa 	bl	800a118 <xQueueGenericSend>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d002      	beq.n	8009bd0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009bca:	f06f 0302 	mvn.w	r3, #2
 8009bce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009bd0:	697b      	ldr	r3, [r7, #20]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	e000ed04 	.word	0xe000ed04

08009be0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4a07      	ldr	r2, [pc, #28]	@ (8009c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8009bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	4a06      	ldr	r2, [pc, #24]	@ (8009c10 <vApplicationGetIdleTaskMemory+0x30>)
 8009bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2280      	movs	r2, #128	@ 0x80
 8009bfc:	601a      	str	r2, [r3, #0]
}
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	20003070 	.word	0x20003070
 8009c10:	200030cc 	.word	0x200030cc

08009c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4a07      	ldr	r2, [pc, #28]	@ (8009c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	4a06      	ldr	r2, [pc, #24]	@ (8009c44 <vApplicationGetTimerTaskMemory+0x30>)
 8009c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c32:	601a      	str	r2, [r3, #0]
}
 8009c34:	bf00      	nop
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	200032cc 	.word	0x200032cc
 8009c44:	20003328 	.word	0x20003328

08009c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f103 0208 	add.w	r2, r3, #8
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f103 0208 	add.w	r2, r3, #8
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f103 0208 	add.w	r2, r3, #8
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c96:	bf00      	nop
 8009c98:	370c      	adds	r7, #12
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	689a      	ldr	r2, [r3, #8]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	601a      	str	r2, [r3, #0]
}
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d00:	d103      	bne.n	8009d0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	e00c      	b.n	8009d24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	e002      	b.n	8009d18 <vListInsert+0x2e>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d2f6      	bcs.n	8009d12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	601a      	str	r2, [r3, #0]
}
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	6892      	ldr	r2, [r2, #8]
 8009d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	6852      	ldr	r2, [r2, #4]
 8009d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d103      	bne.n	8009d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	1e5a      	subs	r2, r3, #1
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009dd6:	bf00      	nop
 8009dd8:	bf00      	nop
 8009dda:	e7fd      	b.n	8009dd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ddc:	f002 fcac 	bl	800c738 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de8:	68f9      	ldr	r1, [r7, #12]
 8009dea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009dec:	fb01 f303 	mul.w	r3, r1, r3
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e12:	fb01 f303 	mul.w	r3, r1, r3
 8009e16:	441a      	add	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	22ff      	movs	r2, #255	@ 0xff
 8009e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	22ff      	movs	r2, #255	@ 0xff
 8009e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d114      	bne.n	8009e5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01a      	beq.n	8009e70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3310      	adds	r3, #16
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fc4c 	bl	800b6dc <xTaskRemoveFromEventList>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d012      	beq.n	8009e70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <xQueueGenericReset+0xd0>)
 8009e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	e009      	b.n	8009e70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3310      	adds	r3, #16
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff fef1 	bl	8009c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3324      	adds	r3, #36	@ 0x24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff feec 	bl	8009c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e70:	f002 fc94 	bl	800c79c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e74:	2301      	movs	r3, #1
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	e000ed04 	.word	0xe000ed04

08009e84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08e      	sub	sp, #56	@ 0x38
 8009e88:	af02      	add	r7, sp, #8
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009eaa:	bf00      	nop
 8009eac:	bf00      	nop
 8009eae:	e7fd      	b.n	8009eac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10b      	bne.n	8009ece <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ec8:	bf00      	nop
 8009eca:	bf00      	nop
 8009ecc:	e7fd      	b.n	8009eca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <xQueueGenericCreateStatic+0x56>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <xQueueGenericCreateStatic+0x5a>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <xQueueGenericCreateStatic+0x5c>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10b      	bne.n	8009efc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	623b      	str	r3, [r7, #32]
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	e7fd      	b.n	8009ef8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <xQueueGenericCreateStatic+0x84>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <xQueueGenericCreateStatic+0x88>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <xQueueGenericCreateStatic+0x8a>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10b      	bne.n	8009f2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	61fb      	str	r3, [r7, #28]
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop
 8009f28:	e7fd      	b.n	8009f26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f2a:	2350      	movs	r3, #80	@ 0x50
 8009f2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b50      	cmp	r3, #80	@ 0x50
 8009f32:	d00b      	beq.n	8009f4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	61bb      	str	r3, [r7, #24]
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	e7fd      	b.n	8009f48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00d      	beq.n	8009f74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f840 	bl	8009ff4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3730      	adds	r7, #48	@ 0x30
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b08a      	sub	sp, #40	@ 0x28
 8009f82:	af02      	add	r7, sp, #8
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10b      	bne.n	8009faa <xQueueGenericCreate+0x2c>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	613b      	str	r3, [r7, #16]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
 8009fb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	3350      	adds	r3, #80	@ 0x50
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f002 fcdf 	bl	800c97c <pvPortMalloc>
 8009fbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d011      	beq.n	8009fea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	3350      	adds	r3, #80	@ 0x50
 8009fce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fd8:	79fa      	ldrb	r2, [r7, #7]
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 f805 	bl	8009ff4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fea:	69bb      	ldr	r3, [r7, #24]
	}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3720      	adds	r7, #32
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e002      	b.n	800a016 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a022:	2101      	movs	r1, #1
 800a024:	69b8      	ldr	r0, [r7, #24]
 800a026:	f7ff fec3 	bl	8009db0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a032:	bf00      	nop
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b08a      	sub	sp, #40	@ 0x28
 800a03e:	af02      	add	r7, sp, #8
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10b      	bne.n	800a064 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	61bb      	str	r3, [r7, #24]
}
 800a05e:	bf00      	nop
 800a060:	bf00      	nop
 800a062:	e7fd      	b.n	800a060 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d90b      	bls.n	800a084 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	617b      	str	r3, [r7, #20]
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	e7fd      	b.n	800a080 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a084:	2302      	movs	r3, #2
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff fef8 	bl	8009e84 <xQueueGenericCreateStatic>
 800a094:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
	}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	613b      	str	r3, [r7, #16]
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	e7fd      	b.n	800a0d0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d90b      	bls.n	800a0f4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	60fb      	str	r3, [r7, #12]
}
 800a0ee:	bf00      	nop
 800a0f0:	bf00      	nop
 800a0f2:	e7fd      	b.n	800a0f0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff ff40 	bl	8009f7e <xQueueGenericCreate>
 800a0fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a10c:	697b      	ldr	r3, [r7, #20]
	}
 800a10e:	4618      	mov	r0, r3
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08e      	sub	sp, #56	@ 0x38
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a126:	2300      	movs	r3, #0
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10b      	bne.n	800a14c <xQueueGenericSend+0x34>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <xQueueGenericSend+0x42>
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueGenericSend+0x46>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueGenericSend+0x48>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <xQueueGenericSend+0x64>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d103      	bne.n	800a18a <xQueueGenericSend+0x72>
 800a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d101      	bne.n	800a18e <xQueueGenericSend+0x76>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e000      	b.n	800a190 <xQueueGenericSend+0x78>
 800a18e:	2300      	movs	r3, #0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10b      	bne.n	800a1ac <xQueueGenericSend+0x94>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	623b      	str	r3, [r7, #32]
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1ac:	f001 fc56 	bl	800ba5c <xTaskGetSchedulerState>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d102      	bne.n	800a1bc <xQueueGenericSend+0xa4>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <xQueueGenericSend+0xa8>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e000      	b.n	800a1c2 <xQueueGenericSend+0xaa>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <xQueueGenericSend+0xc6>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	61fb      	str	r3, [r7, #28]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1de:	f002 faab 	bl	800c738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d302      	bcc.n	800a1f4 <xQueueGenericSend+0xdc>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d129      	bne.n	800a248 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1fa:	f000 fc6d 	bl	800aad8 <prvCopyDataToQueue>
 800a1fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	3324      	adds	r3, #36	@ 0x24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 fa65 	bl	800b6dc <xTaskRemoveFromEventList>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d013      	beq.n	800a240 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a218:	4b3f      	ldr	r3, [pc, #252]	@ (800a318 <xQueueGenericSend+0x200>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	e00a      	b.n	800a240 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a230:	4b39      	ldr	r3, [pc, #228]	@ (800a318 <xQueueGenericSend+0x200>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a240:	f002 faac 	bl	800c79c <vPortExitCritical>
				return pdPASS;
 800a244:	2301      	movs	r3, #1
 800a246:	e063      	b.n	800a310 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a24e:	f002 faa5 	bl	800c79c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a252:	2300      	movs	r3, #0
 800a254:	e05c      	b.n	800a310 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d106      	bne.n	800a26a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4618      	mov	r0, r3
 800a262:	f001 fa9f 	bl	800b7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a266:	2301      	movs	r3, #1
 800a268:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a26a:	f002 fa97 	bl	800c79c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a26e:	f001 f80f 	bl	800b290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a272:	f002 fa61 	bl	800c738 <vPortEnterCritical>
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d103      	bne.n	800a28c <xQueueGenericSend+0x174>
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a292:	b25b      	sxtb	r3, r3
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d103      	bne.n	800a2a2 <xQueueGenericSend+0x18a>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2a2:	f002 fa7b 	bl	800c79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a6:	1d3a      	adds	r2, r7, #4
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 fa8e 	bl	800b7d0 <xTaskCheckForTimeOut>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d124      	bne.n	800a304 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2bc:	f000 fd04 	bl	800acc8 <prvIsQueueFull>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d018      	beq.n	800a2f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	3310      	adds	r3, #16
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 f9b2 	bl	800b638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2d6:	f000 fc8f 	bl	800abf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2da:	f000 ffe7 	bl	800b2ac <xTaskResumeAll>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f47f af7c 	bne.w	800a1de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a318 <xQueueGenericSend+0x200>)
 800a2e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	e772      	b.n	800a1de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2fa:	f000 fc7d 	bl	800abf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2fe:	f000 ffd5 	bl	800b2ac <xTaskResumeAll>
 800a302:	e76c      	b.n	800a1de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a306:	f000 fc77 	bl	800abf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a30a:	f000 ffcf 	bl	800b2ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a30e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a310:	4618      	mov	r0, r3
 800a312:	3738      	adds	r7, #56	@ 0x38
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b090      	sub	sp, #64	@ 0x40
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10b      	bne.n	800a34c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	e7fd      	b.n	800a348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d103      	bne.n	800a35a <xQueueGenericSendFromISR+0x3e>
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <xQueueGenericSendFromISR+0x42>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e000      	b.n	800a360 <xQueueGenericSendFromISR+0x44>
 800a35e:	2300      	movs	r3, #0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10b      	bne.n	800a37c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a376:	bf00      	nop
 800a378:	bf00      	nop
 800a37a:	e7fd      	b.n	800a378 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d103      	bne.n	800a38a <xQueueGenericSendFromISR+0x6e>
 800a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a386:	2b01      	cmp	r3, #1
 800a388:	d101      	bne.n	800a38e <xQueueGenericSendFromISR+0x72>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <xQueueGenericSendFromISR+0x74>
 800a38e:	2300      	movs	r3, #0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	623b      	str	r3, [r7, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	e7fd      	b.n	800a3a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3ac:	f002 faa4 	bl	800c8f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3b0:	f3ef 8211 	mrs	r2, BASEPRI
 800a3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	61fa      	str	r2, [r7, #28]
 800a3c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d302      	bcc.n	800a3de <xQueueGenericSendFromISR+0xc2>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d12f      	bne.n	800a43e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3f4:	f000 fb70 	bl	800aad8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d112      	bne.n	800a428 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d016      	beq.n	800a438 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40c:	3324      	adds	r3, #36	@ 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 f964 	bl	800b6dc <xTaskRemoveFromEventList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00e      	beq.n	800a438 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	e007      	b.n	800a438 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a42c:	3301      	adds	r3, #1
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	b25a      	sxtb	r2, r3
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a438:	2301      	movs	r3, #1
 800a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a43c:	e001      	b.n	800a442 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a44c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a450:	4618      	mov	r0, r3
 800a452:	3740      	adds	r7, #64	@ 0x40
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08e      	sub	sp, #56	@ 0x38
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10b      	bne.n	800a484 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	623b      	str	r3, [r7, #32]
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	e7fd      	b.n	800a480 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00b      	beq.n	800a4a4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	61fb      	str	r3, [r7, #28]
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	e7fd      	b.n	800a4a0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d103      	bne.n	800a4b4 <xQueueGiveFromISR+0x5c>
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <xQueueGiveFromISR+0x60>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e000      	b.n	800a4ba <xQueueGiveFromISR+0x62>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10b      	bne.n	800a4d6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	61bb      	str	r3, [r7, #24]
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	e7fd      	b.n	800a4d2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4d6:	f002 fa0f 	bl	800c8f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a4da:	f3ef 8211 	mrs	r2, BASEPRI
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	617a      	str	r2, [r7, #20]
 800a4f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a502:	429a      	cmp	r2, r3
 800a504:	d22b      	bcs.n	800a55e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a50c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a516:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a518:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a520:	d112      	bne.n	800a548 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a526:	2b00      	cmp	r3, #0
 800a528:	d016      	beq.n	800a558 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	3324      	adds	r3, #36	@ 0x24
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 f8d4 	bl	800b6dc <xTaskRemoveFromEventList>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00e      	beq.n	800a558 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2201      	movs	r2, #1
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	e007      	b.n	800a558 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a54c:	3301      	adds	r3, #1
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	b25a      	sxtb	r2, r3
 800a552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a558:	2301      	movs	r3, #1
 800a55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55c:	e001      	b.n	800a562 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	637b      	str	r3, [r7, #52]	@ 0x34
 800a562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a564:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f383 8811 	msr	BASEPRI, r3
}
 800a56c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a570:	4618      	mov	r0, r3
 800a572:	3738      	adds	r7, #56	@ 0x38
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08c      	sub	sp, #48	@ 0x30
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a584:	2300      	movs	r3, #0
 800a586:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <xQueueReceive+0x32>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	623b      	str	r3, [r7, #32]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d103      	bne.n	800a5b8 <xQueueReceive+0x40>
 800a5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <xQueueReceive+0x44>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e000      	b.n	800a5be <xQueueReceive+0x46>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10b      	bne.n	800a5da <xQueueReceive+0x62>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	61fb      	str	r3, [r7, #28]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5da:	f001 fa3f 	bl	800ba5c <xTaskGetSchedulerState>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d102      	bne.n	800a5ea <xQueueReceive+0x72>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <xQueueReceive+0x76>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <xQueueReceive+0x78>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10b      	bne.n	800a60c <xQueueReceive+0x94>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	61bb      	str	r3, [r7, #24]
}
 800a606:	bf00      	nop
 800a608:	bf00      	nop
 800a60a:	e7fd      	b.n	800a608 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a60c:	f002 f894 	bl	800c738 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a614:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01f      	beq.n	800a65c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a61c:	68b9      	ldr	r1, [r7, #8]
 800a61e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a620:	f000 fac4 	bl	800abac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	1e5a      	subs	r2, r3, #1
 800a628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00f      	beq.n	800a654 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a636:	3310      	adds	r3, #16
 800a638:	4618      	mov	r0, r3
 800a63a:	f001 f84f 	bl	800b6dc <xTaskRemoveFromEventList>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a644:	4b3c      	ldr	r3, [pc, #240]	@ (800a738 <xQueueReceive+0x1c0>)
 800a646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a654:	f002 f8a2 	bl	800c79c <vPortExitCritical>
				return pdPASS;
 800a658:	2301      	movs	r3, #1
 800a65a:	e069      	b.n	800a730 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d103      	bne.n	800a66a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a662:	f002 f89b 	bl	800c79c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a666:	2300      	movs	r3, #0
 800a668:	e062      	b.n	800a730 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d106      	bne.n	800a67e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a670:	f107 0310 	add.w	r3, r7, #16
 800a674:	4618      	mov	r0, r3
 800a676:	f001 f895 	bl	800b7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a67a:	2301      	movs	r3, #1
 800a67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a67e:	f002 f88d 	bl	800c79c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a682:	f000 fe05 	bl	800b290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a686:	f002 f857 	bl	800c738 <vPortEnterCritical>
 800a68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a690:	b25b      	sxtb	r3, r3
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a696:	d103      	bne.n	800a6a0 <xQueueReceive+0x128>
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6a6:	b25b      	sxtb	r3, r3
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d103      	bne.n	800a6b6 <xQueueReceive+0x13e>
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6b6:	f002 f871 	bl	800c79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6ba:	1d3a      	adds	r2, r7, #4
 800a6bc:	f107 0310 	add.w	r3, r7, #16
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f001 f884 	bl	800b7d0 <xTaskCheckForTimeOut>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d123      	bne.n	800a716 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6d0:	f000 fae4 	bl	800ac9c <prvIsQueueEmpty>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d017      	beq.n	800a70a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6dc:	3324      	adds	r3, #36	@ 0x24
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 ffa8 	bl	800b638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6ea:	f000 fa85 	bl	800abf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6ee:	f000 fddd 	bl	800b2ac <xTaskResumeAll>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d189      	bne.n	800a60c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a738 <xQueueReceive+0x1c0>)
 800a6fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	e780      	b.n	800a60c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a70a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a70c:	f000 fa74 	bl	800abf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a710:	f000 fdcc 	bl	800b2ac <xTaskResumeAll>
 800a714:	e77a      	b.n	800a60c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a718:	f000 fa6e 	bl	800abf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a71c:	f000 fdc6 	bl	800b2ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a722:	f000 fabb 	bl	800ac9c <prvIsQueueEmpty>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f43f af6f 	beq.w	800a60c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a72e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a730:	4618      	mov	r0, r3
 800a732:	3730      	adds	r7, #48	@ 0x30
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	e000ed04 	.word	0xe000ed04

0800a73c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08e      	sub	sp, #56	@ 0x38
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a746:	2300      	movs	r3, #0
 800a748:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	623b      	str	r3, [r7, #32]
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	e7fd      	b.n	800a76c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	61fb      	str	r3, [r7, #28]
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	e7fd      	b.n	800a78c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a790:	f001 f964 	bl	800ba5c <xTaskGetSchedulerState>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <xQueueSemaphoreTake+0x64>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <xQueueSemaphoreTake+0x68>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e000      	b.n	800a7a6 <xQueueSemaphoreTake+0x6a>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10b      	bne.n	800a7c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	61bb      	str	r3, [r7, #24]
}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	e7fd      	b.n	800a7be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7c2:	f001 ffb9 	bl	800c738 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d024      	beq.n	800a81c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d4:	1e5a      	subs	r2, r3, #1
 800a7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d104      	bne.n	800a7ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7e2:	f001 fab5 	bl	800bd50 <pvTaskIncrementMutexHeldCount>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00f      	beq.n	800a814 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f6:	3310      	adds	r3, #16
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 ff6f 	bl	800b6dc <xTaskRemoveFromEventList>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a804:	4b54      	ldr	r3, [pc, #336]	@ (800a958 <xQueueSemaphoreTake+0x21c>)
 800a806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a814:	f001 ffc2 	bl	800c79c <vPortExitCritical>
				return pdPASS;
 800a818:	2301      	movs	r3, #1
 800a81a:	e098      	b.n	800a94e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d112      	bne.n	800a848 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00b      	beq.n	800a840 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	617b      	str	r3, [r7, #20]
}
 800a83a:	bf00      	nop
 800a83c:	bf00      	nop
 800a83e:	e7fd      	b.n	800a83c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a840:	f001 ffac 	bl	800c79c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a844:	2300      	movs	r3, #0
 800a846:	e082      	b.n	800a94e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a84e:	f107 030c 	add.w	r3, r7, #12
 800a852:	4618      	mov	r0, r3
 800a854:	f000 ffa6 	bl	800b7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a858:	2301      	movs	r3, #1
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a85c:	f001 ff9e 	bl	800c79c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a860:	f000 fd16 	bl	800b290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a864:	f001 ff68 	bl	800c738 <vPortEnterCritical>
 800a868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a874:	d103      	bne.n	800a87e <xQueueSemaphoreTake+0x142>
 800a876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a884:	b25b      	sxtb	r3, r3
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88a:	d103      	bne.n	800a894 <xQueueSemaphoreTake+0x158>
 800a88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a894:	f001 ff82 	bl	800c79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a898:	463a      	mov	r2, r7
 800a89a:	f107 030c 	add.w	r3, r7, #12
 800a89e:	4611      	mov	r1, r2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 ff95 	bl	800b7d0 <xTaskCheckForTimeOut>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d132      	bne.n	800a912 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8ae:	f000 f9f5 	bl	800ac9c <prvIsQueueEmpty>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d026      	beq.n	800a906 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d109      	bne.n	800a8d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a8c0:	f001 ff3a 	bl	800c738 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 f8e5 	bl	800ba98 <xTaskPriorityInherit>
 800a8ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a8d0:	f001 ff64 	bl	800c79c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d6:	3324      	adds	r3, #36	@ 0x24
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	4611      	mov	r1, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 feab 	bl	800b638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8e4:	f000 f988 	bl	800abf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8e8:	f000 fce0 	bl	800b2ac <xTaskResumeAll>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f47f af67 	bne.w	800a7c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a8f4:	4b18      	ldr	r3, [pc, #96]	@ (800a958 <xQueueSemaphoreTake+0x21c>)
 800a8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	e75d      	b.n	800a7c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a906:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a908:	f000 f976 	bl	800abf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a90c:	f000 fcce 	bl	800b2ac <xTaskResumeAll>
 800a910:	e757      	b.n	800a7c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a912:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a914:	f000 f970 	bl	800abf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a918:	f000 fcc8 	bl	800b2ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a91c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a91e:	f000 f9bd 	bl	800ac9c <prvIsQueueEmpty>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	f43f af4c 	beq.w	800a7c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00d      	beq.n	800a94c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a930:	f001 ff02 	bl	800c738 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a936:	f000 f8b7 	bl	800aaa8 <prvGetDisinheritPriorityAfterTimeout>
 800a93a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a942:	4618      	mov	r0, r3
 800a944:	f001 f980 	bl	800bc48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a948:	f001 ff28 	bl	800c79c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a94c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3738      	adds	r7, #56	@ 0x38
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08e      	sub	sp, #56	@ 0x38
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10b      	bne.n	800a98a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	623b      	str	r3, [r7, #32]
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	e7fd      	b.n	800a986 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d103      	bne.n	800a998 <xQueueReceiveFromISR+0x3c>
 800a990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <xQueueReceiveFromISR+0x40>
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <xQueueReceiveFromISR+0x42>
 800a99c:	2300      	movs	r3, #0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	61fb      	str	r3, [r7, #28]
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	e7fd      	b.n	800a9b6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9ba:	f001 ff9d 	bl	800c8f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a9be:	f3ef 8211 	mrs	r2, BASEPRI
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	61ba      	str	r2, [r7, #24]
 800a9d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d02f      	beq.n	800aa46 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9f4:	f000 f8da 	bl	800abac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fa:	1e5a      	subs	r2, r3, #1
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d112      	bne.n	800aa30 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d016      	beq.n	800aa40 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	3310      	adds	r3, #16
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fe60 	bl	800b6dc <xTaskRemoveFromEventList>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00b      	beq.n	800aa40 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	e007      	b.n	800aa40 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa34:	3301      	adds	r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	b25a      	sxtb	r2, r3
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aa40:	2301      	movs	r3, #1
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa44:	e001      	b.n	800aa4a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f383 8811 	msr	BASEPRI, r3
}
 800aa54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3738      	adds	r7, #56	@ 0x38
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10b      	bne.n	800aa8a <vQueueDelete+0x2a>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	60bb      	str	r3, [r7, #8]
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop
 800aa88:	e7fd      	b.n	800aa86 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f000 f95e 	bl	800ad4c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d102      	bne.n	800aaa0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f002 f83c 	bl	800cb18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aaa0:	bf00      	nop
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d006      	beq.n	800aac6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	e001      	b.n	800aaca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aaca:	68fb      	ldr	r3, [r7, #12]
	}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10d      	bne.n	800ab12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d14d      	bne.n	800ab9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f830 	bl	800bb68 <xTaskPriorityDisinherit>
 800ab08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	609a      	str	r2, [r3, #8]
 800ab10:	e043      	b.n	800ab9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d119      	bne.n	800ab4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6858      	ldr	r0, [r3, #4]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab20:	461a      	mov	r2, r3
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	f003 f837 	bl	800db96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab30:	441a      	add	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d32b      	bcc.n	800ab9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	605a      	str	r2, [r3, #4]
 800ab4a:	e026      	b.n	800ab9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	68d8      	ldr	r0, [r3, #12]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab54:	461a      	mov	r2, r3
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	f003 f81d 	bl	800db96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab64:	425b      	negs	r3, r3
 800ab66:	441a      	add	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d207      	bcs.n	800ab88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab80:	425b      	negs	r3, r3
 800ab82:	441a      	add	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d105      	bne.n	800ab9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aba2:	697b      	ldr	r3, [r7, #20]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d018      	beq.n	800abf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc6:	441a      	add	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68da      	ldr	r2, [r3, #12]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d303      	bcc.n	800abe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68d9      	ldr	r1, [r3, #12]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe8:	461a      	mov	r2, r3
 800abea:	6838      	ldr	r0, [r7, #0]
 800abec:	f002 ffd3 	bl	800db96 <memcpy>
	}
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac00:	f001 fd9a 	bl	800c738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac0c:	e011      	b.n	800ac32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d012      	beq.n	800ac3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3324      	adds	r3, #36	@ 0x24
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fd5e 	bl	800b6dc <xTaskRemoveFromEventList>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac26:	f000 fe37 	bl	800b898 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dce9      	bgt.n	800ac0e <prvUnlockQueue+0x16>
 800ac3a:	e000      	b.n	800ac3e <prvUnlockQueue+0x46>
					break;
 800ac3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	22ff      	movs	r2, #255	@ 0xff
 800ac42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac46:	f001 fda9 	bl	800c79c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac4a:	f001 fd75 	bl	800c738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac56:	e011      	b.n	800ac7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d012      	beq.n	800ac86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3310      	adds	r3, #16
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fd39 	bl	800b6dc <xTaskRemoveFromEventList>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac70:	f000 fe12 	bl	800b898 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac74:	7bbb      	ldrb	r3, [r7, #14]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dce9      	bgt.n	800ac58 <prvUnlockQueue+0x60>
 800ac84:	e000      	b.n	800ac88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	22ff      	movs	r2, #255	@ 0xff
 800ac8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac90:	f001 fd84 	bl	800c79c <vPortExitCritical>
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aca4:	f001 fd48 	bl	800c738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acac:	2b00      	cmp	r3, #0
 800acae:	d102      	bne.n	800acb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acb0:	2301      	movs	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	e001      	b.n	800acba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acba:	f001 fd6f 	bl	800c79c <vPortExitCritical>

	return xReturn;
 800acbe:	68fb      	ldr	r3, [r7, #12]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acd0:	f001 fd32 	bl	800c738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	429a      	cmp	r2, r3
 800acde:	d102      	bne.n	800ace6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ace0:	2301      	movs	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	e001      	b.n	800acea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acea:	f001 fd57 	bl	800c79c <vPortExitCritical>

	return xReturn;
 800acee:	68fb      	ldr	r3, [r7, #12]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	e014      	b.n	800ad32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad08:	4a0f      	ldr	r2, [pc, #60]	@ (800ad48 <vQueueAddToRegistry+0x50>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10b      	bne.n	800ad2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad14:	490c      	ldr	r1, [pc, #48]	@ (800ad48 <vQueueAddToRegistry+0x50>)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad1e:	4a0a      	ldr	r2, [pc, #40]	@ (800ad48 <vQueueAddToRegistry+0x50>)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	4413      	add	r3, r2
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad2a:	e006      	b.n	800ad3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b07      	cmp	r3, #7
 800ad36:	d9e7      	bls.n	800ad08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad38:	bf00      	nop
 800ad3a:	bf00      	nop
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20003728 	.word	0x20003728

0800ad4c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]
 800ad58:	e016      	b.n	800ad88 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad5a:	4a10      	ldr	r2, [pc, #64]	@ (800ad9c <vQueueUnregisterQueue+0x50>)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	4413      	add	r3, r2
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d10b      	bne.n	800ad82 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad6a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad9c <vQueueUnregisterQueue+0x50>)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2100      	movs	r1, #0
 800ad70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad74:	4a09      	ldr	r2, [pc, #36]	@ (800ad9c <vQueueUnregisterQueue+0x50>)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	605a      	str	r2, [r3, #4]
				break;
 800ad80:	e006      	b.n	800ad90 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b07      	cmp	r3, #7
 800ad8c:	d9e5      	bls.n	800ad5a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad8e:	bf00      	nop
 800ad90:	bf00      	nop
 800ad92:	3714      	adds	r7, #20
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	20003728 	.word	0x20003728

0800ada0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800adb0:	f001 fcc2 	bl	800c738 <vPortEnterCritical>
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc0:	d103      	bne.n	800adca <vQueueWaitForMessageRestricted+0x2a>
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800add0:	b25b      	sxtb	r3, r3
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add6:	d103      	bne.n	800ade0 <vQueueWaitForMessageRestricted+0x40>
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ade0:	f001 fcdc 	bl	800c79c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d106      	bne.n	800adfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	3324      	adds	r3, #36	@ 0x24
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	68b9      	ldr	r1, [r7, #8]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fc45 	bl	800b684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800adfa:	6978      	ldr	r0, [r7, #20]
 800adfc:	f7ff fefc 	bl	800abf8 <prvUnlockQueue>
	}
 800ae00:	bf00      	nop
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08e      	sub	sp, #56	@ 0x38
 800ae0c:	af04      	add	r7, sp, #16
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10b      	bne.n	800ae34 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	623b      	str	r3, [r7, #32]
}
 800ae2e:	bf00      	nop
 800ae30:	bf00      	nop
 800ae32:	e7fd      	b.n	800ae30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10b      	bne.n	800ae52 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	61fb      	str	r3, [r7, #28]
}
 800ae4c:	bf00      	nop
 800ae4e:	bf00      	nop
 800ae50:	e7fd      	b.n	800ae4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae52:	235c      	movs	r3, #92	@ 0x5c
 800ae54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae5a:	d00b      	beq.n	800ae74 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	61bb      	str	r3, [r7, #24]
}
 800ae6e:	bf00      	nop
 800ae70:	bf00      	nop
 800ae72:	e7fd      	b.n	800ae70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01e      	beq.n	800aeba <xTaskCreateStatic+0xb2>
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d01b      	beq.n	800aeba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae94:	2300      	movs	r3, #0
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 f850 	bl	800af52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aeb4:	f000 f8de 	bl	800b074 <prvAddNewTaskToReadyList>
 800aeb8:	e001      	b.n	800aebe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aebe:	697b      	ldr	r3, [r7, #20]
	}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3728      	adds	r7, #40	@ 0x28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08c      	sub	sp, #48	@ 0x30
 800aecc:	af04      	add	r7, sp, #16
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	4613      	mov	r3, r2
 800aed6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aed8:	88fb      	ldrh	r3, [r7, #6]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 fd4d 	bl	800c97c <pvPortMalloc>
 800aee2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00e      	beq.n	800af08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aeea:	205c      	movs	r0, #92	@ 0x5c
 800aeec:	f001 fd46 	bl	800c97c <pvPortMalloc>
 800aef0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	631a      	str	r2, [r3, #48]	@ 0x30
 800aefe:	e005      	b.n	800af0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af00:	6978      	ldr	r0, [r7, #20]
 800af02:	f001 fe09 	bl	800cb18 <vPortFree>
 800af06:	e001      	b.n	800af0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d017      	beq.n	800af42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af1a:	88fa      	ldrh	r2, [r7, #6]
 800af1c:	2300      	movs	r3, #0
 800af1e:	9303      	str	r3, [sp, #12]
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	9302      	str	r3, [sp, #8]
 800af24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f000 f80e 	bl	800af52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af36:	69f8      	ldr	r0, [r7, #28]
 800af38:	f000 f89c 	bl	800b074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af3c:	2301      	movs	r3, #1
 800af3e:	61bb      	str	r3, [r7, #24]
 800af40:	e002      	b.n	800af48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af42:	f04f 33ff 	mov.w	r3, #4294967295
 800af46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af48:	69bb      	ldr	r3, [r7, #24]
	}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b088      	sub	sp, #32
 800af56:	af00      	add	r7, sp, #0
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	461a      	mov	r2, r3
 800af6a:	21a5      	movs	r1, #165	@ 0xa5
 800af6c:	f002 fd94 	bl	800da98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af7a:	3b01      	subs	r3, #1
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <prvInitialiseNewTask+0x5a>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	617b      	str	r3, [r7, #20]
}
 800afa6:	bf00      	nop
 800afa8:	bf00      	nop
 800afaa:	e7fd      	b.n	800afa8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d01f      	beq.n	800aff2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afb2:	2300      	movs	r3, #0
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	e012      	b.n	800afde <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4413      	add	r3, r2
 800afbe:	7819      	ldrb	r1, [r3, #0]
 800afc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	4413      	add	r3, r2
 800afc6:	3334      	adds	r3, #52	@ 0x34
 800afc8:	460a      	mov	r2, r1
 800afca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	4413      	add	r3, r2
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d006      	beq.n	800afe6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	3301      	adds	r3, #1
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	2b0f      	cmp	r3, #15
 800afe2:	d9e9      	bls.n	800afb8 <prvInitialiseNewTask+0x66>
 800afe4:	e000      	b.n	800afe8 <prvInitialiseNewTask+0x96>
			{
				break;
 800afe6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	2200      	movs	r2, #0
 800afec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aff0:	e003      	b.n	800affa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800affa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affc:	2b37      	cmp	r3, #55	@ 0x37
 800affe:	d901      	bls.n	800b004 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b000:	2337      	movs	r3, #55	@ 0x37
 800b002:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b008:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b00e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b012:	2200      	movs	r2, #0
 800b014:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	3304      	adds	r3, #4
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fe34 	bl	8009c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b022:	3318      	adds	r3, #24
 800b024:	4618      	mov	r0, r3
 800b026:	f7fe fe2f 	bl	8009c88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b02e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b032:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b03e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b042:	2200      	movs	r2, #0
 800b044:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	68f9      	ldr	r1, [r7, #12]
 800b052:	69b8      	ldr	r0, [r7, #24]
 800b054:	f001 fa3e 	bl	800c4d4 <pxPortInitialiseStack>
 800b058:	4602      	mov	r2, r0
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b06a:	bf00      	nop
 800b06c:	3720      	adds	r7, #32
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b07c:	f001 fb5c 	bl	800c738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b080:	4b2d      	ldr	r3, [pc, #180]	@ (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	4a2c      	ldr	r2, [pc, #176]	@ (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b08a:	4b2c      	ldr	r3, [pc, #176]	@ (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b092:	4a2a      	ldr	r2, [pc, #168]	@ (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b098:	4b27      	ldr	r3, [pc, #156]	@ (800b138 <prvAddNewTaskToReadyList+0xc4>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d110      	bne.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0a0:	f000 fc1e 	bl	800b8e0 <prvInitialiseTaskLists>
 800b0a4:	e00d      	b.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0a6:	4b26      	ldr	r3, [pc, #152]	@ (800b140 <prvAddNewTaskToReadyList+0xcc>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d109      	bne.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0ae:	4b23      	ldr	r3, [pc, #140]	@ (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d802      	bhi.n	800b0c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0bc:	4a1f      	ldr	r2, [pc, #124]	@ (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0c2:	4b20      	ldr	r3, [pc, #128]	@ (800b144 <prvAddNewTaskToReadyList+0xd0>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	4a1e      	ldr	r2, [pc, #120]	@ (800b144 <prvAddNewTaskToReadyList+0xd0>)
 800b0ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b144 <prvAddNewTaskToReadyList+0xd0>)
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b148 <prvAddNewTaskToReadyList+0xd4>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d903      	bls.n	800b0e8 <prvAddNewTaskToReadyList+0x74>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e4:	4a18      	ldr	r2, [pc, #96]	@ (800b148 <prvAddNewTaskToReadyList+0xd4>)
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4a15      	ldr	r2, [pc, #84]	@ (800b14c <prvAddNewTaskToReadyList+0xd8>)
 800b0f6:	441a      	add	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	4610      	mov	r0, r2
 800b100:	f7fe fdcf 	bl	8009ca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b104:	f001 fb4a 	bl	800c79c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b108:	4b0d      	ldr	r3, [pc, #52]	@ (800b140 <prvAddNewTaskToReadyList+0xcc>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00e      	beq.n	800b12e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b110:	4b0a      	ldr	r3, [pc, #40]	@ (800b13c <prvAddNewTaskToReadyList+0xc8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d207      	bcs.n	800b12e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b11e:	4b0c      	ldr	r3, [pc, #48]	@ (800b150 <prvAddNewTaskToReadyList+0xdc>)
 800b120:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20003c3c 	.word	0x20003c3c
 800b13c:	20003768 	.word	0x20003768
 800b140:	20003c48 	.word	0x20003c48
 800b144:	20003c58 	.word	0x20003c58
 800b148:	20003c44 	.word	0x20003c44
 800b14c:	2000376c 	.word	0x2000376c
 800b150:	e000ed04 	.word	0xe000ed04

0800b154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d018      	beq.n	800b198 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b166:	4b14      	ldr	r3, [pc, #80]	@ (800b1b8 <vTaskDelay+0x64>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00b      	beq.n	800b186 <vTaskDelay+0x32>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	60bb      	str	r3, [r7, #8]
}
 800b180:	bf00      	nop
 800b182:	bf00      	nop
 800b184:	e7fd      	b.n	800b182 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b186:	f000 f883 	bl	800b290 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b18a:	2100      	movs	r1, #0
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fdf3 	bl	800bd78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b192:	f000 f88b 	bl	800b2ac <xTaskResumeAll>
 800b196:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d107      	bne.n	800b1ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b19e:	4b07      	ldr	r3, [pc, #28]	@ (800b1bc <vTaskDelay+0x68>)
 800b1a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20003c64 	.word	0x20003c64
 800b1bc:	e000ed04 	.word	0xe000ed04

0800b1c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08a      	sub	sp, #40	@ 0x28
 800b1c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1ce:	463a      	mov	r2, r7
 800b1d0:	1d39      	adds	r1, r7, #4
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fd02 	bl	8009be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	9202      	str	r2, [sp, #8]
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	460a      	mov	r2, r1
 800b1ee:	4922      	ldr	r1, [pc, #136]	@ (800b278 <vTaskStartScheduler+0xb8>)
 800b1f0:	4822      	ldr	r0, [pc, #136]	@ (800b27c <vTaskStartScheduler+0xbc>)
 800b1f2:	f7ff fe09 	bl	800ae08 <xTaskCreateStatic>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4a21      	ldr	r2, [pc, #132]	@ (800b280 <vTaskStartScheduler+0xc0>)
 800b1fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1fc:	4b20      	ldr	r3, [pc, #128]	@ (800b280 <vTaskStartScheduler+0xc0>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b204:	2301      	movs	r3, #1
 800b206:	617b      	str	r3, [r7, #20]
 800b208:	e001      	b.n	800b20e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d102      	bne.n	800b21a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b214:	f000 fe04 	bl	800be20 <xTimerCreateTimerTask>
 800b218:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d116      	bne.n	800b24e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	613b      	str	r3, [r7, #16]
}
 800b232:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b234:	4b13      	ldr	r3, [pc, #76]	@ (800b284 <vTaskStartScheduler+0xc4>)
 800b236:	f04f 32ff 	mov.w	r2, #4294967295
 800b23a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b23c:	4b12      	ldr	r3, [pc, #72]	@ (800b288 <vTaskStartScheduler+0xc8>)
 800b23e:	2201      	movs	r2, #1
 800b240:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b242:	4b12      	ldr	r3, [pc, #72]	@ (800b28c <vTaskStartScheduler+0xcc>)
 800b244:	2200      	movs	r2, #0
 800b246:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b248:	f001 f9d2 	bl	800c5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b24c:	e00f      	b.n	800b26e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b254:	d10b      	bne.n	800b26e <vTaskStartScheduler+0xae>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	60fb      	str	r3, [r7, #12]
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	e7fd      	b.n	800b26a <vTaskStartScheduler+0xaa>
}
 800b26e:	bf00      	nop
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	0800f880 	.word	0x0800f880
 800b27c:	0800b8b1 	.word	0x0800b8b1
 800b280:	20003c60 	.word	0x20003c60
 800b284:	20003c5c 	.word	0x20003c5c
 800b288:	20003c48 	.word	0x20003c48
 800b28c:	20003c40 	.word	0x20003c40

0800b290 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b290:	b480      	push	{r7}
 800b292:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b294:	4b04      	ldr	r3, [pc, #16]	@ (800b2a8 <vTaskSuspendAll+0x18>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	4a03      	ldr	r2, [pc, #12]	@ (800b2a8 <vTaskSuspendAll+0x18>)
 800b29c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b29e:	bf00      	nop
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	20003c64 	.word	0x20003c64

0800b2ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2ba:	4b42      	ldr	r3, [pc, #264]	@ (800b3c4 <xTaskResumeAll+0x118>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10b      	bne.n	800b2da <xTaskResumeAll+0x2e>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	603b      	str	r3, [r7, #0]
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	e7fd      	b.n	800b2d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2da:	f001 fa2d 	bl	800c738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2de:	4b39      	ldr	r3, [pc, #228]	@ (800b3c4 <xTaskResumeAll+0x118>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	4a37      	ldr	r2, [pc, #220]	@ (800b3c4 <xTaskResumeAll+0x118>)
 800b2e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2e8:	4b36      	ldr	r3, [pc, #216]	@ (800b3c4 <xTaskResumeAll+0x118>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d162      	bne.n	800b3b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2f0:	4b35      	ldr	r3, [pc, #212]	@ (800b3c8 <xTaskResumeAll+0x11c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d05e      	beq.n	800b3b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2f8:	e02f      	b.n	800b35a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2fa:	4b34      	ldr	r3, [pc, #208]	@ (800b3cc <xTaskResumeAll+0x120>)
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3318      	adds	r3, #24
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe fd28 	bl	8009d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3304      	adds	r3, #4
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe fd23 	bl	8009d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31a:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d0 <xTaskResumeAll+0x124>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d903      	bls.n	800b32a <xTaskResumeAll+0x7e>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b326:	4a2a      	ldr	r2, [pc, #168]	@ (800b3d0 <xTaskResumeAll+0x124>)
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4a27      	ldr	r2, [pc, #156]	@ (800b3d4 <xTaskResumeAll+0x128>)
 800b338:	441a      	add	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3304      	adds	r3, #4
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f7fe fcae 	bl	8009ca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34a:	4b23      	ldr	r3, [pc, #140]	@ (800b3d8 <xTaskResumeAll+0x12c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	429a      	cmp	r2, r3
 800b352:	d302      	bcc.n	800b35a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b354:	4b21      	ldr	r3, [pc, #132]	@ (800b3dc <xTaskResumeAll+0x130>)
 800b356:	2201      	movs	r2, #1
 800b358:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b35a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3cc <xTaskResumeAll+0x120>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1cb      	bne.n	800b2fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b368:	f000 fb58 	bl	800ba1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b36c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3e0 <xTaskResumeAll+0x134>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d010      	beq.n	800b39a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b378:	f000 f846 	bl	800b408 <xTaskIncrementTick>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b382:	4b16      	ldr	r3, [pc, #88]	@ (800b3dc <xTaskResumeAll+0x130>)
 800b384:	2201      	movs	r2, #1
 800b386:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1f1      	bne.n	800b378 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b394:	4b12      	ldr	r3, [pc, #72]	@ (800b3e0 <xTaskResumeAll+0x134>)
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b39a:	4b10      	ldr	r3, [pc, #64]	@ (800b3dc <xTaskResumeAll+0x130>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d009      	beq.n	800b3b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e4 <xTaskResumeAll+0x138>)
 800b3a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3b6:	f001 f9f1 	bl	800c79c <vPortExitCritical>

	return xAlreadyYielded;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20003c64 	.word	0x20003c64
 800b3c8:	20003c3c 	.word	0x20003c3c
 800b3cc:	20003bfc 	.word	0x20003bfc
 800b3d0:	20003c44 	.word	0x20003c44
 800b3d4:	2000376c 	.word	0x2000376c
 800b3d8:	20003768 	.word	0x20003768
 800b3dc:	20003c50 	.word	0x20003c50
 800b3e0:	20003c4c 	.word	0x20003c4c
 800b3e4:	e000ed04 	.word	0xe000ed04

0800b3e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3ee:	4b05      	ldr	r3, [pc, #20]	@ (800b404 <xTaskGetTickCount+0x1c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3f4:	687b      	ldr	r3, [r7, #4]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	20003c40 	.word	0x20003c40

0800b408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b412:	4b4f      	ldr	r3, [pc, #316]	@ (800b550 <xTaskIncrementTick+0x148>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	f040 8090 	bne.w	800b53c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b41c:	4b4d      	ldr	r3, [pc, #308]	@ (800b554 <xTaskIncrementTick+0x14c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b424:	4a4b      	ldr	r2, [pc, #300]	@ (800b554 <xTaskIncrementTick+0x14c>)
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d121      	bne.n	800b474 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b430:	4b49      	ldr	r3, [pc, #292]	@ (800b558 <xTaskIncrementTick+0x150>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00b      	beq.n	800b452 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	603b      	str	r3, [r7, #0]
}
 800b44c:	bf00      	nop
 800b44e:	bf00      	nop
 800b450:	e7fd      	b.n	800b44e <xTaskIncrementTick+0x46>
 800b452:	4b41      	ldr	r3, [pc, #260]	@ (800b558 <xTaskIncrementTick+0x150>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	4b40      	ldr	r3, [pc, #256]	@ (800b55c <xTaskIncrementTick+0x154>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a3e      	ldr	r2, [pc, #248]	@ (800b558 <xTaskIncrementTick+0x150>)
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	4a3e      	ldr	r2, [pc, #248]	@ (800b55c <xTaskIncrementTick+0x154>)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	4b3e      	ldr	r3, [pc, #248]	@ (800b560 <xTaskIncrementTick+0x158>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3301      	adds	r3, #1
 800b46c:	4a3c      	ldr	r2, [pc, #240]	@ (800b560 <xTaskIncrementTick+0x158>)
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	f000 fad4 	bl	800ba1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b474:	4b3b      	ldr	r3, [pc, #236]	@ (800b564 <xTaskIncrementTick+0x15c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d349      	bcc.n	800b512 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b47e:	4b36      	ldr	r3, [pc, #216]	@ (800b558 <xTaskIncrementTick+0x150>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d104      	bne.n	800b492 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b488:	4b36      	ldr	r3, [pc, #216]	@ (800b564 <xTaskIncrementTick+0x15c>)
 800b48a:	f04f 32ff 	mov.w	r2, #4294967295
 800b48e:	601a      	str	r2, [r3, #0]
					break;
 800b490:	e03f      	b.n	800b512 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b492:	4b31      	ldr	r3, [pc, #196]	@ (800b558 <xTaskIncrementTick+0x150>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d203      	bcs.n	800b4b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4aa:	4a2e      	ldr	r2, [pc, #184]	@ (800b564 <xTaskIncrementTick+0x15c>)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4b0:	e02f      	b.n	800b512 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fc50 	bl	8009d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d004      	beq.n	800b4ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe fc47 	bl	8009d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d2:	4b25      	ldr	r3, [pc, #148]	@ (800b568 <xTaskIncrementTick+0x160>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d903      	bls.n	800b4e2 <xTaskIncrementTick+0xda>
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4de:	4a22      	ldr	r2, [pc, #136]	@ (800b568 <xTaskIncrementTick+0x160>)
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b56c <xTaskIncrementTick+0x164>)
 800b4f0:	441a      	add	r2, r3
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	3304      	adds	r3, #4
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	f7fe fbd2 	bl	8009ca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b502:	4b1b      	ldr	r3, [pc, #108]	@ (800b570 <xTaskIncrementTick+0x168>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	429a      	cmp	r2, r3
 800b50a:	d3b8      	bcc.n	800b47e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b50c:	2301      	movs	r3, #1
 800b50e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b510:	e7b5      	b.n	800b47e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b512:	4b17      	ldr	r3, [pc, #92]	@ (800b570 <xTaskIncrementTick+0x168>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b518:	4914      	ldr	r1, [pc, #80]	@ (800b56c <xTaskIncrementTick+0x164>)
 800b51a:	4613      	mov	r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	440b      	add	r3, r1
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d901      	bls.n	800b52e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b52a:	2301      	movs	r3, #1
 800b52c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b52e:	4b11      	ldr	r3, [pc, #68]	@ (800b574 <xTaskIncrementTick+0x16c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d007      	beq.n	800b546 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b536:	2301      	movs	r3, #1
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	e004      	b.n	800b546 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b53c:	4b0e      	ldr	r3, [pc, #56]	@ (800b578 <xTaskIncrementTick+0x170>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3301      	adds	r3, #1
 800b542:	4a0d      	ldr	r2, [pc, #52]	@ (800b578 <xTaskIncrementTick+0x170>)
 800b544:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b546:	697b      	ldr	r3, [r7, #20]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	20003c64 	.word	0x20003c64
 800b554:	20003c40 	.word	0x20003c40
 800b558:	20003bf4 	.word	0x20003bf4
 800b55c:	20003bf8 	.word	0x20003bf8
 800b560:	20003c54 	.word	0x20003c54
 800b564:	20003c5c 	.word	0x20003c5c
 800b568:	20003c44 	.word	0x20003c44
 800b56c:	2000376c 	.word	0x2000376c
 800b570:	20003768 	.word	0x20003768
 800b574:	20003c50 	.word	0x20003c50
 800b578:	20003c4c 	.word	0x20003c4c

0800b57c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b582:	4b28      	ldr	r3, [pc, #160]	@ (800b624 <vTaskSwitchContext+0xa8>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b58a:	4b27      	ldr	r3, [pc, #156]	@ (800b628 <vTaskSwitchContext+0xac>)
 800b58c:	2201      	movs	r2, #1
 800b58e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b590:	e042      	b.n	800b618 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b592:	4b25      	ldr	r3, [pc, #148]	@ (800b628 <vTaskSwitchContext+0xac>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b598:	4b24      	ldr	r3, [pc, #144]	@ (800b62c <vTaskSwitchContext+0xb0>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	e011      	b.n	800b5c4 <vTaskSwitchContext+0x48>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10b      	bne.n	800b5be <vTaskSwitchContext+0x42>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	607b      	str	r3, [r7, #4]
}
 800b5b8:	bf00      	nop
 800b5ba:	bf00      	nop
 800b5bc:	e7fd      	b.n	800b5ba <vTaskSwitchContext+0x3e>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	491a      	ldr	r1, [pc, #104]	@ (800b630 <vTaskSwitchContext+0xb4>)
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	440b      	add	r3, r1
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0e3      	beq.n	800b5a0 <vTaskSwitchContext+0x24>
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4a13      	ldr	r2, [pc, #76]	@ (800b630 <vTaskSwitchContext+0xb4>)
 800b5e4:	4413      	add	r3, r2
 800b5e6:	60bb      	str	r3, [r7, #8]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	605a      	str	r2, [r3, #4]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d104      	bne.n	800b608 <vTaskSwitchContext+0x8c>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	605a      	str	r2, [r3, #4]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	4a09      	ldr	r2, [pc, #36]	@ (800b634 <vTaskSwitchContext+0xb8>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	4a06      	ldr	r2, [pc, #24]	@ (800b62c <vTaskSwitchContext+0xb0>)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6013      	str	r3, [r2, #0]
}
 800b618:	bf00      	nop
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	20003c64 	.word	0x20003c64
 800b628:	20003c50 	.word	0x20003c50
 800b62c:	20003c44 	.word	0x20003c44
 800b630:	2000376c 	.word	0x2000376c
 800b634:	20003768 	.word	0x20003768

0800b638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10b      	bne.n	800b660 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	60fb      	str	r3, [r7, #12]
}
 800b65a:	bf00      	nop
 800b65c:	bf00      	nop
 800b65e:	e7fd      	b.n	800b65c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b660:	4b07      	ldr	r3, [pc, #28]	@ (800b680 <vTaskPlaceOnEventList+0x48>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3318      	adds	r3, #24
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7fe fb3e 	bl	8009cea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b66e:	2101      	movs	r1, #1
 800b670:	6838      	ldr	r0, [r7, #0]
 800b672:	f000 fb81 	bl	800bd78 <prvAddCurrentTaskToDelayedList>
}
 800b676:	bf00      	nop
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20003768 	.word	0x20003768

0800b684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10b      	bne.n	800b6ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	617b      	str	r3, [r7, #20]
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	e7fd      	b.n	800b6aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3318      	adds	r3, #24
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7fe faf3 	bl	8009ca2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	68b8      	ldr	r0, [r7, #8]
 800b6cc:	f000 fb54 	bl	800bd78 <prvAddCurrentTaskToDelayedList>
	}
 800b6d0:	bf00      	nop
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20003768 	.word	0x20003768

0800b6dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10b      	bne.n	800b70a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	60fb      	str	r3, [r7, #12]
}
 800b704:	bf00      	nop
 800b706:	bf00      	nop
 800b708:	e7fd      	b.n	800b706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	3318      	adds	r3, #24
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fb24 	bl	8009d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b714:	4b1d      	ldr	r3, [pc, #116]	@ (800b78c <xTaskRemoveFromEventList+0xb0>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d11d      	bne.n	800b758 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	3304      	adds	r3, #4
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe fb1b 	bl	8009d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b72a:	4b19      	ldr	r3, [pc, #100]	@ (800b790 <xTaskRemoveFromEventList+0xb4>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d903      	bls.n	800b73a <xTaskRemoveFromEventList+0x5e>
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b736:	4a16      	ldr	r2, [pc, #88]	@ (800b790 <xTaskRemoveFromEventList+0xb4>)
 800b738:	6013      	str	r3, [r2, #0]
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b73e:	4613      	mov	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4a13      	ldr	r2, [pc, #76]	@ (800b794 <xTaskRemoveFromEventList+0xb8>)
 800b748:	441a      	add	r2, r3
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4619      	mov	r1, r3
 800b750:	4610      	mov	r0, r2
 800b752:	f7fe faa6 	bl	8009ca2 <vListInsertEnd>
 800b756:	e005      	b.n	800b764 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	3318      	adds	r3, #24
 800b75c:	4619      	mov	r1, r3
 800b75e:	480e      	ldr	r0, [pc, #56]	@ (800b798 <xTaskRemoveFromEventList+0xbc>)
 800b760:	f7fe fa9f 	bl	8009ca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b768:	4b0c      	ldr	r3, [pc, #48]	@ (800b79c <xTaskRemoveFromEventList+0xc0>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76e:	429a      	cmp	r2, r3
 800b770:	d905      	bls.n	800b77e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b772:	2301      	movs	r3, #1
 800b774:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b776:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a0 <xTaskRemoveFromEventList+0xc4>)
 800b778:	2201      	movs	r2, #1
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e001      	b.n	800b782 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b77e:	2300      	movs	r3, #0
 800b780:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b782:	697b      	ldr	r3, [r7, #20]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20003c64 	.word	0x20003c64
 800b790:	20003c44 	.word	0x20003c44
 800b794:	2000376c 	.word	0x2000376c
 800b798:	20003bfc 	.word	0x20003bfc
 800b79c:	20003768 	.word	0x20003768
 800b7a0:	20003c50 	.word	0x20003c50

0800b7a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7ac:	4b06      	ldr	r3, [pc, #24]	@ (800b7c8 <vTaskInternalSetTimeOutState+0x24>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7b4:	4b05      	ldr	r3, [pc, #20]	@ (800b7cc <vTaskInternalSetTimeOutState+0x28>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	605a      	str	r2, [r3, #4]
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	20003c54 	.word	0x20003c54
 800b7cc:	20003c40 	.word	0x20003c40

0800b7d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10b      	bne.n	800b7f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	613b      	str	r3, [r7, #16]
}
 800b7f2:	bf00      	nop
 800b7f4:	bf00      	nop
 800b7f6:	e7fd      	b.n	800b7f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10b      	bne.n	800b816 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60fb      	str	r3, [r7, #12]
}
 800b810:	bf00      	nop
 800b812:	bf00      	nop
 800b814:	e7fd      	b.n	800b812 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b816:	f000 ff8f 	bl	800c738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b81a:	4b1d      	ldr	r3, [pc, #116]	@ (800b890 <xTaskCheckForTimeOut+0xc0>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	69ba      	ldr	r2, [r7, #24]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b832:	d102      	bne.n	800b83a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b834:	2300      	movs	r3, #0
 800b836:	61fb      	str	r3, [r7, #28]
 800b838:	e023      	b.n	800b882 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	4b15      	ldr	r3, [pc, #84]	@ (800b894 <xTaskCheckForTimeOut+0xc4>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d007      	beq.n	800b856 <xTaskCheckForTimeOut+0x86>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d302      	bcc.n	800b856 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b850:	2301      	movs	r3, #1
 800b852:	61fb      	str	r3, [r7, #28]
 800b854:	e015      	b.n	800b882 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d20b      	bcs.n	800b878 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	1ad2      	subs	r2, r2, r3
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff ff99 	bl	800b7a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b872:	2300      	movs	r3, #0
 800b874:	61fb      	str	r3, [r7, #28]
 800b876:	e004      	b.n	800b882 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b87e:	2301      	movs	r3, #1
 800b880:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b882:	f000 ff8b 	bl	800c79c <vPortExitCritical>

	return xReturn;
 800b886:	69fb      	ldr	r3, [r7, #28]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3720      	adds	r7, #32
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	20003c40 	.word	0x20003c40
 800b894:	20003c54 	.word	0x20003c54

0800b898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b898:	b480      	push	{r7}
 800b89a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b89c:	4b03      	ldr	r3, [pc, #12]	@ (800b8ac <vTaskMissedYield+0x14>)
 800b89e:	2201      	movs	r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
}
 800b8a2:	bf00      	nop
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	20003c50 	.word	0x20003c50

0800b8b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8b8:	f000 f852 	bl	800b960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8bc:	4b06      	ldr	r3, [pc, #24]	@ (800b8d8 <prvIdleTask+0x28>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d9f9      	bls.n	800b8b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8c4:	4b05      	ldr	r3, [pc, #20]	@ (800b8dc <prvIdleTask+0x2c>)
 800b8c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ca:	601a      	str	r2, [r3, #0]
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8d4:	e7f0      	b.n	800b8b8 <prvIdleTask+0x8>
 800b8d6:	bf00      	nop
 800b8d8:	2000376c 	.word	0x2000376c
 800b8dc:	e000ed04 	.word	0xe000ed04

0800b8e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	607b      	str	r3, [r7, #4]
 800b8ea:	e00c      	b.n	800b906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4a12      	ldr	r2, [pc, #72]	@ (800b940 <prvInitialiseTaskLists+0x60>)
 800b8f8:	4413      	add	r3, r2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe f9a4 	bl	8009c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3301      	adds	r3, #1
 800b904:	607b      	str	r3, [r7, #4]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b37      	cmp	r3, #55	@ 0x37
 800b90a:	d9ef      	bls.n	800b8ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b90c:	480d      	ldr	r0, [pc, #52]	@ (800b944 <prvInitialiseTaskLists+0x64>)
 800b90e:	f7fe f99b 	bl	8009c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b912:	480d      	ldr	r0, [pc, #52]	@ (800b948 <prvInitialiseTaskLists+0x68>)
 800b914:	f7fe f998 	bl	8009c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b918:	480c      	ldr	r0, [pc, #48]	@ (800b94c <prvInitialiseTaskLists+0x6c>)
 800b91a:	f7fe f995 	bl	8009c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b91e:	480c      	ldr	r0, [pc, #48]	@ (800b950 <prvInitialiseTaskLists+0x70>)
 800b920:	f7fe f992 	bl	8009c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b924:	480b      	ldr	r0, [pc, #44]	@ (800b954 <prvInitialiseTaskLists+0x74>)
 800b926:	f7fe f98f 	bl	8009c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b92a:	4b0b      	ldr	r3, [pc, #44]	@ (800b958 <prvInitialiseTaskLists+0x78>)
 800b92c:	4a05      	ldr	r2, [pc, #20]	@ (800b944 <prvInitialiseTaskLists+0x64>)
 800b92e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b930:	4b0a      	ldr	r3, [pc, #40]	@ (800b95c <prvInitialiseTaskLists+0x7c>)
 800b932:	4a05      	ldr	r2, [pc, #20]	@ (800b948 <prvInitialiseTaskLists+0x68>)
 800b934:	601a      	str	r2, [r3, #0]
}
 800b936:	bf00      	nop
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	2000376c 	.word	0x2000376c
 800b944:	20003bcc 	.word	0x20003bcc
 800b948:	20003be0 	.word	0x20003be0
 800b94c:	20003bfc 	.word	0x20003bfc
 800b950:	20003c10 	.word	0x20003c10
 800b954:	20003c28 	.word	0x20003c28
 800b958:	20003bf4 	.word	0x20003bf4
 800b95c:	20003bf8 	.word	0x20003bf8

0800b960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b966:	e019      	b.n	800b99c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b968:	f000 fee6 	bl	800c738 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b96c:	4b10      	ldr	r3, [pc, #64]	@ (800b9b0 <prvCheckTasksWaitingTermination+0x50>)
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3304      	adds	r3, #4
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe f9ef 	bl	8009d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b97e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b4 <prvCheckTasksWaitingTermination+0x54>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3b01      	subs	r3, #1
 800b984:	4a0b      	ldr	r2, [pc, #44]	@ (800b9b4 <prvCheckTasksWaitingTermination+0x54>)
 800b986:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b988:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b8 <prvCheckTasksWaitingTermination+0x58>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	4a0a      	ldr	r2, [pc, #40]	@ (800b9b8 <prvCheckTasksWaitingTermination+0x58>)
 800b990:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b992:	f000 ff03 	bl	800c79c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f810 	bl	800b9bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b99c:	4b06      	ldr	r3, [pc, #24]	@ (800b9b8 <prvCheckTasksWaitingTermination+0x58>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e1      	bne.n	800b968 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20003c10 	.word	0x20003c10
 800b9b4:	20003c3c 	.word	0x20003c3c
 800b9b8:	20003c24 	.word	0x20003c24

0800b9bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d108      	bne.n	800b9e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f001 f8a0 	bl	800cb18 <vPortFree>
				vPortFree( pxTCB );
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f001 f89d 	bl	800cb18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9de:	e019      	b.n	800ba14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d103      	bne.n	800b9f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 f894 	bl	800cb18 <vPortFree>
	}
 800b9f0:	e010      	b.n	800ba14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d00b      	beq.n	800ba14 <prvDeleteTCB+0x58>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60fb      	str	r3, [r7, #12]
}
 800ba0e:	bf00      	nop
 800ba10:	bf00      	nop
 800ba12:	e7fd      	b.n	800ba10 <prvDeleteTCB+0x54>
	}
 800ba14:	bf00      	nop
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba22:	4b0c      	ldr	r3, [pc, #48]	@ (800ba54 <prvResetNextTaskUnblockTime+0x38>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d104      	bne.n	800ba36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba58 <prvResetNextTaskUnblockTime+0x3c>)
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba34:	e008      	b.n	800ba48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba36:	4b07      	ldr	r3, [pc, #28]	@ (800ba54 <prvResetNextTaskUnblockTime+0x38>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	4a04      	ldr	r2, [pc, #16]	@ (800ba58 <prvResetNextTaskUnblockTime+0x3c>)
 800ba46:	6013      	str	r3, [r2, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	20003bf4 	.word	0x20003bf4
 800ba58:	20003c5c 	.word	0x20003c5c

0800ba5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba62:	4b0b      	ldr	r3, [pc, #44]	@ (800ba90 <xTaskGetSchedulerState+0x34>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	607b      	str	r3, [r7, #4]
 800ba6e:	e008      	b.n	800ba82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba70:	4b08      	ldr	r3, [pc, #32]	@ (800ba94 <xTaskGetSchedulerState+0x38>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d102      	bne.n	800ba7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba78:	2302      	movs	r3, #2
 800ba7a:	607b      	str	r3, [r7, #4]
 800ba7c:	e001      	b.n	800ba82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba82:	687b      	ldr	r3, [r7, #4]
	}
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr
 800ba90:	20003c48 	.word	0x20003c48
 800ba94:	20003c64 	.word	0x20003c64

0800ba98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800baa4:	2300      	movs	r3, #0
 800baa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d051      	beq.n	800bb52 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab2:	4b2a      	ldr	r3, [pc, #168]	@ (800bb5c <xTaskPriorityInherit+0xc4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab8:	429a      	cmp	r2, r3
 800baba:	d241      	bcs.n	800bb40 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	db06      	blt.n	800bad2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bac4:	4b25      	ldr	r3, [pc, #148]	@ (800bb5c <xTaskPriorityInherit+0xc4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	6959      	ldr	r1, [r3, #20]
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4a1f      	ldr	r2, [pc, #124]	@ (800bb60 <xTaskPriorityInherit+0xc8>)
 800bae4:	4413      	add	r3, r2
 800bae6:	4299      	cmp	r1, r3
 800bae8:	d122      	bne.n	800bb30 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	3304      	adds	r3, #4
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe f934 	bl	8009d5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800baf4:	4b19      	ldr	r3, [pc, #100]	@ (800bb5c <xTaskPriorityInherit+0xc4>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb02:	4b18      	ldr	r3, [pc, #96]	@ (800bb64 <xTaskPriorityInherit+0xcc>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d903      	bls.n	800bb12 <xTaskPriorityInherit+0x7a>
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb0e:	4a15      	ldr	r2, [pc, #84]	@ (800bb64 <xTaskPriorityInherit+0xcc>)
 800bb10:	6013      	str	r3, [r2, #0]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4a10      	ldr	r2, [pc, #64]	@ (800bb60 <xTaskPriorityInherit+0xc8>)
 800bb20:	441a      	add	r2, r3
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	3304      	adds	r3, #4
 800bb26:	4619      	mov	r1, r3
 800bb28:	4610      	mov	r0, r2
 800bb2a:	f7fe f8ba 	bl	8009ca2 <vListInsertEnd>
 800bb2e:	e004      	b.n	800bb3a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb30:	4b0a      	ldr	r3, [pc, #40]	@ (800bb5c <xTaskPriorityInherit+0xc4>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	e008      	b.n	800bb52 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb44:	4b05      	ldr	r3, [pc, #20]	@ (800bb5c <xTaskPriorityInherit+0xc4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d201      	bcs.n	800bb52 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb52:	68fb      	ldr	r3, [r7, #12]
	}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20003768 	.word	0x20003768
 800bb60:	2000376c 	.word	0x2000376c
 800bb64:	20003c44 	.word	0x20003c44

0800bb68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb74:	2300      	movs	r3, #0
 800bb76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d058      	beq.n	800bc30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb7e:	4b2f      	ldr	r3, [pc, #188]	@ (800bc3c <xTaskPriorityDisinherit+0xd4>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d00b      	beq.n	800bba0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	60fb      	str	r3, [r7, #12]
}
 800bb9a:	bf00      	nop
 800bb9c:	bf00      	nop
 800bb9e:	e7fd      	b.n	800bb9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10b      	bne.n	800bbc0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	60bb      	str	r3, [r7, #8]
}
 800bbba:	bf00      	nop
 800bbbc:	bf00      	nop
 800bbbe:	e7fd      	b.n	800bbbc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbc4:	1e5a      	subs	r2, r3, #1
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d02c      	beq.n	800bc30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d128      	bne.n	800bc30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe f8ba 	bl	8009d5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc00:	4b0f      	ldr	r3, [pc, #60]	@ (800bc40 <xTaskPriorityDisinherit+0xd8>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d903      	bls.n	800bc10 <xTaskPriorityDisinherit+0xa8>
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0c:	4a0c      	ldr	r2, [pc, #48]	@ (800bc40 <xTaskPriorityDisinherit+0xd8>)
 800bc0e:	6013      	str	r3, [r2, #0]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4a09      	ldr	r2, [pc, #36]	@ (800bc44 <xTaskPriorityDisinherit+0xdc>)
 800bc1e:	441a      	add	r2, r3
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	3304      	adds	r3, #4
 800bc24:	4619      	mov	r1, r3
 800bc26:	4610      	mov	r0, r2
 800bc28:	f7fe f83b 	bl	8009ca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc30:	697b      	ldr	r3, [r7, #20]
	}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20003768 	.word	0x20003768
 800bc40:	20003c44 	.word	0x20003c44
 800bc44:	2000376c 	.word	0x2000376c

0800bc48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc56:	2301      	movs	r3, #1
 800bc58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d06c      	beq.n	800bd3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10b      	bne.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	60fb      	str	r3, [r7, #12]
}
 800bc7a:	bf00      	nop
 800bc7c:	bf00      	nop
 800bc7e:	e7fd      	b.n	800bc7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d902      	bls.n	800bc90 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	61fb      	str	r3, [r7, #28]
 800bc8e:	e002      	b.n	800bc96 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9a:	69fa      	ldr	r2, [r7, #28]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d04c      	beq.n	800bd3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d147      	bne.n	800bd3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcaa:	4b26      	ldr	r3, [pc, #152]	@ (800bd44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69ba      	ldr	r2, [r7, #24]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d10b      	bne.n	800bccc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	60bb      	str	r3, [r7, #8]
}
 800bcc6:	bf00      	nop
 800bcc8:	bf00      	nop
 800bcca:	e7fd      	b.n	800bcc8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	69fa      	ldr	r2, [r7, #28]
 800bcd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	db04      	blt.n	800bcea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	6959      	ldr	r1, [r3, #20]
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4a13      	ldr	r2, [pc, #76]	@ (800bd48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bcfa:	4413      	add	r3, r2
 800bcfc:	4299      	cmp	r1, r3
 800bcfe:	d11c      	bne.n	800bd3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	3304      	adds	r3, #4
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fe f829 	bl	8009d5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bd4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d903      	bls.n	800bd1e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1a:	4a0c      	ldr	r2, [pc, #48]	@ (800bd4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd1c:	6013      	str	r3, [r2, #0]
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd22:	4613      	mov	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4a07      	ldr	r2, [pc, #28]	@ (800bd48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd2c:	441a      	add	r2, r3
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	3304      	adds	r3, #4
 800bd32:	4619      	mov	r1, r3
 800bd34:	4610      	mov	r0, r2
 800bd36:	f7fd ffb4 	bl	8009ca2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd3a:	bf00      	nop
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20003768 	.word	0x20003768
 800bd48:	2000376c 	.word	0x2000376c
 800bd4c:	20003c44 	.word	0x20003c44

0800bd50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd50:	b480      	push	{r7}
 800bd52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd54:	4b07      	ldr	r3, [pc, #28]	@ (800bd74 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd5c:	4b05      	ldr	r3, [pc, #20]	@ (800bd74 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd62:	3201      	adds	r2, #1
 800bd64:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bd66:	4b03      	ldr	r3, [pc, #12]	@ (800bd74 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd68:	681b      	ldr	r3, [r3, #0]
	}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	20003768 	.word	0x20003768

0800bd78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd82:	4b21      	ldr	r3, [pc, #132]	@ (800be08 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd88:	4b20      	ldr	r3, [pc, #128]	@ (800be0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd ffe4 	bl	8009d5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9a:	d10a      	bne.n	800bdb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d007      	beq.n	800bdb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bda2:	4b1a      	ldr	r3, [pc, #104]	@ (800be0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	3304      	adds	r3, #4
 800bda8:	4619      	mov	r1, r3
 800bdaa:	4819      	ldr	r0, [pc, #100]	@ (800be10 <prvAddCurrentTaskToDelayedList+0x98>)
 800bdac:	f7fd ff79 	bl	8009ca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdb0:	e026      	b.n	800be00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdba:	4b14      	ldr	r3, [pc, #80]	@ (800be0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d209      	bcs.n	800bdde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdca:	4b12      	ldr	r3, [pc, #72]	@ (800be14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	4b0f      	ldr	r3, [pc, #60]	@ (800be0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	f7fd ff87 	bl	8009cea <vListInsert>
}
 800bddc:	e010      	b.n	800be00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdde:	4b0e      	ldr	r3, [pc, #56]	@ (800be18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	4b0a      	ldr	r3, [pc, #40]	@ (800be0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fd ff7d 	bl	8009cea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdf0:	4b0a      	ldr	r3, [pc, #40]	@ (800be1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d202      	bcs.n	800be00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdfa:	4a08      	ldr	r2, [pc, #32]	@ (800be1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	6013      	str	r3, [r2, #0]
}
 800be00:	bf00      	nop
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	20003c40 	.word	0x20003c40
 800be0c:	20003768 	.word	0x20003768
 800be10:	20003c28 	.word	0x20003c28
 800be14:	20003bf8 	.word	0x20003bf8
 800be18:	20003bf4 	.word	0x20003bf4
 800be1c:	20003c5c 	.word	0x20003c5c

0800be20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08a      	sub	sp, #40	@ 0x28
 800be24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be26:	2300      	movs	r3, #0
 800be28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be2a:	f000 fb13 	bl	800c454 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be2e:	4b1d      	ldr	r3, [pc, #116]	@ (800bea4 <xTimerCreateTimerTask+0x84>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d021      	beq.n	800be7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be3e:	1d3a      	adds	r2, r7, #4
 800be40:	f107 0108 	add.w	r1, r7, #8
 800be44:	f107 030c 	add.w	r3, r7, #12
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fd fee3 	bl	8009c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be4e:	6879      	ldr	r1, [r7, #4]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	9202      	str	r2, [sp, #8]
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	2302      	movs	r3, #2
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	2300      	movs	r3, #0
 800be5e:	460a      	mov	r2, r1
 800be60:	4911      	ldr	r1, [pc, #68]	@ (800bea8 <xTimerCreateTimerTask+0x88>)
 800be62:	4812      	ldr	r0, [pc, #72]	@ (800beac <xTimerCreateTimerTask+0x8c>)
 800be64:	f7fe ffd0 	bl	800ae08 <xTaskCreateStatic>
 800be68:	4603      	mov	r3, r0
 800be6a:	4a11      	ldr	r2, [pc, #68]	@ (800beb0 <xTimerCreateTimerTask+0x90>)
 800be6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be6e:	4b10      	ldr	r3, [pc, #64]	@ (800beb0 <xTimerCreateTimerTask+0x90>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be76:	2301      	movs	r3, #1
 800be78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10b      	bne.n	800be98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	613b      	str	r3, [r7, #16]
}
 800be92:	bf00      	nop
 800be94:	bf00      	nop
 800be96:	e7fd      	b.n	800be94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be98:	697b      	ldr	r3, [r7, #20]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	20003c98 	.word	0x20003c98
 800bea8:	0800f888 	.word	0x0800f888
 800beac:	0800bfed 	.word	0x0800bfed
 800beb0:	20003c9c 	.word	0x20003c9c

0800beb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	@ 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10b      	bne.n	800bee4 <xTimerGenericCommand+0x30>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	623b      	str	r3, [r7, #32]
}
 800bede:	bf00      	nop
 800bee0:	bf00      	nop
 800bee2:	e7fd      	b.n	800bee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bee4:	4b19      	ldr	r3, [pc, #100]	@ (800bf4c <xTimerGenericCommand+0x98>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d02a      	beq.n	800bf42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b05      	cmp	r3, #5
 800befc:	dc18      	bgt.n	800bf30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800befe:	f7ff fdad 	bl	800ba5c <xTaskGetSchedulerState>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d109      	bne.n	800bf1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf08:	4b10      	ldr	r3, [pc, #64]	@ (800bf4c <xTimerGenericCommand+0x98>)
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	f107 0110 	add.w	r1, r7, #16
 800bf10:	2300      	movs	r3, #0
 800bf12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf14:	f7fe f900 	bl	800a118 <xQueueGenericSend>
 800bf18:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf1a:	e012      	b.n	800bf42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf4c <xTimerGenericCommand+0x98>)
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	f107 0110 	add.w	r1, r7, #16
 800bf24:	2300      	movs	r3, #0
 800bf26:	2200      	movs	r2, #0
 800bf28:	f7fe f8f6 	bl	800a118 <xQueueGenericSend>
 800bf2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf2e:	e008      	b.n	800bf42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf30:	4b06      	ldr	r3, [pc, #24]	@ (800bf4c <xTimerGenericCommand+0x98>)
 800bf32:	6818      	ldr	r0, [r3, #0]
 800bf34:	f107 0110 	add.w	r1, r7, #16
 800bf38:	2300      	movs	r3, #0
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	f7fe f9ee 	bl	800a31c <xQueueGenericSendFromISR>
 800bf40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3728      	adds	r7, #40	@ 0x28
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20003c98 	.word	0x20003c98

0800bf50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf5a:	4b23      	ldr	r3, [pc, #140]	@ (800bfe8 <prvProcessExpiredTimer+0x98>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	3304      	adds	r3, #4
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fd fef7 	bl	8009d5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d023      	beq.n	800bfc4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	699a      	ldr	r2, [r3, #24]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	18d1      	adds	r1, r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	6978      	ldr	r0, [r7, #20]
 800bf8a:	f000 f8d5 	bl	800c138 <prvInsertTimerInActiveList>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d020      	beq.n	800bfd6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf94:	2300      	movs	r3, #0
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	2300      	movs	r3, #0
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	6978      	ldr	r0, [r7, #20]
 800bfa0:	f7ff ff88 	bl	800beb4 <xTimerGenericCommand>
 800bfa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d114      	bne.n	800bfd6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	60fb      	str	r3, [r7, #12]
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	e7fd      	b.n	800bfc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfca:	f023 0301 	bic.w	r3, r3, #1
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	6978      	ldr	r0, [r7, #20]
 800bfdc:	4798      	blx	r3
}
 800bfde:	bf00      	nop
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20003c90 	.word	0x20003c90

0800bfec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bff4:	f107 0308 	add.w	r3, r7, #8
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 f859 	bl	800c0b0 <prvGetNextExpireTime>
 800bffe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	4619      	mov	r1, r3
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f000 f805 	bl	800c014 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c00a:	f000 f8d7 	bl	800c1bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c00e:	bf00      	nop
 800c010:	e7f0      	b.n	800bff4 <prvTimerTask+0x8>
	...

0800c014 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c01e:	f7ff f937 	bl	800b290 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c022:	f107 0308 	add.w	r3, r7, #8
 800c026:	4618      	mov	r0, r3
 800c028:	f000 f866 	bl	800c0f8 <prvSampleTimeNow>
 800c02c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d130      	bne.n	800c096 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10a      	bne.n	800c050 <prvProcessTimerOrBlockTask+0x3c>
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d806      	bhi.n	800c050 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c042:	f7ff f933 	bl	800b2ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c046:	68f9      	ldr	r1, [r7, #12]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff ff81 	bl	800bf50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c04e:	e024      	b.n	800c09a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d008      	beq.n	800c068 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c056:	4b13      	ldr	r3, [pc, #76]	@ (800c0a4 <prvProcessTimerOrBlockTask+0x90>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <prvProcessTimerOrBlockTask+0x50>
 800c060:	2301      	movs	r3, #1
 800c062:	e000      	b.n	800c066 <prvProcessTimerOrBlockTask+0x52>
 800c064:	2300      	movs	r3, #0
 800c066:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c068:	4b0f      	ldr	r3, [pc, #60]	@ (800c0a8 <prvProcessTimerOrBlockTask+0x94>)
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	4619      	mov	r1, r3
 800c076:	f7fe fe93 	bl	800ada0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c07a:	f7ff f917 	bl	800b2ac <xTaskResumeAll>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10a      	bne.n	800c09a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c084:	4b09      	ldr	r3, [pc, #36]	@ (800c0ac <prvProcessTimerOrBlockTask+0x98>)
 800c086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	f3bf 8f6f 	isb	sy
}
 800c094:	e001      	b.n	800c09a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c096:	f7ff f909 	bl	800b2ac <xTaskResumeAll>
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20003c94 	.word	0x20003c94
 800c0a8:	20003c98 	.word	0x20003c98
 800c0ac:	e000ed04 	.word	0xe000ed04

0800c0b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c0f4 <prvGetNextExpireTime+0x44>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <prvGetNextExpireTime+0x16>
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	e000      	b.n	800c0c8 <prvGetNextExpireTime+0x18>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d105      	bne.n	800c0e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0d4:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <prvGetNextExpireTime+0x44>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	60fb      	str	r3, [r7, #12]
 800c0de:	e001      	b.n	800c0e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	20003c90 	.word	0x20003c90

0800c0f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c100:	f7ff f972 	bl	800b3e8 <xTaskGetTickCount>
 800c104:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c106:	4b0b      	ldr	r3, [pc, #44]	@ (800c134 <prvSampleTimeNow+0x3c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d205      	bcs.n	800c11c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c110:	f000 f93a 	bl	800c388 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	e002      	b.n	800c122 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c122:	4a04      	ldr	r2, [pc, #16]	@ (800c134 <prvSampleTimeNow+0x3c>)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c128:	68fb      	ldr	r3, [r7, #12]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20003ca0 	.word	0x20003ca0

0800c138 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d812      	bhi.n	800c184 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	1ad2      	subs	r2, r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d302      	bcc.n	800c172 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c16c:	2301      	movs	r3, #1
 800c16e:	617b      	str	r3, [r7, #20]
 800c170:	e01b      	b.n	800c1aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c172:	4b10      	ldr	r3, [pc, #64]	@ (800c1b4 <prvInsertTimerInActiveList+0x7c>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3304      	adds	r3, #4
 800c17a:	4619      	mov	r1, r3
 800c17c:	4610      	mov	r0, r2
 800c17e:	f7fd fdb4 	bl	8009cea <vListInsert>
 800c182:	e012      	b.n	800c1aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d206      	bcs.n	800c19a <prvInsertTimerInActiveList+0x62>
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d302      	bcc.n	800c19a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c194:	2301      	movs	r3, #1
 800c196:	617b      	str	r3, [r7, #20]
 800c198:	e007      	b.n	800c1aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c19a:	4b07      	ldr	r3, [pc, #28]	@ (800c1b8 <prvInsertTimerInActiveList+0x80>)
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	f7fd fda0 	bl	8009cea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1aa:	697b      	ldr	r3, [r7, #20]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	20003c94 	.word	0x20003c94
 800c1b8:	20003c90 	.word	0x20003c90

0800c1bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08e      	sub	sp, #56	@ 0x38
 800c1c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1c2:	e0ce      	b.n	800c362 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	da19      	bge.n	800c1fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1ca:	1d3b      	adds	r3, r7, #4
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10b      	bne.n	800c1ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	61fb      	str	r3, [r7, #28]
}
 800c1e8:	bf00      	nop
 800c1ea:	bf00      	nop
 800c1ec:	e7fd      	b.n	800c1ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1f4:	6850      	ldr	r0, [r2, #4]
 800c1f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1f8:	6892      	ldr	r2, [r2, #8]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	f2c0 80ae 	blt.w	800c362 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c214:	3304      	adds	r3, #4
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd fda0 	bl	8009d5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c21c:	463b      	mov	r3, r7
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff ff6a 	bl	800c0f8 <prvSampleTimeNow>
 800c224:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b09      	cmp	r3, #9
 800c22a:	f200 8097 	bhi.w	800c35c <prvProcessReceivedCommands+0x1a0>
 800c22e:	a201      	add	r2, pc, #4	@ (adr r2, 800c234 <prvProcessReceivedCommands+0x78>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c25d 	.word	0x0800c25d
 800c238:	0800c25d 	.word	0x0800c25d
 800c23c:	0800c25d 	.word	0x0800c25d
 800c240:	0800c2d3 	.word	0x0800c2d3
 800c244:	0800c2e7 	.word	0x0800c2e7
 800c248:	0800c333 	.word	0x0800c333
 800c24c:	0800c25d 	.word	0x0800c25d
 800c250:	0800c25d 	.word	0x0800c25d
 800c254:	0800c2d3 	.word	0x0800c2d3
 800c258:	0800c2e7 	.word	0x0800c2e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c262:	f043 0301 	orr.w	r3, r3, #1
 800c266:	b2da      	uxtb	r2, r3
 800c268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c26a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	18d1      	adds	r1, r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c27c:	f7ff ff5c 	bl	800c138 <prvInsertTimerInActiveList>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d06c      	beq.n	800c360 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c28c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d061      	beq.n	800c360 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	441a      	add	r2, r3
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2ae:	f7ff fe01 	bl	800beb4 <xTimerGenericCommand>
 800c2b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d152      	bne.n	800c360 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	61bb      	str	r3, [r7, #24]
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	e7fd      	b.n	800c2ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2d8:	f023 0301 	bic.w	r3, r3, #1
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c2e4:	e03d      	b.n	800c362 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ec:	f043 0301 	orr.w	r3, r3, #1
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d10b      	bne.n	800c31e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	617b      	str	r3, [r7, #20]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c320:	699a      	ldr	r2, [r3, #24]
 800c322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c324:	18d1      	adds	r1, r2, r3
 800c326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c32a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c32c:	f7ff ff04 	bl	800c138 <prvInsertTimerInActiveList>
					break;
 800c330:	e017      	b.n	800c362 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c338:	f003 0302 	and.w	r3, r3, #2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c342:	f000 fbe9 	bl	800cb18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c346:	e00c      	b.n	800c362 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c34e:	f023 0301 	bic.w	r3, r3, #1
 800c352:	b2da      	uxtb	r2, r3
 800c354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c35a:	e002      	b.n	800c362 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c35c:	bf00      	nop
 800c35e:	e000      	b.n	800c362 <prvProcessReceivedCommands+0x1a6>
					break;
 800c360:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c362:	4b08      	ldr	r3, [pc, #32]	@ (800c384 <prvProcessReceivedCommands+0x1c8>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	1d39      	adds	r1, r7, #4
 800c368:	2200      	movs	r2, #0
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe f904 	bl	800a578 <xQueueReceive>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	f47f af26 	bne.w	800c1c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	3730      	adds	r7, #48	@ 0x30
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20003c98 	.word	0x20003c98

0800c388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c38e:	e049      	b.n	800c424 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c390:	4b2e      	ldr	r3, [pc, #184]	@ (800c44c <prvSwitchTimerLists+0xc4>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c39a:	4b2c      	ldr	r3, [pc, #176]	@ (800c44c <prvSwitchTimerLists+0xc4>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fd fcd7 	bl	8009d5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3bc:	f003 0304 	and.w	r3, r3, #4
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d02f      	beq.n	800c424 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d90e      	bls.n	800c3f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c44c <prvSwitchTimerLists+0xc4>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7fd fc7c 	bl	8009cea <vListInsert>
 800c3f2:	e017      	b.n	800c424 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f7ff fd58 	bl	800beb4 <xTimerGenericCommand>
 800c404:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10b      	bne.n	800c424 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	603b      	str	r3, [r7, #0]
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	e7fd      	b.n	800c420 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c424:	4b09      	ldr	r3, [pc, #36]	@ (800c44c <prvSwitchTimerLists+0xc4>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1b0      	bne.n	800c390 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c42e:	4b07      	ldr	r3, [pc, #28]	@ (800c44c <prvSwitchTimerLists+0xc4>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c434:	4b06      	ldr	r3, [pc, #24]	@ (800c450 <prvSwitchTimerLists+0xc8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a04      	ldr	r2, [pc, #16]	@ (800c44c <prvSwitchTimerLists+0xc4>)
 800c43a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c43c:	4a04      	ldr	r2, [pc, #16]	@ (800c450 <prvSwitchTimerLists+0xc8>)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	6013      	str	r3, [r2, #0]
}
 800c442:	bf00      	nop
 800c444:	3718      	adds	r7, #24
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	20003c90 	.word	0x20003c90
 800c450:	20003c94 	.word	0x20003c94

0800c454 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c45a:	f000 f96d 	bl	800c738 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c45e:	4b15      	ldr	r3, [pc, #84]	@ (800c4b4 <prvCheckForValidListAndQueue+0x60>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d120      	bne.n	800c4a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c466:	4814      	ldr	r0, [pc, #80]	@ (800c4b8 <prvCheckForValidListAndQueue+0x64>)
 800c468:	f7fd fbee 	bl	8009c48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c46c:	4813      	ldr	r0, [pc, #76]	@ (800c4bc <prvCheckForValidListAndQueue+0x68>)
 800c46e:	f7fd fbeb 	bl	8009c48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c472:	4b13      	ldr	r3, [pc, #76]	@ (800c4c0 <prvCheckForValidListAndQueue+0x6c>)
 800c474:	4a10      	ldr	r2, [pc, #64]	@ (800c4b8 <prvCheckForValidListAndQueue+0x64>)
 800c476:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c478:	4b12      	ldr	r3, [pc, #72]	@ (800c4c4 <prvCheckForValidListAndQueue+0x70>)
 800c47a:	4a10      	ldr	r2, [pc, #64]	@ (800c4bc <prvCheckForValidListAndQueue+0x68>)
 800c47c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c47e:	2300      	movs	r3, #0
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	4b11      	ldr	r3, [pc, #68]	@ (800c4c8 <prvCheckForValidListAndQueue+0x74>)
 800c484:	4a11      	ldr	r2, [pc, #68]	@ (800c4cc <prvCheckForValidListAndQueue+0x78>)
 800c486:	2110      	movs	r1, #16
 800c488:	200a      	movs	r0, #10
 800c48a:	f7fd fcfb 	bl	8009e84 <xQueueGenericCreateStatic>
 800c48e:	4603      	mov	r3, r0
 800c490:	4a08      	ldr	r2, [pc, #32]	@ (800c4b4 <prvCheckForValidListAndQueue+0x60>)
 800c492:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c494:	4b07      	ldr	r3, [pc, #28]	@ (800c4b4 <prvCheckForValidListAndQueue+0x60>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d005      	beq.n	800c4a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c49c:	4b05      	ldr	r3, [pc, #20]	@ (800c4b4 <prvCheckForValidListAndQueue+0x60>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	490b      	ldr	r1, [pc, #44]	@ (800c4d0 <prvCheckForValidListAndQueue+0x7c>)
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe fc28 	bl	800acf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4a8:	f000 f978 	bl	800c79c <vPortExitCritical>
}
 800c4ac:	bf00      	nop
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20003c98 	.word	0x20003c98
 800c4b8:	20003c68 	.word	0x20003c68
 800c4bc:	20003c7c 	.word	0x20003c7c
 800c4c0:	20003c90 	.word	0x20003c90
 800c4c4:	20003c94 	.word	0x20003c94
 800c4c8:	20003d44 	.word	0x20003d44
 800c4cc:	20003ca4 	.word	0x20003ca4
 800c4d0:	0800f890 	.word	0x0800f890

0800c4d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3b04      	subs	r3, #4
 800c4e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3b04      	subs	r3, #4
 800c4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f023 0201 	bic.w	r2, r3, #1
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	3b04      	subs	r3, #4
 800c502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c504:	4a0c      	ldr	r2, [pc, #48]	@ (800c538 <pxPortInitialiseStack+0x64>)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	3b14      	subs	r3, #20
 800c50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3b04      	subs	r3, #4
 800c51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f06f 0202 	mvn.w	r2, #2
 800c522:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3b20      	subs	r3, #32
 800c528:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c52a:	68fb      	ldr	r3, [r7, #12]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	0800c53d 	.word	0x0800c53d

0800c53c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c546:	4b13      	ldr	r3, [pc, #76]	@ (800c594 <prvTaskExitError+0x58>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d00b      	beq.n	800c568 <prvTaskExitError+0x2c>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	60fb      	str	r3, [r7, #12]
}
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	e7fd      	b.n	800c564 <prvTaskExitError+0x28>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	60bb      	str	r3, [r7, #8]
}
 800c57a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c57c:	bf00      	nop
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d0fc      	beq.n	800c57e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	2000005c 	.word	0x2000005c
	...

0800c5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5a0:	4b07      	ldr	r3, [pc, #28]	@ (800c5c0 <pxCurrentTCBConst2>)
 800c5a2:	6819      	ldr	r1, [r3, #0]
 800c5a4:	6808      	ldr	r0, [r1, #0]
 800c5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5aa:	f380 8809 	msr	PSP, r0
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f04f 0000 	mov.w	r0, #0
 800c5b6:	f380 8811 	msr	BASEPRI, r0
 800c5ba:	4770      	bx	lr
 800c5bc:	f3af 8000 	nop.w

0800c5c0 <pxCurrentTCBConst2>:
 800c5c0:	20003768 	.word	0x20003768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop

0800c5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5c8:	4808      	ldr	r0, [pc, #32]	@ (800c5ec <prvPortStartFirstTask+0x24>)
 800c5ca:	6800      	ldr	r0, [r0, #0]
 800c5cc:	6800      	ldr	r0, [r0, #0]
 800c5ce:	f380 8808 	msr	MSP, r0
 800c5d2:	f04f 0000 	mov.w	r0, #0
 800c5d6:	f380 8814 	msr	CONTROL, r0
 800c5da:	b662      	cpsie	i
 800c5dc:	b661      	cpsie	f
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	df00      	svc	0
 800c5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5ea:	bf00      	nop
 800c5ec:	e000ed08 	.word	0xe000ed08

0800c5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5f6:	4b47      	ldr	r3, [pc, #284]	@ (800c714 <xPortStartScheduler+0x124>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a47      	ldr	r2, [pc, #284]	@ (800c718 <xPortStartScheduler+0x128>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d10b      	bne.n	800c618 <xPortStartScheduler+0x28>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	613b      	str	r3, [r7, #16]
}
 800c612:	bf00      	nop
 800c614:	bf00      	nop
 800c616:	e7fd      	b.n	800c614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c618:	4b3e      	ldr	r3, [pc, #248]	@ (800c714 <xPortStartScheduler+0x124>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a3f      	ldr	r2, [pc, #252]	@ (800c71c <xPortStartScheduler+0x12c>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d10b      	bne.n	800c63a <xPortStartScheduler+0x4a>
	__asm volatile
 800c622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	60fb      	str	r3, [r7, #12]
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop
 800c638:	e7fd      	b.n	800c636 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c63a:	4b39      	ldr	r3, [pc, #228]	@ (800c720 <xPortStartScheduler+0x130>)
 800c63c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	22ff      	movs	r2, #255	@ 0xff
 800c64a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	b2db      	uxtb	r3, r3
 800c652:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	4b31      	ldr	r3, [pc, #196]	@ (800c724 <xPortStartScheduler+0x134>)
 800c660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c662:	4b31      	ldr	r3, [pc, #196]	@ (800c728 <xPortStartScheduler+0x138>)
 800c664:	2207      	movs	r2, #7
 800c666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c668:	e009      	b.n	800c67e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c66a:	4b2f      	ldr	r3, [pc, #188]	@ (800c728 <xPortStartScheduler+0x138>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	3b01      	subs	r3, #1
 800c670:	4a2d      	ldr	r2, [pc, #180]	@ (800c728 <xPortStartScheduler+0x138>)
 800c672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	b2db      	uxtb	r3, r3
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c67e:	78fb      	ldrb	r3, [r7, #3]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c686:	2b80      	cmp	r3, #128	@ 0x80
 800c688:	d0ef      	beq.n	800c66a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c68a:	4b27      	ldr	r3, [pc, #156]	@ (800c728 <xPortStartScheduler+0x138>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f1c3 0307 	rsb	r3, r3, #7
 800c692:	2b04      	cmp	r3, #4
 800c694:	d00b      	beq.n	800c6ae <xPortStartScheduler+0xbe>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	60bb      	str	r3, [r7, #8]
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	021b      	lsls	r3, r3, #8
 800c6b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6b8:	4b1b      	ldr	r3, [pc, #108]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c6c0:	4a19      	ldr	r2, [pc, #100]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6cc:	4b17      	ldr	r3, [pc, #92]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a16      	ldr	r2, [pc, #88]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c6d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6d8:	4b14      	ldr	r3, [pc, #80]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a13      	ldr	r2, [pc, #76]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c6e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6e4:	f000 f8da 	bl	800c89c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6e8:	4b11      	ldr	r3, [pc, #68]	@ (800c730 <xPortStartScheduler+0x140>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6ee:	f000 f8f9 	bl	800c8e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6f2:	4b10      	ldr	r3, [pc, #64]	@ (800c734 <xPortStartScheduler+0x144>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a0f      	ldr	r2, [pc, #60]	@ (800c734 <xPortStartScheduler+0x144>)
 800c6f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c6fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6fe:	f7ff ff63 	bl	800c5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c702:	f7fe ff3b 	bl	800b57c <vTaskSwitchContext>
	prvTaskExitError();
 800c706:	f7ff ff19 	bl	800c53c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3718      	adds	r7, #24
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	e000ed00 	.word	0xe000ed00
 800c718:	410fc271 	.word	0x410fc271
 800c71c:	410fc270 	.word	0x410fc270
 800c720:	e000e400 	.word	0xe000e400
 800c724:	20003d94 	.word	0x20003d94
 800c728:	20003d98 	.word	0x20003d98
 800c72c:	e000ed20 	.word	0xe000ed20
 800c730:	2000005c 	.word	0x2000005c
 800c734:	e000ef34 	.word	0xe000ef34

0800c738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c752:	4b10      	ldr	r3, [pc, #64]	@ (800c794 <vPortEnterCritical+0x5c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3301      	adds	r3, #1
 800c758:	4a0e      	ldr	r2, [pc, #56]	@ (800c794 <vPortEnterCritical+0x5c>)
 800c75a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c75c:	4b0d      	ldr	r3, [pc, #52]	@ (800c794 <vPortEnterCritical+0x5c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d110      	bne.n	800c786 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c764:	4b0c      	ldr	r3, [pc, #48]	@ (800c798 <vPortEnterCritical+0x60>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00b      	beq.n	800c786 <vPortEnterCritical+0x4e>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	603b      	str	r3, [r7, #0]
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	e7fd      	b.n	800c782 <vPortEnterCritical+0x4a>
	}
}
 800c786:	bf00      	nop
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	2000005c 	.word	0x2000005c
 800c798:	e000ed04 	.word	0xe000ed04

0800c79c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7a2:	4b12      	ldr	r3, [pc, #72]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10b      	bne.n	800c7c2 <vPortExitCritical+0x26>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	607b      	str	r3, [r7, #4]
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	e7fd      	b.n	800c7be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	4a08      	ldr	r2, [pc, #32]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7cc:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d105      	bne.n	800c7e0 <vPortExitCritical+0x44>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	f383 8811 	msr	BASEPRI, r3
}
 800c7de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7e0:	bf00      	nop
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	2000005c 	.word	0x2000005c

0800c7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7f0:	f3ef 8009 	mrs	r0, PSP
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	4b15      	ldr	r3, [pc, #84]	@ (800c850 <pxCurrentTCBConst>)
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	f01e 0f10 	tst.w	lr, #16
 800c800:	bf08      	it	eq
 800c802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	6010      	str	r0, [r2, #0]
 800c80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c814:	f380 8811 	msr	BASEPRI, r0
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f7fe feac 	bl	800b57c <vTaskSwitchContext>
 800c824:	f04f 0000 	mov.w	r0, #0
 800c828:	f380 8811 	msr	BASEPRI, r0
 800c82c:	bc09      	pop	{r0, r3}
 800c82e:	6819      	ldr	r1, [r3, #0]
 800c830:	6808      	ldr	r0, [r1, #0]
 800c832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c836:	f01e 0f10 	tst.w	lr, #16
 800c83a:	bf08      	it	eq
 800c83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c840:	f380 8809 	msr	PSP, r0
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	f3af 8000 	nop.w

0800c850 <pxCurrentTCBConst>:
 800c850:	20003768 	.word	0x20003768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop

0800c858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c872:	f7fe fdc9 	bl	800b408 <xTaskIncrementTick>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c87c:	4b06      	ldr	r3, [pc, #24]	@ (800c898 <xPortSysTickHandler+0x40>)
 800c87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	f383 8811 	msr	BASEPRI, r3
}
 800c88e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c89c:	b480      	push	{r7}
 800c89e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d0 <vPortSetupTimerInterrupt+0x34>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d4 <vPortSetupTimerInterrupt+0x38>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d8 <vPortSetupTimerInterrupt+0x3c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a0a      	ldr	r2, [pc, #40]	@ (800c8dc <vPortSetupTimerInterrupt+0x40>)
 800c8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b6:	099b      	lsrs	r3, r3, #6
 800c8b8:	4a09      	ldr	r2, [pc, #36]	@ (800c8e0 <vPortSetupTimerInterrupt+0x44>)
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8be:	4b04      	ldr	r3, [pc, #16]	@ (800c8d0 <vPortSetupTimerInterrupt+0x34>)
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	601a      	str	r2, [r3, #0]
}
 800c8c4:	bf00      	nop
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	e000e010 	.word	0xe000e010
 800c8d4:	e000e018 	.word	0xe000e018
 800c8d8:	20000008 	.word	0x20000008
 800c8dc:	10624dd3 	.word	0x10624dd3
 800c8e0:	e000e014 	.word	0xe000e014

0800c8e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c8f4 <vPortEnableVFP+0x10>
 800c8e8:	6801      	ldr	r1, [r0, #0]
 800c8ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c8ee:	6001      	str	r1, [r0, #0]
 800c8f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8f2:	bf00      	nop
 800c8f4:	e000ed88 	.word	0xe000ed88

0800c8f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8fe:	f3ef 8305 	mrs	r3, IPSR
 800c902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b0f      	cmp	r3, #15
 800c908:	d915      	bls.n	800c936 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c90a:	4a18      	ldr	r2, [pc, #96]	@ (800c96c <vPortValidateInterruptPriority+0x74>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4413      	add	r3, r2
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c914:	4b16      	ldr	r3, [pc, #88]	@ (800c970 <vPortValidateInterruptPriority+0x78>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	7afa      	ldrb	r2, [r7, #11]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d20b      	bcs.n	800c936 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	607b      	str	r3, [r7, #4]
}
 800c930:	bf00      	nop
 800c932:	bf00      	nop
 800c934:	e7fd      	b.n	800c932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c936:	4b0f      	ldr	r3, [pc, #60]	@ (800c974 <vPortValidateInterruptPriority+0x7c>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c93e:	4b0e      	ldr	r3, [pc, #56]	@ (800c978 <vPortValidateInterruptPriority+0x80>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	429a      	cmp	r2, r3
 800c944:	d90b      	bls.n	800c95e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	603b      	str	r3, [r7, #0]
}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	e7fd      	b.n	800c95a <vPortValidateInterruptPriority+0x62>
	}
 800c95e:	bf00      	nop
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	e000e3f0 	.word	0xe000e3f0
 800c970:	20003d94 	.word	0x20003d94
 800c974:	e000ed0c 	.word	0xe000ed0c
 800c978:	20003d98 	.word	0x20003d98

0800c97c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	@ 0x28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c988:	f7fe fc82 	bl	800b290 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c98c:	4b5c      	ldr	r3, [pc, #368]	@ (800cb00 <pvPortMalloc+0x184>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c994:	f000 f924 	bl	800cbe0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c998:	4b5a      	ldr	r3, [pc, #360]	@ (800cb04 <pvPortMalloc+0x188>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f040 8095 	bne.w	800cad0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01e      	beq.n	800c9ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c9ac:	2208      	movs	r2, #8
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f003 0307 	and.w	r3, r3, #7
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d015      	beq.n	800c9ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f023 0307 	bic.w	r3, r3, #7
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00b      	beq.n	800c9ea <pvPortMalloc+0x6e>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	617b      	str	r3, [r7, #20]
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop
 800c9e8:	e7fd      	b.n	800c9e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d06f      	beq.n	800cad0 <pvPortMalloc+0x154>
 800c9f0:	4b45      	ldr	r3, [pc, #276]	@ (800cb08 <pvPortMalloc+0x18c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d86a      	bhi.n	800cad0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9fa:	4b44      	ldr	r3, [pc, #272]	@ (800cb0c <pvPortMalloc+0x190>)
 800c9fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9fe:	4b43      	ldr	r3, [pc, #268]	@ (800cb0c <pvPortMalloc+0x190>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca04:	e004      	b.n	800ca10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ca06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d903      	bls.n	800ca22 <pvPortMalloc+0xa6>
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1f1      	bne.n	800ca06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca22:	4b37      	ldr	r3, [pc, #220]	@ (800cb00 <pvPortMalloc+0x184>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d051      	beq.n	800cad0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2208      	movs	r2, #8
 800ca32:	4413      	add	r3, r2
 800ca34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	1ad2      	subs	r2, r2, r3
 800ca46:	2308      	movs	r3, #8
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d920      	bls.n	800ca90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4413      	add	r3, r2
 800ca54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00b      	beq.n	800ca78 <pvPortMalloc+0xfc>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	613b      	str	r3, [r7, #16]
}
 800ca72:	bf00      	nop
 800ca74:	bf00      	nop
 800ca76:	e7fd      	b.n	800ca74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	1ad2      	subs	r2, r2, r3
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca8a:	69b8      	ldr	r0, [r7, #24]
 800ca8c:	f000 f90a 	bl	800cca4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca90:	4b1d      	ldr	r3, [pc, #116]	@ (800cb08 <pvPortMalloc+0x18c>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cb08 <pvPortMalloc+0x18c>)
 800ca9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca9e:	4b1a      	ldr	r3, [pc, #104]	@ (800cb08 <pvPortMalloc+0x18c>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	4b1b      	ldr	r3, [pc, #108]	@ (800cb10 <pvPortMalloc+0x194>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d203      	bcs.n	800cab2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caaa:	4b17      	ldr	r3, [pc, #92]	@ (800cb08 <pvPortMalloc+0x18c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a18      	ldr	r2, [pc, #96]	@ (800cb10 <pvPortMalloc+0x194>)
 800cab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	4b13      	ldr	r3, [pc, #76]	@ (800cb04 <pvPortMalloc+0x188>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	431a      	orrs	r2, r3
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cac6:	4b13      	ldr	r3, [pc, #76]	@ (800cb14 <pvPortMalloc+0x198>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	4a11      	ldr	r2, [pc, #68]	@ (800cb14 <pvPortMalloc+0x198>)
 800cace:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cad0:	f7fe fbec 	bl	800b2ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	f003 0307 	and.w	r3, r3, #7
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00b      	beq.n	800caf6 <pvPortMalloc+0x17a>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	60fb      	str	r3, [r7, #12]
}
 800caf0:	bf00      	nop
 800caf2:	bf00      	nop
 800caf4:	e7fd      	b.n	800caf2 <pvPortMalloc+0x176>
	return pvReturn;
 800caf6:	69fb      	ldr	r3, [r7, #28]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3728      	adds	r7, #40	@ 0x28
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	2000495c 	.word	0x2000495c
 800cb04:	20004970 	.word	0x20004970
 800cb08:	20004960 	.word	0x20004960
 800cb0c:	20004954 	.word	0x20004954
 800cb10:	20004964 	.word	0x20004964
 800cb14:	20004968 	.word	0x20004968

0800cb18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d04f      	beq.n	800cbca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	425b      	negs	r3, r3
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	4413      	add	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	4b25      	ldr	r3, [pc, #148]	@ (800cbd4 <vPortFree+0xbc>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4013      	ands	r3, r2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10b      	bne.n	800cb5e <vPortFree+0x46>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	60fb      	str	r3, [r7, #12]
}
 800cb58:	bf00      	nop
 800cb5a:	bf00      	nop
 800cb5c:	e7fd      	b.n	800cb5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00b      	beq.n	800cb7e <vPortFree+0x66>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	60bb      	str	r3, [r7, #8]
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	e7fd      	b.n	800cb7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	4b14      	ldr	r3, [pc, #80]	@ (800cbd4 <vPortFree+0xbc>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4013      	ands	r3, r2
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d01e      	beq.n	800cbca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d11a      	bne.n	800cbca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	4b0e      	ldr	r3, [pc, #56]	@ (800cbd4 <vPortFree+0xbc>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	43db      	mvns	r3, r3
 800cb9e:	401a      	ands	r2, r3
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cba4:	f7fe fb74 	bl	800b290 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd8 <vPortFree+0xc0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	4a09      	ldr	r2, [pc, #36]	@ (800cbd8 <vPortFree+0xc0>)
 800cbb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbb6:	6938      	ldr	r0, [r7, #16]
 800cbb8:	f000 f874 	bl	800cca4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cbbc:	4b07      	ldr	r3, [pc, #28]	@ (800cbdc <vPortFree+0xc4>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	4a06      	ldr	r2, [pc, #24]	@ (800cbdc <vPortFree+0xc4>)
 800cbc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cbc6:	f7fe fb71 	bl	800b2ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbca:	bf00      	nop
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20004970 	.word	0x20004970
 800cbd8:	20004960 	.word	0x20004960
 800cbdc:	2000496c 	.word	0x2000496c

0800cbe0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbe6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800cbea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbec:	4b27      	ldr	r3, [pc, #156]	@ (800cc8c <prvHeapInit+0xac>)
 800cbee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f003 0307 	and.w	r3, r3, #7
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00c      	beq.n	800cc14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	3307      	adds	r3, #7
 800cbfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f023 0307 	bic.w	r3, r3, #7
 800cc06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	4a1f      	ldr	r2, [pc, #124]	@ (800cc8c <prvHeapInit+0xac>)
 800cc10:	4413      	add	r3, r2
 800cc12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc18:	4a1d      	ldr	r2, [pc, #116]	@ (800cc90 <prvHeapInit+0xb0>)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc1e:	4b1c      	ldr	r3, [pc, #112]	@ (800cc90 <prvHeapInit+0xb0>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	4413      	add	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc2c:	2208      	movs	r2, #8
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	1a9b      	subs	r3, r3, r2
 800cc32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f023 0307 	bic.w	r3, r3, #7
 800cc3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4a15      	ldr	r2, [pc, #84]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc42:	4b14      	ldr	r3, [pc, #80]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2200      	movs	r2, #0
 800cc48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc4a:	4b12      	ldr	r3, [pc, #72]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc60:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	4a0a      	ldr	r2, [pc, #40]	@ (800cc98 <prvHeapInit+0xb8>)
 800cc6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	4a09      	ldr	r2, [pc, #36]	@ (800cc9c <prvHeapInit+0xbc>)
 800cc76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc78:	4b09      	ldr	r3, [pc, #36]	@ (800cca0 <prvHeapInit+0xc0>)
 800cc7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cc7e:	601a      	str	r2, [r3, #0]
}
 800cc80:	bf00      	nop
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	20003d9c 	.word	0x20003d9c
 800cc90:	20004954 	.word	0x20004954
 800cc94:	2000495c 	.word	0x2000495c
 800cc98:	20004964 	.word	0x20004964
 800cc9c:	20004960 	.word	0x20004960
 800cca0:	20004970 	.word	0x20004970

0800cca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccac:	4b28      	ldr	r3, [pc, #160]	@ (800cd50 <prvInsertBlockIntoFreeList+0xac>)
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e002      	b.n	800ccb8 <prvInsertBlockIntoFreeList+0x14>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d8f7      	bhi.n	800ccb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	4413      	add	r3, r2
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d108      	bne.n	800cce6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	441a      	add	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	441a      	add	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d118      	bne.n	800cd2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b15      	ldr	r3, [pc, #84]	@ (800cd54 <prvInsertBlockIntoFreeList+0xb0>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d00d      	beq.n	800cd22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685a      	ldr	r2, [r3, #4]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	441a      	add	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	601a      	str	r2, [r3, #0]
 800cd20:	e008      	b.n	800cd34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd22:	4b0c      	ldr	r3, [pc, #48]	@ (800cd54 <prvInsertBlockIntoFreeList+0xb0>)
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	e003      	b.n	800cd34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d002      	beq.n	800cd42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd42:	bf00      	nop
 800cd44:	3714      	adds	r7, #20
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	20004954 	.word	0x20004954
 800cd54:	2000495c 	.word	0x2000495c

0800cd58 <rand>:
 800cd58:	4b16      	ldr	r3, [pc, #88]	@ (800cdb4 <rand+0x5c>)
 800cd5a:	b510      	push	{r4, lr}
 800cd5c:	681c      	ldr	r4, [r3, #0]
 800cd5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cd60:	b9b3      	cbnz	r3, 800cd90 <rand+0x38>
 800cd62:	2018      	movs	r0, #24
 800cd64:	f001 fdda 	bl	800e91c <malloc>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	6320      	str	r0, [r4, #48]	@ 0x30
 800cd6c:	b920      	cbnz	r0, 800cd78 <rand+0x20>
 800cd6e:	4b12      	ldr	r3, [pc, #72]	@ (800cdb8 <rand+0x60>)
 800cd70:	4812      	ldr	r0, [pc, #72]	@ (800cdbc <rand+0x64>)
 800cd72:	2152      	movs	r1, #82	@ 0x52
 800cd74:	f000 ff1e 	bl	800dbb4 <__assert_func>
 800cd78:	4911      	ldr	r1, [pc, #68]	@ (800cdc0 <rand+0x68>)
 800cd7a:	4b12      	ldr	r3, [pc, #72]	@ (800cdc4 <rand+0x6c>)
 800cd7c:	e9c0 1300 	strd	r1, r3, [r0]
 800cd80:	4b11      	ldr	r3, [pc, #68]	@ (800cdc8 <rand+0x70>)
 800cd82:	6083      	str	r3, [r0, #8]
 800cd84:	230b      	movs	r3, #11
 800cd86:	8183      	strh	r3, [r0, #12]
 800cd88:	2100      	movs	r1, #0
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cd90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cd92:	480e      	ldr	r0, [pc, #56]	@ (800cdcc <rand+0x74>)
 800cd94:	690b      	ldr	r3, [r1, #16]
 800cd96:	694c      	ldr	r4, [r1, #20]
 800cd98:	4a0d      	ldr	r2, [pc, #52]	@ (800cdd0 <rand+0x78>)
 800cd9a:	4358      	muls	r0, r3
 800cd9c:	fb02 0004 	mla	r0, r2, r4, r0
 800cda0:	fba3 3202 	umull	r3, r2, r3, r2
 800cda4:	3301      	adds	r3, #1
 800cda6:	eb40 0002 	adc.w	r0, r0, r2
 800cdaa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cdae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cdb2:	bd10      	pop	{r4, pc}
 800cdb4:	2000006c 	.word	0x2000006c
 800cdb8:	0800f9a4 	.word	0x0800f9a4
 800cdbc:	0800f9bb 	.word	0x0800f9bb
 800cdc0:	abcd330e 	.word	0xabcd330e
 800cdc4:	e66d1234 	.word	0xe66d1234
 800cdc8:	0005deec 	.word	0x0005deec
 800cdcc:	5851f42d 	.word	0x5851f42d
 800cdd0:	4c957f2d 	.word	0x4c957f2d

0800cdd4 <__cvt>:
 800cdd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd8:	ec57 6b10 	vmov	r6, r7, d0
 800cddc:	2f00      	cmp	r7, #0
 800cdde:	460c      	mov	r4, r1
 800cde0:	4619      	mov	r1, r3
 800cde2:	463b      	mov	r3, r7
 800cde4:	bfbb      	ittet	lt
 800cde6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cdea:	461f      	movlt	r7, r3
 800cdec:	2300      	movge	r3, #0
 800cdee:	232d      	movlt	r3, #45	@ 0x2d
 800cdf0:	700b      	strb	r3, [r1, #0]
 800cdf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdf4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cdf8:	4691      	mov	r9, r2
 800cdfa:	f023 0820 	bic.w	r8, r3, #32
 800cdfe:	bfbc      	itt	lt
 800ce00:	4632      	movlt	r2, r6
 800ce02:	4616      	movlt	r6, r2
 800ce04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce08:	d005      	beq.n	800ce16 <__cvt+0x42>
 800ce0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ce0e:	d100      	bne.n	800ce12 <__cvt+0x3e>
 800ce10:	3401      	adds	r4, #1
 800ce12:	2102      	movs	r1, #2
 800ce14:	e000      	b.n	800ce18 <__cvt+0x44>
 800ce16:	2103      	movs	r1, #3
 800ce18:	ab03      	add	r3, sp, #12
 800ce1a:	9301      	str	r3, [sp, #4]
 800ce1c:	ab02      	add	r3, sp, #8
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	ec47 6b10 	vmov	d0, r6, r7
 800ce24:	4653      	mov	r3, sl
 800ce26:	4622      	mov	r2, r4
 800ce28:	f000 ff6a 	bl	800dd00 <_dtoa_r>
 800ce2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ce30:	4605      	mov	r5, r0
 800ce32:	d119      	bne.n	800ce68 <__cvt+0x94>
 800ce34:	f019 0f01 	tst.w	r9, #1
 800ce38:	d00e      	beq.n	800ce58 <__cvt+0x84>
 800ce3a:	eb00 0904 	add.w	r9, r0, r4
 800ce3e:	2200      	movs	r2, #0
 800ce40:	2300      	movs	r3, #0
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce4a:	b108      	cbz	r0, 800ce50 <__cvt+0x7c>
 800ce4c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce50:	2230      	movs	r2, #48	@ 0x30
 800ce52:	9b03      	ldr	r3, [sp, #12]
 800ce54:	454b      	cmp	r3, r9
 800ce56:	d31e      	bcc.n	800ce96 <__cvt+0xc2>
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce5c:	1b5b      	subs	r3, r3, r5
 800ce5e:	4628      	mov	r0, r5
 800ce60:	6013      	str	r3, [r2, #0]
 800ce62:	b004      	add	sp, #16
 800ce64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce6c:	eb00 0904 	add.w	r9, r0, r4
 800ce70:	d1e5      	bne.n	800ce3e <__cvt+0x6a>
 800ce72:	7803      	ldrb	r3, [r0, #0]
 800ce74:	2b30      	cmp	r3, #48	@ 0x30
 800ce76:	d10a      	bne.n	800ce8e <__cvt+0xba>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	4639      	mov	r1, r7
 800ce80:	f7f3 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce84:	b918      	cbnz	r0, 800ce8e <__cvt+0xba>
 800ce86:	f1c4 0401 	rsb	r4, r4, #1
 800ce8a:	f8ca 4000 	str.w	r4, [sl]
 800ce8e:	f8da 3000 	ldr.w	r3, [sl]
 800ce92:	4499      	add	r9, r3
 800ce94:	e7d3      	b.n	800ce3e <__cvt+0x6a>
 800ce96:	1c59      	adds	r1, r3, #1
 800ce98:	9103      	str	r1, [sp, #12]
 800ce9a:	701a      	strb	r2, [r3, #0]
 800ce9c:	e7d9      	b.n	800ce52 <__cvt+0x7e>

0800ce9e <__exponent>:
 800ce9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cea0:	2900      	cmp	r1, #0
 800cea2:	bfba      	itte	lt
 800cea4:	4249      	neglt	r1, r1
 800cea6:	232d      	movlt	r3, #45	@ 0x2d
 800cea8:	232b      	movge	r3, #43	@ 0x2b
 800ceaa:	2909      	cmp	r1, #9
 800ceac:	7002      	strb	r2, [r0, #0]
 800ceae:	7043      	strb	r3, [r0, #1]
 800ceb0:	dd29      	ble.n	800cf06 <__exponent+0x68>
 800ceb2:	f10d 0307 	add.w	r3, sp, #7
 800ceb6:	461d      	mov	r5, r3
 800ceb8:	270a      	movs	r7, #10
 800ceba:	461a      	mov	r2, r3
 800cebc:	fbb1 f6f7 	udiv	r6, r1, r7
 800cec0:	fb07 1416 	mls	r4, r7, r6, r1
 800cec4:	3430      	adds	r4, #48	@ 0x30
 800cec6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ceca:	460c      	mov	r4, r1
 800cecc:	2c63      	cmp	r4, #99	@ 0x63
 800cece:	f103 33ff 	add.w	r3, r3, #4294967295
 800ced2:	4631      	mov	r1, r6
 800ced4:	dcf1      	bgt.n	800ceba <__exponent+0x1c>
 800ced6:	3130      	adds	r1, #48	@ 0x30
 800ced8:	1e94      	subs	r4, r2, #2
 800ceda:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cede:	1c41      	adds	r1, r0, #1
 800cee0:	4623      	mov	r3, r4
 800cee2:	42ab      	cmp	r3, r5
 800cee4:	d30a      	bcc.n	800cefc <__exponent+0x5e>
 800cee6:	f10d 0309 	add.w	r3, sp, #9
 800ceea:	1a9b      	subs	r3, r3, r2
 800ceec:	42ac      	cmp	r4, r5
 800ceee:	bf88      	it	hi
 800cef0:	2300      	movhi	r3, #0
 800cef2:	3302      	adds	r3, #2
 800cef4:	4403      	add	r3, r0
 800cef6:	1a18      	subs	r0, r3, r0
 800cef8:	b003      	add	sp, #12
 800cefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cefc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cf00:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cf04:	e7ed      	b.n	800cee2 <__exponent+0x44>
 800cf06:	2330      	movs	r3, #48	@ 0x30
 800cf08:	3130      	adds	r1, #48	@ 0x30
 800cf0a:	7083      	strb	r3, [r0, #2]
 800cf0c:	70c1      	strb	r1, [r0, #3]
 800cf0e:	1d03      	adds	r3, r0, #4
 800cf10:	e7f1      	b.n	800cef6 <__exponent+0x58>
	...

0800cf14 <_printf_float>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	b08d      	sub	sp, #52	@ 0x34
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cf20:	4616      	mov	r6, r2
 800cf22:	461f      	mov	r7, r3
 800cf24:	4605      	mov	r5, r0
 800cf26:	f000 fdbf 	bl	800daa8 <_localeconv_r>
 800cf2a:	6803      	ldr	r3, [r0, #0]
 800cf2c:	9304      	str	r3, [sp, #16]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7f3 f99e 	bl	8000270 <strlen>
 800cf34:	2300      	movs	r3, #0
 800cf36:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf38:	f8d8 3000 	ldr.w	r3, [r8]
 800cf3c:	9005      	str	r0, [sp, #20]
 800cf3e:	3307      	adds	r3, #7
 800cf40:	f023 0307 	bic.w	r3, r3, #7
 800cf44:	f103 0208 	add.w	r2, r3, #8
 800cf48:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cf4c:	f8d4 b000 	ldr.w	fp, [r4]
 800cf50:	f8c8 2000 	str.w	r2, [r8]
 800cf54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cf5c:	9307      	str	r3, [sp, #28]
 800cf5e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cf66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf6a:	4b9c      	ldr	r3, [pc, #624]	@ (800d1dc <_printf_float+0x2c8>)
 800cf6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf70:	f7f3 fddc 	bl	8000b2c <__aeabi_dcmpun>
 800cf74:	bb70      	cbnz	r0, 800cfd4 <_printf_float+0xc0>
 800cf76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf7a:	4b98      	ldr	r3, [pc, #608]	@ (800d1dc <_printf_float+0x2c8>)
 800cf7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf80:	f7f3 fdb6 	bl	8000af0 <__aeabi_dcmple>
 800cf84:	bb30      	cbnz	r0, 800cfd4 <_printf_float+0xc0>
 800cf86:	2200      	movs	r2, #0
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4640      	mov	r0, r8
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	f7f3 fda5 	bl	8000adc <__aeabi_dcmplt>
 800cf92:	b110      	cbz	r0, 800cf9a <_printf_float+0x86>
 800cf94:	232d      	movs	r3, #45	@ 0x2d
 800cf96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf9a:	4a91      	ldr	r2, [pc, #580]	@ (800d1e0 <_printf_float+0x2cc>)
 800cf9c:	4b91      	ldr	r3, [pc, #580]	@ (800d1e4 <_printf_float+0x2d0>)
 800cf9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cfa2:	bf94      	ite	ls
 800cfa4:	4690      	movls	r8, r2
 800cfa6:	4698      	movhi	r8, r3
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	6123      	str	r3, [r4, #16]
 800cfac:	f02b 0304 	bic.w	r3, fp, #4
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	f04f 0900 	mov.w	r9, #0
 800cfb6:	9700      	str	r7, [sp, #0]
 800cfb8:	4633      	mov	r3, r6
 800cfba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f000 f9d2 	bl	800d368 <_printf_common>
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	f040 808d 	bne.w	800d0e4 <_printf_float+0x1d0>
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	b00d      	add	sp, #52	@ 0x34
 800cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd4:	4642      	mov	r2, r8
 800cfd6:	464b      	mov	r3, r9
 800cfd8:	4640      	mov	r0, r8
 800cfda:	4649      	mov	r1, r9
 800cfdc:	f7f3 fda6 	bl	8000b2c <__aeabi_dcmpun>
 800cfe0:	b140      	cbz	r0, 800cff4 <_printf_float+0xe0>
 800cfe2:	464b      	mov	r3, r9
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bfbc      	itt	lt
 800cfe8:	232d      	movlt	r3, #45	@ 0x2d
 800cfea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cfee:	4a7e      	ldr	r2, [pc, #504]	@ (800d1e8 <_printf_float+0x2d4>)
 800cff0:	4b7e      	ldr	r3, [pc, #504]	@ (800d1ec <_printf_float+0x2d8>)
 800cff2:	e7d4      	b.n	800cf9e <_printf_float+0x8a>
 800cff4:	6863      	ldr	r3, [r4, #4]
 800cff6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cffa:	9206      	str	r2, [sp, #24]
 800cffc:	1c5a      	adds	r2, r3, #1
 800cffe:	d13b      	bne.n	800d078 <_printf_float+0x164>
 800d000:	2306      	movs	r3, #6
 800d002:	6063      	str	r3, [r4, #4]
 800d004:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d008:	2300      	movs	r3, #0
 800d00a:	6022      	str	r2, [r4, #0]
 800d00c:	9303      	str	r3, [sp, #12]
 800d00e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d010:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d014:	ab09      	add	r3, sp, #36	@ 0x24
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	6861      	ldr	r1, [r4, #4]
 800d01a:	ec49 8b10 	vmov	d0, r8, r9
 800d01e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d022:	4628      	mov	r0, r5
 800d024:	f7ff fed6 	bl	800cdd4 <__cvt>
 800d028:	9b06      	ldr	r3, [sp, #24]
 800d02a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d02c:	2b47      	cmp	r3, #71	@ 0x47
 800d02e:	4680      	mov	r8, r0
 800d030:	d129      	bne.n	800d086 <_printf_float+0x172>
 800d032:	1cc8      	adds	r0, r1, #3
 800d034:	db02      	blt.n	800d03c <_printf_float+0x128>
 800d036:	6863      	ldr	r3, [r4, #4]
 800d038:	4299      	cmp	r1, r3
 800d03a:	dd41      	ble.n	800d0c0 <_printf_float+0x1ac>
 800d03c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d040:	fa5f fa8a 	uxtb.w	sl, sl
 800d044:	3901      	subs	r1, #1
 800d046:	4652      	mov	r2, sl
 800d048:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d04c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d04e:	f7ff ff26 	bl	800ce9e <__exponent>
 800d052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d054:	1813      	adds	r3, r2, r0
 800d056:	2a01      	cmp	r2, #1
 800d058:	4681      	mov	r9, r0
 800d05a:	6123      	str	r3, [r4, #16]
 800d05c:	dc02      	bgt.n	800d064 <_printf_float+0x150>
 800d05e:	6822      	ldr	r2, [r4, #0]
 800d060:	07d2      	lsls	r2, r2, #31
 800d062:	d501      	bpl.n	800d068 <_printf_float+0x154>
 800d064:	3301      	adds	r3, #1
 800d066:	6123      	str	r3, [r4, #16]
 800d068:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0a2      	beq.n	800cfb6 <_printf_float+0xa2>
 800d070:	232d      	movs	r3, #45	@ 0x2d
 800d072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d076:	e79e      	b.n	800cfb6 <_printf_float+0xa2>
 800d078:	9a06      	ldr	r2, [sp, #24]
 800d07a:	2a47      	cmp	r2, #71	@ 0x47
 800d07c:	d1c2      	bne.n	800d004 <_printf_float+0xf0>
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1c0      	bne.n	800d004 <_printf_float+0xf0>
 800d082:	2301      	movs	r3, #1
 800d084:	e7bd      	b.n	800d002 <_printf_float+0xee>
 800d086:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d08a:	d9db      	bls.n	800d044 <_printf_float+0x130>
 800d08c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d090:	d118      	bne.n	800d0c4 <_printf_float+0x1b0>
 800d092:	2900      	cmp	r1, #0
 800d094:	6863      	ldr	r3, [r4, #4]
 800d096:	dd0b      	ble.n	800d0b0 <_printf_float+0x19c>
 800d098:	6121      	str	r1, [r4, #16]
 800d09a:	b913      	cbnz	r3, 800d0a2 <_printf_float+0x18e>
 800d09c:	6822      	ldr	r2, [r4, #0]
 800d09e:	07d0      	lsls	r0, r2, #31
 800d0a0:	d502      	bpl.n	800d0a8 <_printf_float+0x194>
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	440b      	add	r3, r1
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d0aa:	f04f 0900 	mov.w	r9, #0
 800d0ae:	e7db      	b.n	800d068 <_printf_float+0x154>
 800d0b0:	b913      	cbnz	r3, 800d0b8 <_printf_float+0x1a4>
 800d0b2:	6822      	ldr	r2, [r4, #0]
 800d0b4:	07d2      	lsls	r2, r2, #31
 800d0b6:	d501      	bpl.n	800d0bc <_printf_float+0x1a8>
 800d0b8:	3302      	adds	r3, #2
 800d0ba:	e7f4      	b.n	800d0a6 <_printf_float+0x192>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e7f2      	b.n	800d0a6 <_printf_float+0x192>
 800d0c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0c6:	4299      	cmp	r1, r3
 800d0c8:	db05      	blt.n	800d0d6 <_printf_float+0x1c2>
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	6121      	str	r1, [r4, #16]
 800d0ce:	07d8      	lsls	r0, r3, #31
 800d0d0:	d5ea      	bpl.n	800d0a8 <_printf_float+0x194>
 800d0d2:	1c4b      	adds	r3, r1, #1
 800d0d4:	e7e7      	b.n	800d0a6 <_printf_float+0x192>
 800d0d6:	2900      	cmp	r1, #0
 800d0d8:	bfd4      	ite	le
 800d0da:	f1c1 0202 	rsble	r2, r1, #2
 800d0de:	2201      	movgt	r2, #1
 800d0e0:	4413      	add	r3, r2
 800d0e2:	e7e0      	b.n	800d0a6 <_printf_float+0x192>
 800d0e4:	6823      	ldr	r3, [r4, #0]
 800d0e6:	055a      	lsls	r2, r3, #21
 800d0e8:	d407      	bmi.n	800d0fa <_printf_float+0x1e6>
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	4631      	mov	r1, r6
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	47b8      	blx	r7
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d12b      	bne.n	800d150 <_printf_float+0x23c>
 800d0f8:	e767      	b.n	800cfca <_printf_float+0xb6>
 800d0fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d0fe:	f240 80dd 	bls.w	800d2bc <_printf_float+0x3a8>
 800d102:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d106:	2200      	movs	r2, #0
 800d108:	2300      	movs	r3, #0
 800d10a:	f7f3 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d10e:	2800      	cmp	r0, #0
 800d110:	d033      	beq.n	800d17a <_printf_float+0x266>
 800d112:	4a37      	ldr	r2, [pc, #220]	@ (800d1f0 <_printf_float+0x2dc>)
 800d114:	2301      	movs	r3, #1
 800d116:	4631      	mov	r1, r6
 800d118:	4628      	mov	r0, r5
 800d11a:	47b8      	blx	r7
 800d11c:	3001      	adds	r0, #1
 800d11e:	f43f af54 	beq.w	800cfca <_printf_float+0xb6>
 800d122:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d126:	4543      	cmp	r3, r8
 800d128:	db02      	blt.n	800d130 <_printf_float+0x21c>
 800d12a:	6823      	ldr	r3, [r4, #0]
 800d12c:	07d8      	lsls	r0, r3, #31
 800d12e:	d50f      	bpl.n	800d150 <_printf_float+0x23c>
 800d130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d134:	4631      	mov	r1, r6
 800d136:	4628      	mov	r0, r5
 800d138:	47b8      	blx	r7
 800d13a:	3001      	adds	r0, #1
 800d13c:	f43f af45 	beq.w	800cfca <_printf_float+0xb6>
 800d140:	f04f 0900 	mov.w	r9, #0
 800d144:	f108 38ff 	add.w	r8, r8, #4294967295
 800d148:	f104 0a1a 	add.w	sl, r4, #26
 800d14c:	45c8      	cmp	r8, r9
 800d14e:	dc09      	bgt.n	800d164 <_printf_float+0x250>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	079b      	lsls	r3, r3, #30
 800d154:	f100 8103 	bmi.w	800d35e <_printf_float+0x44a>
 800d158:	68e0      	ldr	r0, [r4, #12]
 800d15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d15c:	4298      	cmp	r0, r3
 800d15e:	bfb8      	it	lt
 800d160:	4618      	movlt	r0, r3
 800d162:	e734      	b.n	800cfce <_printf_float+0xba>
 800d164:	2301      	movs	r3, #1
 800d166:	4652      	mov	r2, sl
 800d168:	4631      	mov	r1, r6
 800d16a:	4628      	mov	r0, r5
 800d16c:	47b8      	blx	r7
 800d16e:	3001      	adds	r0, #1
 800d170:	f43f af2b 	beq.w	800cfca <_printf_float+0xb6>
 800d174:	f109 0901 	add.w	r9, r9, #1
 800d178:	e7e8      	b.n	800d14c <_printf_float+0x238>
 800d17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dc39      	bgt.n	800d1f4 <_printf_float+0x2e0>
 800d180:	4a1b      	ldr	r2, [pc, #108]	@ (800d1f0 <_printf_float+0x2dc>)
 800d182:	2301      	movs	r3, #1
 800d184:	4631      	mov	r1, r6
 800d186:	4628      	mov	r0, r5
 800d188:	47b8      	blx	r7
 800d18a:	3001      	adds	r0, #1
 800d18c:	f43f af1d 	beq.w	800cfca <_printf_float+0xb6>
 800d190:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d194:	ea59 0303 	orrs.w	r3, r9, r3
 800d198:	d102      	bne.n	800d1a0 <_printf_float+0x28c>
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	07d9      	lsls	r1, r3, #31
 800d19e:	d5d7      	bpl.n	800d150 <_printf_float+0x23c>
 800d1a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	47b8      	blx	r7
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	f43f af0d 	beq.w	800cfca <_printf_float+0xb6>
 800d1b0:	f04f 0a00 	mov.w	sl, #0
 800d1b4:	f104 0b1a 	add.w	fp, r4, #26
 800d1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ba:	425b      	negs	r3, r3
 800d1bc:	4553      	cmp	r3, sl
 800d1be:	dc01      	bgt.n	800d1c4 <_printf_float+0x2b0>
 800d1c0:	464b      	mov	r3, r9
 800d1c2:	e793      	b.n	800d0ec <_printf_float+0x1d8>
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	465a      	mov	r2, fp
 800d1c8:	4631      	mov	r1, r6
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	47b8      	blx	r7
 800d1ce:	3001      	adds	r0, #1
 800d1d0:	f43f aefb 	beq.w	800cfca <_printf_float+0xb6>
 800d1d4:	f10a 0a01 	add.w	sl, sl, #1
 800d1d8:	e7ee      	b.n	800d1b8 <_printf_float+0x2a4>
 800d1da:	bf00      	nop
 800d1dc:	7fefffff 	.word	0x7fefffff
 800d1e0:	0800fa13 	.word	0x0800fa13
 800d1e4:	0800fa17 	.word	0x0800fa17
 800d1e8:	0800fa1b 	.word	0x0800fa1b
 800d1ec:	0800fa1f 	.word	0x0800fa1f
 800d1f0:	0800fa23 	.word	0x0800fa23
 800d1f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d1f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d1fa:	4553      	cmp	r3, sl
 800d1fc:	bfa8      	it	ge
 800d1fe:	4653      	movge	r3, sl
 800d200:	2b00      	cmp	r3, #0
 800d202:	4699      	mov	r9, r3
 800d204:	dc36      	bgt.n	800d274 <_printf_float+0x360>
 800d206:	f04f 0b00 	mov.w	fp, #0
 800d20a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d20e:	f104 021a 	add.w	r2, r4, #26
 800d212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d214:	9306      	str	r3, [sp, #24]
 800d216:	eba3 0309 	sub.w	r3, r3, r9
 800d21a:	455b      	cmp	r3, fp
 800d21c:	dc31      	bgt.n	800d282 <_printf_float+0x36e>
 800d21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d220:	459a      	cmp	sl, r3
 800d222:	dc3a      	bgt.n	800d29a <_printf_float+0x386>
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	07da      	lsls	r2, r3, #31
 800d228:	d437      	bmi.n	800d29a <_printf_float+0x386>
 800d22a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d22c:	ebaa 0903 	sub.w	r9, sl, r3
 800d230:	9b06      	ldr	r3, [sp, #24]
 800d232:	ebaa 0303 	sub.w	r3, sl, r3
 800d236:	4599      	cmp	r9, r3
 800d238:	bfa8      	it	ge
 800d23a:	4699      	movge	r9, r3
 800d23c:	f1b9 0f00 	cmp.w	r9, #0
 800d240:	dc33      	bgt.n	800d2aa <_printf_float+0x396>
 800d242:	f04f 0800 	mov.w	r8, #0
 800d246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d24a:	f104 0b1a 	add.w	fp, r4, #26
 800d24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d250:	ebaa 0303 	sub.w	r3, sl, r3
 800d254:	eba3 0309 	sub.w	r3, r3, r9
 800d258:	4543      	cmp	r3, r8
 800d25a:	f77f af79 	ble.w	800d150 <_printf_float+0x23c>
 800d25e:	2301      	movs	r3, #1
 800d260:	465a      	mov	r2, fp
 800d262:	4631      	mov	r1, r6
 800d264:	4628      	mov	r0, r5
 800d266:	47b8      	blx	r7
 800d268:	3001      	adds	r0, #1
 800d26a:	f43f aeae 	beq.w	800cfca <_printf_float+0xb6>
 800d26e:	f108 0801 	add.w	r8, r8, #1
 800d272:	e7ec      	b.n	800d24e <_printf_float+0x33a>
 800d274:	4642      	mov	r2, r8
 800d276:	4631      	mov	r1, r6
 800d278:	4628      	mov	r0, r5
 800d27a:	47b8      	blx	r7
 800d27c:	3001      	adds	r0, #1
 800d27e:	d1c2      	bne.n	800d206 <_printf_float+0x2f2>
 800d280:	e6a3      	b.n	800cfca <_printf_float+0xb6>
 800d282:	2301      	movs	r3, #1
 800d284:	4631      	mov	r1, r6
 800d286:	4628      	mov	r0, r5
 800d288:	9206      	str	r2, [sp, #24]
 800d28a:	47b8      	blx	r7
 800d28c:	3001      	adds	r0, #1
 800d28e:	f43f ae9c 	beq.w	800cfca <_printf_float+0xb6>
 800d292:	9a06      	ldr	r2, [sp, #24]
 800d294:	f10b 0b01 	add.w	fp, fp, #1
 800d298:	e7bb      	b.n	800d212 <_printf_float+0x2fe>
 800d29a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d29e:	4631      	mov	r1, r6
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	47b8      	blx	r7
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	d1c0      	bne.n	800d22a <_printf_float+0x316>
 800d2a8:	e68f      	b.n	800cfca <_printf_float+0xb6>
 800d2aa:	9a06      	ldr	r2, [sp, #24]
 800d2ac:	464b      	mov	r3, r9
 800d2ae:	4442      	add	r2, r8
 800d2b0:	4631      	mov	r1, r6
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	47b8      	blx	r7
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	d1c3      	bne.n	800d242 <_printf_float+0x32e>
 800d2ba:	e686      	b.n	800cfca <_printf_float+0xb6>
 800d2bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2c0:	f1ba 0f01 	cmp.w	sl, #1
 800d2c4:	dc01      	bgt.n	800d2ca <_printf_float+0x3b6>
 800d2c6:	07db      	lsls	r3, r3, #31
 800d2c8:	d536      	bpl.n	800d338 <_printf_float+0x424>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	47b8      	blx	r7
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	f43f ae78 	beq.w	800cfca <_printf_float+0xb6>
 800d2da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2de:	4631      	mov	r1, r6
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	47b8      	blx	r7
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	f43f ae70 	beq.w	800cfca <_printf_float+0xb6>
 800d2ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2f6:	f7f3 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2fa:	b9c0      	cbnz	r0, 800d32e <_printf_float+0x41a>
 800d2fc:	4653      	mov	r3, sl
 800d2fe:	f108 0201 	add.w	r2, r8, #1
 800d302:	4631      	mov	r1, r6
 800d304:	4628      	mov	r0, r5
 800d306:	47b8      	blx	r7
 800d308:	3001      	adds	r0, #1
 800d30a:	d10c      	bne.n	800d326 <_printf_float+0x412>
 800d30c:	e65d      	b.n	800cfca <_printf_float+0xb6>
 800d30e:	2301      	movs	r3, #1
 800d310:	465a      	mov	r2, fp
 800d312:	4631      	mov	r1, r6
 800d314:	4628      	mov	r0, r5
 800d316:	47b8      	blx	r7
 800d318:	3001      	adds	r0, #1
 800d31a:	f43f ae56 	beq.w	800cfca <_printf_float+0xb6>
 800d31e:	f108 0801 	add.w	r8, r8, #1
 800d322:	45d0      	cmp	r8, sl
 800d324:	dbf3      	blt.n	800d30e <_printf_float+0x3fa>
 800d326:	464b      	mov	r3, r9
 800d328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d32c:	e6df      	b.n	800d0ee <_printf_float+0x1da>
 800d32e:	f04f 0800 	mov.w	r8, #0
 800d332:	f104 0b1a 	add.w	fp, r4, #26
 800d336:	e7f4      	b.n	800d322 <_printf_float+0x40e>
 800d338:	2301      	movs	r3, #1
 800d33a:	4642      	mov	r2, r8
 800d33c:	e7e1      	b.n	800d302 <_printf_float+0x3ee>
 800d33e:	2301      	movs	r3, #1
 800d340:	464a      	mov	r2, r9
 800d342:	4631      	mov	r1, r6
 800d344:	4628      	mov	r0, r5
 800d346:	47b8      	blx	r7
 800d348:	3001      	adds	r0, #1
 800d34a:	f43f ae3e 	beq.w	800cfca <_printf_float+0xb6>
 800d34e:	f108 0801 	add.w	r8, r8, #1
 800d352:	68e3      	ldr	r3, [r4, #12]
 800d354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d356:	1a5b      	subs	r3, r3, r1
 800d358:	4543      	cmp	r3, r8
 800d35a:	dcf0      	bgt.n	800d33e <_printf_float+0x42a>
 800d35c:	e6fc      	b.n	800d158 <_printf_float+0x244>
 800d35e:	f04f 0800 	mov.w	r8, #0
 800d362:	f104 0919 	add.w	r9, r4, #25
 800d366:	e7f4      	b.n	800d352 <_printf_float+0x43e>

0800d368 <_printf_common>:
 800d368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d36c:	4616      	mov	r6, r2
 800d36e:	4698      	mov	r8, r3
 800d370:	688a      	ldr	r2, [r1, #8]
 800d372:	690b      	ldr	r3, [r1, #16]
 800d374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d378:	4293      	cmp	r3, r2
 800d37a:	bfb8      	it	lt
 800d37c:	4613      	movlt	r3, r2
 800d37e:	6033      	str	r3, [r6, #0]
 800d380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d384:	4607      	mov	r7, r0
 800d386:	460c      	mov	r4, r1
 800d388:	b10a      	cbz	r2, 800d38e <_printf_common+0x26>
 800d38a:	3301      	adds	r3, #1
 800d38c:	6033      	str	r3, [r6, #0]
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	0699      	lsls	r1, r3, #26
 800d392:	bf42      	ittt	mi
 800d394:	6833      	ldrmi	r3, [r6, #0]
 800d396:	3302      	addmi	r3, #2
 800d398:	6033      	strmi	r3, [r6, #0]
 800d39a:	6825      	ldr	r5, [r4, #0]
 800d39c:	f015 0506 	ands.w	r5, r5, #6
 800d3a0:	d106      	bne.n	800d3b0 <_printf_common+0x48>
 800d3a2:	f104 0a19 	add.w	sl, r4, #25
 800d3a6:	68e3      	ldr	r3, [r4, #12]
 800d3a8:	6832      	ldr	r2, [r6, #0]
 800d3aa:	1a9b      	subs	r3, r3, r2
 800d3ac:	42ab      	cmp	r3, r5
 800d3ae:	dc26      	bgt.n	800d3fe <_printf_common+0x96>
 800d3b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	3b00      	subs	r3, #0
 800d3b8:	bf18      	it	ne
 800d3ba:	2301      	movne	r3, #1
 800d3bc:	0692      	lsls	r2, r2, #26
 800d3be:	d42b      	bmi.n	800d418 <_printf_common+0xb0>
 800d3c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3c4:	4641      	mov	r1, r8
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	47c8      	blx	r9
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	d01e      	beq.n	800d40c <_printf_common+0xa4>
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	6922      	ldr	r2, [r4, #16]
 800d3d2:	f003 0306 	and.w	r3, r3, #6
 800d3d6:	2b04      	cmp	r3, #4
 800d3d8:	bf02      	ittt	eq
 800d3da:	68e5      	ldreq	r5, [r4, #12]
 800d3dc:	6833      	ldreq	r3, [r6, #0]
 800d3de:	1aed      	subeq	r5, r5, r3
 800d3e0:	68a3      	ldr	r3, [r4, #8]
 800d3e2:	bf0c      	ite	eq
 800d3e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3e8:	2500      	movne	r5, #0
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	bfc4      	itt	gt
 800d3ee:	1a9b      	subgt	r3, r3, r2
 800d3f0:	18ed      	addgt	r5, r5, r3
 800d3f2:	2600      	movs	r6, #0
 800d3f4:	341a      	adds	r4, #26
 800d3f6:	42b5      	cmp	r5, r6
 800d3f8:	d11a      	bne.n	800d430 <_printf_common+0xc8>
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	e008      	b.n	800d410 <_printf_common+0xa8>
 800d3fe:	2301      	movs	r3, #1
 800d400:	4652      	mov	r2, sl
 800d402:	4641      	mov	r1, r8
 800d404:	4638      	mov	r0, r7
 800d406:	47c8      	blx	r9
 800d408:	3001      	adds	r0, #1
 800d40a:	d103      	bne.n	800d414 <_printf_common+0xac>
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295
 800d410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d414:	3501      	adds	r5, #1
 800d416:	e7c6      	b.n	800d3a6 <_printf_common+0x3e>
 800d418:	18e1      	adds	r1, r4, r3
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	2030      	movs	r0, #48	@ 0x30
 800d41e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d422:	4422      	add	r2, r4
 800d424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d42c:	3302      	adds	r3, #2
 800d42e:	e7c7      	b.n	800d3c0 <_printf_common+0x58>
 800d430:	2301      	movs	r3, #1
 800d432:	4622      	mov	r2, r4
 800d434:	4641      	mov	r1, r8
 800d436:	4638      	mov	r0, r7
 800d438:	47c8      	blx	r9
 800d43a:	3001      	adds	r0, #1
 800d43c:	d0e6      	beq.n	800d40c <_printf_common+0xa4>
 800d43e:	3601      	adds	r6, #1
 800d440:	e7d9      	b.n	800d3f6 <_printf_common+0x8e>
	...

0800d444 <_printf_i>:
 800d444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d448:	7e0f      	ldrb	r7, [r1, #24]
 800d44a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d44c:	2f78      	cmp	r7, #120	@ 0x78
 800d44e:	4691      	mov	r9, r2
 800d450:	4680      	mov	r8, r0
 800d452:	460c      	mov	r4, r1
 800d454:	469a      	mov	sl, r3
 800d456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d45a:	d807      	bhi.n	800d46c <_printf_i+0x28>
 800d45c:	2f62      	cmp	r7, #98	@ 0x62
 800d45e:	d80a      	bhi.n	800d476 <_printf_i+0x32>
 800d460:	2f00      	cmp	r7, #0
 800d462:	f000 80d2 	beq.w	800d60a <_printf_i+0x1c6>
 800d466:	2f58      	cmp	r7, #88	@ 0x58
 800d468:	f000 80b9 	beq.w	800d5de <_printf_i+0x19a>
 800d46c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d474:	e03a      	b.n	800d4ec <_printf_i+0xa8>
 800d476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d47a:	2b15      	cmp	r3, #21
 800d47c:	d8f6      	bhi.n	800d46c <_printf_i+0x28>
 800d47e:	a101      	add	r1, pc, #4	@ (adr r1, 800d484 <_printf_i+0x40>)
 800d480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d484:	0800d4dd 	.word	0x0800d4dd
 800d488:	0800d4f1 	.word	0x0800d4f1
 800d48c:	0800d46d 	.word	0x0800d46d
 800d490:	0800d46d 	.word	0x0800d46d
 800d494:	0800d46d 	.word	0x0800d46d
 800d498:	0800d46d 	.word	0x0800d46d
 800d49c:	0800d4f1 	.word	0x0800d4f1
 800d4a0:	0800d46d 	.word	0x0800d46d
 800d4a4:	0800d46d 	.word	0x0800d46d
 800d4a8:	0800d46d 	.word	0x0800d46d
 800d4ac:	0800d46d 	.word	0x0800d46d
 800d4b0:	0800d5f1 	.word	0x0800d5f1
 800d4b4:	0800d51b 	.word	0x0800d51b
 800d4b8:	0800d5ab 	.word	0x0800d5ab
 800d4bc:	0800d46d 	.word	0x0800d46d
 800d4c0:	0800d46d 	.word	0x0800d46d
 800d4c4:	0800d613 	.word	0x0800d613
 800d4c8:	0800d46d 	.word	0x0800d46d
 800d4cc:	0800d51b 	.word	0x0800d51b
 800d4d0:	0800d46d 	.word	0x0800d46d
 800d4d4:	0800d46d 	.word	0x0800d46d
 800d4d8:	0800d5b3 	.word	0x0800d5b3
 800d4dc:	6833      	ldr	r3, [r6, #0]
 800d4de:	1d1a      	adds	r2, r3, #4
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	6032      	str	r2, [r6, #0]
 800d4e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e09d      	b.n	800d62c <_printf_i+0x1e8>
 800d4f0:	6833      	ldr	r3, [r6, #0]
 800d4f2:	6820      	ldr	r0, [r4, #0]
 800d4f4:	1d19      	adds	r1, r3, #4
 800d4f6:	6031      	str	r1, [r6, #0]
 800d4f8:	0606      	lsls	r6, r0, #24
 800d4fa:	d501      	bpl.n	800d500 <_printf_i+0xbc>
 800d4fc:	681d      	ldr	r5, [r3, #0]
 800d4fe:	e003      	b.n	800d508 <_printf_i+0xc4>
 800d500:	0645      	lsls	r5, r0, #25
 800d502:	d5fb      	bpl.n	800d4fc <_printf_i+0xb8>
 800d504:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d508:	2d00      	cmp	r5, #0
 800d50a:	da03      	bge.n	800d514 <_printf_i+0xd0>
 800d50c:	232d      	movs	r3, #45	@ 0x2d
 800d50e:	426d      	negs	r5, r5
 800d510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d514:	4859      	ldr	r0, [pc, #356]	@ (800d67c <_printf_i+0x238>)
 800d516:	230a      	movs	r3, #10
 800d518:	e011      	b.n	800d53e <_printf_i+0xfa>
 800d51a:	6821      	ldr	r1, [r4, #0]
 800d51c:	6833      	ldr	r3, [r6, #0]
 800d51e:	0608      	lsls	r0, r1, #24
 800d520:	f853 5b04 	ldr.w	r5, [r3], #4
 800d524:	d402      	bmi.n	800d52c <_printf_i+0xe8>
 800d526:	0649      	lsls	r1, r1, #25
 800d528:	bf48      	it	mi
 800d52a:	b2ad      	uxthmi	r5, r5
 800d52c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d52e:	4853      	ldr	r0, [pc, #332]	@ (800d67c <_printf_i+0x238>)
 800d530:	6033      	str	r3, [r6, #0]
 800d532:	bf14      	ite	ne
 800d534:	230a      	movne	r3, #10
 800d536:	2308      	moveq	r3, #8
 800d538:	2100      	movs	r1, #0
 800d53a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d53e:	6866      	ldr	r6, [r4, #4]
 800d540:	60a6      	str	r6, [r4, #8]
 800d542:	2e00      	cmp	r6, #0
 800d544:	bfa2      	ittt	ge
 800d546:	6821      	ldrge	r1, [r4, #0]
 800d548:	f021 0104 	bicge.w	r1, r1, #4
 800d54c:	6021      	strge	r1, [r4, #0]
 800d54e:	b90d      	cbnz	r5, 800d554 <_printf_i+0x110>
 800d550:	2e00      	cmp	r6, #0
 800d552:	d04b      	beq.n	800d5ec <_printf_i+0x1a8>
 800d554:	4616      	mov	r6, r2
 800d556:	fbb5 f1f3 	udiv	r1, r5, r3
 800d55a:	fb03 5711 	mls	r7, r3, r1, r5
 800d55e:	5dc7      	ldrb	r7, [r0, r7]
 800d560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d564:	462f      	mov	r7, r5
 800d566:	42bb      	cmp	r3, r7
 800d568:	460d      	mov	r5, r1
 800d56a:	d9f4      	bls.n	800d556 <_printf_i+0x112>
 800d56c:	2b08      	cmp	r3, #8
 800d56e:	d10b      	bne.n	800d588 <_printf_i+0x144>
 800d570:	6823      	ldr	r3, [r4, #0]
 800d572:	07df      	lsls	r7, r3, #31
 800d574:	d508      	bpl.n	800d588 <_printf_i+0x144>
 800d576:	6923      	ldr	r3, [r4, #16]
 800d578:	6861      	ldr	r1, [r4, #4]
 800d57a:	4299      	cmp	r1, r3
 800d57c:	bfde      	ittt	le
 800d57e:	2330      	movle	r3, #48	@ 0x30
 800d580:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d584:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d588:	1b92      	subs	r2, r2, r6
 800d58a:	6122      	str	r2, [r4, #16]
 800d58c:	f8cd a000 	str.w	sl, [sp]
 800d590:	464b      	mov	r3, r9
 800d592:	aa03      	add	r2, sp, #12
 800d594:	4621      	mov	r1, r4
 800d596:	4640      	mov	r0, r8
 800d598:	f7ff fee6 	bl	800d368 <_printf_common>
 800d59c:	3001      	adds	r0, #1
 800d59e:	d14a      	bne.n	800d636 <_printf_i+0x1f2>
 800d5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a4:	b004      	add	sp, #16
 800d5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	f043 0320 	orr.w	r3, r3, #32
 800d5b0:	6023      	str	r3, [r4, #0]
 800d5b2:	4833      	ldr	r0, [pc, #204]	@ (800d680 <_printf_i+0x23c>)
 800d5b4:	2778      	movs	r7, #120	@ 0x78
 800d5b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	6831      	ldr	r1, [r6, #0]
 800d5be:	061f      	lsls	r7, r3, #24
 800d5c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5c4:	d402      	bmi.n	800d5cc <_printf_i+0x188>
 800d5c6:	065f      	lsls	r7, r3, #25
 800d5c8:	bf48      	it	mi
 800d5ca:	b2ad      	uxthmi	r5, r5
 800d5cc:	6031      	str	r1, [r6, #0]
 800d5ce:	07d9      	lsls	r1, r3, #31
 800d5d0:	bf44      	itt	mi
 800d5d2:	f043 0320 	orrmi.w	r3, r3, #32
 800d5d6:	6023      	strmi	r3, [r4, #0]
 800d5d8:	b11d      	cbz	r5, 800d5e2 <_printf_i+0x19e>
 800d5da:	2310      	movs	r3, #16
 800d5dc:	e7ac      	b.n	800d538 <_printf_i+0xf4>
 800d5de:	4827      	ldr	r0, [pc, #156]	@ (800d67c <_printf_i+0x238>)
 800d5e0:	e7e9      	b.n	800d5b6 <_printf_i+0x172>
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	f023 0320 	bic.w	r3, r3, #32
 800d5e8:	6023      	str	r3, [r4, #0]
 800d5ea:	e7f6      	b.n	800d5da <_printf_i+0x196>
 800d5ec:	4616      	mov	r6, r2
 800d5ee:	e7bd      	b.n	800d56c <_printf_i+0x128>
 800d5f0:	6833      	ldr	r3, [r6, #0]
 800d5f2:	6825      	ldr	r5, [r4, #0]
 800d5f4:	6961      	ldr	r1, [r4, #20]
 800d5f6:	1d18      	adds	r0, r3, #4
 800d5f8:	6030      	str	r0, [r6, #0]
 800d5fa:	062e      	lsls	r6, r5, #24
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	d501      	bpl.n	800d604 <_printf_i+0x1c0>
 800d600:	6019      	str	r1, [r3, #0]
 800d602:	e002      	b.n	800d60a <_printf_i+0x1c6>
 800d604:	0668      	lsls	r0, r5, #25
 800d606:	d5fb      	bpl.n	800d600 <_printf_i+0x1bc>
 800d608:	8019      	strh	r1, [r3, #0]
 800d60a:	2300      	movs	r3, #0
 800d60c:	6123      	str	r3, [r4, #16]
 800d60e:	4616      	mov	r6, r2
 800d610:	e7bc      	b.n	800d58c <_printf_i+0x148>
 800d612:	6833      	ldr	r3, [r6, #0]
 800d614:	1d1a      	adds	r2, r3, #4
 800d616:	6032      	str	r2, [r6, #0]
 800d618:	681e      	ldr	r6, [r3, #0]
 800d61a:	6862      	ldr	r2, [r4, #4]
 800d61c:	2100      	movs	r1, #0
 800d61e:	4630      	mov	r0, r6
 800d620:	f7f2 fdd6 	bl	80001d0 <memchr>
 800d624:	b108      	cbz	r0, 800d62a <_printf_i+0x1e6>
 800d626:	1b80      	subs	r0, r0, r6
 800d628:	6060      	str	r0, [r4, #4]
 800d62a:	6863      	ldr	r3, [r4, #4]
 800d62c:	6123      	str	r3, [r4, #16]
 800d62e:	2300      	movs	r3, #0
 800d630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d634:	e7aa      	b.n	800d58c <_printf_i+0x148>
 800d636:	6923      	ldr	r3, [r4, #16]
 800d638:	4632      	mov	r2, r6
 800d63a:	4649      	mov	r1, r9
 800d63c:	4640      	mov	r0, r8
 800d63e:	47d0      	blx	sl
 800d640:	3001      	adds	r0, #1
 800d642:	d0ad      	beq.n	800d5a0 <_printf_i+0x15c>
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	079b      	lsls	r3, r3, #30
 800d648:	d413      	bmi.n	800d672 <_printf_i+0x22e>
 800d64a:	68e0      	ldr	r0, [r4, #12]
 800d64c:	9b03      	ldr	r3, [sp, #12]
 800d64e:	4298      	cmp	r0, r3
 800d650:	bfb8      	it	lt
 800d652:	4618      	movlt	r0, r3
 800d654:	e7a6      	b.n	800d5a4 <_printf_i+0x160>
 800d656:	2301      	movs	r3, #1
 800d658:	4632      	mov	r2, r6
 800d65a:	4649      	mov	r1, r9
 800d65c:	4640      	mov	r0, r8
 800d65e:	47d0      	blx	sl
 800d660:	3001      	adds	r0, #1
 800d662:	d09d      	beq.n	800d5a0 <_printf_i+0x15c>
 800d664:	3501      	adds	r5, #1
 800d666:	68e3      	ldr	r3, [r4, #12]
 800d668:	9903      	ldr	r1, [sp, #12]
 800d66a:	1a5b      	subs	r3, r3, r1
 800d66c:	42ab      	cmp	r3, r5
 800d66e:	dcf2      	bgt.n	800d656 <_printf_i+0x212>
 800d670:	e7eb      	b.n	800d64a <_printf_i+0x206>
 800d672:	2500      	movs	r5, #0
 800d674:	f104 0619 	add.w	r6, r4, #25
 800d678:	e7f5      	b.n	800d666 <_printf_i+0x222>
 800d67a:	bf00      	nop
 800d67c:	0800fa25 	.word	0x0800fa25
 800d680:	0800fa36 	.word	0x0800fa36

0800d684 <std>:
 800d684:	2300      	movs	r3, #0
 800d686:	b510      	push	{r4, lr}
 800d688:	4604      	mov	r4, r0
 800d68a:	e9c0 3300 	strd	r3, r3, [r0]
 800d68e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d692:	6083      	str	r3, [r0, #8]
 800d694:	8181      	strh	r1, [r0, #12]
 800d696:	6643      	str	r3, [r0, #100]	@ 0x64
 800d698:	81c2      	strh	r2, [r0, #14]
 800d69a:	6183      	str	r3, [r0, #24]
 800d69c:	4619      	mov	r1, r3
 800d69e:	2208      	movs	r2, #8
 800d6a0:	305c      	adds	r0, #92	@ 0x5c
 800d6a2:	f000 f9f9 	bl	800da98 <memset>
 800d6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6dc <std+0x58>)
 800d6a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e0 <std+0x5c>)
 800d6ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e4 <std+0x60>)
 800d6b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e8 <std+0x64>)
 800d6b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6ec <std+0x68>)
 800d6b8:	6224      	str	r4, [r4, #32]
 800d6ba:	429c      	cmp	r4, r3
 800d6bc:	d006      	beq.n	800d6cc <std+0x48>
 800d6be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d6c2:	4294      	cmp	r4, r2
 800d6c4:	d002      	beq.n	800d6cc <std+0x48>
 800d6c6:	33d0      	adds	r3, #208	@ 0xd0
 800d6c8:	429c      	cmp	r4, r3
 800d6ca:	d105      	bne.n	800d6d8 <std+0x54>
 800d6cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d4:	f000 ba5c 	b.w	800db90 <__retarget_lock_init_recursive>
 800d6d8:	bd10      	pop	{r4, pc}
 800d6da:	bf00      	nop
 800d6dc:	0800d8e9 	.word	0x0800d8e9
 800d6e0:	0800d90b 	.word	0x0800d90b
 800d6e4:	0800d943 	.word	0x0800d943
 800d6e8:	0800d967 	.word	0x0800d967
 800d6ec:	20004974 	.word	0x20004974

0800d6f0 <stdio_exit_handler>:
 800d6f0:	4a02      	ldr	r2, [pc, #8]	@ (800d6fc <stdio_exit_handler+0xc>)
 800d6f2:	4903      	ldr	r1, [pc, #12]	@ (800d700 <stdio_exit_handler+0x10>)
 800d6f4:	4803      	ldr	r0, [pc, #12]	@ (800d704 <stdio_exit_handler+0x14>)
 800d6f6:	f000 b869 	b.w	800d7cc <_fwalk_sglue>
 800d6fa:	bf00      	nop
 800d6fc:	20000060 	.word	0x20000060
 800d700:	0800f519 	.word	0x0800f519
 800d704:	20000070 	.word	0x20000070

0800d708 <cleanup_stdio>:
 800d708:	6841      	ldr	r1, [r0, #4]
 800d70a:	4b0c      	ldr	r3, [pc, #48]	@ (800d73c <cleanup_stdio+0x34>)
 800d70c:	4299      	cmp	r1, r3
 800d70e:	b510      	push	{r4, lr}
 800d710:	4604      	mov	r4, r0
 800d712:	d001      	beq.n	800d718 <cleanup_stdio+0x10>
 800d714:	f001 ff00 	bl	800f518 <_fflush_r>
 800d718:	68a1      	ldr	r1, [r4, #8]
 800d71a:	4b09      	ldr	r3, [pc, #36]	@ (800d740 <cleanup_stdio+0x38>)
 800d71c:	4299      	cmp	r1, r3
 800d71e:	d002      	beq.n	800d726 <cleanup_stdio+0x1e>
 800d720:	4620      	mov	r0, r4
 800d722:	f001 fef9 	bl	800f518 <_fflush_r>
 800d726:	68e1      	ldr	r1, [r4, #12]
 800d728:	4b06      	ldr	r3, [pc, #24]	@ (800d744 <cleanup_stdio+0x3c>)
 800d72a:	4299      	cmp	r1, r3
 800d72c:	d004      	beq.n	800d738 <cleanup_stdio+0x30>
 800d72e:	4620      	mov	r0, r4
 800d730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d734:	f001 bef0 	b.w	800f518 <_fflush_r>
 800d738:	bd10      	pop	{r4, pc}
 800d73a:	bf00      	nop
 800d73c:	20004974 	.word	0x20004974
 800d740:	200049dc 	.word	0x200049dc
 800d744:	20004a44 	.word	0x20004a44

0800d748 <global_stdio_init.part.0>:
 800d748:	b510      	push	{r4, lr}
 800d74a:	4b0b      	ldr	r3, [pc, #44]	@ (800d778 <global_stdio_init.part.0+0x30>)
 800d74c:	4c0b      	ldr	r4, [pc, #44]	@ (800d77c <global_stdio_init.part.0+0x34>)
 800d74e:	4a0c      	ldr	r2, [pc, #48]	@ (800d780 <global_stdio_init.part.0+0x38>)
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	4620      	mov	r0, r4
 800d754:	2200      	movs	r2, #0
 800d756:	2104      	movs	r1, #4
 800d758:	f7ff ff94 	bl	800d684 <std>
 800d75c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d760:	2201      	movs	r2, #1
 800d762:	2109      	movs	r1, #9
 800d764:	f7ff ff8e 	bl	800d684 <std>
 800d768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d76c:	2202      	movs	r2, #2
 800d76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d772:	2112      	movs	r1, #18
 800d774:	f7ff bf86 	b.w	800d684 <std>
 800d778:	20004aac 	.word	0x20004aac
 800d77c:	20004974 	.word	0x20004974
 800d780:	0800d6f1 	.word	0x0800d6f1

0800d784 <__sfp_lock_acquire>:
 800d784:	4801      	ldr	r0, [pc, #4]	@ (800d78c <__sfp_lock_acquire+0x8>)
 800d786:	f000 ba04 	b.w	800db92 <__retarget_lock_acquire_recursive>
 800d78a:	bf00      	nop
 800d78c:	20004ab5 	.word	0x20004ab5

0800d790 <__sfp_lock_release>:
 800d790:	4801      	ldr	r0, [pc, #4]	@ (800d798 <__sfp_lock_release+0x8>)
 800d792:	f000 b9ff 	b.w	800db94 <__retarget_lock_release_recursive>
 800d796:	bf00      	nop
 800d798:	20004ab5 	.word	0x20004ab5

0800d79c <__sinit>:
 800d79c:	b510      	push	{r4, lr}
 800d79e:	4604      	mov	r4, r0
 800d7a0:	f7ff fff0 	bl	800d784 <__sfp_lock_acquire>
 800d7a4:	6a23      	ldr	r3, [r4, #32]
 800d7a6:	b11b      	cbz	r3, 800d7b0 <__sinit+0x14>
 800d7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ac:	f7ff bff0 	b.w	800d790 <__sfp_lock_release>
 800d7b0:	4b04      	ldr	r3, [pc, #16]	@ (800d7c4 <__sinit+0x28>)
 800d7b2:	6223      	str	r3, [r4, #32]
 800d7b4:	4b04      	ldr	r3, [pc, #16]	@ (800d7c8 <__sinit+0x2c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f5      	bne.n	800d7a8 <__sinit+0xc>
 800d7bc:	f7ff ffc4 	bl	800d748 <global_stdio_init.part.0>
 800d7c0:	e7f2      	b.n	800d7a8 <__sinit+0xc>
 800d7c2:	bf00      	nop
 800d7c4:	0800d709 	.word	0x0800d709
 800d7c8:	20004aac 	.word	0x20004aac

0800d7cc <_fwalk_sglue>:
 800d7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	4688      	mov	r8, r1
 800d7d4:	4614      	mov	r4, r2
 800d7d6:	2600      	movs	r6, #0
 800d7d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7dc:	f1b9 0901 	subs.w	r9, r9, #1
 800d7e0:	d505      	bpl.n	800d7ee <_fwalk_sglue+0x22>
 800d7e2:	6824      	ldr	r4, [r4, #0]
 800d7e4:	2c00      	cmp	r4, #0
 800d7e6:	d1f7      	bne.n	800d7d8 <_fwalk_sglue+0xc>
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ee:	89ab      	ldrh	r3, [r5, #12]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d907      	bls.n	800d804 <_fwalk_sglue+0x38>
 800d7f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	d003      	beq.n	800d804 <_fwalk_sglue+0x38>
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	4638      	mov	r0, r7
 800d800:	47c0      	blx	r8
 800d802:	4306      	orrs	r6, r0
 800d804:	3568      	adds	r5, #104	@ 0x68
 800d806:	e7e9      	b.n	800d7dc <_fwalk_sglue+0x10>

0800d808 <iprintf>:
 800d808:	b40f      	push	{r0, r1, r2, r3}
 800d80a:	b507      	push	{r0, r1, r2, lr}
 800d80c:	4906      	ldr	r1, [pc, #24]	@ (800d828 <iprintf+0x20>)
 800d80e:	ab04      	add	r3, sp, #16
 800d810:	6808      	ldr	r0, [r1, #0]
 800d812:	f853 2b04 	ldr.w	r2, [r3], #4
 800d816:	6881      	ldr	r1, [r0, #8]
 800d818:	9301      	str	r3, [sp, #4]
 800d81a:	f001 fce1 	bl	800f1e0 <_vfiprintf_r>
 800d81e:	b003      	add	sp, #12
 800d820:	f85d eb04 	ldr.w	lr, [sp], #4
 800d824:	b004      	add	sp, #16
 800d826:	4770      	bx	lr
 800d828:	2000006c 	.word	0x2000006c

0800d82c <_puts_r>:
 800d82c:	6a03      	ldr	r3, [r0, #32]
 800d82e:	b570      	push	{r4, r5, r6, lr}
 800d830:	6884      	ldr	r4, [r0, #8]
 800d832:	4605      	mov	r5, r0
 800d834:	460e      	mov	r6, r1
 800d836:	b90b      	cbnz	r3, 800d83c <_puts_r+0x10>
 800d838:	f7ff ffb0 	bl	800d79c <__sinit>
 800d83c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d83e:	07db      	lsls	r3, r3, #31
 800d840:	d405      	bmi.n	800d84e <_puts_r+0x22>
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	0598      	lsls	r0, r3, #22
 800d846:	d402      	bmi.n	800d84e <_puts_r+0x22>
 800d848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d84a:	f000 f9a2 	bl	800db92 <__retarget_lock_acquire_recursive>
 800d84e:	89a3      	ldrh	r3, [r4, #12]
 800d850:	0719      	lsls	r1, r3, #28
 800d852:	d502      	bpl.n	800d85a <_puts_r+0x2e>
 800d854:	6923      	ldr	r3, [r4, #16]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d135      	bne.n	800d8c6 <_puts_r+0x9a>
 800d85a:	4621      	mov	r1, r4
 800d85c:	4628      	mov	r0, r5
 800d85e:	f000 f8c5 	bl	800d9ec <__swsetup_r>
 800d862:	b380      	cbz	r0, 800d8c6 <_puts_r+0x9a>
 800d864:	f04f 35ff 	mov.w	r5, #4294967295
 800d868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d86a:	07da      	lsls	r2, r3, #31
 800d86c:	d405      	bmi.n	800d87a <_puts_r+0x4e>
 800d86e:	89a3      	ldrh	r3, [r4, #12]
 800d870:	059b      	lsls	r3, r3, #22
 800d872:	d402      	bmi.n	800d87a <_puts_r+0x4e>
 800d874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d876:	f000 f98d 	bl	800db94 <__retarget_lock_release_recursive>
 800d87a:	4628      	mov	r0, r5
 800d87c:	bd70      	pop	{r4, r5, r6, pc}
 800d87e:	2b00      	cmp	r3, #0
 800d880:	da04      	bge.n	800d88c <_puts_r+0x60>
 800d882:	69a2      	ldr	r2, [r4, #24]
 800d884:	429a      	cmp	r2, r3
 800d886:	dc17      	bgt.n	800d8b8 <_puts_r+0x8c>
 800d888:	290a      	cmp	r1, #10
 800d88a:	d015      	beq.n	800d8b8 <_puts_r+0x8c>
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	6022      	str	r2, [r4, #0]
 800d892:	7019      	strb	r1, [r3, #0]
 800d894:	68a3      	ldr	r3, [r4, #8]
 800d896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d89a:	3b01      	subs	r3, #1
 800d89c:	60a3      	str	r3, [r4, #8]
 800d89e:	2900      	cmp	r1, #0
 800d8a0:	d1ed      	bne.n	800d87e <_puts_r+0x52>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	da11      	bge.n	800d8ca <_puts_r+0x9e>
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	210a      	movs	r1, #10
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f000 f85f 	bl	800d96e <__swbuf_r>
 800d8b0:	3001      	adds	r0, #1
 800d8b2:	d0d7      	beq.n	800d864 <_puts_r+0x38>
 800d8b4:	250a      	movs	r5, #10
 800d8b6:	e7d7      	b.n	800d868 <_puts_r+0x3c>
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f000 f857 	bl	800d96e <__swbuf_r>
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d1e7      	bne.n	800d894 <_puts_r+0x68>
 800d8c4:	e7ce      	b.n	800d864 <_puts_r+0x38>
 800d8c6:	3e01      	subs	r6, #1
 800d8c8:	e7e4      	b.n	800d894 <_puts_r+0x68>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	1c5a      	adds	r2, r3, #1
 800d8ce:	6022      	str	r2, [r4, #0]
 800d8d0:	220a      	movs	r2, #10
 800d8d2:	701a      	strb	r2, [r3, #0]
 800d8d4:	e7ee      	b.n	800d8b4 <_puts_r+0x88>
	...

0800d8d8 <puts>:
 800d8d8:	4b02      	ldr	r3, [pc, #8]	@ (800d8e4 <puts+0xc>)
 800d8da:	4601      	mov	r1, r0
 800d8dc:	6818      	ldr	r0, [r3, #0]
 800d8de:	f7ff bfa5 	b.w	800d82c <_puts_r>
 800d8e2:	bf00      	nop
 800d8e4:	2000006c 	.word	0x2000006c

0800d8e8 <__sread>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f0:	f000 f900 	bl	800daf4 <_read_r>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	bfab      	itete	ge
 800d8f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d8fa:	89a3      	ldrhlt	r3, [r4, #12]
 800d8fc:	181b      	addge	r3, r3, r0
 800d8fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d902:	bfac      	ite	ge
 800d904:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d906:	81a3      	strhlt	r3, [r4, #12]
 800d908:	bd10      	pop	{r4, pc}

0800d90a <__swrite>:
 800d90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90e:	461f      	mov	r7, r3
 800d910:	898b      	ldrh	r3, [r1, #12]
 800d912:	05db      	lsls	r3, r3, #23
 800d914:	4605      	mov	r5, r0
 800d916:	460c      	mov	r4, r1
 800d918:	4616      	mov	r6, r2
 800d91a:	d505      	bpl.n	800d928 <__swrite+0x1e>
 800d91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d920:	2302      	movs	r3, #2
 800d922:	2200      	movs	r2, #0
 800d924:	f000 f8d4 	bl	800dad0 <_lseek_r>
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d92e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	4628      	mov	r0, r5
 800d93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d93e:	f000 b8eb 	b.w	800db18 <_write_r>

0800d942 <__sseek>:
 800d942:	b510      	push	{r4, lr}
 800d944:	460c      	mov	r4, r1
 800d946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d94a:	f000 f8c1 	bl	800dad0 <_lseek_r>
 800d94e:	1c43      	adds	r3, r0, #1
 800d950:	89a3      	ldrh	r3, [r4, #12]
 800d952:	bf15      	itete	ne
 800d954:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d95a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d95e:	81a3      	strheq	r3, [r4, #12]
 800d960:	bf18      	it	ne
 800d962:	81a3      	strhne	r3, [r4, #12]
 800d964:	bd10      	pop	{r4, pc}

0800d966 <__sclose>:
 800d966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d96a:	f000 b8a1 	b.w	800dab0 <_close_r>

0800d96e <__swbuf_r>:
 800d96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d970:	460e      	mov	r6, r1
 800d972:	4614      	mov	r4, r2
 800d974:	4605      	mov	r5, r0
 800d976:	b118      	cbz	r0, 800d980 <__swbuf_r+0x12>
 800d978:	6a03      	ldr	r3, [r0, #32]
 800d97a:	b90b      	cbnz	r3, 800d980 <__swbuf_r+0x12>
 800d97c:	f7ff ff0e 	bl	800d79c <__sinit>
 800d980:	69a3      	ldr	r3, [r4, #24]
 800d982:	60a3      	str	r3, [r4, #8]
 800d984:	89a3      	ldrh	r3, [r4, #12]
 800d986:	071a      	lsls	r2, r3, #28
 800d988:	d501      	bpl.n	800d98e <__swbuf_r+0x20>
 800d98a:	6923      	ldr	r3, [r4, #16]
 800d98c:	b943      	cbnz	r3, 800d9a0 <__swbuf_r+0x32>
 800d98e:	4621      	mov	r1, r4
 800d990:	4628      	mov	r0, r5
 800d992:	f000 f82b 	bl	800d9ec <__swsetup_r>
 800d996:	b118      	cbz	r0, 800d9a0 <__swbuf_r+0x32>
 800d998:	f04f 37ff 	mov.w	r7, #4294967295
 800d99c:	4638      	mov	r0, r7
 800d99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	6922      	ldr	r2, [r4, #16]
 800d9a4:	1a98      	subs	r0, r3, r2
 800d9a6:	6963      	ldr	r3, [r4, #20]
 800d9a8:	b2f6      	uxtb	r6, r6
 800d9aa:	4283      	cmp	r3, r0
 800d9ac:	4637      	mov	r7, r6
 800d9ae:	dc05      	bgt.n	800d9bc <__swbuf_r+0x4e>
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f001 fdb0 	bl	800f518 <_fflush_r>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d1ed      	bne.n	800d998 <__swbuf_r+0x2a>
 800d9bc:	68a3      	ldr	r3, [r4, #8]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	60a3      	str	r3, [r4, #8]
 800d9c2:	6823      	ldr	r3, [r4, #0]
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	6022      	str	r2, [r4, #0]
 800d9c8:	701e      	strb	r6, [r3, #0]
 800d9ca:	6962      	ldr	r2, [r4, #20]
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d004      	beq.n	800d9dc <__swbuf_r+0x6e>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	07db      	lsls	r3, r3, #31
 800d9d6:	d5e1      	bpl.n	800d99c <__swbuf_r+0x2e>
 800d9d8:	2e0a      	cmp	r6, #10
 800d9da:	d1df      	bne.n	800d99c <__swbuf_r+0x2e>
 800d9dc:	4621      	mov	r1, r4
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f001 fd9a 	bl	800f518 <_fflush_r>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d0d9      	beq.n	800d99c <__swbuf_r+0x2e>
 800d9e8:	e7d6      	b.n	800d998 <__swbuf_r+0x2a>
	...

0800d9ec <__swsetup_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4b29      	ldr	r3, [pc, #164]	@ (800da94 <__swsetup_r+0xa8>)
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	6818      	ldr	r0, [r3, #0]
 800d9f4:	460c      	mov	r4, r1
 800d9f6:	b118      	cbz	r0, 800da00 <__swsetup_r+0x14>
 800d9f8:	6a03      	ldr	r3, [r0, #32]
 800d9fa:	b90b      	cbnz	r3, 800da00 <__swsetup_r+0x14>
 800d9fc:	f7ff fece 	bl	800d79c <__sinit>
 800da00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da04:	0719      	lsls	r1, r3, #28
 800da06:	d422      	bmi.n	800da4e <__swsetup_r+0x62>
 800da08:	06da      	lsls	r2, r3, #27
 800da0a:	d407      	bmi.n	800da1c <__swsetup_r+0x30>
 800da0c:	2209      	movs	r2, #9
 800da0e:	602a      	str	r2, [r5, #0]
 800da10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da14:	81a3      	strh	r3, [r4, #12]
 800da16:	f04f 30ff 	mov.w	r0, #4294967295
 800da1a:	e033      	b.n	800da84 <__swsetup_r+0x98>
 800da1c:	0758      	lsls	r0, r3, #29
 800da1e:	d512      	bpl.n	800da46 <__swsetup_r+0x5a>
 800da20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da22:	b141      	cbz	r1, 800da36 <__swsetup_r+0x4a>
 800da24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da28:	4299      	cmp	r1, r3
 800da2a:	d002      	beq.n	800da32 <__swsetup_r+0x46>
 800da2c:	4628      	mov	r0, r5
 800da2e:	f000 ff2b 	bl	800e888 <_free_r>
 800da32:	2300      	movs	r3, #0
 800da34:	6363      	str	r3, [r4, #52]	@ 0x34
 800da36:	89a3      	ldrh	r3, [r4, #12]
 800da38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da3c:	81a3      	strh	r3, [r4, #12]
 800da3e:	2300      	movs	r3, #0
 800da40:	6063      	str	r3, [r4, #4]
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	89a3      	ldrh	r3, [r4, #12]
 800da48:	f043 0308 	orr.w	r3, r3, #8
 800da4c:	81a3      	strh	r3, [r4, #12]
 800da4e:	6923      	ldr	r3, [r4, #16]
 800da50:	b94b      	cbnz	r3, 800da66 <__swsetup_r+0x7a>
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da5c:	d003      	beq.n	800da66 <__swsetup_r+0x7a>
 800da5e:	4621      	mov	r1, r4
 800da60:	4628      	mov	r0, r5
 800da62:	f001 fdb9 	bl	800f5d8 <__smakebuf_r>
 800da66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da6a:	f013 0201 	ands.w	r2, r3, #1
 800da6e:	d00a      	beq.n	800da86 <__swsetup_r+0x9a>
 800da70:	2200      	movs	r2, #0
 800da72:	60a2      	str	r2, [r4, #8]
 800da74:	6962      	ldr	r2, [r4, #20]
 800da76:	4252      	negs	r2, r2
 800da78:	61a2      	str	r2, [r4, #24]
 800da7a:	6922      	ldr	r2, [r4, #16]
 800da7c:	b942      	cbnz	r2, 800da90 <__swsetup_r+0xa4>
 800da7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da82:	d1c5      	bne.n	800da10 <__swsetup_r+0x24>
 800da84:	bd38      	pop	{r3, r4, r5, pc}
 800da86:	0799      	lsls	r1, r3, #30
 800da88:	bf58      	it	pl
 800da8a:	6962      	ldrpl	r2, [r4, #20]
 800da8c:	60a2      	str	r2, [r4, #8]
 800da8e:	e7f4      	b.n	800da7a <__swsetup_r+0x8e>
 800da90:	2000      	movs	r0, #0
 800da92:	e7f7      	b.n	800da84 <__swsetup_r+0x98>
 800da94:	2000006c 	.word	0x2000006c

0800da98 <memset>:
 800da98:	4402      	add	r2, r0
 800da9a:	4603      	mov	r3, r0
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d100      	bne.n	800daa2 <memset+0xa>
 800daa0:	4770      	bx	lr
 800daa2:	f803 1b01 	strb.w	r1, [r3], #1
 800daa6:	e7f9      	b.n	800da9c <memset+0x4>

0800daa8 <_localeconv_r>:
 800daa8:	4800      	ldr	r0, [pc, #0]	@ (800daac <_localeconv_r+0x4>)
 800daaa:	4770      	bx	lr
 800daac:	200001ac 	.word	0x200001ac

0800dab0 <_close_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d06      	ldr	r5, [pc, #24]	@ (800dacc <_close_r+0x1c>)
 800dab4:	2300      	movs	r3, #0
 800dab6:	4604      	mov	r4, r0
 800dab8:	4608      	mov	r0, r1
 800daba:	602b      	str	r3, [r5, #0]
 800dabc:	f7f5 f82c 	bl	8002b18 <_close>
 800dac0:	1c43      	adds	r3, r0, #1
 800dac2:	d102      	bne.n	800daca <_close_r+0x1a>
 800dac4:	682b      	ldr	r3, [r5, #0]
 800dac6:	b103      	cbz	r3, 800daca <_close_r+0x1a>
 800dac8:	6023      	str	r3, [r4, #0]
 800daca:	bd38      	pop	{r3, r4, r5, pc}
 800dacc:	20004ab0 	.word	0x20004ab0

0800dad0 <_lseek_r>:
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4d07      	ldr	r5, [pc, #28]	@ (800daf0 <_lseek_r+0x20>)
 800dad4:	4604      	mov	r4, r0
 800dad6:	4608      	mov	r0, r1
 800dad8:	4611      	mov	r1, r2
 800dada:	2200      	movs	r2, #0
 800dadc:	602a      	str	r2, [r5, #0]
 800dade:	461a      	mov	r2, r3
 800dae0:	f7f5 f841 	bl	8002b66 <_lseek>
 800dae4:	1c43      	adds	r3, r0, #1
 800dae6:	d102      	bne.n	800daee <_lseek_r+0x1e>
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	b103      	cbz	r3, 800daee <_lseek_r+0x1e>
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	bd38      	pop	{r3, r4, r5, pc}
 800daf0:	20004ab0 	.word	0x20004ab0

0800daf4 <_read_r>:
 800daf4:	b538      	push	{r3, r4, r5, lr}
 800daf6:	4d07      	ldr	r5, [pc, #28]	@ (800db14 <_read_r+0x20>)
 800daf8:	4604      	mov	r4, r0
 800dafa:	4608      	mov	r0, r1
 800dafc:	4611      	mov	r1, r2
 800dafe:	2200      	movs	r2, #0
 800db00:	602a      	str	r2, [r5, #0]
 800db02:	461a      	mov	r2, r3
 800db04:	f7f4 ffcf 	bl	8002aa6 <_read>
 800db08:	1c43      	adds	r3, r0, #1
 800db0a:	d102      	bne.n	800db12 <_read_r+0x1e>
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	b103      	cbz	r3, 800db12 <_read_r+0x1e>
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	bd38      	pop	{r3, r4, r5, pc}
 800db14:	20004ab0 	.word	0x20004ab0

0800db18 <_write_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	4d07      	ldr	r5, [pc, #28]	@ (800db38 <_write_r+0x20>)
 800db1c:	4604      	mov	r4, r0
 800db1e:	4608      	mov	r0, r1
 800db20:	4611      	mov	r1, r2
 800db22:	2200      	movs	r2, #0
 800db24:	602a      	str	r2, [r5, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	f7f4 ffda 	bl	8002ae0 <_write>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_write_r+0x1e>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	b103      	cbz	r3, 800db36 <_write_r+0x1e>
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	20004ab0 	.word	0x20004ab0

0800db3c <__errno>:
 800db3c:	4b01      	ldr	r3, [pc, #4]	@ (800db44 <__errno+0x8>)
 800db3e:	6818      	ldr	r0, [r3, #0]
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	2000006c 	.word	0x2000006c

0800db48 <__libc_init_array>:
 800db48:	b570      	push	{r4, r5, r6, lr}
 800db4a:	4d0d      	ldr	r5, [pc, #52]	@ (800db80 <__libc_init_array+0x38>)
 800db4c:	4c0d      	ldr	r4, [pc, #52]	@ (800db84 <__libc_init_array+0x3c>)
 800db4e:	1b64      	subs	r4, r4, r5
 800db50:	10a4      	asrs	r4, r4, #2
 800db52:	2600      	movs	r6, #0
 800db54:	42a6      	cmp	r6, r4
 800db56:	d109      	bne.n	800db6c <__libc_init_array+0x24>
 800db58:	4d0b      	ldr	r5, [pc, #44]	@ (800db88 <__libc_init_array+0x40>)
 800db5a:	4c0c      	ldr	r4, [pc, #48]	@ (800db8c <__libc_init_array+0x44>)
 800db5c:	f001 fe28 	bl	800f7b0 <_init>
 800db60:	1b64      	subs	r4, r4, r5
 800db62:	10a4      	asrs	r4, r4, #2
 800db64:	2600      	movs	r6, #0
 800db66:	42a6      	cmp	r6, r4
 800db68:	d105      	bne.n	800db76 <__libc_init_array+0x2e>
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
 800db6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800db70:	4798      	blx	r3
 800db72:	3601      	adds	r6, #1
 800db74:	e7ee      	b.n	800db54 <__libc_init_array+0xc>
 800db76:	f855 3b04 	ldr.w	r3, [r5], #4
 800db7a:	4798      	blx	r3
 800db7c:	3601      	adds	r6, #1
 800db7e:	e7f2      	b.n	800db66 <__libc_init_array+0x1e>
 800db80:	0800fd74 	.word	0x0800fd74
 800db84:	0800fd74 	.word	0x0800fd74
 800db88:	0800fd74 	.word	0x0800fd74
 800db8c:	0800fd78 	.word	0x0800fd78

0800db90 <__retarget_lock_init_recursive>:
 800db90:	4770      	bx	lr

0800db92 <__retarget_lock_acquire_recursive>:
 800db92:	4770      	bx	lr

0800db94 <__retarget_lock_release_recursive>:
 800db94:	4770      	bx	lr

0800db96 <memcpy>:
 800db96:	440a      	add	r2, r1
 800db98:	4291      	cmp	r1, r2
 800db9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800db9e:	d100      	bne.n	800dba2 <memcpy+0xc>
 800dba0:	4770      	bx	lr
 800dba2:	b510      	push	{r4, lr}
 800dba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbac:	4291      	cmp	r1, r2
 800dbae:	d1f9      	bne.n	800dba4 <memcpy+0xe>
 800dbb0:	bd10      	pop	{r4, pc}
	...

0800dbb4 <__assert_func>:
 800dbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbb6:	4614      	mov	r4, r2
 800dbb8:	461a      	mov	r2, r3
 800dbba:	4b09      	ldr	r3, [pc, #36]	@ (800dbe0 <__assert_func+0x2c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	68d8      	ldr	r0, [r3, #12]
 800dbc2:	b954      	cbnz	r4, 800dbda <__assert_func+0x26>
 800dbc4:	4b07      	ldr	r3, [pc, #28]	@ (800dbe4 <__assert_func+0x30>)
 800dbc6:	461c      	mov	r4, r3
 800dbc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbcc:	9100      	str	r1, [sp, #0]
 800dbce:	462b      	mov	r3, r5
 800dbd0:	4905      	ldr	r1, [pc, #20]	@ (800dbe8 <__assert_func+0x34>)
 800dbd2:	f001 fcc9 	bl	800f568 <fiprintf>
 800dbd6:	f001 fd6d 	bl	800f6b4 <abort>
 800dbda:	4b04      	ldr	r3, [pc, #16]	@ (800dbec <__assert_func+0x38>)
 800dbdc:	e7f4      	b.n	800dbc8 <__assert_func+0x14>
 800dbde:	bf00      	nop
 800dbe0:	2000006c 	.word	0x2000006c
 800dbe4:	0800fa82 	.word	0x0800fa82
 800dbe8:	0800fa54 	.word	0x0800fa54
 800dbec:	0800fa47 	.word	0x0800fa47

0800dbf0 <quorem>:
 800dbf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	6903      	ldr	r3, [r0, #16]
 800dbf6:	690c      	ldr	r4, [r1, #16]
 800dbf8:	42a3      	cmp	r3, r4
 800dbfa:	4607      	mov	r7, r0
 800dbfc:	db7e      	blt.n	800dcfc <quorem+0x10c>
 800dbfe:	3c01      	subs	r4, #1
 800dc00:	f101 0814 	add.w	r8, r1, #20
 800dc04:	00a3      	lsls	r3, r4, #2
 800dc06:	f100 0514 	add.w	r5, r0, #20
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc22:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc26:	d32e      	bcc.n	800dc86 <quorem+0x96>
 800dc28:	f04f 0a00 	mov.w	sl, #0
 800dc2c:	46c4      	mov	ip, r8
 800dc2e:	46ae      	mov	lr, r5
 800dc30:	46d3      	mov	fp, sl
 800dc32:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc36:	b298      	uxth	r0, r3
 800dc38:	fb06 a000 	mla	r0, r6, r0, sl
 800dc3c:	0c02      	lsrs	r2, r0, #16
 800dc3e:	0c1b      	lsrs	r3, r3, #16
 800dc40:	fb06 2303 	mla	r3, r6, r3, r2
 800dc44:	f8de 2000 	ldr.w	r2, [lr]
 800dc48:	b280      	uxth	r0, r0
 800dc4a:	b292      	uxth	r2, r2
 800dc4c:	1a12      	subs	r2, r2, r0
 800dc4e:	445a      	add	r2, fp
 800dc50:	f8de 0000 	ldr.w	r0, [lr]
 800dc54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc62:	b292      	uxth	r2, r2
 800dc64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc68:	45e1      	cmp	r9, ip
 800dc6a:	f84e 2b04 	str.w	r2, [lr], #4
 800dc6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dc72:	d2de      	bcs.n	800dc32 <quorem+0x42>
 800dc74:	9b00      	ldr	r3, [sp, #0]
 800dc76:	58eb      	ldr	r3, [r5, r3]
 800dc78:	b92b      	cbnz	r3, 800dc86 <quorem+0x96>
 800dc7a:	9b01      	ldr	r3, [sp, #4]
 800dc7c:	3b04      	subs	r3, #4
 800dc7e:	429d      	cmp	r5, r3
 800dc80:	461a      	mov	r2, r3
 800dc82:	d32f      	bcc.n	800dce4 <quorem+0xf4>
 800dc84:	613c      	str	r4, [r7, #16]
 800dc86:	4638      	mov	r0, r7
 800dc88:	f001 f978 	bl	800ef7c <__mcmp>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	db25      	blt.n	800dcdc <quorem+0xec>
 800dc90:	4629      	mov	r1, r5
 800dc92:	2000      	movs	r0, #0
 800dc94:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc98:	f8d1 c000 	ldr.w	ip, [r1]
 800dc9c:	fa1f fe82 	uxth.w	lr, r2
 800dca0:	fa1f f38c 	uxth.w	r3, ip
 800dca4:	eba3 030e 	sub.w	r3, r3, lr
 800dca8:	4403      	add	r3, r0
 800dcaa:	0c12      	lsrs	r2, r2, #16
 800dcac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dcb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcba:	45c1      	cmp	r9, r8
 800dcbc:	f841 3b04 	str.w	r3, [r1], #4
 800dcc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dcc4:	d2e6      	bcs.n	800dc94 <quorem+0xa4>
 800dcc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcce:	b922      	cbnz	r2, 800dcda <quorem+0xea>
 800dcd0:	3b04      	subs	r3, #4
 800dcd2:	429d      	cmp	r5, r3
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	d30b      	bcc.n	800dcf0 <quorem+0x100>
 800dcd8:	613c      	str	r4, [r7, #16]
 800dcda:	3601      	adds	r6, #1
 800dcdc:	4630      	mov	r0, r6
 800dcde:	b003      	add	sp, #12
 800dce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce4:	6812      	ldr	r2, [r2, #0]
 800dce6:	3b04      	subs	r3, #4
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	d1cb      	bne.n	800dc84 <quorem+0x94>
 800dcec:	3c01      	subs	r4, #1
 800dcee:	e7c6      	b.n	800dc7e <quorem+0x8e>
 800dcf0:	6812      	ldr	r2, [r2, #0]
 800dcf2:	3b04      	subs	r3, #4
 800dcf4:	2a00      	cmp	r2, #0
 800dcf6:	d1ef      	bne.n	800dcd8 <quorem+0xe8>
 800dcf8:	3c01      	subs	r4, #1
 800dcfa:	e7ea      	b.n	800dcd2 <quorem+0xe2>
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	e7ee      	b.n	800dcde <quorem+0xee>

0800dd00 <_dtoa_r>:
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	69c7      	ldr	r7, [r0, #28]
 800dd06:	b099      	sub	sp, #100	@ 0x64
 800dd08:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd0c:	ec55 4b10 	vmov	r4, r5, d0
 800dd10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd12:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd14:	4683      	mov	fp, r0
 800dd16:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd1a:	b97f      	cbnz	r7, 800dd3c <_dtoa_r+0x3c>
 800dd1c:	2010      	movs	r0, #16
 800dd1e:	f000 fdfd 	bl	800e91c <malloc>
 800dd22:	4602      	mov	r2, r0
 800dd24:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd28:	b920      	cbnz	r0, 800dd34 <_dtoa_r+0x34>
 800dd2a:	4ba7      	ldr	r3, [pc, #668]	@ (800dfc8 <_dtoa_r+0x2c8>)
 800dd2c:	21ef      	movs	r1, #239	@ 0xef
 800dd2e:	48a7      	ldr	r0, [pc, #668]	@ (800dfcc <_dtoa_r+0x2cc>)
 800dd30:	f7ff ff40 	bl	800dbb4 <__assert_func>
 800dd34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd38:	6007      	str	r7, [r0, #0]
 800dd3a:	60c7      	str	r7, [r0, #12]
 800dd3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd40:	6819      	ldr	r1, [r3, #0]
 800dd42:	b159      	cbz	r1, 800dd5c <_dtoa_r+0x5c>
 800dd44:	685a      	ldr	r2, [r3, #4]
 800dd46:	604a      	str	r2, [r1, #4]
 800dd48:	2301      	movs	r3, #1
 800dd4a:	4093      	lsls	r3, r2
 800dd4c:	608b      	str	r3, [r1, #8]
 800dd4e:	4658      	mov	r0, fp
 800dd50:	f000 feda 	bl	800eb08 <_Bfree>
 800dd54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	601a      	str	r2, [r3, #0]
 800dd5c:	1e2b      	subs	r3, r5, #0
 800dd5e:	bfb9      	ittee	lt
 800dd60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd64:	9303      	strlt	r3, [sp, #12]
 800dd66:	2300      	movge	r3, #0
 800dd68:	6033      	strge	r3, [r6, #0]
 800dd6a:	9f03      	ldr	r7, [sp, #12]
 800dd6c:	4b98      	ldr	r3, [pc, #608]	@ (800dfd0 <_dtoa_r+0x2d0>)
 800dd6e:	bfbc      	itt	lt
 800dd70:	2201      	movlt	r2, #1
 800dd72:	6032      	strlt	r2, [r6, #0]
 800dd74:	43bb      	bics	r3, r7
 800dd76:	d112      	bne.n	800dd9e <_dtoa_r+0x9e>
 800dd78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dd7e:	6013      	str	r3, [r2, #0]
 800dd80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd84:	4323      	orrs	r3, r4
 800dd86:	f000 854d 	beq.w	800e824 <_dtoa_r+0xb24>
 800dd8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dfe4 <_dtoa_r+0x2e4>
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f000 854f 	beq.w	800e834 <_dtoa_r+0xb34>
 800dd96:	f10a 0303 	add.w	r3, sl, #3
 800dd9a:	f000 bd49 	b.w	800e830 <_dtoa_r+0xb30>
 800dd9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dda2:	2200      	movs	r2, #0
 800dda4:	ec51 0b17 	vmov	r0, r1, d7
 800dda8:	2300      	movs	r3, #0
 800ddaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ddae:	f7f2 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddb2:	4680      	mov	r8, r0
 800ddb4:	b158      	cbz	r0, 800ddce <_dtoa_r+0xce>
 800ddb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddb8:	2301      	movs	r3, #1
 800ddba:	6013      	str	r3, [r2, #0]
 800ddbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddbe:	b113      	cbz	r3, 800ddc6 <_dtoa_r+0xc6>
 800ddc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ddc2:	4b84      	ldr	r3, [pc, #528]	@ (800dfd4 <_dtoa_r+0x2d4>)
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dfe8 <_dtoa_r+0x2e8>
 800ddca:	f000 bd33 	b.w	800e834 <_dtoa_r+0xb34>
 800ddce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ddd2:	aa16      	add	r2, sp, #88	@ 0x58
 800ddd4:	a917      	add	r1, sp, #92	@ 0x5c
 800ddd6:	4658      	mov	r0, fp
 800ddd8:	f001 f980 	bl	800f0dc <__d2b>
 800dddc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dde0:	4681      	mov	r9, r0
 800dde2:	2e00      	cmp	r6, #0
 800dde4:	d077      	beq.n	800ded6 <_dtoa_r+0x1d6>
 800dde6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dde8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ddec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ddf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ddfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de00:	4619      	mov	r1, r3
 800de02:	2200      	movs	r2, #0
 800de04:	4b74      	ldr	r3, [pc, #464]	@ (800dfd8 <_dtoa_r+0x2d8>)
 800de06:	f7f2 fa3f 	bl	8000288 <__aeabi_dsub>
 800de0a:	a369      	add	r3, pc, #420	@ (adr r3, 800dfb0 <_dtoa_r+0x2b0>)
 800de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de10:	f7f2 fbf2 	bl	80005f8 <__aeabi_dmul>
 800de14:	a368      	add	r3, pc, #416	@ (adr r3, 800dfb8 <_dtoa_r+0x2b8>)
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	f7f2 fa37 	bl	800028c <__adddf3>
 800de1e:	4604      	mov	r4, r0
 800de20:	4630      	mov	r0, r6
 800de22:	460d      	mov	r5, r1
 800de24:	f7f2 fb7e 	bl	8000524 <__aeabi_i2d>
 800de28:	a365      	add	r3, pc, #404	@ (adr r3, 800dfc0 <_dtoa_r+0x2c0>)
 800de2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2e:	f7f2 fbe3 	bl	80005f8 <__aeabi_dmul>
 800de32:	4602      	mov	r2, r0
 800de34:	460b      	mov	r3, r1
 800de36:	4620      	mov	r0, r4
 800de38:	4629      	mov	r1, r5
 800de3a:	f7f2 fa27 	bl	800028c <__adddf3>
 800de3e:	4604      	mov	r4, r0
 800de40:	460d      	mov	r5, r1
 800de42:	f7f2 fe89 	bl	8000b58 <__aeabi_d2iz>
 800de46:	2200      	movs	r2, #0
 800de48:	4607      	mov	r7, r0
 800de4a:	2300      	movs	r3, #0
 800de4c:	4620      	mov	r0, r4
 800de4e:	4629      	mov	r1, r5
 800de50:	f7f2 fe44 	bl	8000adc <__aeabi_dcmplt>
 800de54:	b140      	cbz	r0, 800de68 <_dtoa_r+0x168>
 800de56:	4638      	mov	r0, r7
 800de58:	f7f2 fb64 	bl	8000524 <__aeabi_i2d>
 800de5c:	4622      	mov	r2, r4
 800de5e:	462b      	mov	r3, r5
 800de60:	f7f2 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 800de64:	b900      	cbnz	r0, 800de68 <_dtoa_r+0x168>
 800de66:	3f01      	subs	r7, #1
 800de68:	2f16      	cmp	r7, #22
 800de6a:	d851      	bhi.n	800df10 <_dtoa_r+0x210>
 800de6c:	4b5b      	ldr	r3, [pc, #364]	@ (800dfdc <_dtoa_r+0x2dc>)
 800de6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de7a:	f7f2 fe2f 	bl	8000adc <__aeabi_dcmplt>
 800de7e:	2800      	cmp	r0, #0
 800de80:	d048      	beq.n	800df14 <_dtoa_r+0x214>
 800de82:	3f01      	subs	r7, #1
 800de84:	2300      	movs	r3, #0
 800de86:	9312      	str	r3, [sp, #72]	@ 0x48
 800de88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800de8a:	1b9b      	subs	r3, r3, r6
 800de8c:	1e5a      	subs	r2, r3, #1
 800de8e:	bf44      	itt	mi
 800de90:	f1c3 0801 	rsbmi	r8, r3, #1
 800de94:	2300      	movmi	r3, #0
 800de96:	9208      	str	r2, [sp, #32]
 800de98:	bf54      	ite	pl
 800de9a:	f04f 0800 	movpl.w	r8, #0
 800de9e:	9308      	strmi	r3, [sp, #32]
 800dea0:	2f00      	cmp	r7, #0
 800dea2:	db39      	blt.n	800df18 <_dtoa_r+0x218>
 800dea4:	9b08      	ldr	r3, [sp, #32]
 800dea6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dea8:	443b      	add	r3, r7
 800deaa:	9308      	str	r3, [sp, #32]
 800deac:	2300      	movs	r3, #0
 800deae:	930a      	str	r3, [sp, #40]	@ 0x28
 800deb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb2:	2b09      	cmp	r3, #9
 800deb4:	d864      	bhi.n	800df80 <_dtoa_r+0x280>
 800deb6:	2b05      	cmp	r3, #5
 800deb8:	bfc4      	itt	gt
 800deba:	3b04      	subgt	r3, #4
 800debc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800debe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dec0:	f1a3 0302 	sub.w	r3, r3, #2
 800dec4:	bfcc      	ite	gt
 800dec6:	2400      	movgt	r4, #0
 800dec8:	2401      	movle	r4, #1
 800deca:	2b03      	cmp	r3, #3
 800decc:	d863      	bhi.n	800df96 <_dtoa_r+0x296>
 800dece:	e8df f003 	tbb	[pc, r3]
 800ded2:	372a      	.short	0x372a
 800ded4:	5535      	.short	0x5535
 800ded6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800deda:	441e      	add	r6, r3
 800dedc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dee0:	2b20      	cmp	r3, #32
 800dee2:	bfc1      	itttt	gt
 800dee4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dee8:	409f      	lslgt	r7, r3
 800deea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800deee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800def2:	bfd6      	itet	le
 800def4:	f1c3 0320 	rsble	r3, r3, #32
 800def8:	ea47 0003 	orrgt.w	r0, r7, r3
 800defc:	fa04 f003 	lslle.w	r0, r4, r3
 800df00:	f7f2 fb00 	bl	8000504 <__aeabi_ui2d>
 800df04:	2201      	movs	r2, #1
 800df06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df0a:	3e01      	subs	r6, #1
 800df0c:	9214      	str	r2, [sp, #80]	@ 0x50
 800df0e:	e777      	b.n	800de00 <_dtoa_r+0x100>
 800df10:	2301      	movs	r3, #1
 800df12:	e7b8      	b.n	800de86 <_dtoa_r+0x186>
 800df14:	9012      	str	r0, [sp, #72]	@ 0x48
 800df16:	e7b7      	b.n	800de88 <_dtoa_r+0x188>
 800df18:	427b      	negs	r3, r7
 800df1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df1c:	2300      	movs	r3, #0
 800df1e:	eba8 0807 	sub.w	r8, r8, r7
 800df22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df24:	e7c4      	b.n	800deb0 <_dtoa_r+0x1b0>
 800df26:	2300      	movs	r3, #0
 800df28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	dc35      	bgt.n	800df9c <_dtoa_r+0x29c>
 800df30:	2301      	movs	r3, #1
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	9307      	str	r3, [sp, #28]
 800df36:	461a      	mov	r2, r3
 800df38:	920e      	str	r2, [sp, #56]	@ 0x38
 800df3a:	e00b      	b.n	800df54 <_dtoa_r+0x254>
 800df3c:	2301      	movs	r3, #1
 800df3e:	e7f3      	b.n	800df28 <_dtoa_r+0x228>
 800df40:	2300      	movs	r3, #0
 800df42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df46:	18fb      	adds	r3, r7, r3
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	3301      	adds	r3, #1
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	9307      	str	r3, [sp, #28]
 800df50:	bfb8      	it	lt
 800df52:	2301      	movlt	r3, #1
 800df54:	f8db 001c 	ldr.w	r0, [fp, #28]
 800df58:	2100      	movs	r1, #0
 800df5a:	2204      	movs	r2, #4
 800df5c:	f102 0514 	add.w	r5, r2, #20
 800df60:	429d      	cmp	r5, r3
 800df62:	d91f      	bls.n	800dfa4 <_dtoa_r+0x2a4>
 800df64:	6041      	str	r1, [r0, #4]
 800df66:	4658      	mov	r0, fp
 800df68:	f000 fd8e 	bl	800ea88 <_Balloc>
 800df6c:	4682      	mov	sl, r0
 800df6e:	2800      	cmp	r0, #0
 800df70:	d13c      	bne.n	800dfec <_dtoa_r+0x2ec>
 800df72:	4b1b      	ldr	r3, [pc, #108]	@ (800dfe0 <_dtoa_r+0x2e0>)
 800df74:	4602      	mov	r2, r0
 800df76:	f240 11af 	movw	r1, #431	@ 0x1af
 800df7a:	e6d8      	b.n	800dd2e <_dtoa_r+0x2e>
 800df7c:	2301      	movs	r3, #1
 800df7e:	e7e0      	b.n	800df42 <_dtoa_r+0x242>
 800df80:	2401      	movs	r4, #1
 800df82:	2300      	movs	r3, #0
 800df84:	9309      	str	r3, [sp, #36]	@ 0x24
 800df86:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df88:	f04f 33ff 	mov.w	r3, #4294967295
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	9307      	str	r3, [sp, #28]
 800df90:	2200      	movs	r2, #0
 800df92:	2312      	movs	r3, #18
 800df94:	e7d0      	b.n	800df38 <_dtoa_r+0x238>
 800df96:	2301      	movs	r3, #1
 800df98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df9a:	e7f5      	b.n	800df88 <_dtoa_r+0x288>
 800df9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	9307      	str	r3, [sp, #28]
 800dfa2:	e7d7      	b.n	800df54 <_dtoa_r+0x254>
 800dfa4:	3101      	adds	r1, #1
 800dfa6:	0052      	lsls	r2, r2, #1
 800dfa8:	e7d8      	b.n	800df5c <_dtoa_r+0x25c>
 800dfaa:	bf00      	nop
 800dfac:	f3af 8000 	nop.w
 800dfb0:	636f4361 	.word	0x636f4361
 800dfb4:	3fd287a7 	.word	0x3fd287a7
 800dfb8:	8b60c8b3 	.word	0x8b60c8b3
 800dfbc:	3fc68a28 	.word	0x3fc68a28
 800dfc0:	509f79fb 	.word	0x509f79fb
 800dfc4:	3fd34413 	.word	0x3fd34413
 800dfc8:	0800f9a4 	.word	0x0800f9a4
 800dfcc:	0800fa90 	.word	0x0800fa90
 800dfd0:	7ff00000 	.word	0x7ff00000
 800dfd4:	0800fa24 	.word	0x0800fa24
 800dfd8:	3ff80000 	.word	0x3ff80000
 800dfdc:	0800fb88 	.word	0x0800fb88
 800dfe0:	0800fae8 	.word	0x0800fae8
 800dfe4:	0800fa8c 	.word	0x0800fa8c
 800dfe8:	0800fa23 	.word	0x0800fa23
 800dfec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dff0:	6018      	str	r0, [r3, #0]
 800dff2:	9b07      	ldr	r3, [sp, #28]
 800dff4:	2b0e      	cmp	r3, #14
 800dff6:	f200 80a4 	bhi.w	800e142 <_dtoa_r+0x442>
 800dffa:	2c00      	cmp	r4, #0
 800dffc:	f000 80a1 	beq.w	800e142 <_dtoa_r+0x442>
 800e000:	2f00      	cmp	r7, #0
 800e002:	dd33      	ble.n	800e06c <_dtoa_r+0x36c>
 800e004:	4bad      	ldr	r3, [pc, #692]	@ (800e2bc <_dtoa_r+0x5bc>)
 800e006:	f007 020f 	and.w	r2, r7, #15
 800e00a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e00e:	ed93 7b00 	vldr	d7, [r3]
 800e012:	05f8      	lsls	r0, r7, #23
 800e014:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e01c:	d516      	bpl.n	800e04c <_dtoa_r+0x34c>
 800e01e:	4ba8      	ldr	r3, [pc, #672]	@ (800e2c0 <_dtoa_r+0x5c0>)
 800e020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e028:	f7f2 fc10 	bl	800084c <__aeabi_ddiv>
 800e02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e030:	f004 040f 	and.w	r4, r4, #15
 800e034:	2603      	movs	r6, #3
 800e036:	4da2      	ldr	r5, [pc, #648]	@ (800e2c0 <_dtoa_r+0x5c0>)
 800e038:	b954      	cbnz	r4, 800e050 <_dtoa_r+0x350>
 800e03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e042:	f7f2 fc03 	bl	800084c <__aeabi_ddiv>
 800e046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e04a:	e028      	b.n	800e09e <_dtoa_r+0x39e>
 800e04c:	2602      	movs	r6, #2
 800e04e:	e7f2      	b.n	800e036 <_dtoa_r+0x336>
 800e050:	07e1      	lsls	r1, r4, #31
 800e052:	d508      	bpl.n	800e066 <_dtoa_r+0x366>
 800e054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e05c:	f7f2 facc 	bl	80005f8 <__aeabi_dmul>
 800e060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e064:	3601      	adds	r6, #1
 800e066:	1064      	asrs	r4, r4, #1
 800e068:	3508      	adds	r5, #8
 800e06a:	e7e5      	b.n	800e038 <_dtoa_r+0x338>
 800e06c:	f000 80d2 	beq.w	800e214 <_dtoa_r+0x514>
 800e070:	427c      	negs	r4, r7
 800e072:	4b92      	ldr	r3, [pc, #584]	@ (800e2bc <_dtoa_r+0x5bc>)
 800e074:	4d92      	ldr	r5, [pc, #584]	@ (800e2c0 <_dtoa_r+0x5c0>)
 800e076:	f004 020f 	and.w	r2, r4, #15
 800e07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e086:	f7f2 fab7 	bl	80005f8 <__aeabi_dmul>
 800e08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e08e:	1124      	asrs	r4, r4, #4
 800e090:	2300      	movs	r3, #0
 800e092:	2602      	movs	r6, #2
 800e094:	2c00      	cmp	r4, #0
 800e096:	f040 80b2 	bne.w	800e1fe <_dtoa_r+0x4fe>
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1d3      	bne.n	800e046 <_dtoa_r+0x346>
 800e09e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 80b7 	beq.w	800e218 <_dtoa_r+0x518>
 800e0aa:	4b86      	ldr	r3, [pc, #536]	@ (800e2c4 <_dtoa_r+0x5c4>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	f7f2 fd13 	bl	8000adc <__aeabi_dcmplt>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f000 80ae 	beq.w	800e218 <_dtoa_r+0x518>
 800e0bc:	9b07      	ldr	r3, [sp, #28]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f000 80aa 	beq.w	800e218 <_dtoa_r+0x518>
 800e0c4:	9b00      	ldr	r3, [sp, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	dd37      	ble.n	800e13a <_dtoa_r+0x43a>
 800e0ca:	1e7b      	subs	r3, r7, #1
 800e0cc:	9304      	str	r3, [sp, #16]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4b7d      	ldr	r3, [pc, #500]	@ (800e2c8 <_dtoa_r+0x5c8>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	f7f2 fa8f 	bl	80005f8 <__aeabi_dmul>
 800e0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0de:	9c00      	ldr	r4, [sp, #0]
 800e0e0:	3601      	adds	r6, #1
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	f7f2 fa1e 	bl	8000524 <__aeabi_i2d>
 800e0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0ec:	f7f2 fa84 	bl	80005f8 <__aeabi_dmul>
 800e0f0:	4b76      	ldr	r3, [pc, #472]	@ (800e2cc <_dtoa_r+0x5cc>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f7f2 f8ca 	bl	800028c <__adddf3>
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e0fe:	2c00      	cmp	r4, #0
 800e100:	f040 808d 	bne.w	800e21e <_dtoa_r+0x51e>
 800e104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e108:	4b71      	ldr	r3, [pc, #452]	@ (800e2d0 <_dtoa_r+0x5d0>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	f7f2 f8bc 	bl	8000288 <__aeabi_dsub>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e118:	462a      	mov	r2, r5
 800e11a:	4633      	mov	r3, r6
 800e11c:	f7f2 fcfc 	bl	8000b18 <__aeabi_dcmpgt>
 800e120:	2800      	cmp	r0, #0
 800e122:	f040 828b 	bne.w	800e63c <_dtoa_r+0x93c>
 800e126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e12a:	462a      	mov	r2, r5
 800e12c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e130:	f7f2 fcd4 	bl	8000adc <__aeabi_dcmplt>
 800e134:	2800      	cmp	r0, #0
 800e136:	f040 8128 	bne.w	800e38a <_dtoa_r+0x68a>
 800e13a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e13e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e144:	2b00      	cmp	r3, #0
 800e146:	f2c0 815a 	blt.w	800e3fe <_dtoa_r+0x6fe>
 800e14a:	2f0e      	cmp	r7, #14
 800e14c:	f300 8157 	bgt.w	800e3fe <_dtoa_r+0x6fe>
 800e150:	4b5a      	ldr	r3, [pc, #360]	@ (800e2bc <_dtoa_r+0x5bc>)
 800e152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e156:	ed93 7b00 	vldr	d7, [r3]
 800e15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	ed8d 7b00 	vstr	d7, [sp]
 800e162:	da03      	bge.n	800e16c <_dtoa_r+0x46c>
 800e164:	9b07      	ldr	r3, [sp, #28]
 800e166:	2b00      	cmp	r3, #0
 800e168:	f340 8101 	ble.w	800e36e <_dtoa_r+0x66e>
 800e16c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e170:	4656      	mov	r6, sl
 800e172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e176:	4620      	mov	r0, r4
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 fb67 	bl	800084c <__aeabi_ddiv>
 800e17e:	f7f2 fceb 	bl	8000b58 <__aeabi_d2iz>
 800e182:	4680      	mov	r8, r0
 800e184:	f7f2 f9ce 	bl	8000524 <__aeabi_i2d>
 800e188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e18c:	f7f2 fa34 	bl	80005f8 <__aeabi_dmul>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	4620      	mov	r0, r4
 800e196:	4629      	mov	r1, r5
 800e198:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e19c:	f7f2 f874 	bl	8000288 <__aeabi_dsub>
 800e1a0:	f806 4b01 	strb.w	r4, [r6], #1
 800e1a4:	9d07      	ldr	r5, [sp, #28]
 800e1a6:	eba6 040a 	sub.w	r4, r6, sl
 800e1aa:	42a5      	cmp	r5, r4
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	f040 8117 	bne.w	800e3e2 <_dtoa_r+0x6e2>
 800e1b4:	f7f2 f86a 	bl	800028c <__adddf3>
 800e1b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1bc:	4604      	mov	r4, r0
 800e1be:	460d      	mov	r5, r1
 800e1c0:	f7f2 fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	f040 80f9 	bne.w	800e3bc <_dtoa_r+0x6bc>
 800e1ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f7f2 fc79 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1d6:	b118      	cbz	r0, 800e1e0 <_dtoa_r+0x4e0>
 800e1d8:	f018 0f01 	tst.w	r8, #1
 800e1dc:	f040 80ee 	bne.w	800e3bc <_dtoa_r+0x6bc>
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	4658      	mov	r0, fp
 800e1e4:	f000 fc90 	bl	800eb08 <_Bfree>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	7033      	strb	r3, [r6, #0]
 800e1ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e1ee:	3701      	adds	r7, #1
 800e1f0:	601f      	str	r7, [r3, #0]
 800e1f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 831d 	beq.w	800e834 <_dtoa_r+0xb34>
 800e1fa:	601e      	str	r6, [r3, #0]
 800e1fc:	e31a      	b.n	800e834 <_dtoa_r+0xb34>
 800e1fe:	07e2      	lsls	r2, r4, #31
 800e200:	d505      	bpl.n	800e20e <_dtoa_r+0x50e>
 800e202:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e206:	f7f2 f9f7 	bl	80005f8 <__aeabi_dmul>
 800e20a:	3601      	adds	r6, #1
 800e20c:	2301      	movs	r3, #1
 800e20e:	1064      	asrs	r4, r4, #1
 800e210:	3508      	adds	r5, #8
 800e212:	e73f      	b.n	800e094 <_dtoa_r+0x394>
 800e214:	2602      	movs	r6, #2
 800e216:	e742      	b.n	800e09e <_dtoa_r+0x39e>
 800e218:	9c07      	ldr	r4, [sp, #28]
 800e21a:	9704      	str	r7, [sp, #16]
 800e21c:	e761      	b.n	800e0e2 <_dtoa_r+0x3e2>
 800e21e:	4b27      	ldr	r3, [pc, #156]	@ (800e2bc <_dtoa_r+0x5bc>)
 800e220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e222:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e226:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e22a:	4454      	add	r4, sl
 800e22c:	2900      	cmp	r1, #0
 800e22e:	d053      	beq.n	800e2d8 <_dtoa_r+0x5d8>
 800e230:	4928      	ldr	r1, [pc, #160]	@ (800e2d4 <_dtoa_r+0x5d4>)
 800e232:	2000      	movs	r0, #0
 800e234:	f7f2 fb0a 	bl	800084c <__aeabi_ddiv>
 800e238:	4633      	mov	r3, r6
 800e23a:	462a      	mov	r2, r5
 800e23c:	f7f2 f824 	bl	8000288 <__aeabi_dsub>
 800e240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e244:	4656      	mov	r6, sl
 800e246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e24a:	f7f2 fc85 	bl	8000b58 <__aeabi_d2iz>
 800e24e:	4605      	mov	r5, r0
 800e250:	f7f2 f968 	bl	8000524 <__aeabi_i2d>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e25c:	f7f2 f814 	bl	8000288 <__aeabi_dsub>
 800e260:	3530      	adds	r5, #48	@ 0x30
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e26a:	f806 5b01 	strb.w	r5, [r6], #1
 800e26e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e272:	f7f2 fc33 	bl	8000adc <__aeabi_dcmplt>
 800e276:	2800      	cmp	r0, #0
 800e278:	d171      	bne.n	800e35e <_dtoa_r+0x65e>
 800e27a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e27e:	4911      	ldr	r1, [pc, #68]	@ (800e2c4 <_dtoa_r+0x5c4>)
 800e280:	2000      	movs	r0, #0
 800e282:	f7f2 f801 	bl	8000288 <__aeabi_dsub>
 800e286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e28a:	f7f2 fc27 	bl	8000adc <__aeabi_dcmplt>
 800e28e:	2800      	cmp	r0, #0
 800e290:	f040 8095 	bne.w	800e3be <_dtoa_r+0x6be>
 800e294:	42a6      	cmp	r6, r4
 800e296:	f43f af50 	beq.w	800e13a <_dtoa_r+0x43a>
 800e29a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e29e:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c8 <_dtoa_r+0x5c8>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f7f2 f9a9 	bl	80005f8 <__aeabi_dmul>
 800e2a6:	4b08      	ldr	r3, [pc, #32]	@ (800e2c8 <_dtoa_r+0x5c8>)
 800e2a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2b2:	f7f2 f9a1 	bl	80005f8 <__aeabi_dmul>
 800e2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2ba:	e7c4      	b.n	800e246 <_dtoa_r+0x546>
 800e2bc:	0800fb88 	.word	0x0800fb88
 800e2c0:	0800fb60 	.word	0x0800fb60
 800e2c4:	3ff00000 	.word	0x3ff00000
 800e2c8:	40240000 	.word	0x40240000
 800e2cc:	401c0000 	.word	0x401c0000
 800e2d0:	40140000 	.word	0x40140000
 800e2d4:	3fe00000 	.word	0x3fe00000
 800e2d8:	4631      	mov	r1, r6
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f7f2 f98c 	bl	80005f8 <__aeabi_dmul>
 800e2e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e2e6:	4656      	mov	r6, sl
 800e2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ec:	f7f2 fc34 	bl	8000b58 <__aeabi_d2iz>
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	f7f2 f917 	bl	8000524 <__aeabi_i2d>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2fe:	f7f1 ffc3 	bl	8000288 <__aeabi_dsub>
 800e302:	3530      	adds	r5, #48	@ 0x30
 800e304:	f806 5b01 	strb.w	r5, [r6], #1
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	42a6      	cmp	r6, r4
 800e30e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e312:	f04f 0200 	mov.w	r2, #0
 800e316:	d124      	bne.n	800e362 <_dtoa_r+0x662>
 800e318:	4bac      	ldr	r3, [pc, #688]	@ (800e5cc <_dtoa_r+0x8cc>)
 800e31a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e31e:	f7f1 ffb5 	bl	800028c <__adddf3>
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e32a:	f7f2 fbf5 	bl	8000b18 <__aeabi_dcmpgt>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d145      	bne.n	800e3be <_dtoa_r+0x6be>
 800e332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e336:	49a5      	ldr	r1, [pc, #660]	@ (800e5cc <_dtoa_r+0x8cc>)
 800e338:	2000      	movs	r0, #0
 800e33a:	f7f1 ffa5 	bl	8000288 <__aeabi_dsub>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e346:	f7f2 fbc9 	bl	8000adc <__aeabi_dcmplt>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	f43f aef5 	beq.w	800e13a <_dtoa_r+0x43a>
 800e350:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e352:	1e73      	subs	r3, r6, #1
 800e354:	9315      	str	r3, [sp, #84]	@ 0x54
 800e356:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e35a:	2b30      	cmp	r3, #48	@ 0x30
 800e35c:	d0f8      	beq.n	800e350 <_dtoa_r+0x650>
 800e35e:	9f04      	ldr	r7, [sp, #16]
 800e360:	e73e      	b.n	800e1e0 <_dtoa_r+0x4e0>
 800e362:	4b9b      	ldr	r3, [pc, #620]	@ (800e5d0 <_dtoa_r+0x8d0>)
 800e364:	f7f2 f948 	bl	80005f8 <__aeabi_dmul>
 800e368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e36c:	e7bc      	b.n	800e2e8 <_dtoa_r+0x5e8>
 800e36e:	d10c      	bne.n	800e38a <_dtoa_r+0x68a>
 800e370:	4b98      	ldr	r3, [pc, #608]	@ (800e5d4 <_dtoa_r+0x8d4>)
 800e372:	2200      	movs	r2, #0
 800e374:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e378:	f7f2 f93e 	bl	80005f8 <__aeabi_dmul>
 800e37c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e380:	f7f2 fbc0 	bl	8000b04 <__aeabi_dcmpge>
 800e384:	2800      	cmp	r0, #0
 800e386:	f000 8157 	beq.w	800e638 <_dtoa_r+0x938>
 800e38a:	2400      	movs	r4, #0
 800e38c:	4625      	mov	r5, r4
 800e38e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e390:	43db      	mvns	r3, r3
 800e392:	9304      	str	r3, [sp, #16]
 800e394:	4656      	mov	r6, sl
 800e396:	2700      	movs	r7, #0
 800e398:	4621      	mov	r1, r4
 800e39a:	4658      	mov	r0, fp
 800e39c:	f000 fbb4 	bl	800eb08 <_Bfree>
 800e3a0:	2d00      	cmp	r5, #0
 800e3a2:	d0dc      	beq.n	800e35e <_dtoa_r+0x65e>
 800e3a4:	b12f      	cbz	r7, 800e3b2 <_dtoa_r+0x6b2>
 800e3a6:	42af      	cmp	r7, r5
 800e3a8:	d003      	beq.n	800e3b2 <_dtoa_r+0x6b2>
 800e3aa:	4639      	mov	r1, r7
 800e3ac:	4658      	mov	r0, fp
 800e3ae:	f000 fbab 	bl	800eb08 <_Bfree>
 800e3b2:	4629      	mov	r1, r5
 800e3b4:	4658      	mov	r0, fp
 800e3b6:	f000 fba7 	bl	800eb08 <_Bfree>
 800e3ba:	e7d0      	b.n	800e35e <_dtoa_r+0x65e>
 800e3bc:	9704      	str	r7, [sp, #16]
 800e3be:	4633      	mov	r3, r6
 800e3c0:	461e      	mov	r6, r3
 800e3c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3c6:	2a39      	cmp	r2, #57	@ 0x39
 800e3c8:	d107      	bne.n	800e3da <_dtoa_r+0x6da>
 800e3ca:	459a      	cmp	sl, r3
 800e3cc:	d1f8      	bne.n	800e3c0 <_dtoa_r+0x6c0>
 800e3ce:	9a04      	ldr	r2, [sp, #16]
 800e3d0:	3201      	adds	r2, #1
 800e3d2:	9204      	str	r2, [sp, #16]
 800e3d4:	2230      	movs	r2, #48	@ 0x30
 800e3d6:	f88a 2000 	strb.w	r2, [sl]
 800e3da:	781a      	ldrb	r2, [r3, #0]
 800e3dc:	3201      	adds	r2, #1
 800e3de:	701a      	strb	r2, [r3, #0]
 800e3e0:	e7bd      	b.n	800e35e <_dtoa_r+0x65e>
 800e3e2:	4b7b      	ldr	r3, [pc, #492]	@ (800e5d0 <_dtoa_r+0x8d0>)
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f7f2 f907 	bl	80005f8 <__aeabi_dmul>
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	460d      	mov	r5, r1
 800e3f2:	f7f2 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	f43f aebb 	beq.w	800e172 <_dtoa_r+0x472>
 800e3fc:	e6f0      	b.n	800e1e0 <_dtoa_r+0x4e0>
 800e3fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e400:	2a00      	cmp	r2, #0
 800e402:	f000 80db 	beq.w	800e5bc <_dtoa_r+0x8bc>
 800e406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e408:	2a01      	cmp	r2, #1
 800e40a:	f300 80bf 	bgt.w	800e58c <_dtoa_r+0x88c>
 800e40e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e410:	2a00      	cmp	r2, #0
 800e412:	f000 80b7 	beq.w	800e584 <_dtoa_r+0x884>
 800e416:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e41a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e41c:	4646      	mov	r6, r8
 800e41e:	9a08      	ldr	r2, [sp, #32]
 800e420:	2101      	movs	r1, #1
 800e422:	441a      	add	r2, r3
 800e424:	4658      	mov	r0, fp
 800e426:	4498      	add	r8, r3
 800e428:	9208      	str	r2, [sp, #32]
 800e42a:	f000 fc21 	bl	800ec70 <__i2b>
 800e42e:	4605      	mov	r5, r0
 800e430:	b15e      	cbz	r6, 800e44a <_dtoa_r+0x74a>
 800e432:	9b08      	ldr	r3, [sp, #32]
 800e434:	2b00      	cmp	r3, #0
 800e436:	dd08      	ble.n	800e44a <_dtoa_r+0x74a>
 800e438:	42b3      	cmp	r3, r6
 800e43a:	9a08      	ldr	r2, [sp, #32]
 800e43c:	bfa8      	it	ge
 800e43e:	4633      	movge	r3, r6
 800e440:	eba8 0803 	sub.w	r8, r8, r3
 800e444:	1af6      	subs	r6, r6, r3
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	9308      	str	r3, [sp, #32]
 800e44a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e44c:	b1f3      	cbz	r3, 800e48c <_dtoa_r+0x78c>
 800e44e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e450:	2b00      	cmp	r3, #0
 800e452:	f000 80b7 	beq.w	800e5c4 <_dtoa_r+0x8c4>
 800e456:	b18c      	cbz	r4, 800e47c <_dtoa_r+0x77c>
 800e458:	4629      	mov	r1, r5
 800e45a:	4622      	mov	r2, r4
 800e45c:	4658      	mov	r0, fp
 800e45e:	f000 fcc7 	bl	800edf0 <__pow5mult>
 800e462:	464a      	mov	r2, r9
 800e464:	4601      	mov	r1, r0
 800e466:	4605      	mov	r5, r0
 800e468:	4658      	mov	r0, fp
 800e46a:	f000 fc17 	bl	800ec9c <__multiply>
 800e46e:	4649      	mov	r1, r9
 800e470:	9004      	str	r0, [sp, #16]
 800e472:	4658      	mov	r0, fp
 800e474:	f000 fb48 	bl	800eb08 <_Bfree>
 800e478:	9b04      	ldr	r3, [sp, #16]
 800e47a:	4699      	mov	r9, r3
 800e47c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e47e:	1b1a      	subs	r2, r3, r4
 800e480:	d004      	beq.n	800e48c <_dtoa_r+0x78c>
 800e482:	4649      	mov	r1, r9
 800e484:	4658      	mov	r0, fp
 800e486:	f000 fcb3 	bl	800edf0 <__pow5mult>
 800e48a:	4681      	mov	r9, r0
 800e48c:	2101      	movs	r1, #1
 800e48e:	4658      	mov	r0, fp
 800e490:	f000 fbee 	bl	800ec70 <__i2b>
 800e494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e496:	4604      	mov	r4, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 81cf 	beq.w	800e83c <_dtoa_r+0xb3c>
 800e49e:	461a      	mov	r2, r3
 800e4a0:	4601      	mov	r1, r0
 800e4a2:	4658      	mov	r0, fp
 800e4a4:	f000 fca4 	bl	800edf0 <__pow5mult>
 800e4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	f300 8095 	bgt.w	800e5dc <_dtoa_r+0x8dc>
 800e4b2:	9b02      	ldr	r3, [sp, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f040 8087 	bne.w	800e5c8 <_dtoa_r+0x8c8>
 800e4ba:	9b03      	ldr	r3, [sp, #12]
 800e4bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f040 8089 	bne.w	800e5d8 <_dtoa_r+0x8d8>
 800e4c6:	9b03      	ldr	r3, [sp, #12]
 800e4c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4cc:	0d1b      	lsrs	r3, r3, #20
 800e4ce:	051b      	lsls	r3, r3, #20
 800e4d0:	b12b      	cbz	r3, 800e4de <_dtoa_r+0x7de>
 800e4d2:	9b08      	ldr	r3, [sp, #32]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	9308      	str	r3, [sp, #32]
 800e4d8:	f108 0801 	add.w	r8, r8, #1
 800e4dc:	2301      	movs	r3, #1
 800e4de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f000 81b0 	beq.w	800e848 <_dtoa_r+0xb48>
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4ee:	6918      	ldr	r0, [r3, #16]
 800e4f0:	f000 fb72 	bl	800ebd8 <__hi0bits>
 800e4f4:	f1c0 0020 	rsb	r0, r0, #32
 800e4f8:	9b08      	ldr	r3, [sp, #32]
 800e4fa:	4418      	add	r0, r3
 800e4fc:	f010 001f 	ands.w	r0, r0, #31
 800e500:	d077      	beq.n	800e5f2 <_dtoa_r+0x8f2>
 800e502:	f1c0 0320 	rsb	r3, r0, #32
 800e506:	2b04      	cmp	r3, #4
 800e508:	dd6b      	ble.n	800e5e2 <_dtoa_r+0x8e2>
 800e50a:	9b08      	ldr	r3, [sp, #32]
 800e50c:	f1c0 001c 	rsb	r0, r0, #28
 800e510:	4403      	add	r3, r0
 800e512:	4480      	add	r8, r0
 800e514:	4406      	add	r6, r0
 800e516:	9308      	str	r3, [sp, #32]
 800e518:	f1b8 0f00 	cmp.w	r8, #0
 800e51c:	dd05      	ble.n	800e52a <_dtoa_r+0x82a>
 800e51e:	4649      	mov	r1, r9
 800e520:	4642      	mov	r2, r8
 800e522:	4658      	mov	r0, fp
 800e524:	f000 fcbe 	bl	800eea4 <__lshift>
 800e528:	4681      	mov	r9, r0
 800e52a:	9b08      	ldr	r3, [sp, #32]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dd05      	ble.n	800e53c <_dtoa_r+0x83c>
 800e530:	4621      	mov	r1, r4
 800e532:	461a      	mov	r2, r3
 800e534:	4658      	mov	r0, fp
 800e536:	f000 fcb5 	bl	800eea4 <__lshift>
 800e53a:	4604      	mov	r4, r0
 800e53c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d059      	beq.n	800e5f6 <_dtoa_r+0x8f6>
 800e542:	4621      	mov	r1, r4
 800e544:	4648      	mov	r0, r9
 800e546:	f000 fd19 	bl	800ef7c <__mcmp>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	da53      	bge.n	800e5f6 <_dtoa_r+0x8f6>
 800e54e:	1e7b      	subs	r3, r7, #1
 800e550:	9304      	str	r3, [sp, #16]
 800e552:	4649      	mov	r1, r9
 800e554:	2300      	movs	r3, #0
 800e556:	220a      	movs	r2, #10
 800e558:	4658      	mov	r0, fp
 800e55a:	f000 faf7 	bl	800eb4c <__multadd>
 800e55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e560:	4681      	mov	r9, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 8172 	beq.w	800e84c <_dtoa_r+0xb4c>
 800e568:	2300      	movs	r3, #0
 800e56a:	4629      	mov	r1, r5
 800e56c:	220a      	movs	r2, #10
 800e56e:	4658      	mov	r0, fp
 800e570:	f000 faec 	bl	800eb4c <__multadd>
 800e574:	9b00      	ldr	r3, [sp, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	4605      	mov	r5, r0
 800e57a:	dc67      	bgt.n	800e64c <_dtoa_r+0x94c>
 800e57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e57e:	2b02      	cmp	r3, #2
 800e580:	dc41      	bgt.n	800e606 <_dtoa_r+0x906>
 800e582:	e063      	b.n	800e64c <_dtoa_r+0x94c>
 800e584:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e586:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e58a:	e746      	b.n	800e41a <_dtoa_r+0x71a>
 800e58c:	9b07      	ldr	r3, [sp, #28]
 800e58e:	1e5c      	subs	r4, r3, #1
 800e590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e592:	42a3      	cmp	r3, r4
 800e594:	bfbf      	itttt	lt
 800e596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e598:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e59a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e59c:	1ae3      	sublt	r3, r4, r3
 800e59e:	bfb4      	ite	lt
 800e5a0:	18d2      	addlt	r2, r2, r3
 800e5a2:	1b1c      	subge	r4, r3, r4
 800e5a4:	9b07      	ldr	r3, [sp, #28]
 800e5a6:	bfbc      	itt	lt
 800e5a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e5aa:	2400      	movlt	r4, #0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	bfb5      	itete	lt
 800e5b0:	eba8 0603 	sublt.w	r6, r8, r3
 800e5b4:	9b07      	ldrge	r3, [sp, #28]
 800e5b6:	2300      	movlt	r3, #0
 800e5b8:	4646      	movge	r6, r8
 800e5ba:	e730      	b.n	800e41e <_dtoa_r+0x71e>
 800e5bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e5c0:	4646      	mov	r6, r8
 800e5c2:	e735      	b.n	800e430 <_dtoa_r+0x730>
 800e5c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5c6:	e75c      	b.n	800e482 <_dtoa_r+0x782>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	e788      	b.n	800e4de <_dtoa_r+0x7de>
 800e5cc:	3fe00000 	.word	0x3fe00000
 800e5d0:	40240000 	.word	0x40240000
 800e5d4:	40140000 	.word	0x40140000
 800e5d8:	9b02      	ldr	r3, [sp, #8]
 800e5da:	e780      	b.n	800e4de <_dtoa_r+0x7de>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5e0:	e782      	b.n	800e4e8 <_dtoa_r+0x7e8>
 800e5e2:	d099      	beq.n	800e518 <_dtoa_r+0x818>
 800e5e4:	9a08      	ldr	r2, [sp, #32]
 800e5e6:	331c      	adds	r3, #28
 800e5e8:	441a      	add	r2, r3
 800e5ea:	4498      	add	r8, r3
 800e5ec:	441e      	add	r6, r3
 800e5ee:	9208      	str	r2, [sp, #32]
 800e5f0:	e792      	b.n	800e518 <_dtoa_r+0x818>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	e7f6      	b.n	800e5e4 <_dtoa_r+0x8e4>
 800e5f6:	9b07      	ldr	r3, [sp, #28]
 800e5f8:	9704      	str	r7, [sp, #16]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	dc20      	bgt.n	800e640 <_dtoa_r+0x940>
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e602:	2b02      	cmp	r3, #2
 800e604:	dd1e      	ble.n	800e644 <_dtoa_r+0x944>
 800e606:	9b00      	ldr	r3, [sp, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f47f aec0 	bne.w	800e38e <_dtoa_r+0x68e>
 800e60e:	4621      	mov	r1, r4
 800e610:	2205      	movs	r2, #5
 800e612:	4658      	mov	r0, fp
 800e614:	f000 fa9a 	bl	800eb4c <__multadd>
 800e618:	4601      	mov	r1, r0
 800e61a:	4604      	mov	r4, r0
 800e61c:	4648      	mov	r0, r9
 800e61e:	f000 fcad 	bl	800ef7c <__mcmp>
 800e622:	2800      	cmp	r0, #0
 800e624:	f77f aeb3 	ble.w	800e38e <_dtoa_r+0x68e>
 800e628:	4656      	mov	r6, sl
 800e62a:	2331      	movs	r3, #49	@ 0x31
 800e62c:	f806 3b01 	strb.w	r3, [r6], #1
 800e630:	9b04      	ldr	r3, [sp, #16]
 800e632:	3301      	adds	r3, #1
 800e634:	9304      	str	r3, [sp, #16]
 800e636:	e6ae      	b.n	800e396 <_dtoa_r+0x696>
 800e638:	9c07      	ldr	r4, [sp, #28]
 800e63a:	9704      	str	r7, [sp, #16]
 800e63c:	4625      	mov	r5, r4
 800e63e:	e7f3      	b.n	800e628 <_dtoa_r+0x928>
 800e640:	9b07      	ldr	r3, [sp, #28]
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e646:	2b00      	cmp	r3, #0
 800e648:	f000 8104 	beq.w	800e854 <_dtoa_r+0xb54>
 800e64c:	2e00      	cmp	r6, #0
 800e64e:	dd05      	ble.n	800e65c <_dtoa_r+0x95c>
 800e650:	4629      	mov	r1, r5
 800e652:	4632      	mov	r2, r6
 800e654:	4658      	mov	r0, fp
 800e656:	f000 fc25 	bl	800eea4 <__lshift>
 800e65a:	4605      	mov	r5, r0
 800e65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d05a      	beq.n	800e718 <_dtoa_r+0xa18>
 800e662:	6869      	ldr	r1, [r5, #4]
 800e664:	4658      	mov	r0, fp
 800e666:	f000 fa0f 	bl	800ea88 <_Balloc>
 800e66a:	4606      	mov	r6, r0
 800e66c:	b928      	cbnz	r0, 800e67a <_dtoa_r+0x97a>
 800e66e:	4b84      	ldr	r3, [pc, #528]	@ (800e880 <_dtoa_r+0xb80>)
 800e670:	4602      	mov	r2, r0
 800e672:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e676:	f7ff bb5a 	b.w	800dd2e <_dtoa_r+0x2e>
 800e67a:	692a      	ldr	r2, [r5, #16]
 800e67c:	3202      	adds	r2, #2
 800e67e:	0092      	lsls	r2, r2, #2
 800e680:	f105 010c 	add.w	r1, r5, #12
 800e684:	300c      	adds	r0, #12
 800e686:	f7ff fa86 	bl	800db96 <memcpy>
 800e68a:	2201      	movs	r2, #1
 800e68c:	4631      	mov	r1, r6
 800e68e:	4658      	mov	r0, fp
 800e690:	f000 fc08 	bl	800eea4 <__lshift>
 800e694:	f10a 0301 	add.w	r3, sl, #1
 800e698:	9307      	str	r3, [sp, #28]
 800e69a:	9b00      	ldr	r3, [sp, #0]
 800e69c:	4453      	add	r3, sl
 800e69e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6a0:	9b02      	ldr	r3, [sp, #8]
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	462f      	mov	r7, r5
 800e6a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6aa:	4605      	mov	r5, r0
 800e6ac:	9b07      	ldr	r3, [sp, #28]
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	4648      	mov	r0, r9
 800e6b4:	9300      	str	r3, [sp, #0]
 800e6b6:	f7ff fa9b 	bl	800dbf0 <quorem>
 800e6ba:	4639      	mov	r1, r7
 800e6bc:	9002      	str	r0, [sp, #8]
 800e6be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e6c2:	4648      	mov	r0, r9
 800e6c4:	f000 fc5a 	bl	800ef7c <__mcmp>
 800e6c8:	462a      	mov	r2, r5
 800e6ca:	9008      	str	r0, [sp, #32]
 800e6cc:	4621      	mov	r1, r4
 800e6ce:	4658      	mov	r0, fp
 800e6d0:	f000 fc70 	bl	800efb4 <__mdiff>
 800e6d4:	68c2      	ldr	r2, [r0, #12]
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	bb02      	cbnz	r2, 800e71c <_dtoa_r+0xa1c>
 800e6da:	4601      	mov	r1, r0
 800e6dc:	4648      	mov	r0, r9
 800e6de:	f000 fc4d 	bl	800ef7c <__mcmp>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4658      	mov	r0, fp
 800e6e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6ea:	f000 fa0d 	bl	800eb08 <_Bfree>
 800e6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6f2:	9e07      	ldr	r6, [sp, #28]
 800e6f4:	ea43 0102 	orr.w	r1, r3, r2
 800e6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6fa:	4319      	orrs	r1, r3
 800e6fc:	d110      	bne.n	800e720 <_dtoa_r+0xa20>
 800e6fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e702:	d029      	beq.n	800e758 <_dtoa_r+0xa58>
 800e704:	9b08      	ldr	r3, [sp, #32]
 800e706:	2b00      	cmp	r3, #0
 800e708:	dd02      	ble.n	800e710 <_dtoa_r+0xa10>
 800e70a:	9b02      	ldr	r3, [sp, #8]
 800e70c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e710:	9b00      	ldr	r3, [sp, #0]
 800e712:	f883 8000 	strb.w	r8, [r3]
 800e716:	e63f      	b.n	800e398 <_dtoa_r+0x698>
 800e718:	4628      	mov	r0, r5
 800e71a:	e7bb      	b.n	800e694 <_dtoa_r+0x994>
 800e71c:	2201      	movs	r2, #1
 800e71e:	e7e1      	b.n	800e6e4 <_dtoa_r+0x9e4>
 800e720:	9b08      	ldr	r3, [sp, #32]
 800e722:	2b00      	cmp	r3, #0
 800e724:	db04      	blt.n	800e730 <_dtoa_r+0xa30>
 800e726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e728:	430b      	orrs	r3, r1
 800e72a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e72c:	430b      	orrs	r3, r1
 800e72e:	d120      	bne.n	800e772 <_dtoa_r+0xa72>
 800e730:	2a00      	cmp	r2, #0
 800e732:	dded      	ble.n	800e710 <_dtoa_r+0xa10>
 800e734:	4649      	mov	r1, r9
 800e736:	2201      	movs	r2, #1
 800e738:	4658      	mov	r0, fp
 800e73a:	f000 fbb3 	bl	800eea4 <__lshift>
 800e73e:	4621      	mov	r1, r4
 800e740:	4681      	mov	r9, r0
 800e742:	f000 fc1b 	bl	800ef7c <__mcmp>
 800e746:	2800      	cmp	r0, #0
 800e748:	dc03      	bgt.n	800e752 <_dtoa_r+0xa52>
 800e74a:	d1e1      	bne.n	800e710 <_dtoa_r+0xa10>
 800e74c:	f018 0f01 	tst.w	r8, #1
 800e750:	d0de      	beq.n	800e710 <_dtoa_r+0xa10>
 800e752:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e756:	d1d8      	bne.n	800e70a <_dtoa_r+0xa0a>
 800e758:	9a00      	ldr	r2, [sp, #0]
 800e75a:	2339      	movs	r3, #57	@ 0x39
 800e75c:	7013      	strb	r3, [r2, #0]
 800e75e:	4633      	mov	r3, r6
 800e760:	461e      	mov	r6, r3
 800e762:	3b01      	subs	r3, #1
 800e764:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e768:	2a39      	cmp	r2, #57	@ 0x39
 800e76a:	d052      	beq.n	800e812 <_dtoa_r+0xb12>
 800e76c:	3201      	adds	r2, #1
 800e76e:	701a      	strb	r2, [r3, #0]
 800e770:	e612      	b.n	800e398 <_dtoa_r+0x698>
 800e772:	2a00      	cmp	r2, #0
 800e774:	dd07      	ble.n	800e786 <_dtoa_r+0xa86>
 800e776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e77a:	d0ed      	beq.n	800e758 <_dtoa_r+0xa58>
 800e77c:	9a00      	ldr	r2, [sp, #0]
 800e77e:	f108 0301 	add.w	r3, r8, #1
 800e782:	7013      	strb	r3, [r2, #0]
 800e784:	e608      	b.n	800e398 <_dtoa_r+0x698>
 800e786:	9b07      	ldr	r3, [sp, #28]
 800e788:	9a07      	ldr	r2, [sp, #28]
 800e78a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e790:	4293      	cmp	r3, r2
 800e792:	d028      	beq.n	800e7e6 <_dtoa_r+0xae6>
 800e794:	4649      	mov	r1, r9
 800e796:	2300      	movs	r3, #0
 800e798:	220a      	movs	r2, #10
 800e79a:	4658      	mov	r0, fp
 800e79c:	f000 f9d6 	bl	800eb4c <__multadd>
 800e7a0:	42af      	cmp	r7, r5
 800e7a2:	4681      	mov	r9, r0
 800e7a4:	f04f 0300 	mov.w	r3, #0
 800e7a8:	f04f 020a 	mov.w	r2, #10
 800e7ac:	4639      	mov	r1, r7
 800e7ae:	4658      	mov	r0, fp
 800e7b0:	d107      	bne.n	800e7c2 <_dtoa_r+0xac2>
 800e7b2:	f000 f9cb 	bl	800eb4c <__multadd>
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	9b07      	ldr	r3, [sp, #28]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	9307      	str	r3, [sp, #28]
 800e7c0:	e774      	b.n	800e6ac <_dtoa_r+0x9ac>
 800e7c2:	f000 f9c3 	bl	800eb4c <__multadd>
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	220a      	movs	r2, #10
 800e7ce:	4658      	mov	r0, fp
 800e7d0:	f000 f9bc 	bl	800eb4c <__multadd>
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	e7f0      	b.n	800e7ba <_dtoa_r+0xaba>
 800e7d8:	9b00      	ldr	r3, [sp, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	bfcc      	ite	gt
 800e7de:	461e      	movgt	r6, r3
 800e7e0:	2601      	movle	r6, #1
 800e7e2:	4456      	add	r6, sl
 800e7e4:	2700      	movs	r7, #0
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	4658      	mov	r0, fp
 800e7ec:	f000 fb5a 	bl	800eea4 <__lshift>
 800e7f0:	4621      	mov	r1, r4
 800e7f2:	4681      	mov	r9, r0
 800e7f4:	f000 fbc2 	bl	800ef7c <__mcmp>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	dcb0      	bgt.n	800e75e <_dtoa_r+0xa5e>
 800e7fc:	d102      	bne.n	800e804 <_dtoa_r+0xb04>
 800e7fe:	f018 0f01 	tst.w	r8, #1
 800e802:	d1ac      	bne.n	800e75e <_dtoa_r+0xa5e>
 800e804:	4633      	mov	r3, r6
 800e806:	461e      	mov	r6, r3
 800e808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e80c:	2a30      	cmp	r2, #48	@ 0x30
 800e80e:	d0fa      	beq.n	800e806 <_dtoa_r+0xb06>
 800e810:	e5c2      	b.n	800e398 <_dtoa_r+0x698>
 800e812:	459a      	cmp	sl, r3
 800e814:	d1a4      	bne.n	800e760 <_dtoa_r+0xa60>
 800e816:	9b04      	ldr	r3, [sp, #16]
 800e818:	3301      	adds	r3, #1
 800e81a:	9304      	str	r3, [sp, #16]
 800e81c:	2331      	movs	r3, #49	@ 0x31
 800e81e:	f88a 3000 	strb.w	r3, [sl]
 800e822:	e5b9      	b.n	800e398 <_dtoa_r+0x698>
 800e824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e826:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e884 <_dtoa_r+0xb84>
 800e82a:	b11b      	cbz	r3, 800e834 <_dtoa_r+0xb34>
 800e82c:	f10a 0308 	add.w	r3, sl, #8
 800e830:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e832:	6013      	str	r3, [r2, #0]
 800e834:	4650      	mov	r0, sl
 800e836:	b019      	add	sp, #100	@ 0x64
 800e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e83e:	2b01      	cmp	r3, #1
 800e840:	f77f ae37 	ble.w	800e4b2 <_dtoa_r+0x7b2>
 800e844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e846:	930a      	str	r3, [sp, #40]	@ 0x28
 800e848:	2001      	movs	r0, #1
 800e84a:	e655      	b.n	800e4f8 <_dtoa_r+0x7f8>
 800e84c:	9b00      	ldr	r3, [sp, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f77f aed6 	ble.w	800e600 <_dtoa_r+0x900>
 800e854:	4656      	mov	r6, sl
 800e856:	4621      	mov	r1, r4
 800e858:	4648      	mov	r0, r9
 800e85a:	f7ff f9c9 	bl	800dbf0 <quorem>
 800e85e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e862:	f806 8b01 	strb.w	r8, [r6], #1
 800e866:	9b00      	ldr	r3, [sp, #0]
 800e868:	eba6 020a 	sub.w	r2, r6, sl
 800e86c:	4293      	cmp	r3, r2
 800e86e:	ddb3      	ble.n	800e7d8 <_dtoa_r+0xad8>
 800e870:	4649      	mov	r1, r9
 800e872:	2300      	movs	r3, #0
 800e874:	220a      	movs	r2, #10
 800e876:	4658      	mov	r0, fp
 800e878:	f000 f968 	bl	800eb4c <__multadd>
 800e87c:	4681      	mov	r9, r0
 800e87e:	e7ea      	b.n	800e856 <_dtoa_r+0xb56>
 800e880:	0800fae8 	.word	0x0800fae8
 800e884:	0800fa83 	.word	0x0800fa83

0800e888 <_free_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4605      	mov	r5, r0
 800e88c:	2900      	cmp	r1, #0
 800e88e:	d041      	beq.n	800e914 <_free_r+0x8c>
 800e890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e894:	1f0c      	subs	r4, r1, #4
 800e896:	2b00      	cmp	r3, #0
 800e898:	bfb8      	it	lt
 800e89a:	18e4      	addlt	r4, r4, r3
 800e89c:	f000 f8e8 	bl	800ea70 <__malloc_lock>
 800e8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e918 <_free_r+0x90>)
 800e8a2:	6813      	ldr	r3, [r2, #0]
 800e8a4:	b933      	cbnz	r3, 800e8b4 <_free_r+0x2c>
 800e8a6:	6063      	str	r3, [r4, #4]
 800e8a8:	6014      	str	r4, [r2, #0]
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8b0:	f000 b8e4 	b.w	800ea7c <__malloc_unlock>
 800e8b4:	42a3      	cmp	r3, r4
 800e8b6:	d908      	bls.n	800e8ca <_free_r+0x42>
 800e8b8:	6820      	ldr	r0, [r4, #0]
 800e8ba:	1821      	adds	r1, r4, r0
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	bf01      	itttt	eq
 800e8c0:	6819      	ldreq	r1, [r3, #0]
 800e8c2:	685b      	ldreq	r3, [r3, #4]
 800e8c4:	1809      	addeq	r1, r1, r0
 800e8c6:	6021      	streq	r1, [r4, #0]
 800e8c8:	e7ed      	b.n	800e8a6 <_free_r+0x1e>
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	b10b      	cbz	r3, 800e8d4 <_free_r+0x4c>
 800e8d0:	42a3      	cmp	r3, r4
 800e8d2:	d9fa      	bls.n	800e8ca <_free_r+0x42>
 800e8d4:	6811      	ldr	r1, [r2, #0]
 800e8d6:	1850      	adds	r0, r2, r1
 800e8d8:	42a0      	cmp	r0, r4
 800e8da:	d10b      	bne.n	800e8f4 <_free_r+0x6c>
 800e8dc:	6820      	ldr	r0, [r4, #0]
 800e8de:	4401      	add	r1, r0
 800e8e0:	1850      	adds	r0, r2, r1
 800e8e2:	4283      	cmp	r3, r0
 800e8e4:	6011      	str	r1, [r2, #0]
 800e8e6:	d1e0      	bne.n	800e8aa <_free_r+0x22>
 800e8e8:	6818      	ldr	r0, [r3, #0]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	6053      	str	r3, [r2, #4]
 800e8ee:	4408      	add	r0, r1
 800e8f0:	6010      	str	r0, [r2, #0]
 800e8f2:	e7da      	b.n	800e8aa <_free_r+0x22>
 800e8f4:	d902      	bls.n	800e8fc <_free_r+0x74>
 800e8f6:	230c      	movs	r3, #12
 800e8f8:	602b      	str	r3, [r5, #0]
 800e8fa:	e7d6      	b.n	800e8aa <_free_r+0x22>
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	1821      	adds	r1, r4, r0
 800e900:	428b      	cmp	r3, r1
 800e902:	bf04      	itt	eq
 800e904:	6819      	ldreq	r1, [r3, #0]
 800e906:	685b      	ldreq	r3, [r3, #4]
 800e908:	6063      	str	r3, [r4, #4]
 800e90a:	bf04      	itt	eq
 800e90c:	1809      	addeq	r1, r1, r0
 800e90e:	6021      	streq	r1, [r4, #0]
 800e910:	6054      	str	r4, [r2, #4]
 800e912:	e7ca      	b.n	800e8aa <_free_r+0x22>
 800e914:	bd38      	pop	{r3, r4, r5, pc}
 800e916:	bf00      	nop
 800e918:	20004abc 	.word	0x20004abc

0800e91c <malloc>:
 800e91c:	4b02      	ldr	r3, [pc, #8]	@ (800e928 <malloc+0xc>)
 800e91e:	4601      	mov	r1, r0
 800e920:	6818      	ldr	r0, [r3, #0]
 800e922:	f000 b825 	b.w	800e970 <_malloc_r>
 800e926:	bf00      	nop
 800e928:	2000006c 	.word	0x2000006c

0800e92c <sbrk_aligned>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	4e0f      	ldr	r6, [pc, #60]	@ (800e96c <sbrk_aligned+0x40>)
 800e930:	460c      	mov	r4, r1
 800e932:	6831      	ldr	r1, [r6, #0]
 800e934:	4605      	mov	r5, r0
 800e936:	b911      	cbnz	r1, 800e93e <sbrk_aligned+0x12>
 800e938:	f000 feac 	bl	800f694 <_sbrk_r>
 800e93c:	6030      	str	r0, [r6, #0]
 800e93e:	4621      	mov	r1, r4
 800e940:	4628      	mov	r0, r5
 800e942:	f000 fea7 	bl	800f694 <_sbrk_r>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	d103      	bne.n	800e952 <sbrk_aligned+0x26>
 800e94a:	f04f 34ff 	mov.w	r4, #4294967295
 800e94e:	4620      	mov	r0, r4
 800e950:	bd70      	pop	{r4, r5, r6, pc}
 800e952:	1cc4      	adds	r4, r0, #3
 800e954:	f024 0403 	bic.w	r4, r4, #3
 800e958:	42a0      	cmp	r0, r4
 800e95a:	d0f8      	beq.n	800e94e <sbrk_aligned+0x22>
 800e95c:	1a21      	subs	r1, r4, r0
 800e95e:	4628      	mov	r0, r5
 800e960:	f000 fe98 	bl	800f694 <_sbrk_r>
 800e964:	3001      	adds	r0, #1
 800e966:	d1f2      	bne.n	800e94e <sbrk_aligned+0x22>
 800e968:	e7ef      	b.n	800e94a <sbrk_aligned+0x1e>
 800e96a:	bf00      	nop
 800e96c:	20004ab8 	.word	0x20004ab8

0800e970 <_malloc_r>:
 800e970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e974:	1ccd      	adds	r5, r1, #3
 800e976:	f025 0503 	bic.w	r5, r5, #3
 800e97a:	3508      	adds	r5, #8
 800e97c:	2d0c      	cmp	r5, #12
 800e97e:	bf38      	it	cc
 800e980:	250c      	movcc	r5, #12
 800e982:	2d00      	cmp	r5, #0
 800e984:	4606      	mov	r6, r0
 800e986:	db01      	blt.n	800e98c <_malloc_r+0x1c>
 800e988:	42a9      	cmp	r1, r5
 800e98a:	d904      	bls.n	800e996 <_malloc_r+0x26>
 800e98c:	230c      	movs	r3, #12
 800e98e:	6033      	str	r3, [r6, #0]
 800e990:	2000      	movs	r0, #0
 800e992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea6c <_malloc_r+0xfc>
 800e99a:	f000 f869 	bl	800ea70 <__malloc_lock>
 800e99e:	f8d8 3000 	ldr.w	r3, [r8]
 800e9a2:	461c      	mov	r4, r3
 800e9a4:	bb44      	cbnz	r4, 800e9f8 <_malloc_r+0x88>
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f7ff ffbf 	bl	800e92c <sbrk_aligned>
 800e9ae:	1c43      	adds	r3, r0, #1
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	d158      	bne.n	800ea66 <_malloc_r+0xf6>
 800e9b4:	f8d8 4000 	ldr.w	r4, [r8]
 800e9b8:	4627      	mov	r7, r4
 800e9ba:	2f00      	cmp	r7, #0
 800e9bc:	d143      	bne.n	800ea46 <_malloc_r+0xd6>
 800e9be:	2c00      	cmp	r4, #0
 800e9c0:	d04b      	beq.n	800ea5a <_malloc_r+0xea>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	eb04 0903 	add.w	r9, r4, r3
 800e9cc:	f000 fe62 	bl	800f694 <_sbrk_r>
 800e9d0:	4581      	cmp	r9, r0
 800e9d2:	d142      	bne.n	800ea5a <_malloc_r+0xea>
 800e9d4:	6821      	ldr	r1, [r4, #0]
 800e9d6:	1a6d      	subs	r5, r5, r1
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7ff ffa6 	bl	800e92c <sbrk_aligned>
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	d03a      	beq.n	800ea5a <_malloc_r+0xea>
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	442b      	add	r3, r5
 800e9e8:	6023      	str	r3, [r4, #0]
 800e9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ee:	685a      	ldr	r2, [r3, #4]
 800e9f0:	bb62      	cbnz	r2, 800ea4c <_malloc_r+0xdc>
 800e9f2:	f8c8 7000 	str.w	r7, [r8]
 800e9f6:	e00f      	b.n	800ea18 <_malloc_r+0xa8>
 800e9f8:	6822      	ldr	r2, [r4, #0]
 800e9fa:	1b52      	subs	r2, r2, r5
 800e9fc:	d420      	bmi.n	800ea40 <_malloc_r+0xd0>
 800e9fe:	2a0b      	cmp	r2, #11
 800ea00:	d917      	bls.n	800ea32 <_malloc_r+0xc2>
 800ea02:	1961      	adds	r1, r4, r5
 800ea04:	42a3      	cmp	r3, r4
 800ea06:	6025      	str	r5, [r4, #0]
 800ea08:	bf18      	it	ne
 800ea0a:	6059      	strne	r1, [r3, #4]
 800ea0c:	6863      	ldr	r3, [r4, #4]
 800ea0e:	bf08      	it	eq
 800ea10:	f8c8 1000 	streq.w	r1, [r8]
 800ea14:	5162      	str	r2, [r4, r5]
 800ea16:	604b      	str	r3, [r1, #4]
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f000 f82f 	bl	800ea7c <__malloc_unlock>
 800ea1e:	f104 000b 	add.w	r0, r4, #11
 800ea22:	1d23      	adds	r3, r4, #4
 800ea24:	f020 0007 	bic.w	r0, r0, #7
 800ea28:	1ac2      	subs	r2, r0, r3
 800ea2a:	bf1c      	itt	ne
 800ea2c:	1a1b      	subne	r3, r3, r0
 800ea2e:	50a3      	strne	r3, [r4, r2]
 800ea30:	e7af      	b.n	800e992 <_malloc_r+0x22>
 800ea32:	6862      	ldr	r2, [r4, #4]
 800ea34:	42a3      	cmp	r3, r4
 800ea36:	bf0c      	ite	eq
 800ea38:	f8c8 2000 	streq.w	r2, [r8]
 800ea3c:	605a      	strne	r2, [r3, #4]
 800ea3e:	e7eb      	b.n	800ea18 <_malloc_r+0xa8>
 800ea40:	4623      	mov	r3, r4
 800ea42:	6864      	ldr	r4, [r4, #4]
 800ea44:	e7ae      	b.n	800e9a4 <_malloc_r+0x34>
 800ea46:	463c      	mov	r4, r7
 800ea48:	687f      	ldr	r7, [r7, #4]
 800ea4a:	e7b6      	b.n	800e9ba <_malloc_r+0x4a>
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	42a3      	cmp	r3, r4
 800ea52:	d1fb      	bne.n	800ea4c <_malloc_r+0xdc>
 800ea54:	2300      	movs	r3, #0
 800ea56:	6053      	str	r3, [r2, #4]
 800ea58:	e7de      	b.n	800ea18 <_malloc_r+0xa8>
 800ea5a:	230c      	movs	r3, #12
 800ea5c:	6033      	str	r3, [r6, #0]
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f000 f80c 	bl	800ea7c <__malloc_unlock>
 800ea64:	e794      	b.n	800e990 <_malloc_r+0x20>
 800ea66:	6005      	str	r5, [r0, #0]
 800ea68:	e7d6      	b.n	800ea18 <_malloc_r+0xa8>
 800ea6a:	bf00      	nop
 800ea6c:	20004abc 	.word	0x20004abc

0800ea70 <__malloc_lock>:
 800ea70:	4801      	ldr	r0, [pc, #4]	@ (800ea78 <__malloc_lock+0x8>)
 800ea72:	f7ff b88e 	b.w	800db92 <__retarget_lock_acquire_recursive>
 800ea76:	bf00      	nop
 800ea78:	20004ab4 	.word	0x20004ab4

0800ea7c <__malloc_unlock>:
 800ea7c:	4801      	ldr	r0, [pc, #4]	@ (800ea84 <__malloc_unlock+0x8>)
 800ea7e:	f7ff b889 	b.w	800db94 <__retarget_lock_release_recursive>
 800ea82:	bf00      	nop
 800ea84:	20004ab4 	.word	0x20004ab4

0800ea88 <_Balloc>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	69c6      	ldr	r6, [r0, #28]
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	460d      	mov	r5, r1
 800ea90:	b976      	cbnz	r6, 800eab0 <_Balloc+0x28>
 800ea92:	2010      	movs	r0, #16
 800ea94:	f7ff ff42 	bl	800e91c <malloc>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	61e0      	str	r0, [r4, #28]
 800ea9c:	b920      	cbnz	r0, 800eaa8 <_Balloc+0x20>
 800ea9e:	4b18      	ldr	r3, [pc, #96]	@ (800eb00 <_Balloc+0x78>)
 800eaa0:	4818      	ldr	r0, [pc, #96]	@ (800eb04 <_Balloc+0x7c>)
 800eaa2:	216b      	movs	r1, #107	@ 0x6b
 800eaa4:	f7ff f886 	bl	800dbb4 <__assert_func>
 800eaa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaac:	6006      	str	r6, [r0, #0]
 800eaae:	60c6      	str	r6, [r0, #12]
 800eab0:	69e6      	ldr	r6, [r4, #28]
 800eab2:	68f3      	ldr	r3, [r6, #12]
 800eab4:	b183      	cbz	r3, 800ead8 <_Balloc+0x50>
 800eab6:	69e3      	ldr	r3, [r4, #28]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eabe:	b9b8      	cbnz	r0, 800eaf0 <_Balloc+0x68>
 800eac0:	2101      	movs	r1, #1
 800eac2:	fa01 f605 	lsl.w	r6, r1, r5
 800eac6:	1d72      	adds	r2, r6, #5
 800eac8:	0092      	lsls	r2, r2, #2
 800eaca:	4620      	mov	r0, r4
 800eacc:	f000 fdf9 	bl	800f6c2 <_calloc_r>
 800ead0:	b160      	cbz	r0, 800eaec <_Balloc+0x64>
 800ead2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ead6:	e00e      	b.n	800eaf6 <_Balloc+0x6e>
 800ead8:	2221      	movs	r2, #33	@ 0x21
 800eada:	2104      	movs	r1, #4
 800eadc:	4620      	mov	r0, r4
 800eade:	f000 fdf0 	bl	800f6c2 <_calloc_r>
 800eae2:	69e3      	ldr	r3, [r4, #28]
 800eae4:	60f0      	str	r0, [r6, #12]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1e4      	bne.n	800eab6 <_Balloc+0x2e>
 800eaec:	2000      	movs	r0, #0
 800eaee:	bd70      	pop	{r4, r5, r6, pc}
 800eaf0:	6802      	ldr	r2, [r0, #0]
 800eaf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eafc:	e7f7      	b.n	800eaee <_Balloc+0x66>
 800eafe:	bf00      	nop
 800eb00:	0800f9a4 	.word	0x0800f9a4
 800eb04:	0800faf9 	.word	0x0800faf9

0800eb08 <_Bfree>:
 800eb08:	b570      	push	{r4, r5, r6, lr}
 800eb0a:	69c6      	ldr	r6, [r0, #28]
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	460c      	mov	r4, r1
 800eb10:	b976      	cbnz	r6, 800eb30 <_Bfree+0x28>
 800eb12:	2010      	movs	r0, #16
 800eb14:	f7ff ff02 	bl	800e91c <malloc>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	61e8      	str	r0, [r5, #28]
 800eb1c:	b920      	cbnz	r0, 800eb28 <_Bfree+0x20>
 800eb1e:	4b09      	ldr	r3, [pc, #36]	@ (800eb44 <_Bfree+0x3c>)
 800eb20:	4809      	ldr	r0, [pc, #36]	@ (800eb48 <_Bfree+0x40>)
 800eb22:	218f      	movs	r1, #143	@ 0x8f
 800eb24:	f7ff f846 	bl	800dbb4 <__assert_func>
 800eb28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb2c:	6006      	str	r6, [r0, #0]
 800eb2e:	60c6      	str	r6, [r0, #12]
 800eb30:	b13c      	cbz	r4, 800eb42 <_Bfree+0x3a>
 800eb32:	69eb      	ldr	r3, [r5, #28]
 800eb34:	6862      	ldr	r2, [r4, #4]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb3c:	6021      	str	r1, [r4, #0]
 800eb3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	0800f9a4 	.word	0x0800f9a4
 800eb48:	0800faf9 	.word	0x0800faf9

0800eb4c <__multadd>:
 800eb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb50:	690d      	ldr	r5, [r1, #16]
 800eb52:	4607      	mov	r7, r0
 800eb54:	460c      	mov	r4, r1
 800eb56:	461e      	mov	r6, r3
 800eb58:	f101 0c14 	add.w	ip, r1, #20
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	f8dc 3000 	ldr.w	r3, [ip]
 800eb62:	b299      	uxth	r1, r3
 800eb64:	fb02 6101 	mla	r1, r2, r1, r6
 800eb68:	0c1e      	lsrs	r6, r3, #16
 800eb6a:	0c0b      	lsrs	r3, r1, #16
 800eb6c:	fb02 3306 	mla	r3, r2, r6, r3
 800eb70:	b289      	uxth	r1, r1
 800eb72:	3001      	adds	r0, #1
 800eb74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb78:	4285      	cmp	r5, r0
 800eb7a:	f84c 1b04 	str.w	r1, [ip], #4
 800eb7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb82:	dcec      	bgt.n	800eb5e <__multadd+0x12>
 800eb84:	b30e      	cbz	r6, 800ebca <__multadd+0x7e>
 800eb86:	68a3      	ldr	r3, [r4, #8]
 800eb88:	42ab      	cmp	r3, r5
 800eb8a:	dc19      	bgt.n	800ebc0 <__multadd+0x74>
 800eb8c:	6861      	ldr	r1, [r4, #4]
 800eb8e:	4638      	mov	r0, r7
 800eb90:	3101      	adds	r1, #1
 800eb92:	f7ff ff79 	bl	800ea88 <_Balloc>
 800eb96:	4680      	mov	r8, r0
 800eb98:	b928      	cbnz	r0, 800eba6 <__multadd+0x5a>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ebd0 <__multadd+0x84>)
 800eb9e:	480d      	ldr	r0, [pc, #52]	@ (800ebd4 <__multadd+0x88>)
 800eba0:	21ba      	movs	r1, #186	@ 0xba
 800eba2:	f7ff f807 	bl	800dbb4 <__assert_func>
 800eba6:	6922      	ldr	r2, [r4, #16]
 800eba8:	3202      	adds	r2, #2
 800ebaa:	f104 010c 	add.w	r1, r4, #12
 800ebae:	0092      	lsls	r2, r2, #2
 800ebb0:	300c      	adds	r0, #12
 800ebb2:	f7fe fff0 	bl	800db96 <memcpy>
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4638      	mov	r0, r7
 800ebba:	f7ff ffa5 	bl	800eb08 <_Bfree>
 800ebbe:	4644      	mov	r4, r8
 800ebc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebc4:	3501      	adds	r5, #1
 800ebc6:	615e      	str	r6, [r3, #20]
 800ebc8:	6125      	str	r5, [r4, #16]
 800ebca:	4620      	mov	r0, r4
 800ebcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd0:	0800fae8 	.word	0x0800fae8
 800ebd4:	0800faf9 	.word	0x0800faf9

0800ebd8 <__hi0bits>:
 800ebd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ebdc:	4603      	mov	r3, r0
 800ebde:	bf36      	itet	cc
 800ebe0:	0403      	lslcc	r3, r0, #16
 800ebe2:	2000      	movcs	r0, #0
 800ebe4:	2010      	movcc	r0, #16
 800ebe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ebea:	bf3c      	itt	cc
 800ebec:	021b      	lslcc	r3, r3, #8
 800ebee:	3008      	addcc	r0, #8
 800ebf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ebf4:	bf3c      	itt	cc
 800ebf6:	011b      	lslcc	r3, r3, #4
 800ebf8:	3004      	addcc	r0, #4
 800ebfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebfe:	bf3c      	itt	cc
 800ec00:	009b      	lslcc	r3, r3, #2
 800ec02:	3002      	addcc	r0, #2
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	db05      	blt.n	800ec14 <__hi0bits+0x3c>
 800ec08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec0c:	f100 0001 	add.w	r0, r0, #1
 800ec10:	bf08      	it	eq
 800ec12:	2020      	moveq	r0, #32
 800ec14:	4770      	bx	lr

0800ec16 <__lo0bits>:
 800ec16:	6803      	ldr	r3, [r0, #0]
 800ec18:	4602      	mov	r2, r0
 800ec1a:	f013 0007 	ands.w	r0, r3, #7
 800ec1e:	d00b      	beq.n	800ec38 <__lo0bits+0x22>
 800ec20:	07d9      	lsls	r1, r3, #31
 800ec22:	d421      	bmi.n	800ec68 <__lo0bits+0x52>
 800ec24:	0798      	lsls	r0, r3, #30
 800ec26:	bf49      	itett	mi
 800ec28:	085b      	lsrmi	r3, r3, #1
 800ec2a:	089b      	lsrpl	r3, r3, #2
 800ec2c:	2001      	movmi	r0, #1
 800ec2e:	6013      	strmi	r3, [r2, #0]
 800ec30:	bf5c      	itt	pl
 800ec32:	6013      	strpl	r3, [r2, #0]
 800ec34:	2002      	movpl	r0, #2
 800ec36:	4770      	bx	lr
 800ec38:	b299      	uxth	r1, r3
 800ec3a:	b909      	cbnz	r1, 800ec40 <__lo0bits+0x2a>
 800ec3c:	0c1b      	lsrs	r3, r3, #16
 800ec3e:	2010      	movs	r0, #16
 800ec40:	b2d9      	uxtb	r1, r3
 800ec42:	b909      	cbnz	r1, 800ec48 <__lo0bits+0x32>
 800ec44:	3008      	adds	r0, #8
 800ec46:	0a1b      	lsrs	r3, r3, #8
 800ec48:	0719      	lsls	r1, r3, #28
 800ec4a:	bf04      	itt	eq
 800ec4c:	091b      	lsreq	r3, r3, #4
 800ec4e:	3004      	addeq	r0, #4
 800ec50:	0799      	lsls	r1, r3, #30
 800ec52:	bf04      	itt	eq
 800ec54:	089b      	lsreq	r3, r3, #2
 800ec56:	3002      	addeq	r0, #2
 800ec58:	07d9      	lsls	r1, r3, #31
 800ec5a:	d403      	bmi.n	800ec64 <__lo0bits+0x4e>
 800ec5c:	085b      	lsrs	r3, r3, #1
 800ec5e:	f100 0001 	add.w	r0, r0, #1
 800ec62:	d003      	beq.n	800ec6c <__lo0bits+0x56>
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	4770      	bx	lr
 800ec68:	2000      	movs	r0, #0
 800ec6a:	4770      	bx	lr
 800ec6c:	2020      	movs	r0, #32
 800ec6e:	4770      	bx	lr

0800ec70 <__i2b>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	460c      	mov	r4, r1
 800ec74:	2101      	movs	r1, #1
 800ec76:	f7ff ff07 	bl	800ea88 <_Balloc>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	b928      	cbnz	r0, 800ec8a <__i2b+0x1a>
 800ec7e:	4b05      	ldr	r3, [pc, #20]	@ (800ec94 <__i2b+0x24>)
 800ec80:	4805      	ldr	r0, [pc, #20]	@ (800ec98 <__i2b+0x28>)
 800ec82:	f240 1145 	movw	r1, #325	@ 0x145
 800ec86:	f7fe ff95 	bl	800dbb4 <__assert_func>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	6144      	str	r4, [r0, #20]
 800ec8e:	6103      	str	r3, [r0, #16]
 800ec90:	bd10      	pop	{r4, pc}
 800ec92:	bf00      	nop
 800ec94:	0800fae8 	.word	0x0800fae8
 800ec98:	0800faf9 	.word	0x0800faf9

0800ec9c <__multiply>:
 800ec9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca0:	4614      	mov	r4, r2
 800eca2:	690a      	ldr	r2, [r1, #16]
 800eca4:	6923      	ldr	r3, [r4, #16]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	bfa8      	it	ge
 800ecaa:	4623      	movge	r3, r4
 800ecac:	460f      	mov	r7, r1
 800ecae:	bfa4      	itt	ge
 800ecb0:	460c      	movge	r4, r1
 800ecb2:	461f      	movge	r7, r3
 800ecb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ecb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	6861      	ldr	r1, [r4, #4]
 800ecc0:	eb0a 0609 	add.w	r6, sl, r9
 800ecc4:	42b3      	cmp	r3, r6
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	bfb8      	it	lt
 800ecca:	3101      	addlt	r1, #1
 800eccc:	f7ff fedc 	bl	800ea88 <_Balloc>
 800ecd0:	b930      	cbnz	r0, 800ece0 <__multiply+0x44>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	4b44      	ldr	r3, [pc, #272]	@ (800ede8 <__multiply+0x14c>)
 800ecd6:	4845      	ldr	r0, [pc, #276]	@ (800edec <__multiply+0x150>)
 800ecd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ecdc:	f7fe ff6a 	bl	800dbb4 <__assert_func>
 800ece0:	f100 0514 	add.w	r5, r0, #20
 800ece4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ece8:	462b      	mov	r3, r5
 800ecea:	2200      	movs	r2, #0
 800ecec:	4543      	cmp	r3, r8
 800ecee:	d321      	bcc.n	800ed34 <__multiply+0x98>
 800ecf0:	f107 0114 	add.w	r1, r7, #20
 800ecf4:	f104 0214 	add.w	r2, r4, #20
 800ecf8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ecfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ed00:	9302      	str	r3, [sp, #8]
 800ed02:	1b13      	subs	r3, r2, r4
 800ed04:	3b15      	subs	r3, #21
 800ed06:	f023 0303 	bic.w	r3, r3, #3
 800ed0a:	3304      	adds	r3, #4
 800ed0c:	f104 0715 	add.w	r7, r4, #21
 800ed10:	42ba      	cmp	r2, r7
 800ed12:	bf38      	it	cc
 800ed14:	2304      	movcc	r3, #4
 800ed16:	9301      	str	r3, [sp, #4]
 800ed18:	9b02      	ldr	r3, [sp, #8]
 800ed1a:	9103      	str	r1, [sp, #12]
 800ed1c:	428b      	cmp	r3, r1
 800ed1e:	d80c      	bhi.n	800ed3a <__multiply+0x9e>
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	dd03      	ble.n	800ed2c <__multiply+0x90>
 800ed24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d05b      	beq.n	800ede4 <__multiply+0x148>
 800ed2c:	6106      	str	r6, [r0, #16]
 800ed2e:	b005      	add	sp, #20
 800ed30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed34:	f843 2b04 	str.w	r2, [r3], #4
 800ed38:	e7d8      	b.n	800ecec <__multiply+0x50>
 800ed3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed3e:	f1ba 0f00 	cmp.w	sl, #0
 800ed42:	d024      	beq.n	800ed8e <__multiply+0xf2>
 800ed44:	f104 0e14 	add.w	lr, r4, #20
 800ed48:	46a9      	mov	r9, r5
 800ed4a:	f04f 0c00 	mov.w	ip, #0
 800ed4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed52:	f8d9 3000 	ldr.w	r3, [r9]
 800ed56:	fa1f fb87 	uxth.w	fp, r7
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ed64:	f8d9 7000 	ldr.w	r7, [r9]
 800ed68:	4463      	add	r3, ip
 800ed6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed6e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ed72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed7c:	4572      	cmp	r2, lr
 800ed7e:	f849 3b04 	str.w	r3, [r9], #4
 800ed82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed86:	d8e2      	bhi.n	800ed4e <__multiply+0xb2>
 800ed88:	9b01      	ldr	r3, [sp, #4]
 800ed8a:	f845 c003 	str.w	ip, [r5, r3]
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed94:	3104      	adds	r1, #4
 800ed96:	f1b9 0f00 	cmp.w	r9, #0
 800ed9a:	d021      	beq.n	800ede0 <__multiply+0x144>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	f104 0c14 	add.w	ip, r4, #20
 800eda2:	46ae      	mov	lr, r5
 800eda4:	f04f 0a00 	mov.w	sl, #0
 800eda8:	f8bc b000 	ldrh.w	fp, [ip]
 800edac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800edb0:	fb09 770b 	mla	r7, r9, fp, r7
 800edb4:	4457      	add	r7, sl
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800edbc:	f84e 3b04 	str.w	r3, [lr], #4
 800edc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800edc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edc8:	f8be 3000 	ldrh.w	r3, [lr]
 800edcc:	fb09 330a 	mla	r3, r9, sl, r3
 800edd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800edd4:	4562      	cmp	r2, ip
 800edd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edda:	d8e5      	bhi.n	800eda8 <__multiply+0x10c>
 800eddc:	9f01      	ldr	r7, [sp, #4]
 800edde:	51eb      	str	r3, [r5, r7]
 800ede0:	3504      	adds	r5, #4
 800ede2:	e799      	b.n	800ed18 <__multiply+0x7c>
 800ede4:	3e01      	subs	r6, #1
 800ede6:	e79b      	b.n	800ed20 <__multiply+0x84>
 800ede8:	0800fae8 	.word	0x0800fae8
 800edec:	0800faf9 	.word	0x0800faf9

0800edf0 <__pow5mult>:
 800edf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf4:	4615      	mov	r5, r2
 800edf6:	f012 0203 	ands.w	r2, r2, #3
 800edfa:	4607      	mov	r7, r0
 800edfc:	460e      	mov	r6, r1
 800edfe:	d007      	beq.n	800ee10 <__pow5mult+0x20>
 800ee00:	4c25      	ldr	r4, [pc, #148]	@ (800ee98 <__pow5mult+0xa8>)
 800ee02:	3a01      	subs	r2, #1
 800ee04:	2300      	movs	r3, #0
 800ee06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee0a:	f7ff fe9f 	bl	800eb4c <__multadd>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	10ad      	asrs	r5, r5, #2
 800ee12:	d03d      	beq.n	800ee90 <__pow5mult+0xa0>
 800ee14:	69fc      	ldr	r4, [r7, #28]
 800ee16:	b97c      	cbnz	r4, 800ee38 <__pow5mult+0x48>
 800ee18:	2010      	movs	r0, #16
 800ee1a:	f7ff fd7f 	bl	800e91c <malloc>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	61f8      	str	r0, [r7, #28]
 800ee22:	b928      	cbnz	r0, 800ee30 <__pow5mult+0x40>
 800ee24:	4b1d      	ldr	r3, [pc, #116]	@ (800ee9c <__pow5mult+0xac>)
 800ee26:	481e      	ldr	r0, [pc, #120]	@ (800eea0 <__pow5mult+0xb0>)
 800ee28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee2c:	f7fe fec2 	bl	800dbb4 <__assert_func>
 800ee30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee34:	6004      	str	r4, [r0, #0]
 800ee36:	60c4      	str	r4, [r0, #12]
 800ee38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee40:	b94c      	cbnz	r4, 800ee56 <__pow5mult+0x66>
 800ee42:	f240 2171 	movw	r1, #625	@ 0x271
 800ee46:	4638      	mov	r0, r7
 800ee48:	f7ff ff12 	bl	800ec70 <__i2b>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee52:	4604      	mov	r4, r0
 800ee54:	6003      	str	r3, [r0, #0]
 800ee56:	f04f 0900 	mov.w	r9, #0
 800ee5a:	07eb      	lsls	r3, r5, #31
 800ee5c:	d50a      	bpl.n	800ee74 <__pow5mult+0x84>
 800ee5e:	4631      	mov	r1, r6
 800ee60:	4622      	mov	r2, r4
 800ee62:	4638      	mov	r0, r7
 800ee64:	f7ff ff1a 	bl	800ec9c <__multiply>
 800ee68:	4631      	mov	r1, r6
 800ee6a:	4680      	mov	r8, r0
 800ee6c:	4638      	mov	r0, r7
 800ee6e:	f7ff fe4b 	bl	800eb08 <_Bfree>
 800ee72:	4646      	mov	r6, r8
 800ee74:	106d      	asrs	r5, r5, #1
 800ee76:	d00b      	beq.n	800ee90 <__pow5mult+0xa0>
 800ee78:	6820      	ldr	r0, [r4, #0]
 800ee7a:	b938      	cbnz	r0, 800ee8c <__pow5mult+0x9c>
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4621      	mov	r1, r4
 800ee80:	4638      	mov	r0, r7
 800ee82:	f7ff ff0b 	bl	800ec9c <__multiply>
 800ee86:	6020      	str	r0, [r4, #0]
 800ee88:	f8c0 9000 	str.w	r9, [r0]
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	e7e4      	b.n	800ee5a <__pow5mult+0x6a>
 800ee90:	4630      	mov	r0, r6
 800ee92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee96:	bf00      	nop
 800ee98:	0800fb54 	.word	0x0800fb54
 800ee9c:	0800f9a4 	.word	0x0800f9a4
 800eea0:	0800faf9 	.word	0x0800faf9

0800eea4 <__lshift>:
 800eea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea8:	460c      	mov	r4, r1
 800eeaa:	6849      	ldr	r1, [r1, #4]
 800eeac:	6923      	ldr	r3, [r4, #16]
 800eeae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	4607      	mov	r7, r0
 800eeb6:	4691      	mov	r9, r2
 800eeb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eebc:	f108 0601 	add.w	r6, r8, #1
 800eec0:	42b3      	cmp	r3, r6
 800eec2:	db0b      	blt.n	800eedc <__lshift+0x38>
 800eec4:	4638      	mov	r0, r7
 800eec6:	f7ff fddf 	bl	800ea88 <_Balloc>
 800eeca:	4605      	mov	r5, r0
 800eecc:	b948      	cbnz	r0, 800eee2 <__lshift+0x3e>
 800eece:	4602      	mov	r2, r0
 800eed0:	4b28      	ldr	r3, [pc, #160]	@ (800ef74 <__lshift+0xd0>)
 800eed2:	4829      	ldr	r0, [pc, #164]	@ (800ef78 <__lshift+0xd4>)
 800eed4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eed8:	f7fe fe6c 	bl	800dbb4 <__assert_func>
 800eedc:	3101      	adds	r1, #1
 800eede:	005b      	lsls	r3, r3, #1
 800eee0:	e7ee      	b.n	800eec0 <__lshift+0x1c>
 800eee2:	2300      	movs	r3, #0
 800eee4:	f100 0114 	add.w	r1, r0, #20
 800eee8:	f100 0210 	add.w	r2, r0, #16
 800eeec:	4618      	mov	r0, r3
 800eeee:	4553      	cmp	r3, sl
 800eef0:	db33      	blt.n	800ef5a <__lshift+0xb6>
 800eef2:	6920      	ldr	r0, [r4, #16]
 800eef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eef8:	f104 0314 	add.w	r3, r4, #20
 800eefc:	f019 091f 	ands.w	r9, r9, #31
 800ef00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef08:	d02b      	beq.n	800ef62 <__lshift+0xbe>
 800ef0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ef0e:	468a      	mov	sl, r1
 800ef10:	2200      	movs	r2, #0
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	fa00 f009 	lsl.w	r0, r0, r9
 800ef18:	4310      	orrs	r0, r2
 800ef1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ef1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef22:	459c      	cmp	ip, r3
 800ef24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef28:	d8f3      	bhi.n	800ef12 <__lshift+0x6e>
 800ef2a:	ebac 0304 	sub.w	r3, ip, r4
 800ef2e:	3b15      	subs	r3, #21
 800ef30:	f023 0303 	bic.w	r3, r3, #3
 800ef34:	3304      	adds	r3, #4
 800ef36:	f104 0015 	add.w	r0, r4, #21
 800ef3a:	4584      	cmp	ip, r0
 800ef3c:	bf38      	it	cc
 800ef3e:	2304      	movcc	r3, #4
 800ef40:	50ca      	str	r2, [r1, r3]
 800ef42:	b10a      	cbz	r2, 800ef48 <__lshift+0xa4>
 800ef44:	f108 0602 	add.w	r6, r8, #2
 800ef48:	3e01      	subs	r6, #1
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	612e      	str	r6, [r5, #16]
 800ef4e:	4621      	mov	r1, r4
 800ef50:	f7ff fdda 	bl	800eb08 <_Bfree>
 800ef54:	4628      	mov	r0, r5
 800ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef5e:	3301      	adds	r3, #1
 800ef60:	e7c5      	b.n	800eeee <__lshift+0x4a>
 800ef62:	3904      	subs	r1, #4
 800ef64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef6c:	459c      	cmp	ip, r3
 800ef6e:	d8f9      	bhi.n	800ef64 <__lshift+0xc0>
 800ef70:	e7ea      	b.n	800ef48 <__lshift+0xa4>
 800ef72:	bf00      	nop
 800ef74:	0800fae8 	.word	0x0800fae8
 800ef78:	0800faf9 	.word	0x0800faf9

0800ef7c <__mcmp>:
 800ef7c:	690a      	ldr	r2, [r1, #16]
 800ef7e:	4603      	mov	r3, r0
 800ef80:	6900      	ldr	r0, [r0, #16]
 800ef82:	1a80      	subs	r0, r0, r2
 800ef84:	b530      	push	{r4, r5, lr}
 800ef86:	d10e      	bne.n	800efa6 <__mcmp+0x2a>
 800ef88:	3314      	adds	r3, #20
 800ef8a:	3114      	adds	r1, #20
 800ef8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef9c:	4295      	cmp	r5, r2
 800ef9e:	d003      	beq.n	800efa8 <__mcmp+0x2c>
 800efa0:	d205      	bcs.n	800efae <__mcmp+0x32>
 800efa2:	f04f 30ff 	mov.w	r0, #4294967295
 800efa6:	bd30      	pop	{r4, r5, pc}
 800efa8:	42a3      	cmp	r3, r4
 800efaa:	d3f3      	bcc.n	800ef94 <__mcmp+0x18>
 800efac:	e7fb      	b.n	800efa6 <__mcmp+0x2a>
 800efae:	2001      	movs	r0, #1
 800efb0:	e7f9      	b.n	800efa6 <__mcmp+0x2a>
	...

0800efb4 <__mdiff>:
 800efb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb8:	4689      	mov	r9, r1
 800efba:	4606      	mov	r6, r0
 800efbc:	4611      	mov	r1, r2
 800efbe:	4648      	mov	r0, r9
 800efc0:	4614      	mov	r4, r2
 800efc2:	f7ff ffdb 	bl	800ef7c <__mcmp>
 800efc6:	1e05      	subs	r5, r0, #0
 800efc8:	d112      	bne.n	800eff0 <__mdiff+0x3c>
 800efca:	4629      	mov	r1, r5
 800efcc:	4630      	mov	r0, r6
 800efce:	f7ff fd5b 	bl	800ea88 <_Balloc>
 800efd2:	4602      	mov	r2, r0
 800efd4:	b928      	cbnz	r0, 800efe2 <__mdiff+0x2e>
 800efd6:	4b3f      	ldr	r3, [pc, #252]	@ (800f0d4 <__mdiff+0x120>)
 800efd8:	f240 2137 	movw	r1, #567	@ 0x237
 800efdc:	483e      	ldr	r0, [pc, #248]	@ (800f0d8 <__mdiff+0x124>)
 800efde:	f7fe fde9 	bl	800dbb4 <__assert_func>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efe8:	4610      	mov	r0, r2
 800efea:	b003      	add	sp, #12
 800efec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff0:	bfbc      	itt	lt
 800eff2:	464b      	movlt	r3, r9
 800eff4:	46a1      	movlt	r9, r4
 800eff6:	4630      	mov	r0, r6
 800eff8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800effc:	bfba      	itte	lt
 800effe:	461c      	movlt	r4, r3
 800f000:	2501      	movlt	r5, #1
 800f002:	2500      	movge	r5, #0
 800f004:	f7ff fd40 	bl	800ea88 <_Balloc>
 800f008:	4602      	mov	r2, r0
 800f00a:	b918      	cbnz	r0, 800f014 <__mdiff+0x60>
 800f00c:	4b31      	ldr	r3, [pc, #196]	@ (800f0d4 <__mdiff+0x120>)
 800f00e:	f240 2145 	movw	r1, #581	@ 0x245
 800f012:	e7e3      	b.n	800efdc <__mdiff+0x28>
 800f014:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f018:	6926      	ldr	r6, [r4, #16]
 800f01a:	60c5      	str	r5, [r0, #12]
 800f01c:	f109 0310 	add.w	r3, r9, #16
 800f020:	f109 0514 	add.w	r5, r9, #20
 800f024:	f104 0e14 	add.w	lr, r4, #20
 800f028:	f100 0b14 	add.w	fp, r0, #20
 800f02c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f030:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f034:	9301      	str	r3, [sp, #4]
 800f036:	46d9      	mov	r9, fp
 800f038:	f04f 0c00 	mov.w	ip, #0
 800f03c:	9b01      	ldr	r3, [sp, #4]
 800f03e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f042:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f046:	9301      	str	r3, [sp, #4]
 800f048:	fa1f f38a 	uxth.w	r3, sl
 800f04c:	4619      	mov	r1, r3
 800f04e:	b283      	uxth	r3, r0
 800f050:	1acb      	subs	r3, r1, r3
 800f052:	0c00      	lsrs	r0, r0, #16
 800f054:	4463      	add	r3, ip
 800f056:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f05a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f05e:	b29b      	uxth	r3, r3
 800f060:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f064:	4576      	cmp	r6, lr
 800f066:	f849 3b04 	str.w	r3, [r9], #4
 800f06a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f06e:	d8e5      	bhi.n	800f03c <__mdiff+0x88>
 800f070:	1b33      	subs	r3, r6, r4
 800f072:	3b15      	subs	r3, #21
 800f074:	f023 0303 	bic.w	r3, r3, #3
 800f078:	3415      	adds	r4, #21
 800f07a:	3304      	adds	r3, #4
 800f07c:	42a6      	cmp	r6, r4
 800f07e:	bf38      	it	cc
 800f080:	2304      	movcc	r3, #4
 800f082:	441d      	add	r5, r3
 800f084:	445b      	add	r3, fp
 800f086:	461e      	mov	r6, r3
 800f088:	462c      	mov	r4, r5
 800f08a:	4544      	cmp	r4, r8
 800f08c:	d30e      	bcc.n	800f0ac <__mdiff+0xf8>
 800f08e:	f108 0103 	add.w	r1, r8, #3
 800f092:	1b49      	subs	r1, r1, r5
 800f094:	f021 0103 	bic.w	r1, r1, #3
 800f098:	3d03      	subs	r5, #3
 800f09a:	45a8      	cmp	r8, r5
 800f09c:	bf38      	it	cc
 800f09e:	2100      	movcc	r1, #0
 800f0a0:	440b      	add	r3, r1
 800f0a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0a6:	b191      	cbz	r1, 800f0ce <__mdiff+0x11a>
 800f0a8:	6117      	str	r7, [r2, #16]
 800f0aa:	e79d      	b.n	800efe8 <__mdiff+0x34>
 800f0ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800f0b0:	46e6      	mov	lr, ip
 800f0b2:	0c08      	lsrs	r0, r1, #16
 800f0b4:	fa1c fc81 	uxtah	ip, ip, r1
 800f0b8:	4471      	add	r1, lr
 800f0ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f0be:	b289      	uxth	r1, r1
 800f0c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f0c4:	f846 1b04 	str.w	r1, [r6], #4
 800f0c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0cc:	e7dd      	b.n	800f08a <__mdiff+0xd6>
 800f0ce:	3f01      	subs	r7, #1
 800f0d0:	e7e7      	b.n	800f0a2 <__mdiff+0xee>
 800f0d2:	bf00      	nop
 800f0d4:	0800fae8 	.word	0x0800fae8
 800f0d8:	0800faf9 	.word	0x0800faf9

0800f0dc <__d2b>:
 800f0dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0e0:	460f      	mov	r7, r1
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	ec59 8b10 	vmov	r8, r9, d0
 800f0e8:	4616      	mov	r6, r2
 800f0ea:	f7ff fccd 	bl	800ea88 <_Balloc>
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	b930      	cbnz	r0, 800f100 <__d2b+0x24>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	4b23      	ldr	r3, [pc, #140]	@ (800f184 <__d2b+0xa8>)
 800f0f6:	4824      	ldr	r0, [pc, #144]	@ (800f188 <__d2b+0xac>)
 800f0f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f0fc:	f7fe fd5a 	bl	800dbb4 <__assert_func>
 800f100:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f104:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f108:	b10d      	cbz	r5, 800f10e <__d2b+0x32>
 800f10a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f10e:	9301      	str	r3, [sp, #4]
 800f110:	f1b8 0300 	subs.w	r3, r8, #0
 800f114:	d023      	beq.n	800f15e <__d2b+0x82>
 800f116:	4668      	mov	r0, sp
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	f7ff fd7c 	bl	800ec16 <__lo0bits>
 800f11e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f122:	b1d0      	cbz	r0, 800f15a <__d2b+0x7e>
 800f124:	f1c0 0320 	rsb	r3, r0, #32
 800f128:	fa02 f303 	lsl.w	r3, r2, r3
 800f12c:	430b      	orrs	r3, r1
 800f12e:	40c2      	lsrs	r2, r0
 800f130:	6163      	str	r3, [r4, #20]
 800f132:	9201      	str	r2, [sp, #4]
 800f134:	9b01      	ldr	r3, [sp, #4]
 800f136:	61a3      	str	r3, [r4, #24]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	bf0c      	ite	eq
 800f13c:	2201      	moveq	r2, #1
 800f13e:	2202      	movne	r2, #2
 800f140:	6122      	str	r2, [r4, #16]
 800f142:	b1a5      	cbz	r5, 800f16e <__d2b+0x92>
 800f144:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f148:	4405      	add	r5, r0
 800f14a:	603d      	str	r5, [r7, #0]
 800f14c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f150:	6030      	str	r0, [r6, #0]
 800f152:	4620      	mov	r0, r4
 800f154:	b003      	add	sp, #12
 800f156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f15a:	6161      	str	r1, [r4, #20]
 800f15c:	e7ea      	b.n	800f134 <__d2b+0x58>
 800f15e:	a801      	add	r0, sp, #4
 800f160:	f7ff fd59 	bl	800ec16 <__lo0bits>
 800f164:	9b01      	ldr	r3, [sp, #4]
 800f166:	6163      	str	r3, [r4, #20]
 800f168:	3020      	adds	r0, #32
 800f16a:	2201      	movs	r2, #1
 800f16c:	e7e8      	b.n	800f140 <__d2b+0x64>
 800f16e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f172:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f176:	6038      	str	r0, [r7, #0]
 800f178:	6918      	ldr	r0, [r3, #16]
 800f17a:	f7ff fd2d 	bl	800ebd8 <__hi0bits>
 800f17e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f182:	e7e5      	b.n	800f150 <__d2b+0x74>
 800f184:	0800fae8 	.word	0x0800fae8
 800f188:	0800faf9 	.word	0x0800faf9

0800f18c <__sfputc_r>:
 800f18c:	6893      	ldr	r3, [r2, #8]
 800f18e:	3b01      	subs	r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	b410      	push	{r4}
 800f194:	6093      	str	r3, [r2, #8]
 800f196:	da08      	bge.n	800f1aa <__sfputc_r+0x1e>
 800f198:	6994      	ldr	r4, [r2, #24]
 800f19a:	42a3      	cmp	r3, r4
 800f19c:	db01      	blt.n	800f1a2 <__sfputc_r+0x16>
 800f19e:	290a      	cmp	r1, #10
 800f1a0:	d103      	bne.n	800f1aa <__sfputc_r+0x1e>
 800f1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1a6:	f7fe bbe2 	b.w	800d96e <__swbuf_r>
 800f1aa:	6813      	ldr	r3, [r2, #0]
 800f1ac:	1c58      	adds	r0, r3, #1
 800f1ae:	6010      	str	r0, [r2, #0]
 800f1b0:	7019      	strb	r1, [r3, #0]
 800f1b2:	4608      	mov	r0, r1
 800f1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <__sfputs_r>:
 800f1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1bc:	4606      	mov	r6, r0
 800f1be:	460f      	mov	r7, r1
 800f1c0:	4614      	mov	r4, r2
 800f1c2:	18d5      	adds	r5, r2, r3
 800f1c4:	42ac      	cmp	r4, r5
 800f1c6:	d101      	bne.n	800f1cc <__sfputs_r+0x12>
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	e007      	b.n	800f1dc <__sfputs_r+0x22>
 800f1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d0:	463a      	mov	r2, r7
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7ff ffda 	bl	800f18c <__sfputc_r>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d1f3      	bne.n	800f1c4 <__sfputs_r+0xa>
 800f1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1e0 <_vfiprintf_r>:
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	460d      	mov	r5, r1
 800f1e6:	b09d      	sub	sp, #116	@ 0x74
 800f1e8:	4614      	mov	r4, r2
 800f1ea:	4698      	mov	r8, r3
 800f1ec:	4606      	mov	r6, r0
 800f1ee:	b118      	cbz	r0, 800f1f8 <_vfiprintf_r+0x18>
 800f1f0:	6a03      	ldr	r3, [r0, #32]
 800f1f2:	b90b      	cbnz	r3, 800f1f8 <_vfiprintf_r+0x18>
 800f1f4:	f7fe fad2 	bl	800d79c <__sinit>
 800f1f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1fa:	07d9      	lsls	r1, r3, #31
 800f1fc:	d405      	bmi.n	800f20a <_vfiprintf_r+0x2a>
 800f1fe:	89ab      	ldrh	r3, [r5, #12]
 800f200:	059a      	lsls	r2, r3, #22
 800f202:	d402      	bmi.n	800f20a <_vfiprintf_r+0x2a>
 800f204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f206:	f7fe fcc4 	bl	800db92 <__retarget_lock_acquire_recursive>
 800f20a:	89ab      	ldrh	r3, [r5, #12]
 800f20c:	071b      	lsls	r3, r3, #28
 800f20e:	d501      	bpl.n	800f214 <_vfiprintf_r+0x34>
 800f210:	692b      	ldr	r3, [r5, #16]
 800f212:	b99b      	cbnz	r3, 800f23c <_vfiprintf_r+0x5c>
 800f214:	4629      	mov	r1, r5
 800f216:	4630      	mov	r0, r6
 800f218:	f7fe fbe8 	bl	800d9ec <__swsetup_r>
 800f21c:	b170      	cbz	r0, 800f23c <_vfiprintf_r+0x5c>
 800f21e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f220:	07dc      	lsls	r4, r3, #31
 800f222:	d504      	bpl.n	800f22e <_vfiprintf_r+0x4e>
 800f224:	f04f 30ff 	mov.w	r0, #4294967295
 800f228:	b01d      	add	sp, #116	@ 0x74
 800f22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22e:	89ab      	ldrh	r3, [r5, #12]
 800f230:	0598      	lsls	r0, r3, #22
 800f232:	d4f7      	bmi.n	800f224 <_vfiprintf_r+0x44>
 800f234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f236:	f7fe fcad 	bl	800db94 <__retarget_lock_release_recursive>
 800f23a:	e7f3      	b.n	800f224 <_vfiprintf_r+0x44>
 800f23c:	2300      	movs	r3, #0
 800f23e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f240:	2320      	movs	r3, #32
 800f242:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f246:	f8cd 800c 	str.w	r8, [sp, #12]
 800f24a:	2330      	movs	r3, #48	@ 0x30
 800f24c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3fc <_vfiprintf_r+0x21c>
 800f250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f254:	f04f 0901 	mov.w	r9, #1
 800f258:	4623      	mov	r3, r4
 800f25a:	469a      	mov	sl, r3
 800f25c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f260:	b10a      	cbz	r2, 800f266 <_vfiprintf_r+0x86>
 800f262:	2a25      	cmp	r2, #37	@ 0x25
 800f264:	d1f9      	bne.n	800f25a <_vfiprintf_r+0x7a>
 800f266:	ebba 0b04 	subs.w	fp, sl, r4
 800f26a:	d00b      	beq.n	800f284 <_vfiprintf_r+0xa4>
 800f26c:	465b      	mov	r3, fp
 800f26e:	4622      	mov	r2, r4
 800f270:	4629      	mov	r1, r5
 800f272:	4630      	mov	r0, r6
 800f274:	f7ff ffa1 	bl	800f1ba <__sfputs_r>
 800f278:	3001      	adds	r0, #1
 800f27a:	f000 80a7 	beq.w	800f3cc <_vfiprintf_r+0x1ec>
 800f27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f280:	445a      	add	r2, fp
 800f282:	9209      	str	r2, [sp, #36]	@ 0x24
 800f284:	f89a 3000 	ldrb.w	r3, [sl]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	f000 809f 	beq.w	800f3cc <_vfiprintf_r+0x1ec>
 800f28e:	2300      	movs	r3, #0
 800f290:	f04f 32ff 	mov.w	r2, #4294967295
 800f294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f298:	f10a 0a01 	add.w	sl, sl, #1
 800f29c:	9304      	str	r3, [sp, #16]
 800f29e:	9307      	str	r3, [sp, #28]
 800f2a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2a6:	4654      	mov	r4, sl
 800f2a8:	2205      	movs	r2, #5
 800f2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ae:	4853      	ldr	r0, [pc, #332]	@ (800f3fc <_vfiprintf_r+0x21c>)
 800f2b0:	f7f0 ff8e 	bl	80001d0 <memchr>
 800f2b4:	9a04      	ldr	r2, [sp, #16]
 800f2b6:	b9d8      	cbnz	r0, 800f2f0 <_vfiprintf_r+0x110>
 800f2b8:	06d1      	lsls	r1, r2, #27
 800f2ba:	bf44      	itt	mi
 800f2bc:	2320      	movmi	r3, #32
 800f2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2c2:	0713      	lsls	r3, r2, #28
 800f2c4:	bf44      	itt	mi
 800f2c6:	232b      	movmi	r3, #43	@ 0x2b
 800f2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f2d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2d2:	d015      	beq.n	800f300 <_vfiprintf_r+0x120>
 800f2d4:	9a07      	ldr	r2, [sp, #28]
 800f2d6:	4654      	mov	r4, sl
 800f2d8:	2000      	movs	r0, #0
 800f2da:	f04f 0c0a 	mov.w	ip, #10
 800f2de:	4621      	mov	r1, r4
 800f2e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2e4:	3b30      	subs	r3, #48	@ 0x30
 800f2e6:	2b09      	cmp	r3, #9
 800f2e8:	d94b      	bls.n	800f382 <_vfiprintf_r+0x1a2>
 800f2ea:	b1b0      	cbz	r0, 800f31a <_vfiprintf_r+0x13a>
 800f2ec:	9207      	str	r2, [sp, #28]
 800f2ee:	e014      	b.n	800f31a <_vfiprintf_r+0x13a>
 800f2f0:	eba0 0308 	sub.w	r3, r0, r8
 800f2f4:	fa09 f303 	lsl.w	r3, r9, r3
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	9304      	str	r3, [sp, #16]
 800f2fc:	46a2      	mov	sl, r4
 800f2fe:	e7d2      	b.n	800f2a6 <_vfiprintf_r+0xc6>
 800f300:	9b03      	ldr	r3, [sp, #12]
 800f302:	1d19      	adds	r1, r3, #4
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	9103      	str	r1, [sp, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	bfbb      	ittet	lt
 800f30c:	425b      	neglt	r3, r3
 800f30e:	f042 0202 	orrlt.w	r2, r2, #2
 800f312:	9307      	strge	r3, [sp, #28]
 800f314:	9307      	strlt	r3, [sp, #28]
 800f316:	bfb8      	it	lt
 800f318:	9204      	strlt	r2, [sp, #16]
 800f31a:	7823      	ldrb	r3, [r4, #0]
 800f31c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f31e:	d10a      	bne.n	800f336 <_vfiprintf_r+0x156>
 800f320:	7863      	ldrb	r3, [r4, #1]
 800f322:	2b2a      	cmp	r3, #42	@ 0x2a
 800f324:	d132      	bne.n	800f38c <_vfiprintf_r+0x1ac>
 800f326:	9b03      	ldr	r3, [sp, #12]
 800f328:	1d1a      	adds	r2, r3, #4
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	9203      	str	r2, [sp, #12]
 800f32e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f332:	3402      	adds	r4, #2
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f40c <_vfiprintf_r+0x22c>
 800f33a:	7821      	ldrb	r1, [r4, #0]
 800f33c:	2203      	movs	r2, #3
 800f33e:	4650      	mov	r0, sl
 800f340:	f7f0 ff46 	bl	80001d0 <memchr>
 800f344:	b138      	cbz	r0, 800f356 <_vfiprintf_r+0x176>
 800f346:	9b04      	ldr	r3, [sp, #16]
 800f348:	eba0 000a 	sub.w	r0, r0, sl
 800f34c:	2240      	movs	r2, #64	@ 0x40
 800f34e:	4082      	lsls	r2, r0
 800f350:	4313      	orrs	r3, r2
 800f352:	3401      	adds	r4, #1
 800f354:	9304      	str	r3, [sp, #16]
 800f356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35a:	4829      	ldr	r0, [pc, #164]	@ (800f400 <_vfiprintf_r+0x220>)
 800f35c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f360:	2206      	movs	r2, #6
 800f362:	f7f0 ff35 	bl	80001d0 <memchr>
 800f366:	2800      	cmp	r0, #0
 800f368:	d03f      	beq.n	800f3ea <_vfiprintf_r+0x20a>
 800f36a:	4b26      	ldr	r3, [pc, #152]	@ (800f404 <_vfiprintf_r+0x224>)
 800f36c:	bb1b      	cbnz	r3, 800f3b6 <_vfiprintf_r+0x1d6>
 800f36e:	9b03      	ldr	r3, [sp, #12]
 800f370:	3307      	adds	r3, #7
 800f372:	f023 0307 	bic.w	r3, r3, #7
 800f376:	3308      	adds	r3, #8
 800f378:	9303      	str	r3, [sp, #12]
 800f37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37c:	443b      	add	r3, r7
 800f37e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f380:	e76a      	b.n	800f258 <_vfiprintf_r+0x78>
 800f382:	fb0c 3202 	mla	r2, ip, r2, r3
 800f386:	460c      	mov	r4, r1
 800f388:	2001      	movs	r0, #1
 800f38a:	e7a8      	b.n	800f2de <_vfiprintf_r+0xfe>
 800f38c:	2300      	movs	r3, #0
 800f38e:	3401      	adds	r4, #1
 800f390:	9305      	str	r3, [sp, #20]
 800f392:	4619      	mov	r1, r3
 800f394:	f04f 0c0a 	mov.w	ip, #10
 800f398:	4620      	mov	r0, r4
 800f39a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f39e:	3a30      	subs	r2, #48	@ 0x30
 800f3a0:	2a09      	cmp	r2, #9
 800f3a2:	d903      	bls.n	800f3ac <_vfiprintf_r+0x1cc>
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d0c6      	beq.n	800f336 <_vfiprintf_r+0x156>
 800f3a8:	9105      	str	r1, [sp, #20]
 800f3aa:	e7c4      	b.n	800f336 <_vfiprintf_r+0x156>
 800f3ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e7f0      	b.n	800f398 <_vfiprintf_r+0x1b8>
 800f3b6:	ab03      	add	r3, sp, #12
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	462a      	mov	r2, r5
 800f3bc:	4b12      	ldr	r3, [pc, #72]	@ (800f408 <_vfiprintf_r+0x228>)
 800f3be:	a904      	add	r1, sp, #16
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f7fd fda7 	bl	800cf14 <_printf_float>
 800f3c6:	4607      	mov	r7, r0
 800f3c8:	1c78      	adds	r0, r7, #1
 800f3ca:	d1d6      	bne.n	800f37a <_vfiprintf_r+0x19a>
 800f3cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3ce:	07d9      	lsls	r1, r3, #31
 800f3d0:	d405      	bmi.n	800f3de <_vfiprintf_r+0x1fe>
 800f3d2:	89ab      	ldrh	r3, [r5, #12]
 800f3d4:	059a      	lsls	r2, r3, #22
 800f3d6:	d402      	bmi.n	800f3de <_vfiprintf_r+0x1fe>
 800f3d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3da:	f7fe fbdb 	bl	800db94 <__retarget_lock_release_recursive>
 800f3de:	89ab      	ldrh	r3, [r5, #12]
 800f3e0:	065b      	lsls	r3, r3, #25
 800f3e2:	f53f af1f 	bmi.w	800f224 <_vfiprintf_r+0x44>
 800f3e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3e8:	e71e      	b.n	800f228 <_vfiprintf_r+0x48>
 800f3ea:	ab03      	add	r3, sp, #12
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	462a      	mov	r2, r5
 800f3f0:	4b05      	ldr	r3, [pc, #20]	@ (800f408 <_vfiprintf_r+0x228>)
 800f3f2:	a904      	add	r1, sp, #16
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	f7fe f825 	bl	800d444 <_printf_i>
 800f3fa:	e7e4      	b.n	800f3c6 <_vfiprintf_r+0x1e6>
 800f3fc:	0800fc50 	.word	0x0800fc50
 800f400:	0800fc5a 	.word	0x0800fc5a
 800f404:	0800cf15 	.word	0x0800cf15
 800f408:	0800f1bb 	.word	0x0800f1bb
 800f40c:	0800fc56 	.word	0x0800fc56

0800f410 <__sflush_r>:
 800f410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f418:	0716      	lsls	r6, r2, #28
 800f41a:	4605      	mov	r5, r0
 800f41c:	460c      	mov	r4, r1
 800f41e:	d454      	bmi.n	800f4ca <__sflush_r+0xba>
 800f420:	684b      	ldr	r3, [r1, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	dc02      	bgt.n	800f42c <__sflush_r+0x1c>
 800f426:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f428:	2b00      	cmp	r3, #0
 800f42a:	dd48      	ble.n	800f4be <__sflush_r+0xae>
 800f42c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f42e:	2e00      	cmp	r6, #0
 800f430:	d045      	beq.n	800f4be <__sflush_r+0xae>
 800f432:	2300      	movs	r3, #0
 800f434:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f438:	682f      	ldr	r7, [r5, #0]
 800f43a:	6a21      	ldr	r1, [r4, #32]
 800f43c:	602b      	str	r3, [r5, #0]
 800f43e:	d030      	beq.n	800f4a2 <__sflush_r+0x92>
 800f440:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	0759      	lsls	r1, r3, #29
 800f446:	d505      	bpl.n	800f454 <__sflush_r+0x44>
 800f448:	6863      	ldr	r3, [r4, #4]
 800f44a:	1ad2      	subs	r2, r2, r3
 800f44c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f44e:	b10b      	cbz	r3, 800f454 <__sflush_r+0x44>
 800f450:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f452:	1ad2      	subs	r2, r2, r3
 800f454:	2300      	movs	r3, #0
 800f456:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f458:	6a21      	ldr	r1, [r4, #32]
 800f45a:	4628      	mov	r0, r5
 800f45c:	47b0      	blx	r6
 800f45e:	1c43      	adds	r3, r0, #1
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	d106      	bne.n	800f472 <__sflush_r+0x62>
 800f464:	6829      	ldr	r1, [r5, #0]
 800f466:	291d      	cmp	r1, #29
 800f468:	d82b      	bhi.n	800f4c2 <__sflush_r+0xb2>
 800f46a:	4a2a      	ldr	r2, [pc, #168]	@ (800f514 <__sflush_r+0x104>)
 800f46c:	410a      	asrs	r2, r1
 800f46e:	07d6      	lsls	r6, r2, #31
 800f470:	d427      	bmi.n	800f4c2 <__sflush_r+0xb2>
 800f472:	2200      	movs	r2, #0
 800f474:	6062      	str	r2, [r4, #4]
 800f476:	04d9      	lsls	r1, r3, #19
 800f478:	6922      	ldr	r2, [r4, #16]
 800f47a:	6022      	str	r2, [r4, #0]
 800f47c:	d504      	bpl.n	800f488 <__sflush_r+0x78>
 800f47e:	1c42      	adds	r2, r0, #1
 800f480:	d101      	bne.n	800f486 <__sflush_r+0x76>
 800f482:	682b      	ldr	r3, [r5, #0]
 800f484:	b903      	cbnz	r3, 800f488 <__sflush_r+0x78>
 800f486:	6560      	str	r0, [r4, #84]	@ 0x54
 800f488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f48a:	602f      	str	r7, [r5, #0]
 800f48c:	b1b9      	cbz	r1, 800f4be <__sflush_r+0xae>
 800f48e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f492:	4299      	cmp	r1, r3
 800f494:	d002      	beq.n	800f49c <__sflush_r+0x8c>
 800f496:	4628      	mov	r0, r5
 800f498:	f7ff f9f6 	bl	800e888 <_free_r>
 800f49c:	2300      	movs	r3, #0
 800f49e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4a0:	e00d      	b.n	800f4be <__sflush_r+0xae>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	47b0      	blx	r6
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	1c50      	adds	r0, r2, #1
 800f4ac:	d1c9      	bne.n	800f442 <__sflush_r+0x32>
 800f4ae:	682b      	ldr	r3, [r5, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d0c6      	beq.n	800f442 <__sflush_r+0x32>
 800f4b4:	2b1d      	cmp	r3, #29
 800f4b6:	d001      	beq.n	800f4bc <__sflush_r+0xac>
 800f4b8:	2b16      	cmp	r3, #22
 800f4ba:	d11e      	bne.n	800f4fa <__sflush_r+0xea>
 800f4bc:	602f      	str	r7, [r5, #0]
 800f4be:	2000      	movs	r0, #0
 800f4c0:	e022      	b.n	800f508 <__sflush_r+0xf8>
 800f4c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4c6:	b21b      	sxth	r3, r3
 800f4c8:	e01b      	b.n	800f502 <__sflush_r+0xf2>
 800f4ca:	690f      	ldr	r7, [r1, #16]
 800f4cc:	2f00      	cmp	r7, #0
 800f4ce:	d0f6      	beq.n	800f4be <__sflush_r+0xae>
 800f4d0:	0793      	lsls	r3, r2, #30
 800f4d2:	680e      	ldr	r6, [r1, #0]
 800f4d4:	bf08      	it	eq
 800f4d6:	694b      	ldreq	r3, [r1, #20]
 800f4d8:	600f      	str	r7, [r1, #0]
 800f4da:	bf18      	it	ne
 800f4dc:	2300      	movne	r3, #0
 800f4de:	eba6 0807 	sub.w	r8, r6, r7
 800f4e2:	608b      	str	r3, [r1, #8]
 800f4e4:	f1b8 0f00 	cmp.w	r8, #0
 800f4e8:	dde9      	ble.n	800f4be <__sflush_r+0xae>
 800f4ea:	6a21      	ldr	r1, [r4, #32]
 800f4ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f4ee:	4643      	mov	r3, r8
 800f4f0:	463a      	mov	r2, r7
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	47b0      	blx	r6
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	dc08      	bgt.n	800f50c <__sflush_r+0xfc>
 800f4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f502:	81a3      	strh	r3, [r4, #12]
 800f504:	f04f 30ff 	mov.w	r0, #4294967295
 800f508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50c:	4407      	add	r7, r0
 800f50e:	eba8 0800 	sub.w	r8, r8, r0
 800f512:	e7e7      	b.n	800f4e4 <__sflush_r+0xd4>
 800f514:	dfbffffe 	.word	0xdfbffffe

0800f518 <_fflush_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	690b      	ldr	r3, [r1, #16]
 800f51c:	4605      	mov	r5, r0
 800f51e:	460c      	mov	r4, r1
 800f520:	b913      	cbnz	r3, 800f528 <_fflush_r+0x10>
 800f522:	2500      	movs	r5, #0
 800f524:	4628      	mov	r0, r5
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	b118      	cbz	r0, 800f532 <_fflush_r+0x1a>
 800f52a:	6a03      	ldr	r3, [r0, #32]
 800f52c:	b90b      	cbnz	r3, 800f532 <_fflush_r+0x1a>
 800f52e:	f7fe f935 	bl	800d79c <__sinit>
 800f532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d0f3      	beq.n	800f522 <_fflush_r+0xa>
 800f53a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f53c:	07d0      	lsls	r0, r2, #31
 800f53e:	d404      	bmi.n	800f54a <_fflush_r+0x32>
 800f540:	0599      	lsls	r1, r3, #22
 800f542:	d402      	bmi.n	800f54a <_fflush_r+0x32>
 800f544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f546:	f7fe fb24 	bl	800db92 <__retarget_lock_acquire_recursive>
 800f54a:	4628      	mov	r0, r5
 800f54c:	4621      	mov	r1, r4
 800f54e:	f7ff ff5f 	bl	800f410 <__sflush_r>
 800f552:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f554:	07da      	lsls	r2, r3, #31
 800f556:	4605      	mov	r5, r0
 800f558:	d4e4      	bmi.n	800f524 <_fflush_r+0xc>
 800f55a:	89a3      	ldrh	r3, [r4, #12]
 800f55c:	059b      	lsls	r3, r3, #22
 800f55e:	d4e1      	bmi.n	800f524 <_fflush_r+0xc>
 800f560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f562:	f7fe fb17 	bl	800db94 <__retarget_lock_release_recursive>
 800f566:	e7dd      	b.n	800f524 <_fflush_r+0xc>

0800f568 <fiprintf>:
 800f568:	b40e      	push	{r1, r2, r3}
 800f56a:	b503      	push	{r0, r1, lr}
 800f56c:	4601      	mov	r1, r0
 800f56e:	ab03      	add	r3, sp, #12
 800f570:	4805      	ldr	r0, [pc, #20]	@ (800f588 <fiprintf+0x20>)
 800f572:	f853 2b04 	ldr.w	r2, [r3], #4
 800f576:	6800      	ldr	r0, [r0, #0]
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	f7ff fe31 	bl	800f1e0 <_vfiprintf_r>
 800f57e:	b002      	add	sp, #8
 800f580:	f85d eb04 	ldr.w	lr, [sp], #4
 800f584:	b003      	add	sp, #12
 800f586:	4770      	bx	lr
 800f588:	2000006c 	.word	0x2000006c

0800f58c <__swhatbuf_r>:
 800f58c:	b570      	push	{r4, r5, r6, lr}
 800f58e:	460c      	mov	r4, r1
 800f590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f594:	2900      	cmp	r1, #0
 800f596:	b096      	sub	sp, #88	@ 0x58
 800f598:	4615      	mov	r5, r2
 800f59a:	461e      	mov	r6, r3
 800f59c:	da0d      	bge.n	800f5ba <__swhatbuf_r+0x2e>
 800f59e:	89a3      	ldrh	r3, [r4, #12]
 800f5a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5a4:	f04f 0100 	mov.w	r1, #0
 800f5a8:	bf14      	ite	ne
 800f5aa:	2340      	movne	r3, #64	@ 0x40
 800f5ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	6031      	str	r1, [r6, #0]
 800f5b4:	602b      	str	r3, [r5, #0]
 800f5b6:	b016      	add	sp, #88	@ 0x58
 800f5b8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ba:	466a      	mov	r2, sp
 800f5bc:	f000 f848 	bl	800f650 <_fstat_r>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	dbec      	blt.n	800f59e <__swhatbuf_r+0x12>
 800f5c4:	9901      	ldr	r1, [sp, #4]
 800f5c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f5ce:	4259      	negs	r1, r3
 800f5d0:	4159      	adcs	r1, r3
 800f5d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5d6:	e7eb      	b.n	800f5b0 <__swhatbuf_r+0x24>

0800f5d8 <__smakebuf_r>:
 800f5d8:	898b      	ldrh	r3, [r1, #12]
 800f5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5dc:	079d      	lsls	r5, r3, #30
 800f5de:	4606      	mov	r6, r0
 800f5e0:	460c      	mov	r4, r1
 800f5e2:	d507      	bpl.n	800f5f4 <__smakebuf_r+0x1c>
 800f5e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	6123      	str	r3, [r4, #16]
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	6163      	str	r3, [r4, #20]
 800f5f0:	b003      	add	sp, #12
 800f5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5f4:	ab01      	add	r3, sp, #4
 800f5f6:	466a      	mov	r2, sp
 800f5f8:	f7ff ffc8 	bl	800f58c <__swhatbuf_r>
 800f5fc:	9f00      	ldr	r7, [sp, #0]
 800f5fe:	4605      	mov	r5, r0
 800f600:	4639      	mov	r1, r7
 800f602:	4630      	mov	r0, r6
 800f604:	f7ff f9b4 	bl	800e970 <_malloc_r>
 800f608:	b948      	cbnz	r0, 800f61e <__smakebuf_r+0x46>
 800f60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f60e:	059a      	lsls	r2, r3, #22
 800f610:	d4ee      	bmi.n	800f5f0 <__smakebuf_r+0x18>
 800f612:	f023 0303 	bic.w	r3, r3, #3
 800f616:	f043 0302 	orr.w	r3, r3, #2
 800f61a:	81a3      	strh	r3, [r4, #12]
 800f61c:	e7e2      	b.n	800f5e4 <__smakebuf_r+0xc>
 800f61e:	89a3      	ldrh	r3, [r4, #12]
 800f620:	6020      	str	r0, [r4, #0]
 800f622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f626:	81a3      	strh	r3, [r4, #12]
 800f628:	9b01      	ldr	r3, [sp, #4]
 800f62a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f62e:	b15b      	cbz	r3, 800f648 <__smakebuf_r+0x70>
 800f630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f634:	4630      	mov	r0, r6
 800f636:	f000 f81d 	bl	800f674 <_isatty_r>
 800f63a:	b128      	cbz	r0, 800f648 <__smakebuf_r+0x70>
 800f63c:	89a3      	ldrh	r3, [r4, #12]
 800f63e:	f023 0303 	bic.w	r3, r3, #3
 800f642:	f043 0301 	orr.w	r3, r3, #1
 800f646:	81a3      	strh	r3, [r4, #12]
 800f648:	89a3      	ldrh	r3, [r4, #12]
 800f64a:	431d      	orrs	r5, r3
 800f64c:	81a5      	strh	r5, [r4, #12]
 800f64e:	e7cf      	b.n	800f5f0 <__smakebuf_r+0x18>

0800f650 <_fstat_r>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4d07      	ldr	r5, [pc, #28]	@ (800f670 <_fstat_r+0x20>)
 800f654:	2300      	movs	r3, #0
 800f656:	4604      	mov	r4, r0
 800f658:	4608      	mov	r0, r1
 800f65a:	4611      	mov	r1, r2
 800f65c:	602b      	str	r3, [r5, #0]
 800f65e:	f7f3 fa67 	bl	8002b30 <_fstat>
 800f662:	1c43      	adds	r3, r0, #1
 800f664:	d102      	bne.n	800f66c <_fstat_r+0x1c>
 800f666:	682b      	ldr	r3, [r5, #0]
 800f668:	b103      	cbz	r3, 800f66c <_fstat_r+0x1c>
 800f66a:	6023      	str	r3, [r4, #0]
 800f66c:	bd38      	pop	{r3, r4, r5, pc}
 800f66e:	bf00      	nop
 800f670:	20004ab0 	.word	0x20004ab0

0800f674 <_isatty_r>:
 800f674:	b538      	push	{r3, r4, r5, lr}
 800f676:	4d06      	ldr	r5, [pc, #24]	@ (800f690 <_isatty_r+0x1c>)
 800f678:	2300      	movs	r3, #0
 800f67a:	4604      	mov	r4, r0
 800f67c:	4608      	mov	r0, r1
 800f67e:	602b      	str	r3, [r5, #0]
 800f680:	f7f3 fa66 	bl	8002b50 <_isatty>
 800f684:	1c43      	adds	r3, r0, #1
 800f686:	d102      	bne.n	800f68e <_isatty_r+0x1a>
 800f688:	682b      	ldr	r3, [r5, #0]
 800f68a:	b103      	cbz	r3, 800f68e <_isatty_r+0x1a>
 800f68c:	6023      	str	r3, [r4, #0]
 800f68e:	bd38      	pop	{r3, r4, r5, pc}
 800f690:	20004ab0 	.word	0x20004ab0

0800f694 <_sbrk_r>:
 800f694:	b538      	push	{r3, r4, r5, lr}
 800f696:	4d06      	ldr	r5, [pc, #24]	@ (800f6b0 <_sbrk_r+0x1c>)
 800f698:	2300      	movs	r3, #0
 800f69a:	4604      	mov	r4, r0
 800f69c:	4608      	mov	r0, r1
 800f69e:	602b      	str	r3, [r5, #0]
 800f6a0:	f7f3 fa6e 	bl	8002b80 <_sbrk>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d102      	bne.n	800f6ae <_sbrk_r+0x1a>
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	b103      	cbz	r3, 800f6ae <_sbrk_r+0x1a>
 800f6ac:	6023      	str	r3, [r4, #0]
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	20004ab0 	.word	0x20004ab0

0800f6b4 <abort>:
 800f6b4:	b508      	push	{r3, lr}
 800f6b6:	2006      	movs	r0, #6
 800f6b8:	f000 f85e 	bl	800f778 <raise>
 800f6bc:	2001      	movs	r0, #1
 800f6be:	f7f3 f9e7 	bl	8002a90 <_exit>

0800f6c2 <_calloc_r>:
 800f6c2:	b570      	push	{r4, r5, r6, lr}
 800f6c4:	fba1 5402 	umull	r5, r4, r1, r2
 800f6c8:	b93c      	cbnz	r4, 800f6da <_calloc_r+0x18>
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	f7ff f950 	bl	800e970 <_malloc_r>
 800f6d0:	4606      	mov	r6, r0
 800f6d2:	b928      	cbnz	r0, 800f6e0 <_calloc_r+0x1e>
 800f6d4:	2600      	movs	r6, #0
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	bd70      	pop	{r4, r5, r6, pc}
 800f6da:	220c      	movs	r2, #12
 800f6dc:	6002      	str	r2, [r0, #0]
 800f6de:	e7f9      	b.n	800f6d4 <_calloc_r+0x12>
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	4621      	mov	r1, r4
 800f6e4:	f7fe f9d8 	bl	800da98 <memset>
 800f6e8:	e7f5      	b.n	800f6d6 <_calloc_r+0x14>

0800f6ea <__ascii_mbtowc>:
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	b901      	cbnz	r1, 800f6f0 <__ascii_mbtowc+0x6>
 800f6ee:	a901      	add	r1, sp, #4
 800f6f0:	b142      	cbz	r2, 800f704 <__ascii_mbtowc+0x1a>
 800f6f2:	b14b      	cbz	r3, 800f708 <__ascii_mbtowc+0x1e>
 800f6f4:	7813      	ldrb	r3, [r2, #0]
 800f6f6:	600b      	str	r3, [r1, #0]
 800f6f8:	7812      	ldrb	r2, [r2, #0]
 800f6fa:	1e10      	subs	r0, r2, #0
 800f6fc:	bf18      	it	ne
 800f6fe:	2001      	movne	r0, #1
 800f700:	b002      	add	sp, #8
 800f702:	4770      	bx	lr
 800f704:	4610      	mov	r0, r2
 800f706:	e7fb      	b.n	800f700 <__ascii_mbtowc+0x16>
 800f708:	f06f 0001 	mvn.w	r0, #1
 800f70c:	e7f8      	b.n	800f700 <__ascii_mbtowc+0x16>

0800f70e <__ascii_wctomb>:
 800f70e:	4603      	mov	r3, r0
 800f710:	4608      	mov	r0, r1
 800f712:	b141      	cbz	r1, 800f726 <__ascii_wctomb+0x18>
 800f714:	2aff      	cmp	r2, #255	@ 0xff
 800f716:	d904      	bls.n	800f722 <__ascii_wctomb+0x14>
 800f718:	228a      	movs	r2, #138	@ 0x8a
 800f71a:	601a      	str	r2, [r3, #0]
 800f71c:	f04f 30ff 	mov.w	r0, #4294967295
 800f720:	4770      	bx	lr
 800f722:	700a      	strb	r2, [r1, #0]
 800f724:	2001      	movs	r0, #1
 800f726:	4770      	bx	lr

0800f728 <_raise_r>:
 800f728:	291f      	cmp	r1, #31
 800f72a:	b538      	push	{r3, r4, r5, lr}
 800f72c:	4605      	mov	r5, r0
 800f72e:	460c      	mov	r4, r1
 800f730:	d904      	bls.n	800f73c <_raise_r+0x14>
 800f732:	2316      	movs	r3, #22
 800f734:	6003      	str	r3, [r0, #0]
 800f736:	f04f 30ff 	mov.w	r0, #4294967295
 800f73a:	bd38      	pop	{r3, r4, r5, pc}
 800f73c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f73e:	b112      	cbz	r2, 800f746 <_raise_r+0x1e>
 800f740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f744:	b94b      	cbnz	r3, 800f75a <_raise_r+0x32>
 800f746:	4628      	mov	r0, r5
 800f748:	f000 f830 	bl	800f7ac <_getpid_r>
 800f74c:	4622      	mov	r2, r4
 800f74e:	4601      	mov	r1, r0
 800f750:	4628      	mov	r0, r5
 800f752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f756:	f000 b817 	b.w	800f788 <_kill_r>
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d00a      	beq.n	800f774 <_raise_r+0x4c>
 800f75e:	1c59      	adds	r1, r3, #1
 800f760:	d103      	bne.n	800f76a <_raise_r+0x42>
 800f762:	2316      	movs	r3, #22
 800f764:	6003      	str	r3, [r0, #0]
 800f766:	2001      	movs	r0, #1
 800f768:	e7e7      	b.n	800f73a <_raise_r+0x12>
 800f76a:	2100      	movs	r1, #0
 800f76c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f770:	4620      	mov	r0, r4
 800f772:	4798      	blx	r3
 800f774:	2000      	movs	r0, #0
 800f776:	e7e0      	b.n	800f73a <_raise_r+0x12>

0800f778 <raise>:
 800f778:	4b02      	ldr	r3, [pc, #8]	@ (800f784 <raise+0xc>)
 800f77a:	4601      	mov	r1, r0
 800f77c:	6818      	ldr	r0, [r3, #0]
 800f77e:	f7ff bfd3 	b.w	800f728 <_raise_r>
 800f782:	bf00      	nop
 800f784:	2000006c 	.word	0x2000006c

0800f788 <_kill_r>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	4d07      	ldr	r5, [pc, #28]	@ (800f7a8 <_kill_r+0x20>)
 800f78c:	2300      	movs	r3, #0
 800f78e:	4604      	mov	r4, r0
 800f790:	4608      	mov	r0, r1
 800f792:	4611      	mov	r1, r2
 800f794:	602b      	str	r3, [r5, #0]
 800f796:	f7f3 f96b 	bl	8002a70 <_kill>
 800f79a:	1c43      	adds	r3, r0, #1
 800f79c:	d102      	bne.n	800f7a4 <_kill_r+0x1c>
 800f79e:	682b      	ldr	r3, [r5, #0]
 800f7a0:	b103      	cbz	r3, 800f7a4 <_kill_r+0x1c>
 800f7a2:	6023      	str	r3, [r4, #0]
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}
 800f7a6:	bf00      	nop
 800f7a8:	20004ab0 	.word	0x20004ab0

0800f7ac <_getpid_r>:
 800f7ac:	f7f3 b958 	b.w	8002a60 <_getpid>

0800f7b0 <_init>:
 800f7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b2:	bf00      	nop
 800f7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7b6:	bc08      	pop	{r3}
 800f7b8:	469e      	mov	lr, r3
 800f7ba:	4770      	bx	lr

0800f7bc <_fini>:
 800f7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7be:	bf00      	nop
 800f7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7c2:	bc08      	pop	{r3}
 800f7c4:	469e      	mov	lr, r3
 800f7c6:	4770      	bx	lr
