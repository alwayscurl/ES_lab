
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800f578  0800f578  00010578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fae4  0800fae4  00011224  2**0
                  CONTENTS
  4 .ARM          00000008  0800fae4  0800fae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800faec  0800faec  00011224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800faec  0800faec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800faf0  0800faf0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800faf4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f20  20000224  0800fd18  00011224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003144  0800fd18  00012144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e156  00000000  00000000  00011254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006698  00000000  00000000  0003f3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002778  00000000  00000000  00045a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e65  00000000  00000000  000481c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ecf  00000000  00000000  0004a025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030c5f  00000000  00000000  0007aef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011613a  00000000  00000000  000abb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c1c8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b6b8  00000000  00000000  001c1cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001cd388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f560 	.word	0x0800f560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800f560 	.word	0x0800f560

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001078 <MX_BlueNRG_MS_Init+0x140>)
 8000f40:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000f42:	f000 f8ad 	bl	80010a0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f001 fe22 	bl	8002b90 <BSP_PB_GetState>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <MX_BlueNRG_MS_Init+0x144>)
 8000f52:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f54:	2100      	movs	r1, #0
 8000f56:	484a      	ldr	r0, [pc, #296]	@ (8001080 <MX_BlueNRG_MS_Init+0x148>)
 8000f58:	f007 ffc8 	bl	8008eec <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f5c:	1dba      	adds	r2, r7, #6
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f007 fe36 	bl	8008bd6 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000f6a:	f007 fe78 	bl	8008c5e <hci_reset>
  HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	@ 0x64
 8000f70:	f002 fb7a 	bl	8003668 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f74:	7a3b      	ldrb	r3, [r7, #8]
 8000f76:	2b30      	cmp	r3, #48	@ 0x30
 8000f78:	d902      	bls.n	8000f80 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000f80:	f107 0209 	add.w	r2, r7, #9
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f86:	2106      	movs	r1, #6
 8000f88:	2080      	movs	r0, #128	@ 0x80
 8000f8a:	f007 fd9e 	bl	8008aca <aci_hal_read_config_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f9c:	d001      	beq.n	8000fa2 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000fa2:	f007 fb5e 	bl	8008662 <aci_gatt_init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000faa:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d110      	bne.n	8000fd4 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fb2:	f107 020e 	add.w	r2, r7, #14
 8000fb6:	f107 030a 	add.w	r3, r7, #10
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f007 f91e 	bl	800820a <aci_gap_init_IDB05A1>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e00a      	b.n	8000fea <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fd4:	f107 030a 	add.w	r3, r7, #10
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	f107 010e 	add.w	r1, r7, #14
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f007 f962 	bl	80082aa <aci_gap_init_IDB04A1>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000fea:	89fc      	ldrh	r4, [r7, #14]
 8000fec:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff f93e 	bl	8000270 <strlen>
 8000ff4:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	4629      	mov	r1, r5
 8001002:	4620      	mov	r0, r4
 8001004:	f007 fca4 	bl	8008950 <aci_gatt_update_char_value>
 8001008:	4603      	mov	r3, r0
 800100a:	613b      	str	r3, [r7, #16]
  if (ret) {
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8001012:	bf00      	nop
 8001014:	e7fd      	b.n	8001012 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001016:	2301      	movs	r3, #1
 8001018:	9303      	str	r3, [sp, #12]
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_BlueNRG_MS_Init+0x154>)
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2300      	movs	r3, #0
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	2310      	movs	r3, #16
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2307      	movs	r3, #7
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2001      	movs	r0, #1
 800102e:	f007 fa70 	bl	8008512 <aci_gap_set_auth_requirement>
 8001032:	4603      	mov	r3, r0
 8001034:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8001040:	f000 f860 	bl	8001104 <Add_HWServW2ST_Service>
 8001044:	4603      	mov	r3, r0
 8001046:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8001052:	f000 f929 	bl	80012a8 <Add_SWServW2ST_Service>
 8001056:	4603      	mov	r3, r0
 8001058:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8001064:	2104      	movs	r1, #4
 8001066:	2001      	movs	r0, #1
 8001068:	f007 fd84 	bl	8008b74 <aci_hal_set_tx_power_level>
 800106c:	4603      	mov	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bdb0      	pop	{r4, r5, r7, pc}
 8001078:	0800f578 	.word	0x0800f578
 800107c:	20000000 	.word	0x20000000
 8001080:	0800172d 	.word	0x0800172d
 8001084:	20000240 	.word	0x20000240
 8001088:	20000244 	.word	0x20000244
 800108c:	0001e240 	.word	0x0001e240

08001090 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8001094:	f000 f812 	bl	80010bc <User_Process>
  hci_user_evt_proc();
 8001098:	f008 f8a2 	bl	80091e0 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2000      	movs	r0, #0
 80010a8:	f001 fd1e 	bl	8002ae8 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f001 fcb3 	bl	8002a18 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f001 fdca 	bl	8002c4c <BSP_COM_Init>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <User_Process+0x24>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <User_Process+0x18>
  {
    Set_DeviceConnectable();
 80010ca:	f000 fabb 	bl	8001644 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80010ce:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <User_Process+0x24>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f001 fcb1 	bl	8002a3c <BSP_LED_Toggle>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000001 	.word	0x20000001

080010e4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <BSP_PB_Callback+0x1c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	2000024a 	.word	0x2000024a

08001104 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08d      	sub	sp, #52	@ 0x34
 8001108:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800110a:	231b      	movs	r3, #27
 800110c:	713b      	strb	r3, [r7, #4]
 800110e:	23c5      	movs	r3, #197	@ 0xc5
 8001110:	717b      	strb	r3, [r7, #5]
 8001112:	23d5      	movs	r3, #213	@ 0xd5
 8001114:	71bb      	strb	r3, [r7, #6]
 8001116:	23a5      	movs	r3, #165	@ 0xa5
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	2302      	movs	r3, #2
 800111c:	723b      	strb	r3, [r7, #8]
 800111e:	2300      	movs	r3, #0
 8001120:	727b      	strb	r3, [r7, #9]
 8001122:	23b4      	movs	r3, #180	@ 0xb4
 8001124:	72bb      	strb	r3, [r7, #10]
 8001126:	239a      	movs	r3, #154	@ 0x9a
 8001128:	72fb      	strb	r3, [r7, #11]
 800112a:	23e1      	movs	r3, #225	@ 0xe1
 800112c:	733b      	strb	r3, [r7, #12]
 800112e:	2311      	movs	r3, #17
 8001130:	737b      	strb	r3, [r7, #13]
 8001132:	2301      	movs	r3, #1
 8001134:	73bb      	strb	r3, [r7, #14]
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	2300      	movs	r3, #0
 800113c:	743b      	strb	r3, [r7, #16]
 800113e:	2300      	movs	r3, #0
 8001140:	747b      	strb	r3, [r7, #17]
 8001142:	2300      	movs	r3, #0
 8001144:	74bb      	strb	r3, [r7, #18]
 8001146:	2300      	movs	r3, #0
 8001148:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800114a:	4b52      	ldr	r3, [pc, #328]	@ (8001294 <Add_HWServW2ST_Service+0x190>)
 800114c:	461c      	mov	r4, r3
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001156:	4b50      	ldr	r3, [pc, #320]	@ (8001298 <Add_HWServW2ST_Service+0x194>)
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2310      	movs	r3, #16
 800115c:	2201      	movs	r2, #1
 800115e:	494d      	ldr	r1, [pc, #308]	@ (8001294 <Add_HWServW2ST_Service+0x190>)
 8001160:	2002      	movs	r0, #2
 8001162:	f007 faa1 	bl	80086a8 <aci_gatt_add_serv>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8001170:	2347      	movs	r3, #71	@ 0x47
 8001172:	e08a      	b.n	800128a <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001174:	231b      	movs	r3, #27
 8001176:	713b      	strb	r3, [r7, #4]
 8001178:	23c5      	movs	r3, #197	@ 0xc5
 800117a:	717b      	strb	r3, [r7, #5]
 800117c:	23d5      	movs	r3, #213	@ 0xd5
 800117e:	71bb      	strb	r3, [r7, #6]
 8001180:	23a5      	movs	r3, #165	@ 0xa5
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	2302      	movs	r3, #2
 8001186:	723b      	strb	r3, [r7, #8]
 8001188:	2300      	movs	r3, #0
 800118a:	727b      	strb	r3, [r7, #9]
 800118c:	2336      	movs	r3, #54	@ 0x36
 800118e:	72bb      	strb	r3, [r7, #10]
 8001190:	23ac      	movs	r3, #172	@ 0xac
 8001192:	72fb      	strb	r3, [r7, #11]
 8001194:	23e1      	movs	r3, #225	@ 0xe1
 8001196:	733b      	strb	r3, [r7, #12]
 8001198:	2311      	movs	r3, #17
 800119a:	737b      	strb	r3, [r7, #13]
 800119c:	2301      	movs	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	2300      	movs	r3, #0
 80011a6:	743b      	strb	r3, [r7, #16]
 80011a8:	2300      	movs	r3, #0
 80011aa:	747b      	strb	r3, [r7, #17]
 80011ac:	2300      	movs	r3, #0
 80011ae:	74bb      	strb	r3, [r7, #18]
 80011b0:	2300      	movs	r3, #0
 80011b2:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80011b4:	7cbb      	ldrb	r3, [r7, #18]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80011be:	7cbb      	ldrb	r3, [r7, #18]
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80011c8:	4b34      	ldr	r3, [pc, #208]	@ (800129c <Add_HWServW2ST_Service+0x198>)
 80011ca:	461c      	mov	r4, r3
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <Add_HWServW2ST_Service+0x194>)
 80011d6:	8818      	ldrh	r0, [r3, #0]
 80011d8:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <Add_HWServW2ST_Service+0x19c>)
 80011da:	9305      	str	r3, [sp, #20]
 80011dc:	2300      	movs	r3, #0
 80011de:	9304      	str	r3, [sp, #16]
 80011e0:	2310      	movs	r3, #16
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	2304      	movs	r3, #4
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2300      	movs	r3, #0
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	2312      	movs	r3, #18
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2308      	movs	r3, #8
 80011f2:	4a2a      	ldr	r2, [pc, #168]	@ (800129c <Add_HWServW2ST_Service+0x198>)
 80011f4:	2102      	movs	r1, #2
 80011f6:	f007 fae0 	bl	80087ba <aci_gatt_add_char>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8001204:	2347      	movs	r3, #71	@ 0x47
 8001206:	e040      	b.n	800128a <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001208:	231b      	movs	r3, #27
 800120a:	713b      	strb	r3, [r7, #4]
 800120c:	23c5      	movs	r3, #197	@ 0xc5
 800120e:	717b      	strb	r3, [r7, #5]
 8001210:	23d5      	movs	r3, #213	@ 0xd5
 8001212:	71bb      	strb	r3, [r7, #6]
 8001214:	23a5      	movs	r3, #165	@ 0xa5
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	2302      	movs	r3, #2
 800121a:	723b      	strb	r3, [r7, #8]
 800121c:	2300      	movs	r3, #0
 800121e:	727b      	strb	r3, [r7, #9]
 8001220:	2336      	movs	r3, #54	@ 0x36
 8001222:	72bb      	strb	r3, [r7, #10]
 8001224:	23ac      	movs	r3, #172	@ 0xac
 8001226:	72fb      	strb	r3, [r7, #11]
 8001228:	23e1      	movs	r3, #225	@ 0xe1
 800122a:	733b      	strb	r3, [r7, #12]
 800122c:	2311      	movs	r3, #17
 800122e:	737b      	strb	r3, [r7, #13]
 8001230:	2301      	movs	r3, #1
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	2300      	movs	r3, #0
 800123a:	743b      	strb	r3, [r7, #16]
 800123c:	2300      	movs	r3, #0
 800123e:	747b      	strb	r3, [r7, #17]
 8001240:	23e0      	movs	r3, #224	@ 0xe0
 8001242:	74bb      	strb	r3, [r7, #18]
 8001244:	2300      	movs	r3, #0
 8001246:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <Add_HWServW2ST_Service+0x198>)
 800124a:	461c      	mov	r4, r3
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <Add_HWServW2ST_Service+0x194>)
 8001256:	8818      	ldrh	r0, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <Add_HWServW2ST_Service+0x1a0>)
 800125a:	9305      	str	r3, [sp, #20]
 800125c:	2300      	movs	r3, #0
 800125e:	9304      	str	r3, [sp, #16]
 8001260:	2310      	movs	r3, #16
 8001262:	9303      	str	r3, [sp, #12]
 8001264:	2304      	movs	r3, #4
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2300      	movs	r3, #0
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	2310      	movs	r3, #16
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2314      	movs	r3, #20
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <Add_HWServW2ST_Service+0x198>)
 8001274:	2102      	movs	r1, #2
 8001276:	f007 faa0 	bl	80087ba <aci_gatt_add_char>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8001284:	2347      	movs	r3, #71	@ 0x47
 8001286:	e000      	b.n	800128a <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	bf00      	nop
 8001294:	20000258 	.word	0x20000258
 8001298:	2000024c 	.word	0x2000024c
 800129c:	20000268 	.word	0x20000268
 80012a0:	2000024e 	.word	0x2000024e
 80012a4:	20000250 	.word	0x20000250

080012a8 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08d      	sub	sp, #52	@ 0x34
 80012ac:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80012b2:	231b      	movs	r3, #27
 80012b4:	703b      	strb	r3, [r7, #0]
 80012b6:	23c5      	movs	r3, #197	@ 0xc5
 80012b8:	707b      	strb	r3, [r7, #1]
 80012ba:	23d5      	movs	r3, #213	@ 0xd5
 80012bc:	70bb      	strb	r3, [r7, #2]
 80012be:	23a5      	movs	r3, #165	@ 0xa5
 80012c0:	70fb      	strb	r3, [r7, #3]
 80012c2:	2302      	movs	r3, #2
 80012c4:	713b      	strb	r3, [r7, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	717b      	strb	r3, [r7, #5]
 80012ca:	23b4      	movs	r3, #180	@ 0xb4
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	239a      	movs	r3, #154	@ 0x9a
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	23e1      	movs	r3, #225	@ 0xe1
 80012d4:	723b      	strb	r3, [r7, #8]
 80012d6:	2311      	movs	r3, #17
 80012d8:	727b      	strb	r3, [r7, #9]
 80012da:	2302      	movs	r3, #2
 80012dc:	72bb      	strb	r3, [r7, #10]
 80012de:	2300      	movs	r3, #0
 80012e0:	72fb      	strb	r3, [r7, #11]
 80012e2:	2300      	movs	r3, #0
 80012e4:	733b      	strb	r3, [r7, #12]
 80012e6:	2300      	movs	r3, #0
 80012e8:	737b      	strb	r3, [r7, #13]
 80012ea:	2300      	movs	r3, #0
 80012ec:	73bb      	strb	r3, [r7, #14]
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80012f2:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <Add_SWServW2ST_Service+0x110>)
 80012f4:	461c      	mov	r4, r3
 80012f6:	463b      	mov	r3, r7
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	0052      	lsls	r2, r2, #1
 8001306:	4413      	add	r3, r2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	3301      	adds	r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4a2b      	ldr	r2, [pc, #172]	@ (80013bc <Add_SWServW2ST_Service+0x114>)
 8001310:	9200      	str	r2, [sp, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4928      	ldr	r1, [pc, #160]	@ (80013b8 <Add_SWServW2ST_Service+0x110>)
 8001316:	2002      	movs	r0, #2
 8001318:	f007 f9c6 	bl	80086a8 <aci_gatt_add_serv>
 800131c:	4603      	mov	r3, r0
 800131e:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001320:	7cfb      	ldrb	r3, [r7, #19]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d13f      	bne.n	80013a6 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001326:	231b      	movs	r3, #27
 8001328:	703b      	strb	r3, [r7, #0]
 800132a:	23c5      	movs	r3, #197	@ 0xc5
 800132c:	707b      	strb	r3, [r7, #1]
 800132e:	23d5      	movs	r3, #213	@ 0xd5
 8001330:	70bb      	strb	r3, [r7, #2]
 8001332:	23a5      	movs	r3, #165	@ 0xa5
 8001334:	70fb      	strb	r3, [r7, #3]
 8001336:	2302      	movs	r3, #2
 8001338:	713b      	strb	r3, [r7, #4]
 800133a:	2300      	movs	r3, #0
 800133c:	717b      	strb	r3, [r7, #5]
 800133e:	2336      	movs	r3, #54	@ 0x36
 8001340:	71bb      	strb	r3, [r7, #6]
 8001342:	23ac      	movs	r3, #172	@ 0xac
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	23e1      	movs	r3, #225	@ 0xe1
 8001348:	723b      	strb	r3, [r7, #8]
 800134a:	2311      	movs	r3, #17
 800134c:	727b      	strb	r3, [r7, #9]
 800134e:	2301      	movs	r3, #1
 8001350:	72bb      	strb	r3, [r7, #10]
 8001352:	2300      	movs	r3, #0
 8001354:	72fb      	strb	r3, [r7, #11]
 8001356:	2300      	movs	r3, #0
 8001358:	733b      	strb	r3, [r7, #12]
 800135a:	2301      	movs	r3, #1
 800135c:	737b      	strb	r3, [r7, #13]
 800135e:	2300      	movs	r3, #0
 8001360:	73bb      	strb	r3, [r7, #14]
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <Add_SWServW2ST_Service+0x118>)
 8001368:	461c      	mov	r4, r3
 800136a:	463b      	mov	r3, r7
 800136c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <Add_SWServW2ST_Service+0x114>)
 8001374:	8818      	ldrh	r0, [r3, #0]
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <Add_SWServW2ST_Service+0x11c>)
 8001378:	9305      	str	r3, [sp, #20]
 800137a:	2300      	movs	r3, #0
 800137c:	9304      	str	r3, [sp, #16]
 800137e:	2310      	movs	r3, #16
 8001380:	9303      	str	r3, [sp, #12]
 8001382:	2304      	movs	r3, #4
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2300      	movs	r3, #0
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	2310      	movs	r3, #16
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2308      	movs	r3, #8
 8001390:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <Add_SWServW2ST_Service+0x118>)
 8001392:	2102      	movs	r1, #2
 8001394:	f007 fa11 	bl	80087ba <aci_gatt_add_char>
 8001398:	4603      	mov	r3, r0
 800139a:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800139c:	7cfb      	ldrb	r3, [r7, #19]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e003      	b.n	80013ae <Add_SWServW2ST_Service+0x106>
    goto fail;
 80013a6:	bf00      	nop
 80013a8:	e000      	b.n	80013ac <Add_SWServW2ST_Service+0x104>
    goto fail;
 80013aa:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80013ac:	2347      	movs	r3, #71	@ 0x47
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000258 	.word	0x20000258
 80013bc:	20000252 	.word	0x20000252
 80013c0:	20000268 	.word	0x20000268
 80013c4:	20000254 	.word	0x20000254

080013c8 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(int waterintake)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	6078      	str	r0, [r7, #4]
//  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
//
//  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
//  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
//  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
  HOST_TO_LE_16(buff, (int16_t)waterintake);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	733b      	strb	r3, [r7, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	737b      	strb	r3, [r7, #13]
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <Acc_Update+0x58>)
 80013e4:	8818      	ldrh	r0, [r3, #0]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <Acc_Update+0x5c>)
 80013e8:	8819      	ldrh	r1, [r3, #0]
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2302      	movs	r3, #2
 80013f2:	2200      	movs	r2, #0
 80013f4:	f007 faac 	bl	8008950 <aci_gatt_update_char_value>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
				   0, 2, buff);
  printf("after ret\r\n");
 80013fc:	480a      	ldr	r0, [pc, #40]	@ (8001428 <Acc_Update+0x60>)
 80013fe:	f00c f943 	bl	800d688 <puts>
  if (ret != BLE_STATUS_SUCCESS){
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <Acc_Update+0x4e>
    printf("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	@ (800142c <Acc_Update+0x64>)
 800140e:	f00c f8d3 	bl	800d5b8 <iprintf>
    return BLE_STATUS_ERROR ;
 8001412:	2347      	movs	r3, #71	@ 0x47
 8001414:	e000      	b.n	8001418 <Acc_Update+0x50>
  }

  return BLE_STATUS_SUCCESS;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000024c 	.word	0x2000024c
 8001424:	20000250 	.word	0x20000250
 8001428:	0800f580 	.word	0x0800f580
 800142c:	0800f58c 	.word	0x0800f58c

08001430 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001434:	b08e      	sub	sp, #56	@ 0x38
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 800143c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800143e:	4b57      	ldr	r3, [pc, #348]	@ (800159c <Read_Request_CB+0x16c>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	429a      	cmp	r2, r3
 8001446:	d105      	bne.n	8001454 <Read_Request_CB+0x24>
  {
    Acc_Update(waterintake);
 8001448:	4b55      	ldr	r3, [pc, #340]	@ (80015a0 <Read_Request_CB+0x170>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ffbb 	bl	80013c8 <Acc_Update>
 8001452:	e091      	b.n	8001578 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001454:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001456:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <Read_Request_CB+0x174>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 808b 	bne.w	8001578 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001462:	f00b fb51 	bl	800cb08 <rand>
 8001466:	4603      	mov	r3, r0
 8001468:	17da      	asrs	r2, r3, #31
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	61fa      	str	r2, [r7, #28]
 800146e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001472:	f04f 0000 	mov.w	r0, #0
 8001476:	f04f 0100 	mov.w	r1, #0
 800147a:	0099      	lsls	r1, r3, #2
 800147c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001480:	0090      	lsls	r0, r2, #2
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	1851      	adds	r1, r2, r1
 800148a:	6139      	str	r1, [r7, #16]
 800148c:	69f9      	ldr	r1, [r7, #28]
 800148e:	eb43 0101 	adc.w	r1, r3, r1
 8001492:	6179      	str	r1, [r7, #20]
 8001494:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a0:	f7ff fbd2 	bl	8000c48 <__aeabi_uldivmod>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff f86e 	bl	800058c <__aeabi_ul2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <Read_Request_CB+0x178>)
 80014b6:	f7fe fee9 	bl	800028c <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fb71 	bl	8000ba8 <__aeabi_d2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80014ca:	f00b fb1d 	bl	800cb08 <rand>
 80014ce:	4603      	mov	r3, r0
 80014d0:	17da      	asrs	r2, r3, #31
 80014d2:	4698      	mov	r8, r3
 80014d4:	4691      	mov	r9, r2
 80014d6:	4642      	mov	r2, r8
 80014d8:	464b      	mov	r3, r9
 80014da:	1891      	adds	r1, r2, r2
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	415b      	adcs	r3, r3
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014e6:	eb12 0408 	adds.w	r4, r2, r8
 80014ea:	eb43 0509 	adc.w	r5, r3, r9
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	016b      	lsls	r3, r5, #5
 80014f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80014fc:	0162      	lsls	r2, r4, #5
 80014fe:	eb14 0a02 	adds.w	sl, r4, r2
 8001502:	eb45 0b03 	adc.w	fp, r5, r3
 8001506:	eb1a 0308 	adds.w	r3, sl, r8
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	eb4b 0309 	adc.w	r3, fp, r9
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800151e:	f7ff fb93 	bl	8000c48 <__aeabi_uldivmod>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff f82f 	bl	800058c <__aeabi_ul2d>
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <Read_Request_CB+0x17c>)
 8001534:	f7fe feaa 	bl	800028c <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb32 	bl	8000ba8 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001548:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800154c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80015b0 <Read_Request_CB+0x180>
 8001550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001554:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001558:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800155c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001568:	ee17 3a90 	vmov	r3, s15
 800156c:	b21b      	sxth	r3, r3
 800156e:	4619      	mov	r1, r3
 8001570:	ee16 0a90 	vmov	r0, s13
 8001574:	f000 f820 	bl	80015b8 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <Read_Request_CB+0x184>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <Read_Request_CB+0x184>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f007 fa73 	bl	8008a70 <aci_gatt_allow_read>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8001590:	bf00      	nop
 8001592:	3738      	adds	r7, #56	@ 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800159a:	bf00      	nop
 800159c:	20000250 	.word	0x20000250
 80015a0:	20001278 	.word	0x20001278
 80015a4:	2000024e 	.word	0x2000024e
 80015a8:	403b0000 	.word	0x403b0000
 80015ac:	408f4000 	.word	0x408f4000
 80015b0:	42c80000 	.word	0x42c80000
 80015b4:	20000278 	.word	0x20000278

080015b8 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80015c4:	f002 f844 	bl	8003650 <HAL_GetTick>
 80015c8:	4603      	mov	r3, r0
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	733b      	strb	r3, [r7, #12]
 80015d0:	f002 f83e 	bl	8003650 <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	0adb      	lsrs	r3, r3, #11
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	73bb      	strb	r3, [r7, #14]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	121b      	asrs	r3, r3, #8
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	141b      	asrs	r3, r3, #16
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	743b      	strb	r3, [r7, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	161b      	asrs	r3, r3, #24
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	74bb      	strb	r3, [r7, #18]
 8001600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001604:	121b      	asrs	r3, r3, #8
 8001606:	b21b      	sxth	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <BlueMS_Environmental_Update+0x84>)
 800160e:	8818      	ldrh	r0, [r3, #0]
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <BlueMS_Environmental_Update+0x88>)
 8001612:	8819      	ldrh	r1, [r3, #0]
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2308      	movs	r3, #8
 800161c:	2200      	movs	r2, #0
 800161e:	f007 f997 	bl	8008950 <aci_gatt_update_char_value>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800162c:	2347      	movs	r3, #71	@ 0x47
 800162e:	e000      	b.n	8001632 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000024c 	.word	0x2000024c
 8001640:	2000024e 	.word	0x2000024e

08001644 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b092      	sub	sp, #72	@ 0x48
 8001648:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800164a:	4a36      	ldr	r2, [pc, #216]	@ (8001724 <Set_DeviceConnectable+0xe0>)
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001654:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8001658:	2302      	movs	r3, #2
 800165a:	703b      	strb	r3, [r7, #0]
 800165c:	230a      	movs	r3, #10
 800165e:	707b      	strb	r3, [r7, #1]
 8001660:	2300      	movs	r3, #0
 8001662:	70bb      	strb	r3, [r7, #2]
 8001664:	2308      	movs	r3, #8
 8001666:	70fb      	strb	r3, [r7, #3]
 8001668:	2309      	movs	r3, #9
 800166a:	713b      	strb	r3, [r7, #4]
 800166c:	2342      	movs	r3, #66	@ 0x42
 800166e:	717b      	strb	r3, [r7, #5]
 8001670:	236c      	movs	r3, #108	@ 0x6c
 8001672:	71bb      	strb	r3, [r7, #6]
 8001674:	2375      	movs	r3, #117	@ 0x75
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	2365      	movs	r3, #101	@ 0x65
 800167a:	723b      	strb	r3, [r7, #8]
 800167c:	234e      	movs	r3, #78	@ 0x4e
 800167e:	727b      	strb	r3, [r7, #9]
 8001680:	2352      	movs	r3, #82	@ 0x52
 8001682:	72bb      	strb	r3, [r7, #10]
 8001684:	2347      	movs	r3, #71	@ 0x47
 8001686:	72fb      	strb	r3, [r7, #11]
 8001688:	230d      	movs	r3, #13
 800168a:	733b      	strb	r3, [r7, #12]
 800168c:	23ff      	movs	r3, #255	@ 0xff
 800168e:	737b      	strb	r3, [r7, #13]
 8001690:	2301      	movs	r3, #1
 8001692:	73bb      	strb	r3, [r7, #14]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	2300      	movs	r3, #0
 800169a:	743b      	strb	r3, [r7, #16]
 800169c:	23f4      	movs	r3, #244	@ 0xf4
 800169e:	747b      	strb	r3, [r7, #17]
 80016a0:	2300      	movs	r3, #0
 80016a2:	74bb      	strb	r3, [r7, #18]
 80016a4:	2300      	movs	r3, #0
 80016a6:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80016a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <Set_DeviceConnectable+0xe4>)
 80016aa:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80016ac:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <Set_DeviceConnectable+0xe4>)
 80016b0:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80016b2:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <Set_DeviceConnectable+0xe4>)
 80016b6:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80016b8:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80016ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <Set_DeviceConnectable+0xe4>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80016be:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <Set_DeviceConnectable+0xe4>)
 80016c2:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80016c4:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <Set_DeviceConnectable+0xe4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80016ca:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80016cc:	7cbb      	ldrb	r3, [r7, #18]
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f007 fb2c 	bl	8008d36 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80016de:	2300      	movs	r3, #0
 80016e0:	9306      	str	r3, [sp, #24]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9305      	str	r3, [sp, #20]
 80016e6:	2300      	movs	r3, #0
 80016e8:	9304      	str	r3, [sp, #16]
 80016ea:	2300      	movs	r3, #0
 80016ec:	9303      	str	r3, [sp, #12]
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	9302      	str	r3, [sp, #8]
 80016f4:	2308      	movs	r3, #8
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	2300      	movs	r3, #0
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2301      	movs	r3, #1
 80016fe:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8001702:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8001706:	2000      	movs	r0, #0
 8001708:	f006 fe19 	bl	800833e <aci_gap_set_discoverable>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	201a      	movs	r0, #26
 8001718:	f006 ff52 	bl	80085c0 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	@ 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	0800f5c8 	.word	0x0800f5c8
 8001728:	20000244 	.word	0x20000244

0800172c <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d139      	bne.n	80017ba <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2bff      	cmp	r3, #255	@ 0xff
 800174c:	d01f      	beq.n	800178e <user_notify+0x62>
 800174e:	2bff      	cmp	r3, #255	@ 0xff
 8001750:	dc38      	bgt.n	80017c4 <user_notify+0x98>
 8001752:	2b05      	cmp	r3, #5
 8001754:	d002      	beq.n	800175c <user_notify+0x30>
 8001756:	2b3e      	cmp	r3, #62	@ 0x3e
 8001758:	d003      	beq.n	8001762 <user_notify+0x36>
 800175a:	e033      	b.n	80017c4 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800175c:	f000 f836 	bl	80017cc <GAP_DisconnectionComplete_CB>
    }
    break;
 8001760:	e030      	b.n	80017c4 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	3302      	adds	r3, #2
 8001766:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d126      	bne.n	80017be <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1d5a      	adds	r2, r3, #5
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001780:	b29b      	uxth	r3, r3
 8001782:	4619      	mov	r1, r3
 8001784:	4610      	mov	r0, r2
 8001786:	f000 f837 	bl	80017f8 <GAP_ConnectionComplete_CB>
        }
        break;
 800178a:	bf00      	nop
      }
    }
    break;
 800178c:	e017      	b.n	80017be <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	3302      	adds	r3, #2
 8001792:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	f640 4314 	movw	r3, #3092	@ 0xc14
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10e      	bne.n	80017c2 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3302      	adds	r3, #2
 80017a8:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	885b      	ldrh	r3, [r3, #2]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fe3d 	bl	8001430 <Read_Request_CB>
        }
        break;
 80017b6:	bf00      	nop
      }

    }
    break;
 80017b8:	e003      	b.n	80017c2 <user_notify+0x96>
    return;
 80017ba:	bf00      	nop
 80017bc:	e002      	b.n	80017c4 <user_notify+0x98>
    break;
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <user_notify+0x98>
    break;
 80017c2:	bf00      	nop
  }
}
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  connected = FALSE;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <GAP_DisconnectionComplete_CB+0x20>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <GAP_DisconnectionComplete_CB+0x24>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <GAP_DisconnectionComplete_CB+0x28>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	2000027c 	.word	0x2000027c
 80017f0:	20000001 	.word	0x20000001
 80017f4:	2000027a 	.word	0x2000027a

080017f8 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <GAP_ConnectionComplete_CB+0x38>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <GAP_ConnectionComplete_CB+0x3c>)
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8001810:	2305      	movs	r3, #5
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e002      	b.n	800181c <GAP_ConnectionComplete_CB+0x24>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3b01      	subs	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f9      	bne.n	8001816 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	2000027c 	.word	0x2000027c
 8001834:	20000278 	.word	0x20000278

08001838 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HCI_TL_SPI_Init+0x88>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	4a1e      	ldr	r2, [pc, #120]	@ (80018c0 <HCI_TL_SPI_Init+0x88>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184c:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <HCI_TL_SPI_Init+0x88>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001858:	2340      	movs	r3, #64	@ 0x40
 800185a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	4815      	ldr	r0, [pc, #84]	@ (80018c4 <HCI_TL_SPI_Init+0x8c>)
 800186e:	f002 f99b 	bl	8003ba8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188e:	f002 f98b 	bl	8003ba8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <HCI_TL_SPI_Init+0x90>)
 80018ac:	f002 f97c 	bl	8003ba8 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80018b0:	f001 fc08 	bl	80030c4 <BSP_SPI3_Init>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48001000 	.word	0x48001000
 80018c8:	48000c00 	.word	0x48000c00

080018cc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80018d0:	2140      	movs	r1, #64	@ 0x40
 80018d2:	4808      	ldr	r0, [pc, #32]	@ (80018f4 <HCI_TL_SPI_DeInit+0x28>)
 80018d4:	f002 fb12 	bl	8003efc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80018d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018dc:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <HCI_TL_SPI_DeInit+0x2c>)
 80018de:	f002 fb0d 	bl	8003efc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80018e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ea:	f002 fb07 	bl	8003efc <HAL_GPIO_DeInit>
  return 0;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	48001000 	.word	0x48001000
 80018f8:	48000c00 	.word	0x48000c00

080018fc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001906:	480d      	ldr	r0, [pc, #52]	@ (800193c <HCI_TL_SPI_Reset+0x40>)
 8001908:	f002 fc04 	bl	8004114 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001916:	f002 fbfd 	bl	8004114 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800191a:	2005      	movs	r0, #5
 800191c:	f001 fea4 	bl	8003668 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192a:	f002 fbf3 	bl	8004114 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800192e:	2005      	movs	r0, #5
 8001930:	f001 fe9a 	bl	8003668 <HAL_Delay>
  return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	48000c00 	.word	0x48000c00

08001940 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001950:	23ff      	movs	r3, #255	@ 0xff
 8001952:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001954:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <HCI_TL_SPI_Receive+0xb0>)
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800195e:	6018      	str	r0, [r3, #0]
 8001960:	3304      	adds	r3, #4
 8001962:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800196a:	4822      	ldr	r0, [pc, #136]	@ (80019f4 <HCI_TL_SPI_Receive+0xb4>)
 800196c:	f002 fbd2 	bl	8004114 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001970:	f107 010c 	add.w	r1, r7, #12
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2205      	movs	r2, #5
 800197a:	4618      	mov	r0, r3
 800197c:	f001 fbd2 	bl	8003124 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001980:	7b3b      	ldrb	r3, [r7, #12]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d129      	bne.n	80019da <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001986:	7c3b      	ldrb	r3, [r7, #16]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21a      	sxth	r2, r3
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21b      	sxth	r3, r3
 8001994:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001996:	8bfb      	ldrh	r3, [r7, #30]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01e      	beq.n	80019da <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 800199c:	8bfa      	ldrh	r2, [r7, #30]
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d901      	bls.n	80019a8 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	777b      	strb	r3, [r7, #29]
 80019ac:	e010      	b.n	80019d0 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80019ae:	f107 011b 	add.w	r1, r7, #27
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	2201      	movs	r2, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fbb3 	bl	8003124 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 80019be:	7f7b      	ldrb	r3, [r7, #29]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	7efa      	ldrb	r2, [r7, #27]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80019ca:	7f7b      	ldrb	r3, [r7, #29]
 80019cc:	3301      	adds	r3, #1
 80019ce:	777b      	strb	r3, [r7, #29]
 80019d0:	7f7b      	ldrb	r3, [r7, #29]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	8bfa      	ldrh	r2, [r7, #30]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d8e9      	bhi.n	80019ae <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <HCI_TL_SPI_Receive+0xb4>)
 80019e2:	f002 fb97 	bl	8004114 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80019e6:	7f7b      	ldrb	r3, [r7, #29]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800f5d0 	.word	0x0800f5d0
 80019f4:	48000c00 	.word	0x48000c00

080019f8 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001a04:	4a24      	ldr	r2, [pc, #144]	@ (8001a98 <HCI_TL_SPI_Send+0xa0>)
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a0e:	6018      	str	r0, [r3, #0]
 8001a10:	3304      	adds	r3, #4
 8001a12:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f001 fe1c 	bl	8003650 <HAL_GetTick>
 8001a18:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a24:	481d      	ldr	r0, [pc, #116]	@ (8001a9c <HCI_TL_SPI_Send+0xa4>)
 8001a26:	f002 fb75 	bl	8004114 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001a2a:	f107 0108 	add.w	r1, r7, #8
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	2205      	movs	r2, #5
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 fb75 	bl	8003124 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001a3a:	7a3b      	ldrb	r3, [r7, #8]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d10f      	bne.n	8001a60 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001a40:	7a7b      	ldrb	r3, [r7, #9]
 8001a42:	461a      	mov	r2, r3
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d806      	bhi.n	8001a58 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4914      	ldr	r1, [pc, #80]	@ (8001aa0 <HCI_TL_SPI_Send+0xa8>)
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f001 fb67 	bl	8003124 <BSP_SPI3_SendRecv>
 8001a56:	e006      	b.n	8001a66 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001a58:	f06f 0301 	mvn.w	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e002      	b.n	8001a66 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a6c:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <HCI_TL_SPI_Send+0xa4>)
 8001a6e:	f002 fb51 	bl	8004114 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001a72:	f001 fded 	bl	8003650 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d903      	bls.n	8001a88 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001a80:	f06f 0302 	mvn.w	r3, #2
 8001a84:	61fb      	str	r3, [r7, #28]
      break;
 8001a86:	e002      	b.n	8001a8e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	dbc5      	blt.n	8001a1a <HCI_TL_SPI_Send+0x22>

  return result;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	0800f5d8 	.word	0x0800f5d8
 8001a9c:	48000c00 	.word	0x48000c00
 8001aa0:	20000288 	.word	0x20000288

08001aa4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <IsDataAvailable+0x1c>)
 8001aac:	f002 fb1a 	bl	80040e4 <HAL_GPIO_ReadPin>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	48001000 	.word	0x48001000

08001ac4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <hci_tl_lowlevel_init+0x50>)
 8001acc:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <hci_tl_lowlevel_init+0x54>)
 8001ad0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <hci_tl_lowlevel_init+0x58>)
 8001ad4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <hci_tl_lowlevel_init+0x5c>)
 8001ad8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001ada:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <hci_tl_lowlevel_init+0x60>)
 8001adc:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <hci_tl_lowlevel_init+0x64>)
 8001ae0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fa43 	bl	8008f70 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001aea:	4910      	ldr	r1, [pc, #64]	@ (8001b2c <hci_tl_lowlevel_init+0x68>)
 8001aec:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <hci_tl_lowlevel_init+0x6c>)
 8001aee:	f002 f817 	bl	8003b20 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <hci_tl_lowlevel_init+0x70>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	480e      	ldr	r0, [pc, #56]	@ (8001b30 <hci_tl_lowlevel_init+0x6c>)
 8001af8:	f001 fff8 	bl	8003aec <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	2017      	movs	r0, #23
 8001b02:	f001 feb0 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b06:	2017      	movs	r0, #23
 8001b08:	f001 fec9 	bl	800389e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08001839 	.word	0x08001839
 8001b18:	080018cd 	.word	0x080018cd
 8001b1c:	080019f9 	.word	0x080019f9
 8001b20:	08001941 	.word	0x08001941
 8001b24:	080018fd 	.word	0x080018fd
 8001b28:	08003165 	.word	0x08003165
 8001b2c:	16000006 	.word	0x16000006
 8001b30:	20000280 	.word	0x20000280
 8001b34:	08001b39 	.word	0x08001b39

08001b38 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001b3c:	e005      	b.n	8001b4a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f007 fb7a 	bl	8009238 <hci_notify_asynch_evt>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001b4a:	f7ff ffab 	bl	8001aa4 <IsDataAvailable>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f4      	bne.n	8001b3e <hci_tl_lowlevel_isr+0x6>
 8001b54:	e000      	b.n	8001b58 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001b56:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b64:	f001 fd0c 	bl	8003580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b68:	f000 f890 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6c:	f000 f9ea 	bl	8001f44 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001b70:	f000 f8ee 	bl	8001d50 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001b74:	f000 f924 	bl	8001dc0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001b78:	f000 f960 	bl	8001e3c <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8001b7c:	f000 f984 	bl	8001e88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b80:	f000 f9b2 	bl	8001ee8 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8001b84:	f7ff f9d8 	bl	8000f38 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8001b88:	f001 fb8e 	bl	80032a8 <BSP_GYRO_Init>
  waterintake = 100;
 8001b8c:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <main+0x100>)
 8001b8e:	2264      	movs	r2, #100	@ 0x64
 8001b90:	601a      	str	r2, [r3, #0]
  int counter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b96:	f007 fce7 	bl	8009568 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemDrinkAction */
  SemDrinkActionHandle = osSemaphoreNew(1, 0, &SemDrinkAction_attributes);
 8001b9a:	4a31      	ldr	r2, [pc, #196]	@ (8001c60 <main+0x104>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f007 fdd9 	bl	8009756 <osSemaphoreNew>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c64 <main+0x108>)
 8001ba8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskDataTrans */
  TaskDataTransHandle = osThreadNew(StartTaskDataTrans, NULL, &TaskDataTrans_attributes);
 8001baa:	4a2f      	ldr	r2, [pc, #188]	@ (8001c68 <main+0x10c>)
 8001bac:	2100      	movs	r1, #0
 8001bae:	482f      	ldr	r0, [pc, #188]	@ (8001c6c <main+0x110>)
 8001bb0:	f007 fd24 	bl	80095fc <osThreadNew>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c70 <main+0x114>)
 8001bb8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bba:	f007 fcf9 	bl	80095b0 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("before MS_process\r\n");
 8001bbe:	482d      	ldr	r0, [pc, #180]	@ (8001c74 <main+0x118>)
 8001bc0:	f00b fd62 	bl	800d688 <puts>
	  MX_BlueNRG_MS_Process();
 8001bc4:	f7ff fa64 	bl	8001090 <MX_BlueNRG_MS_Process>
	  printf("after MS_process\r\n");
 8001bc8:	482b      	ldr	r0, [pc, #172]	@ (8001c78 <main+0x11c>)
 8001bca:	f00b fd5d 	bl	800d688 <puts>
	  BSP_GYRO_GetXYZ(pData);
 8001bce:	482b      	ldr	r0, [pc, #172]	@ (8001c7c <main+0x120>)
 8001bd0:	f001 fbac 	bl	800332c <BSP_GYRO_GetXYZ>
	  printf("start printing gyro data\r\n");
 8001bd4:	482a      	ldr	r0, [pc, #168]	@ (8001c80 <main+0x124>)
 8001bd6:	f00b fd57 	bl	800d688 <puts>
	  printf("(%.2f, %.2f, %.2f)\r\n", pData[0]/1000, pData[1]/1000, pData[2]/1000);
 8001bda:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <main+0x120>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001c84 <main+0x128>
 8001be4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001be8:	ee16 0a90 	vmov	r0, s13
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	4680      	mov	r8, r0
 8001bf2:	4689      	mov	r9, r1
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <main+0x120>)
 8001bf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bfa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001c84 <main+0x128>
 8001bfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c02:	ee16 0a90 	vmov	r0, s13
 8001c06:	f7fe fc9f 	bl	8000548 <__aeabi_f2d>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	460d      	mov	r5, r1
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <main+0x120>)
 8001c10:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c14:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c84 <main+0x128>
 8001c18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c1c:	ee16 0a90 	vmov	r0, s13
 8001c20:	f7fe fc92 	bl	8000548 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c2c:	e9cd 4500 	strd	r4, r5, [sp]
 8001c30:	4642      	mov	r2, r8
 8001c32:	464b      	mov	r3, r9
 8001c34:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <main+0x12c>)
 8001c36:	f00b fcbf 	bl	800d5b8 <iprintf>
//	  printf("%.2f\r\n", pData[1]/1000);
	  counter += 1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
	  if(counter == 20){	// detect drink action
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b14      	cmp	r3, #20
 8001c44:	d106      	bne.n	8001c54 <main+0xf8>
		  osSemaphoreRelease(SemDrinkActionHandle);
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <main+0x108>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f007 fe5e 	bl	800990c <osSemaphoreRelease>
		  counter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
	  }
	  HAL_Delay(200);
 8001c54:	20c8      	movs	r0, #200	@ 0xc8
 8001c56:	f001 fd07 	bl	8003668 <HAL_Delay>
  {
 8001c5a:	e7b0      	b.n	8001bbe <main+0x62>
 8001c5c:	20001278 	.word	0x20001278
 8001c60:	0800f6b0 	.word	0x0800f6b0
 8001c64:	20001224 	.word	0x20001224
 8001c68:	0800f68c 	.word	0x0800f68c
 8001c6c:	08002289 	.word	0x08002289
 8001c70:	200009c4 	.word	0x200009c4
 8001c74:	0800f600 	.word	0x0800f600
 8001c78:	0800f614 	.word	0x0800f614
 8001c7c:	2000127c 	.word	0x2000127c
 8001c80:	0800f628 	.word	0x0800f628
 8001c84:	447a0000 	.word	0x447a0000
 8001c88:	0800f644 	.word	0x0800f644

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b096      	sub	sp, #88	@ 0x58
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	2244      	movs	r2, #68	@ 0x44
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00b fdd4 	bl	800d848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cb2:	f003 fa27 	bl	8005104 <HAL_PWREx_ControlVoltageScaling>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cbc:	f000 fb02 	bl	80022c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cc0:	f003 fa02 	bl	80050c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001cc4:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <SystemClock_Config+0xc0>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cca:	4a20      	ldr	r2, [pc, #128]	@ (8001d4c <SystemClock_Config+0xc0>)
 8001ccc:	f023 0318 	bic.w	r3, r3, #24
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001cd4:	2314      	movs	r3, #20
 8001cd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ce4:	2360      	movs	r3, #96	@ 0x60
 8001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001cec:	2301      	movs	r3, #1
 8001cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001cf4:	2328      	movs	r3, #40	@ 0x28
 8001cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d00:	2302      	movs	r3, #2
 8001d02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fb1d 	bl	8005348 <HAL_RCC_OscConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d14:	f000 fad6 	bl	80022c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d18:	230f      	movs	r3, #15
 8001d1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	2104      	movs	r1, #4
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fee5 	bl	8005b00 <HAL_RCC_ClockConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001d3c:	f000 fac2 	bl	80022c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001d40:	f004 fbec 	bl	800651c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d44:	bf00      	nop
 8001d46:	3758      	adds	r7, #88	@ 0x58
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000

08001d50 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001d54:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d56:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <MX_DFSDM1_Init+0x6c>)
 8001d58:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001d66:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d68:	2202      	movs	r2, #2
 8001d6a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d7e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001d80:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d88:	2204      	movs	r2, #4
 8001d8a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001d98:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	@ (8001db8 <MX_DFSDM1_Init+0x68>)
 8001da6:	f001 fd95 	bl	80038d4 <HAL_DFSDM_ChannelInit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001db0:	f000 fa88 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000388 	.word	0x20000388
 8001dbc:	40016020 	.word	0x40016020

08001dc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e38 <MX_I2C2_Init+0x78>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001dcc:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001dd0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df0:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dfc:	480d      	ldr	r0, [pc, #52]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001dfe:	f002 f9de 	bl	80041be <HAL_I2C_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e08:	f000 fa5c 	bl	80022c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001e10:	f002 ff90 	bl	8004d34 <HAL_I2CEx_ConfigAnalogFilter>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001e1a:	f000 fa53 	bl	80022c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <MX_I2C2_Init+0x74>)
 8001e22:	f002 ffd2 	bl	8004dca <HAL_I2CEx_ConfigDigitalFilter>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001e2c:	f000 fa4a 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200003c0 	.word	0x200003c0
 8001e38:	40005800 	.word	0x40005800

08001e3c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e42:	4a10      	ldr	r2, [pc, #64]	@ (8001e84 <MX_QUADSPI_Init+0x48>)
 8001e44:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e48:	2202      	movs	r2, #2
 8001e4a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e4e:	2204      	movs	r2, #4
 8001e50:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e54:	2210      	movs	r2, #16
 8001e56:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e5a:	2217      	movs	r2, #23
 8001e5c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <MX_QUADSPI_Init+0x44>)
 8001e6c:	f003 f9b0 	bl	80051d0 <HAL_QSPI_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001e76:	f000 fa25 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000414 	.word	0x20000414
 8001e84:	a0001000 	.word	0xa0001000

08001e88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001e8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <MX_USART3_UART_Init+0x5c>)
 8001e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001eae:	220c      	movs	r2, #12
 8001eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_USART3_UART_Init+0x58>)
 8001ecc:	f005 f946 	bl	800715c <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ed6:	f000 f9f5 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000458 	.word	0x20000458
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ef2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ef6:	2206      	movs	r2, #6
 8001ef8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f02:	2202      	movs	r2, #2
 8001f04:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2c:	f002 ff99 	bl	8004e62 <HAL_PCD_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f36:	f000 f9c5 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200004e0 	.word	0x200004e0

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5a:	4bbd      	ldr	r3, [pc, #756]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	4abc      	ldr	r2, [pc, #752]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f66:	4bba      	ldr	r3, [pc, #744]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4bb7      	ldr	r3, [pc, #732]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	4ab6      	ldr	r2, [pc, #728]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7e:	4bb4      	ldr	r3, [pc, #720]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4bb1      	ldr	r3, [pc, #708]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4ab0      	ldr	r2, [pc, #704]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f96:	4bae      	ldr	r3, [pc, #696]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4bab      	ldr	r3, [pc, #684]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	4aaa      	ldr	r2, [pc, #680]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fae:	4ba8      	ldr	r3, [pc, #672]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	4ba5      	ldr	r3, [pc, #660]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4aa4      	ldr	r2, [pc, #656]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4ba2      	ldr	r3, [pc, #648]	@ (8002250 <MX_GPIO_Init+0x30c>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001fd8:	489e      	ldr	r0, [pc, #632]	@ (8002254 <MX_GPIO_Init+0x310>)
 8001fda:	f002 f89b 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe8:	f002 f894 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001fec:	2200      	movs	r2, #0
 8001fee:	f24b 0114 	movw	r1, #45076	@ 0xb014
 8001ff2:	4899      	ldr	r0, [pc, #612]	@ (8002258 <MX_GPIO_Init+0x314>)
 8001ff4:	f002 f88e 	bl	8004114 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001ffe:	4897      	ldr	r0, [pc, #604]	@ (800225c <MX_GPIO_Init+0x318>)
 8002000:	f002 f888 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800200a:	4894      	ldr	r0, [pc, #592]	@ (800225c <MX_GPIO_Init+0x318>)
 800200c:	f002 f882 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002016:	4892      	ldr	r0, [pc, #584]	@ (8002260 <MX_GPIO_Init+0x31c>)
 8002018:	f002 f87c 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800201c:	2201      	movs	r2, #1
 800201e:	2120      	movs	r1, #32
 8002020:	488d      	ldr	r0, [pc, #564]	@ (8002258 <MX_GPIO_Init+0x314>)
 8002022:	f002 f877 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	2101      	movs	r1, #1
 800202a:	488a      	ldr	r0, [pc, #552]	@ (8002254 <MX_GPIO_Init+0x310>)
 800202c:	f002 f872 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002030:	f240 1315 	movw	r3, #277	@ 0x115
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4882      	ldr	r0, [pc, #520]	@ (8002254 <MX_GPIO_Init+0x310>)
 800204a:	f001 fdad 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800204e:	236a      	movs	r3, #106	@ 0x6a
 8002050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	487c      	ldr	r0, [pc, #496]	@ (8002254 <MX_GPIO_Init+0x310>)
 8002064:	f001 fda0 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002068:	233f      	movs	r3, #63	@ 0x3f
 800206a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800206c:	230b      	movs	r3, #11
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4879      	ldr	r0, [pc, #484]	@ (8002260 <MX_GPIO_Init+0x31c>)
 800207c:	f001 fd94 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002080:	2303      	movs	r3, #3
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002090:	2308      	movs	r3, #8
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209e:	f001 fd83 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80020a2:	f248 1304 	movw	r3, #33028	@ 0x8104
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020be:	f001 fd73 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80020c2:	2308      	movs	r3, #8
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020d2:	2301      	movs	r3, #1
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e0:	f001 fd62 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80020e4:	2310      	movs	r3, #16
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020e8:	230b      	movs	r3, #11
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fa:	f001 fd55 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80020fe:	23e0      	movs	r3, #224	@ 0xe0
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210e:	2305      	movs	r3, #5
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211c:	f001 fd44 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002124:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4848      	ldr	r0, [pc, #288]	@ (8002258 <MX_GPIO_Init+0x314>)
 8002136:	f001 fd37 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800213a:	2302      	movs	r3, #2
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800213e:	230b      	movs	r3, #11
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4842      	ldr	r0, [pc, #264]	@ (8002258 <MX_GPIO_Init+0x314>)
 800214e:	f001 fd2b 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002152:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002156:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	483b      	ldr	r0, [pc, #236]	@ (8002258 <MX_GPIO_Init+0x314>)
 800216c:	f001 fd1c 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002170:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002174:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002176:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	4835      	ldr	r0, [pc, #212]	@ (800225c <MX_GPIO_Init+0x318>)
 8002188:	f001 fd0e 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800218c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	482d      	ldr	r0, [pc, #180]	@ (800225c <MX_GPIO_Init+0x318>)
 80021a6:	f001 fcff 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80021aa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4827      	ldr	r0, [pc, #156]	@ (8002260 <MX_GPIO_Init+0x31c>)
 80021c4:	f001 fcf0 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80021c8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4820      	ldr	r0, [pc, #128]	@ (8002260 <MX_GPIO_Init+0x31c>)
 80021e0:	f001 fce2 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80021e4:	2302      	movs	r3, #2
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f4:	2305      	movs	r3, #5
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4817      	ldr	r0, [pc, #92]	@ (800225c <MX_GPIO_Init+0x318>)
 8002200:	f001 fcd2 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002204:	2378      	movs	r3, #120	@ 0x78
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002214:	2307      	movs	r3, #7
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	480f      	ldr	r0, [pc, #60]	@ (800225c <MX_GPIO_Init+0x318>)
 8002220:	f001 fcc2 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002224:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002236:	2304      	movs	r3, #4
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	@ (8002258 <MX_GPIO_Init+0x314>)
 8002242:	f001 fcb1 	bl	8003ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2105      	movs	r1, #5
 800224a:	2017      	movs	r0, #23
 800224c:	e00a      	b.n	8002264 <MX_GPIO_Init+0x320>
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	48001000 	.word	0x48001000
 8002258:	48000400 	.word	0x48000400
 800225c:	48000c00 	.word	0x48000c00
 8002260:	48000800 	.word	0x48000800
 8002264:	f001 faff 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002268:	2017      	movs	r0, #23
 800226a:	f001 fb18 	bl	800389e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2105      	movs	r1, #5
 8002272:	2028      	movs	r0, #40	@ 0x28
 8002274:	f001 faf7 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002278:	2028      	movs	r0, #40	@ 0x28
 800227a:	f001 fb10 	bl	800389e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	@ 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <StartTaskDataTrans>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskDataTrans */
void StartTaskDataTrans(void *argument)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("start transfer data\r\n");
 8002290:	4809      	ldr	r0, [pc, #36]	@ (80022b8 <StartTaskDataTrans+0x30>)
 8002292:	f00b f9f9 	bl	800d688 <puts>
	  osSemaphoreAcquire(SemDrinkActionHandle, osWaitForever);
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <StartTaskDataTrans+0x34>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f04f 31ff 	mov.w	r1, #4294967295
 800229e:	4618      	mov	r0, r3
 80022a0:	f007 fae2 	bl	8009868 <osSemaphoreAcquire>
	  Acc_Update(waterintake);
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <StartTaskDataTrans+0x38>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f88d 	bl	80013c8 <Acc_Update>
	  osDelay(1);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f007 fa36 	bl	8009720 <osDelay>
  {
 80022b4:	bf00      	nop
 80022b6:	e7eb      	b.n	8002290 <StartTaskDataTrans+0x8>
 80022b8:	0800f65c 	.word	0x0800f65c
 80022bc:	20001224 	.word	0x20001224
 80022c0:	20001278 	.word	0x20001278

080022c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <Error_Handler+0x8>

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_MspInit+0x4c>)
 80022d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022da:	4a10      	ldr	r2, [pc, #64]	@ (800231c <HAL_MspInit+0x4c>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <HAL_MspInit+0x4c>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_MspInit+0x4c>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <HAL_MspInit+0x4c>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <HAL_MspInit+0x4c>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	210f      	movs	r1, #15
 800230a:	f06f 0001 	mvn.w	r0, #1
 800230e:	f001 faaa 	bl	8003866 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0ac      	sub	sp, #176	@ 0xb0
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2288      	movs	r2, #136	@ 0x88
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f00b fa81 	bl	800d848 <memset>
  if(DFSDM1_Init == 0)
 8002346:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d142      	bne.n	80023d4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800234e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002352:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fdf2 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800236a:	f7ff ffab 	bl	80022c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800236e:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002378:	6613      	str	r3, [r2, #96]	@ 0x60
 800237a:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800237c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002386:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	4a15      	ldr	r2, [pc, #84]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002392:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800239e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80023a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023b8:	2306      	movs	r3, #6
 80023ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023c2:	4619      	mov	r1, r3
 80023c4:	4807      	ldr	r0, [pc, #28]	@ (80023e4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80023c6:	f001 fbef 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80023ca:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a02      	ldr	r2, [pc, #8]	@ (80023dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80023d2:	6013      	str	r3, [r2, #0]
  }

}
 80023d4:	bf00      	nop
 80023d6:	37b0      	adds	r7, #176	@ 0xb0
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20001288 	.word	0x20001288
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48001000 	.word	0x48001000

080023e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0ac      	sub	sp, #176	@ 0xb0
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2288      	movs	r2, #136	@ 0x88
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f00b fa1d 	bl	800d848 <memset>
  if(hi2c->Instance==I2C2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	@ (8002498 <HAL_I2C_MspInit+0xb0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d13b      	bne.n	8002490 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800241c:	2300      	movs	r3, #0
 800241e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fd8f 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002430:	f7ff ff48 	bl	80022c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_I2C_MspInit+0xb4>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	4a18      	ldr	r2, [pc, #96]	@ (800249c <HAL_I2C_MspInit+0xb4>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002440:	4b16      	ldr	r3, [pc, #88]	@ (800249c <HAL_I2C_MspInit+0xb4>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800244c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002454:	2312      	movs	r3, #18
 8002456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245a:	2301      	movs	r3, #1
 800245c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002466:	2304      	movs	r3, #4
 8002468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002470:	4619      	mov	r1, r3
 8002472:	480b      	ldr	r0, [pc, #44]	@ (80024a0 <HAL_I2C_MspInit+0xb8>)
 8002474:	f001 fb98 	bl	8003ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002478:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_I2C_MspInit+0xb4>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	4a07      	ldr	r2, [pc, #28]	@ (800249c <HAL_I2C_MspInit+0xb4>)
 800247e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002482:	6593      	str	r3, [r2, #88]	@ 0x58
 8002484:	4b05      	ldr	r3, [pc, #20]	@ (800249c <HAL_I2C_MspInit+0xb4>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002490:	bf00      	nop
 8002492:	37b0      	adds	r7, #176	@ 0xb0
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40005800 	.word	0x40005800
 800249c:	40021000 	.word	0x40021000
 80024a0:	48000400 	.word	0x48000400

080024a4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <HAL_I2C_MspDeInit+0x3c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10f      	bne.n	80024d6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80024b6:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_I2C_MspDeInit+0x40>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <HAL_I2C_MspDeInit+0x40>)
 80024bc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024c0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80024c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024c6:	4808      	ldr	r0, [pc, #32]	@ (80024e8 <HAL_I2C_MspDeInit+0x44>)
 80024c8:	f001 fd18 	bl	8003efc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80024cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024d0:	4805      	ldr	r0, [pc, #20]	@ (80024e8 <HAL_I2C_MspDeInit+0x44>)
 80024d2:	f001 fd13 	bl	8003efc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40005800 	.word	0x40005800
 80024e4:	40021000 	.word	0x40021000
 80024e8:	48000400 	.word	0x48000400

080024ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <HAL_QSPI_MspInit+0x7c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d128      	bne.n	8002560 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800250e:	4b17      	ldr	r3, [pc, #92]	@ (800256c <HAL_QSPI_MspInit+0x80>)
 8002510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002512:	4a16      	ldr	r2, [pc, #88]	@ (800256c <HAL_QSPI_MspInit+0x80>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002518:	6513      	str	r3, [r2, #80]	@ 0x50
 800251a:	4b14      	ldr	r3, [pc, #80]	@ (800256c <HAL_QSPI_MspInit+0x80>)
 800251c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002526:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_QSPI_MspInit+0x80>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	4a10      	ldr	r2, [pc, #64]	@ (800256c <HAL_QSPI_MspInit+0x80>)
 800252c:	f043 0310 	orr.w	r3, r3, #16
 8002530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <HAL_QSPI_MspInit+0x80>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800253e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002542:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002550:	230a      	movs	r3, #10
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4805      	ldr	r0, [pc, #20]	@ (8002570 <HAL_QSPI_MspInit+0x84>)
 800255c:	f001 fb24 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002560:	bf00      	nop
 8002562:	3728      	adds	r7, #40	@ 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	a0001000 	.word	0xa0001000
 800256c:	40021000 	.word	0x40021000
 8002570:	48001000 	.word	0x48001000

08002574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0ac      	sub	sp, #176	@ 0xb0
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2288      	movs	r2, #136	@ 0x88
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f00b f957 	bl	800d848 <memset>
  if(huart->Instance==USART3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a21      	ldr	r2, [pc, #132]	@ (8002624 <HAL_UART_MspInit+0xb0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d13b      	bne.n	800261c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025a4:	2304      	movs	r3, #4
 80025a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 fcc9 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025bc:	f7ff fe82 	bl	80022c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <HAL_UART_MspInit+0xb4>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	4a18      	ldr	r2, [pc, #96]	@ (8002628 <HAL_UART_MspInit+0xb4>)
 80025c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80025cc:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <HAL_UART_MspInit+0xb4>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <HAL_UART_MspInit+0xb4>)
 80025da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025dc:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <HAL_UART_MspInit+0xb4>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e4:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <HAL_UART_MspInit+0xb4>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80025f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800260a:	2307      	movs	r3, #7
 800260c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002610:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002614:	4619      	mov	r1, r3
 8002616:	4805      	ldr	r0, [pc, #20]	@ (800262c <HAL_UART_MspInit+0xb8>)
 8002618:	f001 fac6 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800261c:	bf00      	nop
 800261e:	37b0      	adds	r7, #176	@ 0xb0
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40004800 	.word	0x40004800
 8002628:	40021000 	.word	0x40021000
 800262c:	48000c00 	.word	0x48000c00

08002630 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0ac      	sub	sp, #176	@ 0xb0
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2288      	movs	r2, #136	@ 0x88
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00b f8f9 	bl	800d848 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800265e:	d17c      	bne.n	800275a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002664:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002666:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800266a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800266e:	2301      	movs	r3, #1
 8002670:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002676:	2318      	movs	r3, #24
 8002678:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800267a:	2307      	movs	r3, #7
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800267e:	2302      	movs	r3, #2
 8002680:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002682:	2302      	movs	r3, #2
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002686:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800268a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fc59 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800269c:	f7ff fe12 	bl	80022c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b30      	ldr	r3, [pc, #192]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 80026a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80026b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d6:	f001 fa67 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80026da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80026de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026f4:	230a      	movs	r3, #10
 80026f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026fe:	4619      	mov	r1, r3
 8002700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002704:	f001 fa50 	bl	8003ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002708:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 800270e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002720:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d114      	bne.n	8002756 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
 8002738:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002744:	f002 fd34 	bl	80051b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	4a05      	ldr	r2, [pc, #20]	@ (8002764 <HAL_PCD_MspInit+0x134>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002752:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002754:	e001      	b.n	800275a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002756:	f002 fd2b 	bl	80051b0 <HAL_PWREx_EnableVddUSB>
}
 800275a:	bf00      	nop
 800275c:	37b0      	adds	r7, #176	@ 0xb0
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <NMI_Handler+0x4>

08002770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <MemManage_Handler+0x4>

08002780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <UsageFault_Handler+0x4>

08002790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a2:	f000 ff41 	bl	8003628 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027a6:	f009 f833 	bl	800b810 <xTaskGetSchedulerState>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d001      	beq.n	80027b4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027b0:	f009 ff2a 	bl	800c608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80027bc:	2020      	movs	r0, #32
 80027be:	f001 fcdb 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80027c2:	4806      	ldr	r0, [pc, #24]	@ (80027dc <EXTI9_5_IRQHandler+0x24>)
 80027c4:	f001 f9c0 	bl	8003b48 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80027c8:	2080      	movs	r0, #128	@ 0x80
 80027ca:	f001 fcd5 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80027ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80027d2:	f001 fcd1 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000280 	.word	0x20000280

080027e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80027e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80027e8:	f001 fcc6 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80027ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80027f0:	f001 fcc2 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80027f4:	4806      	ldr	r0, [pc, #24]	@ (8002810 <EXTI15_10_IRQHandler+0x30>)
 80027f6:	f001 f9a7 	bl	8003b48 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80027fa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80027fe:	f001 fcbb 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002802:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002806:	f001 fcb7 	bl	8004178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000010 	.word	0x20000010

08002814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return 1;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_kill>:

int _kill(int pid, int sig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800282e:	f00b f85d 	bl	800d8ec <__errno>
 8002832:	4603      	mov	r3, r0
 8002834:	2216      	movs	r2, #22
 8002836:	601a      	str	r2, [r3, #0]
  return -1;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_exit>:

void _exit (int status)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ffe7 	bl	8002824 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002856:	bf00      	nop
 8002858:	e7fd      	b.n	8002856 <_exit+0x12>

0800285a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e00a      	b.n	8002882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800286c:	f3af 8000 	nop.w
 8002870:	4601      	mov	r1, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	dbf0      	blt.n	800286c <_read+0x12>
  }

  return len;
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e009      	b.n	80028ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	60ba      	str	r2, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fb8e 	bl	8002fd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dbf1      	blt.n	80028a6 <_write+0x12>
  }
  return len;
 80028c2:	687b      	ldr	r3, [r7, #4]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_close>:

int _close(int file)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f4:	605a      	str	r2, [r3, #4]
  return 0;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_isatty>:

int _isatty(int file)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800290c:	2301      	movs	r3, #1
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800293c:	4a14      	ldr	r2, [pc, #80]	@ (8002990 <_sbrk+0x5c>)
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <_sbrk+0x60>)
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002948:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <_sbrk+0x64>)
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <_sbrk+0x68>)
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d207      	bcs.n	8002974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002964:	f00a ffc2 	bl	800d8ec <__errno>
 8002968:	4603      	mov	r3, r0
 800296a:	220c      	movs	r2, #12
 800296c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	e009      	b.n	8002988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002974:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <_sbrk+0x64>)
 8002984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20018000 	.word	0x20018000
 8002994:	00000400 	.word	0x00000400
 8002998:	2000128c 	.word	0x2000128c
 800299c:	20003148 	.word	0x20003148

080029a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <SystemInit+0x20>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029aa:	4a05      	ldr	r2, [pc, #20]	@ (80029c0 <SystemInit+0x20>)
 80029ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029c8:	f7ff ffea 	bl	80029a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029cc:	480c      	ldr	r0, [pc, #48]	@ (8002a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80029ce:	490d      	ldr	r1, [pc, #52]	@ (8002a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <LoopForever+0xe>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80029e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a10 <LoopForever+0x16>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029f2:	f00a ff81 	bl	800d8f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029f6:	f7ff f8b1 	bl	8001b5c <main>

080029fa <LoopForever>:

LoopForever:
    b LoopForever
 80029fa:	e7fe      	b.n	80029fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a04:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002a08:	0800faf4 	.word	0x0800faf4
  ldr r2, =_sbss
 8002a0c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002a10:	20003144 	.word	0x20003144

08002a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC1_2_IRQHandler>
	...

08002a18 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <BSP_LED_Init+0x20>)
 8002a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	0800f708 	.word	0x0800f708

08002a3c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	4a06      	ldr	r2, [pc, #24]	@ (8002a64 <BSP_LED_Toggle+0x28>)
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 fb75 	bl	8004144 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000008 	.word	0x20000008

08002a68 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <LED_USER_GPIO_Init+0x78>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <LED_USER_GPIO_Init+0x78>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a7a:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <LED_USER_GPIO_Init+0x78>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a96:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <LED_USER_GPIO_Init+0x78>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	4a11      	ldr	r2, [pc, #68]	@ (8002ae0 <LED_USER_GPIO_Init+0x78>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <LED_USER_GPIO_Init+0x78>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ab4:	480b      	ldr	r0, [pc, #44]	@ (8002ae4 <LED_USER_GPIO_Init+0x7c>)
 8002ab6:	f001 fb2d 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002aba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4804      	ldr	r0, [pc, #16]	@ (8002ae4 <LED_USER_GPIO_Init+0x7c>)
 8002ad4:	f001 f868 	bl	8003ba8 <HAL_GPIO_Init>

}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	48000400 	.word	0x48000400

08002ae8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	460a      	mov	r2, r1
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	4613      	mov	r3, r2
 8002af6:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b7c <BSP_PB_Init+0x94>)
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002b06:	79bb      	ldrb	r3, [r7, #6]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d132      	bne.n	8002b72 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <BSP_PB_Init+0x98>)
 8002b12:	441a      	add	r2, r3
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	491b      	ldr	r1, [pc, #108]	@ (8002b84 <BSP_PB_Init+0x9c>)
 8002b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f000 fffe 	bl	8003b20 <HAL_EXTI_GetHandle>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002b2a:	f06f 0303 	mvn.w	r3, #3
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e01f      	b.n	8002b72 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <BSP_PB_Init+0x98>)
 8002b38:	1898      	adds	r0, r3, r2
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	4a12      	ldr	r2, [pc, #72]	@ (8002b88 <BSP_PB_Init+0xa0>)
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	461a      	mov	r2, r3
 8002b44:	2100      	movs	r1, #0
 8002b46:	f000 ffd1 	bl	8003aec <HAL_EXTI_RegisterCallback>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002b50:	f06f 0303 	mvn.w	r3, #3
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e00c      	b.n	8002b72 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002b58:	2028      	movs	r0, #40	@ 0x28
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <BSP_PB_Init+0xa4>)
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	2200      	movs	r2, #0
 8002b64:	4619      	mov	r1, r3
 8002b66:	f000 fe7e 	bl	8003866 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002b6a:	2328      	movs	r3, #40	@ 0x28
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fe96 	bl	800389e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	0800f70c 	.word	0x0800f70c
 8002b80:	20000010 	.word	0x20000010
 8002b84:	0800f710 	.word	0x0800f710
 8002b88:	0800f714 	.word	0x0800f714
 8002b8c:	0800f718 	.word	0x0800f718

08002b90 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <BSP_PB_GetState+0x34>)
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fa9b 	bl	80040e4 <HAL_GPIO_ReadPin>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fe fa89 	bl	80010e4 <BSP_PB_Callback>
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bde:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <BUTTON_USER_GPIO_Init+0x6c>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <BUTTON_USER_GPIO_Init+0x6c>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bea:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <BUTTON_USER_GPIO_Init+0x6c>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf6:	f107 030c 	add.w	r3, r7, #12
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c06:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <BUTTON_USER_GPIO_Init+0x6c>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <BUTTON_USER_GPIO_Init+0x6c>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <BUTTON_USER_GPIO_Init+0x6c>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002c2e:	f107 030c 	add.w	r3, r7, #12
 8002c32:	4619      	mov	r1, r3
 8002c34:	4804      	ldr	r0, [pc, #16]	@ (8002c48 <BUTTON_USER_GPIO_Init+0x70>)
 8002c36:	f000 ffb7 	bl	8003ba8 <HAL_GPIO_Init>

}
 8002c3a:	bf00      	nop
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000800 	.word	0x48000800

08002c4c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d903      	bls.n	8002c68 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c60:	f06f 0301 	mvn.w	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e025      	b.n	8002cb4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	4914      	ldr	r1, [pc, #80]	@ (8002cc0 <BSP_COM_Init+0x74>)
 8002c6e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002c72:	4814      	ldr	r0, [pc, #80]	@ (8002cc4 <BSP_COM_Init+0x78>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4403      	add	r3, r0
 8002c7e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002c80:	79fa      	ldrb	r2, [r7, #7]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc4 <BSP_COM_Init+0x78>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f9ba 	bl	8003008 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <BSP_COM_Init+0x78>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f960 	bl	8002f68 <MX_USART1_UART_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002cae:	f06f 0303 	mvn.w	r3, #3
 8002cb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000018 	.word	0x20000018
 8002cc4:	20001290 	.word	0x20001290

08002cc8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	@ 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002cd0:	4b27      	ldr	r3, [pc, #156]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd4:	4a26      	ldr	r2, [pc, #152]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cdc:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002ce8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002cec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002cee:	2312      	movs	r3, #18
 8002cf0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	4619      	mov	r1, r3
 8002d04:	481b      	ldr	r0, [pc, #108]	@ (8002d74 <I2Cx_MspInit+0xac>)
 8002d06:	f000 ff4f 	bl	8003ba8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4818      	ldr	r0, [pc, #96]	@ (8002d74 <I2Cx_MspInit+0xac>)
 8002d12:	f000 ff49 	bl	8003ba8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002d1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d22:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	4a0f      	ldr	r2, [pc, #60]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002d34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d38:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <I2Cx_MspInit+0xa8>)
 8002d40:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002d44:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	210f      	movs	r1, #15
 8002d4a:	2021      	movs	r0, #33	@ 0x21
 8002d4c:	f000 fd8b 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002d50:	2021      	movs	r0, #33	@ 0x21
 8002d52:	f000 fda4 	bl	800389e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	210f      	movs	r1, #15
 8002d5a:	2022      	movs	r0, #34	@ 0x22
 8002d5c:	f000 fd83 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002d60:	2022      	movs	r0, #34	@ 0x22
 8002d62:	f000 fd9c 	bl	800389e <HAL_NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3728      	adds	r7, #40	@ 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	48000400 	.word	0x48000400

08002d78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <I2Cx_Init+0x54>)
 8002d84:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a11      	ldr	r2, [pc, #68]	@ (8002dd0 <I2Cx_Init+0x58>)
 8002d8a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff89 	bl	8002cc8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f001 fa01 	bl	80041be <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f001 ffb8 	bl	8004d34 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40005800 	.word	0x40005800
 8002dd0:	00702681 	.word	0x00702681

08002dd4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	@ 0x28
 8002dd8:	af04      	add	r7, sp, #16
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	72fb      	strb	r3, [r7, #11]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	b299      	uxth	r1, r3
 8002df6:	88f8      	ldrh	r0, [r7, #6]
 8002df8:	893a      	ldrh	r2, [r7, #8]
 8002dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4603      	mov	r3, r0
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f001 fbb6 	bl	800457c <HAL_I2C_Mem_Read>
 8002e10:	4603      	mov	r3, r0
 8002e12:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f832 	bl	8002e88 <I2Cx_Error>
  }
  return status;
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08a      	sub	sp, #40	@ 0x28
 8002e32:	af04      	add	r7, sp, #16
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	4608      	mov	r0, r1
 8002e38:	4611      	mov	r1, r2
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	72fb      	strb	r3, [r7, #11]
 8002e40:	460b      	mov	r3, r1
 8002e42:	813b      	strh	r3, [r7, #8]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e4c:	7afb      	ldrb	r3, [r7, #11]
 8002e4e:	b299      	uxth	r1, r3
 8002e50:	88f8      	ldrh	r0, [r7, #6]
 8002e52:	893a      	ldrh	r2, [r7, #8]
 8002e54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e58:	9302      	str	r3, [sp, #8]
 8002e5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4603      	mov	r3, r0
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f001 fa75 	bl	8004354 <HAL_I2C_Mem_Write>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e74:	7afb      	ldrb	r3, [r7, #11]
 8002e76:	4619      	mov	r1, r3
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f805 	bl	8002e88 <I2Cx_Error>
  }
  return status;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f001 fa2d 	bl	80042f4 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff6c 	bl	8002d78 <I2Cx_Init>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002eac:	4802      	ldr	r0, [pc, #8]	@ (8002eb8 <SENSOR_IO_Init+0x10>)
 8002eae:	f7ff ff63 	bl	8002d78 <I2Cx_Init>
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000131c 	.word	0x2000131c

08002ebc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	71bb      	strb	r3, [r7, #6]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002ece:	79bb      	ldrb	r3, [r7, #6]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	79f9      	ldrb	r1, [r7, #7]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	1d7b      	adds	r3, r7, #5
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2301      	movs	r3, #1
 8002ede:	4803      	ldr	r0, [pc, #12]	@ (8002eec <SENSOR_IO_Write+0x30>)
 8002ee0:	f7ff ffa5 	bl	8002e2e <I2Cx_WriteMultiple>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	2000131c 	.word	0x2000131c

08002ef0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002f04:	79bb      	ldrb	r3, [r7, #6]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	79f9      	ldrb	r1, [r7, #7]
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	f107 030f 	add.w	r3, r7, #15
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2301      	movs	r3, #1
 8002f16:	4804      	ldr	r0, [pc, #16]	@ (8002f28 <SENSOR_IO_Read+0x38>)
 8002f18:	f7ff ff5c 	bl	8002dd4 <I2Cx_ReadMultiple>

  return read_value;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000131c 	.word	0x2000131c

08002f2c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	603a      	str	r2, [r7, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	71bb      	strb	r3, [r7, #6]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002f42:	79bb      	ldrb	r3, [r7, #6]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	79f9      	ldrb	r1, [r7, #7]
 8002f48:	88bb      	ldrh	r3, [r7, #4]
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2301      	movs	r3, #1
 8002f52:	4804      	ldr	r0, [pc, #16]	@ (8002f64 <SENSOR_IO_ReadMultiple+0x38>)
 8002f54:	f7ff ff3e 	bl	8002dd4 <I2Cx_ReadMultiple>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000131c 	.word	0x2000131c

08002f68 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a15      	ldr	r2, [pc, #84]	@ (8002fcc <MX_USART1_UART_Init+0x64>)
 8002f78:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f80:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	220c      	movs	r2, #12
 8002f98:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f004 f8d2 	bl	800715c <HAL_UART_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40013800 	.word	0x40013800

08002fd0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <__io_putchar+0x30>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4a07      	ldr	r2, [pc, #28]	@ (8003004 <__io_putchar+0x34>)
 8002fe8:	1898      	adds	r0, r3, r2
 8002fea:	1d39      	adds	r1, r7, #4
 8002fec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f004 f901 	bl	80071f8 <HAL_UART_Transmit>
  return ch;
 8002ff6:	687b      	ldr	r3, [r7, #4]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20001318 	.word	0x20001318
 8003004:	20001290 	.word	0x20001290

08003008 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0ac      	sub	sp, #176	@ 0xb0
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	2288      	movs	r2, #136	@ 0x88
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f00a fc15 	bl	800d848 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800301e:	2301      	movs	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003022:	2300      	movs	r3, #0
 8003024:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4618      	mov	r0, r3
 800302c:	f002 ff8c 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003030:	4b22      	ldr	r3, [pc, #136]	@ (80030bc <USART1_MspInit+0xb4>)
 8003032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003034:	4a21      	ldr	r2, [pc, #132]	@ (80030bc <USART1_MspInit+0xb4>)
 8003036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800303a:	6613      	str	r3, [r2, #96]	@ 0x60
 800303c:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <USART1_MspInit+0xb4>)
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <USART1_MspInit+0xb4>)
 800304a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304c:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <USART1_MspInit+0xb4>)
 800304e:	f043 0302 	orr.w	r3, r3, #2
 8003052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003054:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <USART1_MspInit+0xb4>)
 8003056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003060:	2340      	movs	r3, #64	@ 0x40
 8003062:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003072:	2303      	movs	r3, #3
 8003074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003078:	2307      	movs	r3, #7
 800307a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 800307e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003082:	4619      	mov	r1, r3
 8003084:	480e      	ldr	r0, [pc, #56]	@ (80030c0 <USART1_MspInit+0xb8>)
 8003086:	f000 fd8f 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800308a:	2380      	movs	r3, #128	@ 0x80
 800308c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	2302      	movs	r3, #2
 8003092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80030a2:	2307      	movs	r3, #7
 80030a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80030a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030ac:	4619      	mov	r1, r3
 80030ae:	4804      	ldr	r0, [pc, #16]	@ (80030c0 <USART1_MspInit+0xb8>)
 80030b0:	f000 fd7a 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80030b4:	bf00      	nop
 80030b6:	37b0      	adds	r7, #176	@ 0xb0
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	48000400 	.word	0x48000400

080030c4 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <BSP_SPI3_Init+0x54>)
 80030d0:	4a12      	ldr	r2, [pc, #72]	@ (800311c <BSP_SPI3_Init+0x58>)
 80030d2:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80030d4:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <BSP_SPI3_Init+0x5c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	4911      	ldr	r1, [pc, #68]	@ (8003120 <BSP_SPI3_Init+0x5c>)
 80030dc:	600a      	str	r2, [r1, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80030e2:	480d      	ldr	r0, [pc, #52]	@ (8003118 <BSP_SPI3_Init+0x54>)
 80030e4:	f003 fec8 	bl	8006e78 <HAL_SPI_GetState>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10e      	bne.n	800310c <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80030ee:	480a      	ldr	r0, [pc, #40]	@ (8003118 <BSP_SPI3_Init+0x54>)
 80030f0:	f000 f882 	bl	80031f8 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80030fa:	4807      	ldr	r0, [pc, #28]	@ (8003118 <BSP_SPI3_Init+0x54>)
 80030fc:	f000 f83a 	bl	8003174 <MX_SPI3_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003106:	f06f 0307 	mvn.w	r3, #7
 800310a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20001370 	.word	0x20001370
 800311c:	40003c00 	.word	0x40003c00
 8003120:	200013d4 	.word	0x200013d4

08003124 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800313c:	9200      	str	r2, [sp, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	4807      	ldr	r0, [pc, #28]	@ (8003160 <BSP_SPI3_SendRecv+0x3c>)
 8003144:	f003 fc79 	bl	8006a3a <HAL_SPI_TransmitReceive>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800314e:	f06f 0305 	mvn.w	r3, #5
 8003152:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003154:	697b      	ldr	r3, [r7, #20]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20001370 	.word	0x20001370

08003164 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003168:	f000 fa72 	bl	8003650 <HAL_GetTick>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <MX_SPI3_Init+0x80>)
 8003184:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800318c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800319a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ae:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2207      	movs	r2, #7
 80031cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2208      	movs	r2, #8
 80031d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f003 fb80 	bl	80068e0 <HAL_SPI_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40003c00 	.word	0x40003c00

080031f8 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003200:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <SPI3_MspInit+0xa8>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	4a26      	ldr	r2, [pc, #152]	@ (80032a0 <SPI3_MspInit+0xa8>)
 8003206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800320a:	6593      	str	r3, [r2, #88]	@ 0x58
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <SPI3_MspInit+0xa8>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003218:	4b21      	ldr	r3, [pc, #132]	@ (80032a0 <SPI3_MspInit+0xa8>)
 800321a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321c:	4a20      	ldr	r2, [pc, #128]	@ (80032a0 <SPI3_MspInit+0xa8>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003224:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <SPI3_MspInit+0xa8>)
 8003226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8003242:	2306      	movs	r3, #6
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	4619      	mov	r1, r3
 800324c:	4815      	ldr	r0, [pc, #84]	@ (80032a4 <SPI3_MspInit+0xac>)
 800324e:	f000 fcab 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8003252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003260:	2303      	movs	r3, #3
 8003262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003264:	2306      	movs	r3, #6
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4619      	mov	r1, r3
 800326e:	480d      	ldr	r0, [pc, #52]	@ (80032a4 <SPI3_MspInit+0xac>)
 8003270:	f000 fc9a 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8003286:	2306      	movs	r3, #6
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	4619      	mov	r1, r3
 8003290:	4804      	ldr	r0, [pc, #16]	@ (80032a4 <SPI3_MspInit+0xac>)
 8003292:	f000 fc89 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	@ 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	48000800 	.word	0x48000800

080032a8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80032b2:	2300      	movs	r3, #0
 80032b4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80032b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <BSP_GYRO_Init+0x7c>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4798      	blx	r3
 80032bc:	4603      	mov	r3, r0
 80032be:	2b6a      	cmp	r3, #106	@ 0x6a
 80032c0:	d002      	beq.n	80032c8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	e028      	b.n	800331a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80032c8:	4b17      	ldr	r3, [pc, #92]	@ (8003328 <BSP_GYRO_Init+0x80>)
 80032ca:	4a16      	ldr	r2, [pc, #88]	@ (8003324 <BSP_GYRO_Init+0x7c>)
 80032cc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80032d2:	2330      	movs	r3, #48	@ 0x30
 80032d4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80032de:	2340      	movs	r3, #64	@ 0x40
 80032e0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80032e6:	230c      	movs	r3, #12
 80032e8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80032ea:	7aba      	ldrb	r2, [r7, #10]
 80032ec:	797b      	ldrb	r3, [r7, #5]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80032f4:	7a3b      	ldrb	r3, [r7, #8]
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	b21a      	sxth	r2, r3
 8003300:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	b21b      	sxth	r3, r3
 8003308:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800330a:	4b07      	ldr	r3, [pc, #28]	@ (8003328 <BSP_GYRO_Init+0x80>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	89ba      	ldrh	r2, [r7, #12]
 8003312:	4610      	mov	r0, r2
 8003314:	4798      	blx	r3
    
    ret = GYRO_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	2000001c 	.word	0x2000001c
 8003328:	200013d8 	.word	0x200013d8

0800332c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <BSP_GYRO_GetXYZ+0x2c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800333c:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <BSP_GYRO_GetXYZ+0x2c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8003346:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <BSP_GYRO_GetXYZ+0x2c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
    }
  }
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200013d8 	.word	0x200013d8

0800335c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800336a:	2111      	movs	r1, #17
 800336c:	20d4      	movs	r0, #212	@ 0xd4
 800336e:	f7ff fdbf 	bl	8002ef0 <SENSOR_IO_Read>
 8003372:	4603      	mov	r3, r0
 8003374:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800337a:	7bbb      	ldrb	r3, [r7, #14]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003382:	7bba      	ldrb	r2, [r7, #14]
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	4313      	orrs	r3, r2
 8003388:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	461a      	mov	r2, r3
 800338e:	2111      	movs	r1, #17
 8003390:	20d4      	movs	r0, #212	@ 0xd4
 8003392:	f7ff fd93 	bl	8002ebc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003396:	2112      	movs	r1, #18
 8003398:	20d4      	movs	r0, #212	@ 0xd4
 800339a:	f7ff fda9 	bl	8002ef0 <SENSOR_IO_Read>
 800339e:	4603      	mov	r3, r0
 80033a0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80033aa:	7bbb      	ldrb	r3, [r7, #14]
 80033ac:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80033b0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80033b2:	7bba      	ldrb	r2, [r7, #14]
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80033ba:	7bbb      	ldrb	r3, [r7, #14]
 80033bc:	461a      	mov	r2, r3
 80033be:	2112      	movs	r1, #18
 80033c0:	20d4      	movs	r0, #212	@ 0xd4
 80033c2:	f7ff fd7b 	bl	8002ebc <SENSOR_IO_Write>
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80033d4:	2300      	movs	r3, #0
 80033d6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80033d8:	2111      	movs	r1, #17
 80033da:	20d4      	movs	r0, #212	@ 0xd4
 80033dc:	f7ff fd88 	bl	8002ef0 <SENSOR_IO_Read>
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	461a      	mov	r2, r3
 80033f0:	2111      	movs	r1, #17
 80033f2:	20d4      	movs	r0, #212	@ 0xd4
 80033f4:	f7ff fd62 	bl	8002ebc <SENSOR_IO_Write>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003404:	f7ff fd50 	bl	8002ea8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003408:	210f      	movs	r1, #15
 800340a:	20d4      	movs	r0, #212	@ 0xd4
 800340c:	f7ff fd70 	bl	8002ef0 <SENSOR_IO_Read>
 8003410:	4603      	mov	r3, r0
}
 8003412:	4618      	mov	r0, r3
 8003414:	bd80      	pop	{r7, pc}

08003416 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003424:	2116      	movs	r1, #22
 8003426:	20d4      	movs	r0, #212	@ 0xd4
 8003428:	f7ff fd62 	bl	8002ef0 <SENSOR_IO_Read>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003436:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003444:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	461a      	mov	r2, r3
 800344a:	2116      	movs	r1, #22
 800344c:	20d4      	movs	r0, #212	@ 0xd4
 800344e:	f7ff fd35 	bl	8002ebc <SENSOR_IO_Write>
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003464:	2300      	movs	r3, #0
 8003466:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003472:	2111      	movs	r1, #17
 8003474:	20d4      	movs	r0, #212	@ 0xd4
 8003476:	f7ff fd3b 	bl	8002ef0 <SENSOR_IO_Read>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800347e:	f107 0208 	add.w	r2, r7, #8
 8003482:	2306      	movs	r3, #6
 8003484:	2122      	movs	r1, #34	@ 0x22
 8003486:	20d4      	movs	r0, #212	@ 0xd4
 8003488:	f7ff fd50 	bl	8002f2c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e01a      	b.n	80034c8 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003492:	7ffb      	ldrb	r3, [r7, #31]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	3301      	adds	r3, #1
 8003498:	3320      	adds	r3, #32
 800349a:	443b      	add	r3, r7
 800349c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	7ffa      	ldrb	r2, [r7, #31]
 80034a6:	0052      	lsls	r2, r2, #1
 80034a8:	3220      	adds	r2, #32
 80034aa:	443a      	add	r2, r7
 80034ac:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80034b0:	4413      	add	r3, r2
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	7ffb      	ldrb	r3, [r7, #31]
 80034b6:	b212      	sxth	r2, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	3320      	adds	r3, #32
 80034bc:	443b      	add	r3, r7
 80034be:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	3301      	adds	r3, #1
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	7ffb      	ldrb	r3, [r7, #31]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d9e1      	bls.n	8003492 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d829      	bhi.n	800352c <LSM6DSL_GyroReadXYZAngRate+0xd0>
 80034d8:	a201      	add	r2, pc, #4	@ (adr r2, 80034e0 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003515 	.word	0x08003515
 80034e4:	0800352d 	.word	0x0800352d
 80034e8:	0800352d 	.word	0x0800352d
 80034ec:	0800352d 	.word	0x0800352d
 80034f0:	0800351b 	.word	0x0800351b
 80034f4:	0800352d 	.word	0x0800352d
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	0800352d 	.word	0x0800352d
 8003500:	08003521 	.word	0x08003521
 8003504:	0800352d 	.word	0x0800352d
 8003508:	0800352d 	.word	0x0800352d
 800350c:	0800352d 	.word	0x0800352d
 8003510:	08003527 	.word	0x08003527
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003514:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8003516:	61bb      	str	r3, [r7, #24]
    break;
 8003518:	e008      	b.n	800352c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800351a:	4b16      	ldr	r3, [pc, #88]	@ (8003574 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800351c:	61bb      	str	r3, [r7, #24]
    break;
 800351e:	e005      	b.n	800352c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003520:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8003522:	61bb      	str	r3, [r7, #24]
    break;
 8003524:	e002      	b.n	800352c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003526:	4b15      	ldr	r3, [pc, #84]	@ (800357c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003528:	61bb      	str	r3, [r7, #24]
    break;    
 800352a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800352c:	2300      	movs	r3, #0
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e016      	b.n	8003560 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003532:	7ffb      	ldrb	r3, [r7, #31]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	3320      	adds	r3, #32
 8003538:	443b      	add	r3, r7
 800353a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003546:	7ffb      	ldrb	r3, [r7, #31]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800355a:	7ffb      	ldrb	r3, [r7, #31]
 800355c:	3301      	adds	r3, #1
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	7ffb      	ldrb	r3, [r7, #31]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d9e5      	bls.n	8003532 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	410c0000 	.word	0x410c0000
 8003574:	418c0000 	.word	0x418c0000
 8003578:	420c0000 	.word	0x420c0000
 800357c:	428c0000 	.word	0x428c0000

08003580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800358a:	2003      	movs	r0, #3
 800358c:	f000 f960 	bl	8003850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003590:	200f      	movs	r0, #15
 8003592:	f000 f80d 	bl	80035b0 <HAL_InitTick>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	71fb      	strb	r3, [r7, #7]
 80035a0:	e001      	b.n	80035a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035a2:	f7fe fe95 	bl	80022d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035a6:	79fb      	ldrb	r3, [r7, #7]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035bc:	4b17      	ldr	r3, [pc, #92]	@ (800361c <HAL_InitTick+0x6c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035c4:	4b16      	ldr	r3, [pc, #88]	@ (8003620 <HAL_InitTick+0x70>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b14      	ldr	r3, [pc, #80]	@ (800361c <HAL_InitTick+0x6c>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	4619      	mov	r1, r3
 80035ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f96d 	bl	80038ba <HAL_SYSTICK_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b0f      	cmp	r3, #15
 80035ea:	d809      	bhi.n	8003600 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ec:	2200      	movs	r2, #0
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	f000 f937 	bl	8003866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_InitTick+0x74>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e007      	b.n	8003610 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e004      	b.n	8003610 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e001      	b.n	8003610 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000054 	.word	0x20000054
 8003620:	20000004 	.word	0x20000004
 8003624:	20000050 	.word	0x20000050

08003628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800362c:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <HAL_IncTick+0x20>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_IncTick+0x24>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4413      	add	r3, r2
 8003638:	4a04      	ldr	r2, [pc, #16]	@ (800364c <HAL_IncTick+0x24>)
 800363a:	6013      	str	r3, [r2, #0]
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000054 	.word	0x20000054
 800364c:	200013dc 	.word	0x200013dc

08003650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return uwTick;
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_GetTick+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	200013dc 	.word	0x200013dc

08003668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003670:	f7ff ffee 	bl	8003650 <HAL_GetTick>
 8003674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d005      	beq.n	800368e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <HAL_Delay+0x44>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800368e:	bf00      	nop
 8003690:	f7ff ffde 	bl	8003650 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	429a      	cmp	r2, r3
 800369e:	d8f7      	bhi.n	8003690 <HAL_Delay+0x28>
  {
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000054 	.word	0x20000054

080036b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	@ (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	@ (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	@ (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800381c:	d301      	bcc.n	8003822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <SysTick_Config+0x40>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382a:	210f      	movs	r1, #15
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	f7ff ff8e 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <SysTick_Config+0x40>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383a:	4b04      	ldr	r3, [pc, #16]	@ (800384c <SysTick_Config+0x40>)
 800383c:	2207      	movs	r2, #7
 800383e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff29 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003878:	f7ff ff3e 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 800387c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff8e 	bl	80037a4 <NVIC_EncodePriority>
 8003888:	4602      	mov	r2, r0
 800388a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff5d 	bl	8003750 <__NVIC_SetPriority>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff31 	bl	8003714 <__NVIC_EnableIRQ>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffa2 	bl	800380c <SysTick_Config>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0ac      	b.n	8003a40 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f8b2 	bl	8003a54 <DFSDM_GetChannelFromInstance>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4a55      	ldr	r2, [pc, #340]	@ (8003a48 <HAL_DFSDM_ChannelInit+0x174>)
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e09f      	b.n	8003a40 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fe fd0d 	bl	8002320 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003906:	4b51      	ldr	r3, [pc, #324]	@ (8003a4c <HAL_DFSDM_ChannelInit+0x178>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3301      	adds	r3, #1
 800390c:	4a4f      	ldr	r2, [pc, #316]	@ (8003a4c <HAL_DFSDM_ChannelInit+0x178>)
 800390e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003910:	4b4e      	ldr	r3, [pc, #312]	@ (8003a4c <HAL_DFSDM_ChannelInit+0x178>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d125      	bne.n	8003964 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003918:	4b4d      	ldr	r3, [pc, #308]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a4c      	ldr	r2, [pc, #304]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 800391e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003922:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003924:	4b4a      	ldr	r3, [pc, #296]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4948      	ldr	r1, [pc, #288]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003932:	4b47      	ldr	r3, [pc, #284]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a46      	ldr	r2, [pc, #280]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003938:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800393c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	791b      	ldrb	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d108      	bne.n	8003958 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003946:	4b42      	ldr	r3, [pc, #264]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	3b01      	subs	r3, #1
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	493f      	ldr	r1, [pc, #252]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003958:	4b3d      	ldr	r3, [pc, #244]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a50 <HAL_DFSDM_ChannelInit+0x17c>)
 800395e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003962:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003972:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003982:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003988:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 020f 	bic.w	r2, r2, #15
 80039a0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80039c8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6899      	ldr	r1, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f002 0207 	and.w	r2, r2, #7
 80039f4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a20:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f810 	bl	8003a54 <DFSDM_GetChannelFromInstance>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4904      	ldr	r1, [pc, #16]	@ (8003a48 <HAL_DFSDM_ChannelInit+0x174>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200013e4 	.word	0x200013e4
 8003a4c:	200013e0 	.word	0x200013e0
 8003a50:	40016000 	.word	0x40016000

08003a54 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d102      	bne.n	8003a6a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e02b      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <DFSDM_GetChannelFromInstance+0x80>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d102      	bne.n	8003a78 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e024      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <DFSDM_GetChannelFromInstance+0x84>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a80:	2302      	movs	r3, #2
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e01d      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a14      	ldr	r2, [pc, #80]	@ (8003adc <DFSDM_GetChannelFromInstance+0x88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d102      	bne.n	8003a94 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e016      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a12      	ldr	r2, [pc, #72]	@ (8003ae0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d102      	bne.n	8003aa2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e00f      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae4 <DFSDM_GetChannelFromInstance+0x90>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d102      	bne.n	8003ab0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003aaa:	2306      	movs	r3, #6
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e008      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae8 <DFSDM_GetChannelFromInstance+0x94>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d102      	bne.n	8003abe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003ab8:	2307      	movs	r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e001      	b.n	8003ac2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40016000 	.word	0x40016000
 8003ad4:	40016020 	.word	0x40016020
 8003ad8:	40016040 	.word	0x40016040
 8003adc:	40016080 	.word	0x40016080
 8003ae0:	400160a0 	.word	0x400160a0
 8003ae4:	400160c0 	.word	0x400160c0
 8003ae8:	400160e0 	.word	0x400160e0

08003aec <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	460b      	mov	r3, r1
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003afe:	7afb      	ldrb	r3, [r7, #11]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b10:	bf00      	nop
  }

  return status;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e003      	b.n	8003b3c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
  }
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2201      	movs	r2, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <HAL_EXTI_IRQHandler+0x5c>)
 8003b72:	4413      	add	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4798      	blx	r3
    }
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40010414 	.word	0x40010414

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	e17f      	b.n	8003eb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8171 	beq.w	8003eb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d005      	beq.n	8003be8 <HAL_GPIO_Init+0x40>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d130      	bne.n	8003c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c1e:	2201      	movs	r2, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0201 	and.w	r2, r3, #1
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d118      	bne.n	8003c88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	08db      	lsrs	r3, r3, #3
 8003c72:	f003 0201 	and.w	r2, r3, #1
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d017      	beq.n	8003cc4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d123      	bne.n	8003d18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	08da      	lsrs	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	6939      	ldr	r1, [r7, #16]
 8003d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80ac 	beq.w	8003eb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed8 <HAL_GPIO_Init+0x330>)
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ed8 <HAL_GPIO_Init+0x330>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d66:	4b5c      	ldr	r3, [pc, #368]	@ (8003ed8 <HAL_GPIO_Init+0x330>)
 8003d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d72:	4a5a      	ldr	r2, [pc, #360]	@ (8003edc <HAL_GPIO_Init+0x334>)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	220f      	movs	r2, #15
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d9c:	d025      	beq.n	8003dea <HAL_GPIO_Init+0x242>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4f      	ldr	r2, [pc, #316]	@ (8003ee0 <HAL_GPIO_Init+0x338>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <HAL_GPIO_Init+0x23e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4e      	ldr	r2, [pc, #312]	@ (8003ee4 <HAL_GPIO_Init+0x33c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d019      	beq.n	8003de2 <HAL_GPIO_Init+0x23a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ee8 <HAL_GPIO_Init+0x340>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0x236>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4c      	ldr	r2, [pc, #304]	@ (8003eec <HAL_GPIO_Init+0x344>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_GPIO_Init+0x232>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef0 <HAL_GPIO_Init+0x348>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <HAL_GPIO_Init+0x22e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef4 <HAL_GPIO_Init+0x34c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GPIO_Init+0x22a>
 8003dce:	2306      	movs	r3, #6
 8003dd0:	e00c      	b.n	8003dec <HAL_GPIO_Init+0x244>
 8003dd2:	2307      	movs	r3, #7
 8003dd4:	e00a      	b.n	8003dec <HAL_GPIO_Init+0x244>
 8003dd6:	2305      	movs	r3, #5
 8003dd8:	e008      	b.n	8003dec <HAL_GPIO_Init+0x244>
 8003dda:	2304      	movs	r3, #4
 8003ddc:	e006      	b.n	8003dec <HAL_GPIO_Init+0x244>
 8003dde:	2303      	movs	r3, #3
 8003de0:	e004      	b.n	8003dec <HAL_GPIO_Init+0x244>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e002      	b.n	8003dec <HAL_GPIO_Init+0x244>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_GPIO_Init+0x244>
 8003dea:	2300      	movs	r3, #0
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	f002 0203 	and.w	r2, r2, #3
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	4093      	lsls	r3, r2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dfc:	4937      	ldr	r1, [pc, #220]	@ (8003edc <HAL_GPIO_Init+0x334>)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	089b      	lsrs	r3, r3, #2
 8003e02:	3302      	adds	r3, #2
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e34:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e58:	4a27      	ldr	r2, [pc, #156]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e5e:	4b26      	ldr	r3, [pc, #152]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e82:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eac:	4a12      	ldr	r2, [pc, #72]	@ (8003ef8 <HAL_GPIO_Init+0x350>)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f47f ae78 	bne.w	8003bb8 <HAL_GPIO_Init+0x10>
  }
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	48000400 	.word	0x48000400
 8003ee4:	48000800 	.word	0x48000800
 8003ee8:	48000c00 	.word	0x48000c00
 8003eec:	48001000 	.word	0x48001000
 8003ef0:	48001400 	.word	0x48001400
 8003ef4:	48001800 	.word	0x48001800
 8003ef8:	40010400 	.word	0x40010400

08003efc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f0a:	e0cd      	b.n	80040a8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80c0 	beq.w	80040a2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f22:	4a68      	ldr	r2, [pc, #416]	@ (80040c4 <HAL_GPIO_DeInit+0x1c8>)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	3302      	adds	r3, #2
 8003f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4013      	ands	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f4a:	d025      	beq.n	8003f98 <HAL_GPIO_DeInit+0x9c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80040c8 <HAL_GPIO_DeInit+0x1cc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d01f      	beq.n	8003f94 <HAL_GPIO_DeInit+0x98>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a5d      	ldr	r2, [pc, #372]	@ (80040cc <HAL_GPIO_DeInit+0x1d0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d019      	beq.n	8003f90 <HAL_GPIO_DeInit+0x94>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a5c      	ldr	r2, [pc, #368]	@ (80040d0 <HAL_GPIO_DeInit+0x1d4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_GPIO_DeInit+0x90>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a5b      	ldr	r2, [pc, #364]	@ (80040d4 <HAL_GPIO_DeInit+0x1d8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00d      	beq.n	8003f88 <HAL_GPIO_DeInit+0x8c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80040d8 <HAL_GPIO_DeInit+0x1dc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <HAL_GPIO_DeInit+0x88>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a59      	ldr	r2, [pc, #356]	@ (80040dc <HAL_GPIO_DeInit+0x1e0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_GPIO_DeInit+0x84>
 8003f7c:	2306      	movs	r3, #6
 8003f7e:	e00c      	b.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f80:	2307      	movs	r3, #7
 8003f82:	e00a      	b.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f84:	2305      	movs	r3, #5
 8003f86:	e008      	b.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e006      	b.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e004      	b.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e002      	b.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_GPIO_DeInit+0x9e>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	f002 0203 	and.w	r2, r2, #3
 8003fa0:	0092      	lsls	r2, r2, #2
 8003fa2:	4093      	lsls	r3, r2
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d132      	bne.n	8004010 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003faa:	4b4d      	ldr	r3, [pc, #308]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	494b      	ldr	r1, [pc, #300]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003fb8:	4b49      	ldr	r3, [pc, #292]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	4947      	ldr	r1, [pc, #284]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003fc6:	4b46      	ldr	r3, [pc, #280]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	4944      	ldr	r1, [pc, #272]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003fd4:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	4940      	ldr	r1, [pc, #256]	@ (80040e0 <HAL_GPIO_DeInit+0x1e4>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	220f      	movs	r2, #15
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003ff2:	4a34      	ldr	r2, [pc, #208]	@ (80040c4 <HAL_GPIO_DeInit+0x1c8>)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43da      	mvns	r2, r3
 8004002:	4830      	ldr	r0, [pc, #192]	@ (80040c4 <HAL_GPIO_DeInit+0x1c8>)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	400a      	ands	r2, r1
 800400a:	3302      	adds	r3, #2
 800400c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2103      	movs	r1, #3
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	08da      	lsrs	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3208      	adds	r2, #8
 800402c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	08d2      	lsrs	r2, r2, #3
 8004044:	4019      	ands	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3208      	adds	r2, #8
 800404a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2103      	movs	r1, #3
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	2101      	movs	r1, #1
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	401a      	ands	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2103      	movs	r1, #3
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	401a      	ands	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004092:	2101      	movs	r1, #1
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	401a      	ands	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f47f af2b 	bne.w	8003f0c <HAL_GPIO_DeInit+0x10>
  }
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40010000 	.word	0x40010000
 80040c8:	48000400 	.word	0x48000400
 80040cc:	48000800 	.word	0x48000800
 80040d0:	48000c00 	.word	0x48000c00
 80040d4:	48001000 	.word	0x48001000
 80040d8:	48001400 	.word	0x48001400
 80040dc:	48001800 	.word	0x48001800
 80040e0:	40010400 	.word	0x40010400

080040e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	e001      	b.n	8004106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004130:	e002      	b.n	8004138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4013      	ands	r3, r2
 800415c:	041a      	lsls	r2, r3, #16
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43d9      	mvns	r1, r3
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	400b      	ands	r3, r1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	619a      	str	r2, [r3, #24]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004182:	4b08      	ldr	r3, [pc, #32]	@ (80041a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800418e:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f806 	bl	80041a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40010400 	.word	0x40010400

080041a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e08d      	b.n	80042ec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fe f8ff 	bl	80023e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2224      	movs	r2, #36	@ 0x24
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800420e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800421e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d107      	bne.n	8004238 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	e006      	b.n	8004246 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004244:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d108      	bne.n	8004260 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	e007      	b.n	8004270 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800426e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800427e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004282:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004292:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69d9      	ldr	r1, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e021      	b.n	800434a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2224      	movs	r2, #36	@ 0x24
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fe f8c0 	bl	80024a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	4608      	mov	r0, r1
 800435e:	4611      	mov	r1, r2
 8004360:	461a      	mov	r2, r3
 8004362:	4603      	mov	r3, r0
 8004364:	817b      	strh	r3, [r7, #10]
 8004366:	460b      	mov	r3, r1
 8004368:	813b      	strh	r3, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b20      	cmp	r3, #32
 8004378:	f040 80f9 	bne.w	800456e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_I2C_Mem_Write+0x34>
 8004382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0ed      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_I2C_Mem_Write+0x4e>
 800439e:	2302      	movs	r3, #2
 80043a0:	e0e6      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043aa:	f7ff f951 	bl	8003650 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2319      	movs	r3, #25
 80043b6:	2201      	movs	r2, #1
 80043b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fac3 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d1      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2221      	movs	r2, #33	@ 0x21
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2240      	movs	r2, #64	@ 0x40
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a3a      	ldr	r2, [r7, #32]
 80043e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043f4:	88f8      	ldrh	r0, [r7, #6]
 80043f6:	893a      	ldrh	r2, [r7, #8]
 80043f8:	8979      	ldrh	r1, [r7, #10]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	4603      	mov	r3, r0
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f9d3 	bl	80047b0 <I2C_RequestMemoryWrite>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0a9      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2bff      	cmp	r3, #255	@ 0xff
 8004424:	d90e      	bls.n	8004444 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	22ff      	movs	r2, #255	@ 0xff
 800442a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004430:	b2da      	uxtb	r2, r3
 8004432:	8979      	ldrh	r1, [r7, #10]
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fc47 	bl	8004cd0 <I2C_TransferConfig>
 8004442:	e00f      	b.n	8004464 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	b2da      	uxtb	r2, r3
 8004454:	8979      	ldrh	r1, [r7, #10]
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fc36 	bl	8004cd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fac6 	bl	80049fa <I2C_WaitOnTXISFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e07b      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d034      	beq.n	800451c <HAL_I2C_Mem_Write+0x1c8>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d130      	bne.n	800451c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	2200      	movs	r2, #0
 80044c2:	2180      	movs	r1, #128	@ 0x80
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fa3f 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e04d      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2bff      	cmp	r3, #255	@ 0xff
 80044dc:	d90e      	bls.n	80044fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	22ff      	movs	r2, #255	@ 0xff
 80044e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	8979      	ldrh	r1, [r7, #10]
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fbeb 	bl	8004cd0 <I2C_TransferConfig>
 80044fa:	e00f      	b.n	800451c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450a:	b2da      	uxtb	r2, r3
 800450c:	8979      	ldrh	r1, [r7, #10]
 800450e:	2300      	movs	r3, #0
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fbda 	bl	8004cd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d19e      	bne.n	8004464 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 faac 	bl	8004a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e01a      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2220      	movs	r2, #32
 8004540:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <HAL_I2C_Mem_Write+0x224>)
 800454e:	400b      	ands	r3, r1
 8004550:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	fe00e800 	.word	0xfe00e800

0800457c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4603      	mov	r3, r0
 800458c:	817b      	strh	r3, [r7, #10]
 800458e:	460b      	mov	r3, r1
 8004590:	813b      	strh	r3, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b20      	cmp	r3, #32
 80045a0:	f040 80fd 	bne.w	800479e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_I2C_Mem_Read+0x34>
 80045aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0f1      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Mem_Read+0x4e>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0ea      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045d2:	f7ff f83d 	bl	8003650 <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2319      	movs	r3, #25
 80045de:	2201      	movs	r2, #1
 80045e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f9af 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0d5      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2222      	movs	r2, #34	@ 0x22
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2240      	movs	r2, #64	@ 0x40
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a3a      	ldr	r2, [r7, #32]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800461c:	88f8      	ldrh	r0, [r7, #6]
 800461e:	893a      	ldrh	r2, [r7, #8]
 8004620:	8979      	ldrh	r1, [r7, #10]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4603      	mov	r3, r0
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f913 	bl	8004858 <I2C_RequestMemoryRead>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0ad      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2bff      	cmp	r3, #255	@ 0xff
 800464c:	d90e      	bls.n	800466c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	b2da      	uxtb	r2, r3
 800465a:	8979      	ldrh	r1, [r7, #10]
 800465c:	4b52      	ldr	r3, [pc, #328]	@ (80047a8 <HAL_I2C_Mem_Read+0x22c>)
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fb33 	bl	8004cd0 <I2C_TransferConfig>
 800466a:	e00f      	b.n	800468c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	8979      	ldrh	r1, [r7, #10]
 800467e:	4b4a      	ldr	r3, [pc, #296]	@ (80047a8 <HAL_I2C_Mem_Read+0x22c>)
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fb22 	bl	8004cd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	2200      	movs	r2, #0
 8004694:	2104      	movs	r1, #4
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f956 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07c      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d034      	beq.n	800474c <HAL_I2C_Mem_Read+0x1d0>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d130      	bne.n	800474c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	2200      	movs	r2, #0
 80046f2:	2180      	movs	r1, #128	@ 0x80
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f927 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e04d      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2bff      	cmp	r3, #255	@ 0xff
 800470c:	d90e      	bls.n	800472c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004718:	b2da      	uxtb	r2, r3
 800471a:	8979      	ldrh	r1, [r7, #10]
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fad3 	bl	8004cd0 <I2C_TransferConfig>
 800472a:	e00f      	b.n	800474c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	b2da      	uxtb	r2, r3
 800473c:	8979      	ldrh	r1, [r7, #10]
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fac2 	bl	8004cd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d19a      	bne.n	800468c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f994 	bl	8004a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e01a      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2220      	movs	r2, #32
 8004770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_I2C_Mem_Read+0x230>)
 800477e:	400b      	ands	r3, r1
 8004780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	80002400 	.word	0x80002400
 80047ac:	fe00e800 	.word	0xfe00e800

080047b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	460b      	mov	r3, r1
 80047c4:	813b      	strh	r3, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	8979      	ldrh	r1, [r7, #10]
 80047d0:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <I2C_RequestMemoryWrite+0xa4>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fa79 	bl	8004cd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	69b9      	ldr	r1, [r7, #24]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f909 	bl	80049fa <I2C_WaitOnTXISFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e02c      	b.n	800484c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047f8:	893b      	ldrh	r3, [r7, #8]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	629a      	str	r2, [r3, #40]	@ 0x28
 8004802:	e015      	b.n	8004830 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004804:	893b      	ldrh	r3, [r7, #8]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	b29b      	uxth	r3, r3
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f8ef 	bl	80049fa <I2C_WaitOnTXISFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e012      	b.n	800484c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004826:	893b      	ldrh	r3, [r7, #8]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2200      	movs	r2, #0
 8004838:	2180      	movs	r1, #128	@ 0x80
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f884 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	80002000 	.word	0x80002000

08004858 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	8979      	ldrh	r1, [r7, #10]
 8004878:	4b20      	ldr	r3, [pc, #128]	@ (80048fc <I2C_RequestMemoryRead+0xa4>)
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2300      	movs	r3, #0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa26 	bl	8004cd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f8b6 	bl	80049fa <I2C_WaitOnTXISFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e02c      	b.n	80048f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800489e:	893b      	ldrh	r3, [r7, #8]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048a8:	e015      	b.n	80048d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048aa:	893b      	ldrh	r3, [r7, #8]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	69b9      	ldr	r1, [r7, #24]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f89c 	bl	80049fa <I2C_WaitOnTXISFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e012      	b.n	80048f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048cc:	893b      	ldrh	r3, [r7, #8]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2200      	movs	r2, #0
 80048de:	2140      	movs	r1, #64	@ 0x40
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f831 	bl	8004948 <I2C_WaitOnFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	80002000 	.word	0x80002000

08004900 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d103      	bne.n	800491e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d007      	beq.n	800493c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	619a      	str	r2, [r3, #24]
  }
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004958:	e03b      	b.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f8d6 	bl	8004b10 <I2C_IsErrorOccurred>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e041      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d02d      	beq.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fe fe6b 	bl	8003650 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d122      	bne.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d113      	bne.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e00f      	b.n	80049f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	bf0c      	ite	eq
 80049e2:	2301      	moveq	r3, #1
 80049e4:	2300      	movne	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d0b4      	beq.n	800495a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a06:	e033      	b.n	8004a70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f87f 	bl	8004b10 <I2C_IsErrorOccurred>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e031      	b.n	8004a80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d025      	beq.n	8004a70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a24:	f7fe fe14 	bl	8003650 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d11a      	bne.n	8004a70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d013      	beq.n	8004a70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e007      	b.n	8004a80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d1c4      	bne.n	8004a08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a94:	e02f      	b.n	8004af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f838 	bl	8004b10 <I2C_IsErrorOccurred>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e02d      	b.n	8004b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fe fdd1 	bl	8003650 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11a      	bne.n	8004af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d013      	beq.n	8004af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e007      	b.n	8004b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d1c8      	bne.n	8004a96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	@ 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d068      	beq.n	8004c0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2210      	movs	r2, #16
 8004b42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b44:	e049      	b.n	8004bda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d045      	beq.n	8004bda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fe fd7f 	bl	8003650 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <I2C_IsErrorOccurred+0x54>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d13a      	bne.n	8004bda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b86:	d121      	bne.n	8004bcc <I2C_IsErrorOccurred+0xbc>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b8e:	d01d      	beq.n	8004bcc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d01a      	beq.n	8004bcc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ba4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ba6:	f7fe fd53 	bl	8003650 <HAL_GetTick>
 8004baa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bac:	e00e      	b.n	8004bcc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bae:	f7fe fd4f 	bl	8003650 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b19      	cmp	r3, #25
 8004bba:	d907      	bls.n	8004bcc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f043 0320 	orr.w	r3, r3, #32
 8004bc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004bca:	e006      	b.n	8004bda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d1e9      	bne.n	8004bae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d003      	beq.n	8004bf0 <I2C_IsErrorOccurred+0xe0>
 8004be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0aa      	beq.n	8004b46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f043 0304 	orr.w	r3, r3, #4
 8004c06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f043 0308 	orr.w	r3, r3, #8
 8004c48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01c      	beq.n	8004cbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff fe3b 	bl	8004900 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6859      	ldr	r1, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <I2C_IsErrorOccurred+0x1bc>)
 8004c96:	400b      	ands	r3, r1
 8004c98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3728      	adds	r7, #40	@ 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	fe00e800 	.word	0xfe00e800

08004cd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	817b      	strh	r3, [r7, #10]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ce2:	897b      	ldrh	r3, [r7, #10]
 8004ce4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ce8:	7a7b      	ldrb	r3, [r7, #9]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cf0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	0d5b      	lsrs	r3, r3, #21
 8004d0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d0e:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <I2C_TransferConfig+0x60>)
 8004d10:	430b      	orrs	r3, r1
 8004d12:	43db      	mvns	r3, r3
 8004d14:	ea02 0103 	and.w	r1, r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	03ff63ff 	.word	0x03ff63ff

08004d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d138      	bne.n	8004dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e032      	b.n	8004dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2224      	movs	r2, #36	@ 0x24
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d139      	bne.n	8004e54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e033      	b.n	8004e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2224      	movs	r2, #36	@ 0x24
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af02      	add	r7, sp, #8
 8004e68:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e101      	b.n	8005078 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7fd fbd1 	bl	8002630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f002 ff33 	bl	8007d0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	7c1a      	ldrb	r2, [r3, #16]
 8004eae:	f88d 2000 	strb.w	r2, [sp]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eb6:	f002 fefc 	bl	8007cb2 <USB_CoreInit>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0d5      	b.n	8005078 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f002 ff2b 	bl	8007d2e <USB_SetCurrentMode>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0c6      	b.n	8005078 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
 8004eee:	e04a      	b.n	8004f86 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3315      	adds	r3, #21
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f04:	7bfa      	ldrb	r2, [r7, #15]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	3314      	adds	r3, #20
 8004f14:	7bfa      	ldrb	r2, [r7, #15]
 8004f16:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	b298      	uxth	r0, r3
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	332e      	adds	r3, #46	@ 0x2e
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f30:	7bfa      	ldrb	r2, [r7, #15]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	3318      	adds	r3, #24
 8004f40:	2200      	movs	r2, #0
 8004f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	331c      	adds	r3, #28
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	3320      	adds	r3, #32
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	3324      	adds	r3, #36	@ 0x24
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	3301      	adds	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	791b      	ldrb	r3, [r3, #4]
 8004f8a:	7bfa      	ldrb	r2, [r7, #15]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d3af      	bcc.n	8004ef0 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e044      	b.n	8005020 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fee:	7bfa      	ldrb	r2, [r7, #15]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	3301      	adds	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	791b      	ldrb	r3, [r3, #4]
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	429a      	cmp	r2, r3
 8005028:	d3b5      	bcc.n	8004f96 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7c1a      	ldrb	r2, [r3, #16]
 8005032:	f88d 2000 	strb.w	r2, [sp]
 8005036:	3304      	adds	r3, #4
 8005038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800503a:	f002 fec5 	bl	8007dc8 <USB_DevInit>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e013      	b.n	8005078 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7b1b      	ldrb	r3, [r3, #12]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d102      	bne.n	800506c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f80a 	bl	8005080 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f003 f86a 	bl	800814a <USB_DevDisconnect>

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	f043 0303 	orr.w	r3, r3, #3
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a04      	ldr	r2, [pc, #16]	@ (80050e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d6:	6013      	str	r3, [r2, #0]
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40007000 	.word	0x40007000

080050e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050ec:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <HAL_PWREx_GetVoltageRange+0x18>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40007000 	.word	0x40007000

08005104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005112:	d130      	bne.n	8005176 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005114:	4b23      	ldr	r3, [pc, #140]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800511c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005120:	d038      	beq.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005122:	4b20      	ldr	r3, [pc, #128]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800512a:	4a1e      	ldr	r2, [pc, #120]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800512c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005132:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2232      	movs	r2, #50	@ 0x32
 8005138:	fb02 f303 	mul.w	r3, r2, r3
 800513c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0c9b      	lsrs	r3, r3, #18
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005148:	e002      	b.n	8005150 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b01      	subs	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005150:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515c:	d102      	bne.n	8005164 <HAL_PWREx_ControlVoltageScaling+0x60>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f2      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005164:	4b0f      	ldr	r3, [pc, #60]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005170:	d110      	bne.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e00f      	b.n	8005196 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005176:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005182:	d007      	beq.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005184:	4b07      	ldr	r3, [pc, #28]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800518c:	4a05      	ldr	r2, [pc, #20]	@ (80051a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800518e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005192:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40007000 	.word	0x40007000
 80051a8:	20000004 	.word	0x20000004
 80051ac:	431bde83 	.word	0x431bde83

080051b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a04      	ldr	r2, [pc, #16]	@ (80051cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80051ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051be:	6053      	str	r3, [r2, #4]
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40007000 	.word	0x40007000

080051d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051d8:	f7fe fa3a 	bl	8003650 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e063      	b.n	80052b0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fd f975 	bl	80024ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005202:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f858 	bl	80052bc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	3b01      	subs	r3, #1
 800521c:	021a      	lsls	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	2120      	movs	r1, #32
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f850 	bl	80052d8 <QSPI_WaitFlagStateUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800523c:	7afb      	ldrb	r3, [r7, #11]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d131      	bne.n	80052a6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6852      	ldr	r2, [r2, #4]
 8005254:	0611      	lsls	r1, r2, #24
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68d2      	ldr	r2, [r2, #12]
 800525a:	4311      	orrs	r1, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	430b      	orrs	r3, r1
 8005262:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4b13      	ldr	r3, [pc, #76]	@ (80052b8 <HAL_QSPI_Init+0xe8>)
 800526c:	4013      	ands	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6912      	ldr	r2, [r2, #16]
 8005272:	0411      	lsls	r1, r2, #16
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6952      	ldr	r2, [r2, #20]
 8005278:	4311      	orrs	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6992      	ldr	r2, [r2, #24]
 800527e:	4311      	orrs	r1, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	430b      	orrs	r3, r1
 8005286:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80052ae:	7afb      	ldrb	r3, [r7, #11]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	ffe0f8fe 	.word	0xffe0f8fe

080052bc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80052e8:	e01a      	b.n	8005320 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d016      	beq.n	8005320 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fe f9ad 	bl	8003650 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2204      	movs	r2, #4
 800530c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	f043 0201 	orr.w	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e00e      	b.n	800533e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	429a      	cmp	r2, r3
 800533a:	d1d6      	bne.n	80052ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e3ca      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800535a:	4b97      	ldr	r3, [pc, #604]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005364:	4b94      	ldr	r3, [pc, #592]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 80e4 	beq.w	8005544 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_RCC_OscConfig+0x4a>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b0c      	cmp	r3, #12
 8005386:	f040 808b 	bne.w	80054a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b01      	cmp	r3, #1
 800538e:	f040 8087 	bne.w	80054a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005392:	4b89      	ldr	r3, [pc, #548]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_RCC_OscConfig+0x62>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e3a2      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	4b82      	ldr	r3, [pc, #520]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <HAL_RCC_OscConfig+0x7c>
 80053ba:	4b7f      	ldr	r3, [pc, #508]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053c2:	e005      	b.n	80053d0 <HAL_RCC_OscConfig+0x88>
 80053c4:	4b7c      	ldr	r3, [pc, #496]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80053c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ca:	091b      	lsrs	r3, r3, #4
 80053cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d223      	bcs.n	800541c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fd55 	bl	8005e88 <RCC_SetFlashLatencyFromMSIRange>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e383      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053e8:	4b73      	ldr	r3, [pc, #460]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a72      	ldr	r2, [pc, #456]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80053ee:	f043 0308 	orr.w	r3, r3, #8
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b70      	ldr	r3, [pc, #448]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	496d      	ldr	r1, [pc, #436]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005406:	4b6c      	ldr	r3, [pc, #432]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	4968      	ldr	r1, [pc, #416]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
 800541a:	e025      	b.n	8005468 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800541c:	4b66      	ldr	r3, [pc, #408]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a65      	ldr	r2, [pc, #404]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005422:	f043 0308 	orr.w	r3, r3, #8
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b63      	ldr	r3, [pc, #396]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	4960      	ldr	r1, [pc, #384]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543a:	4b5f      	ldr	r3, [pc, #380]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	495b      	ldr	r1, [pc, #364]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 800544a:	4313      	orrs	r3, r2
 800544c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fd15 	bl	8005e88 <RCC_SetFlashLatencyFromMSIRange>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e343      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005468:	f000 fc4a 	bl	8005d00 <HAL_RCC_GetSysClockFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b52      	ldr	r3, [pc, #328]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	4950      	ldr	r1, [pc, #320]	@ (80055bc <HAL_RCC_OscConfig+0x274>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
 8005484:	4a4e      	ldr	r2, [pc, #312]	@ (80055c0 <HAL_RCC_OscConfig+0x278>)
 8005486:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005488:	4b4e      	ldr	r3, [pc, #312]	@ (80055c4 <HAL_RCC_OscConfig+0x27c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe f88f 	bl	80035b0 <HAL_InitTick>
 8005492:	4603      	mov	r3, r0
 8005494:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d052      	beq.n	8005542 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	e327      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d032      	beq.n	800550e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054a8:	4b43      	ldr	r3, [pc, #268]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a42      	ldr	r2, [pc, #264]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054b4:	f7fe f8cc 	bl	8003650 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054bc:	f7fe f8c8 	bl	8003650 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e310      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054ce:	4b3a      	ldr	r3, [pc, #232]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054da:	4b37      	ldr	r3, [pc, #220]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a36      	ldr	r2, [pc, #216]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054e0:	f043 0308 	orr.w	r3, r3, #8
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	4b34      	ldr	r3, [pc, #208]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	4931      	ldr	r1, [pc, #196]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f8:	4b2f      	ldr	r3, [pc, #188]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	492c      	ldr	r1, [pc, #176]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005508:	4313      	orrs	r3, r2
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	e01a      	b.n	8005544 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800550e:	4b2a      	ldr	r3, [pc, #168]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a29      	ldr	r2, [pc, #164]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800551a:	f7fe f899 	bl	8003650 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005522:	f7fe f895 	bl	8003650 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e2dd      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005534:	4b20      	ldr	r3, [pc, #128]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <HAL_RCC_OscConfig+0x1da>
 8005540:	e000      	b.n	8005544 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005542:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d074      	beq.n	800563a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b08      	cmp	r3, #8
 8005554:	d005      	beq.n	8005562 <HAL_RCC_OscConfig+0x21a>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b0c      	cmp	r3, #12
 800555a:	d10e      	bne.n	800557a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d10b      	bne.n	800557a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d064      	beq.n	8005638 <HAL_RCC_OscConfig+0x2f0>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d160      	bne.n	8005638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e2ba      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005582:	d106      	bne.n	8005592 <HAL_RCC_OscConfig+0x24a>
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0b      	ldr	r2, [pc, #44]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 800558a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	e026      	b.n	80055e0 <HAL_RCC_OscConfig+0x298>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800559a:	d115      	bne.n	80055c8 <HAL_RCC_OscConfig+0x280>
 800559c:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a05      	ldr	r2, [pc, #20]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80055a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b03      	ldr	r3, [pc, #12]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a02      	ldr	r2, [pc, #8]	@ (80055b8 <HAL_RCC_OscConfig+0x270>)
 80055ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	e014      	b.n	80055e0 <HAL_RCC_OscConfig+0x298>
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
 80055bc:	0800f6c0 	.word	0x0800f6c0
 80055c0:	20000004 	.word	0x20000004
 80055c4:	20000050 	.word	0x20000050
 80055c8:	4ba0      	ldr	r3, [pc, #640]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a9f      	ldr	r2, [pc, #636]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b9d      	ldr	r3, [pc, #628]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a9c      	ldr	r2, [pc, #624]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fe f832 	bl	8003650 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fe f82e 	bl	8003650 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	@ 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e276      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005602:	4b92      	ldr	r3, [pc, #584]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x2a8>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fe f81e 	bl	8003650 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005618:	f7fe f81a 	bl	8003650 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	@ 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e262      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562a:	4b88      	ldr	r3, [pc, #544]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x2d0>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d060      	beq.n	8005708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b04      	cmp	r3, #4
 800564a:	d005      	beq.n	8005658 <HAL_RCC_OscConfig+0x310>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d119      	bne.n	8005686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d116      	bne.n	8005686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005658:	4b7c      	ldr	r3, [pc, #496]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_RCC_OscConfig+0x328>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e23f      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005670:	4b76      	ldr	r3, [pc, #472]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	4973      	ldr	r1, [pc, #460]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005680:	4313      	orrs	r3, r2
 8005682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005684:	e040      	b.n	8005708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d023      	beq.n	80056d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800568e:	4b6f      	ldr	r3, [pc, #444]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a6e      	ldr	r2, [pc, #440]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7fd ffd9 	bl	8003650 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a2:	f7fd ffd5 	bl	8003650 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e21d      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b4:	4b65      	ldr	r3, [pc, #404]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c0:	4b62      	ldr	r3, [pc, #392]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	495f      	ldr	r1, [pc, #380]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
 80056d4:	e018      	b.n	8005708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d6:	4b5d      	ldr	r3, [pc, #372]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5c      	ldr	r2, [pc, #368]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80056dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fd ffb5 	bl	8003650 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ea:	f7fd ffb1 	bl	8003650 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e1f9      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056fc:	4b53      	ldr	r3, [pc, #332]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f0      	bne.n	80056ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d03c      	beq.n	800578e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01c      	beq.n	8005756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800571c:	4b4b      	ldr	r3, [pc, #300]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 800571e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005722:	4a4a      	ldr	r2, [pc, #296]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fd ff90 	bl	8003650 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005734:	f7fd ff8c 	bl	8003650 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e1d4      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005746:	4b41      	ldr	r3, [pc, #260]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0ef      	beq.n	8005734 <HAL_RCC_OscConfig+0x3ec>
 8005754:	e01b      	b.n	800578e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005756:	4b3d      	ldr	r3, [pc, #244]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800575c:	4a3b      	ldr	r2, [pc, #236]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005766:	f7fd ff73 	bl	8003650 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576e:	f7fd ff6f 	bl	8003650 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1b7      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005780:	4b32      	ldr	r3, [pc, #200]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ef      	bne.n	800576e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80a6 	beq.w	80058e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579c:	2300      	movs	r3, #0
 800579e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057a0:	4b2a      	ldr	r3, [pc, #168]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80057a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10d      	bne.n	80057c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ac:	4b27      	ldr	r3, [pc, #156]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b0:	4a26      	ldr	r2, [pc, #152]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80057b8:	4b24      	ldr	r3, [pc, #144]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c4:	2301      	movs	r3, #1
 80057c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c8:	4b21      	ldr	r3, [pc, #132]	@ (8005850 <HAL_RCC_OscConfig+0x508>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d118      	bne.n	8005806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005850 <HAL_RCC_OscConfig+0x508>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005850 <HAL_RCC_OscConfig+0x508>)
 80057da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e0:	f7fd ff36 	bl	8003650 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e8:	f7fd ff32 	bl	8003650 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e17a      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <HAL_RCC_OscConfig+0x508>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d108      	bne.n	8005820 <HAL_RCC_OscConfig+0x4d8>
 800580e:	4b0f      	ldr	r3, [pc, #60]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005814:	4a0d      	ldr	r2, [pc, #52]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800581e:	e029      	b.n	8005874 <HAL_RCC_OscConfig+0x52c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b05      	cmp	r3, #5
 8005826:	d115      	bne.n	8005854 <HAL_RCC_OscConfig+0x50c>
 8005828:	4b08      	ldr	r3, [pc, #32]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582e:	4a07      	ldr	r2, [pc, #28]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005830:	f043 0304 	orr.w	r3, r3, #4
 8005834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005838:	4b04      	ldr	r3, [pc, #16]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	4a03      	ldr	r2, [pc, #12]	@ (800584c <HAL_RCC_OscConfig+0x504>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005848:	e014      	b.n	8005874 <HAL_RCC_OscConfig+0x52c>
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000
 8005850:	40007000 	.word	0x40007000
 8005854:	4b9c      	ldr	r3, [pc, #624]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585a:	4a9b      	ldr	r2, [pc, #620]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005864:	4b98      	ldr	r3, [pc, #608]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	4a97      	ldr	r2, [pc, #604]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 800586c:	f023 0304 	bic.w	r3, r3, #4
 8005870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d016      	beq.n	80058aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587c:	f7fd fee8 	bl	8003650 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005882:	e00a      	b.n	800589a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005884:	f7fd fee4 	bl	8003650 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005892:	4293      	cmp	r3, r2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e12a      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589a:	4b8b      	ldr	r3, [pc, #556]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0ed      	beq.n	8005884 <HAL_RCC_OscConfig+0x53c>
 80058a8:	e015      	b.n	80058d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058aa:	f7fd fed1 	bl	8003650 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058b0:	e00a      	b.n	80058c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b2:	f7fd fecd 	bl	8003650 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e113      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058c8:	4b7f      	ldr	r3, [pc, #508]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1ed      	bne.n	80058b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d105      	bne.n	80058e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058dc:	4b7a      	ldr	r3, [pc, #488]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 80058de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e0:	4a79      	ldr	r2, [pc, #484]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 80058e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80fe 	beq.w	8005aee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	f040 80d0 	bne.w	8005a9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80058fc:	4b72      	ldr	r3, [pc, #456]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 0203 	and.w	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d130      	bne.n	8005972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	3b01      	subs	r3, #1
 800591c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d127      	bne.n	8005972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11f      	bne.n	8005972 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800593c:	2a07      	cmp	r2, #7
 800593e:	bf14      	ite	ne
 8005940:	2201      	movne	r2, #1
 8005942:	2200      	moveq	r2, #0
 8005944:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005946:	4293      	cmp	r3, r2
 8005948:	d113      	bne.n	8005972 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	3b01      	subs	r3, #1
 8005958:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d109      	bne.n	8005972 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	3b01      	subs	r3, #1
 800596c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d06e      	beq.n	8005a50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b0c      	cmp	r3, #12
 8005976:	d069      	beq.n	8005a4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005978:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005984:	4b50      	ldr	r3, [pc, #320]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0ad      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005994:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a4b      	ldr	r2, [pc, #300]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 800599a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800599e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059a0:	f7fd fe56 	bl	8003650 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fd fe52 	bl	8003650 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e09a      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ba:	4b43      	ldr	r3, [pc, #268]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059c6:	4b40      	ldr	r3, [pc, #256]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	4b40      	ldr	r3, [pc, #256]	@ (8005acc <HAL_RCC_OscConfig+0x784>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059d6:	3a01      	subs	r2, #1
 80059d8:	0112      	lsls	r2, r2, #4
 80059da:	4311      	orrs	r1, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059e0:	0212      	lsls	r2, r2, #8
 80059e2:	4311      	orrs	r1, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059e8:	0852      	lsrs	r2, r2, #1
 80059ea:	3a01      	subs	r2, #1
 80059ec:	0552      	lsls	r2, r2, #21
 80059ee:	4311      	orrs	r1, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80059f4:	0852      	lsrs	r2, r2, #1
 80059f6:	3a01      	subs	r2, #1
 80059f8:	0652      	lsls	r2, r2, #25
 80059fa:	4311      	orrs	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a00:	0912      	lsrs	r2, r2, #4
 8005a02:	0452      	lsls	r2, r2, #17
 8005a04:	430a      	orrs	r2, r1
 8005a06:	4930      	ldr	r1, [pc, #192]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a18:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a24:	f7fd fe14 	bl	8003650 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a2c:	f7fd fe10 	bl	8003650 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e058      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a3e:	4b22      	ldr	r3, [pc, #136]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a4a:	e050      	b.n	8005aee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e04f      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a50:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d148      	bne.n	8005aee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a19      	ldr	r2, [pc, #100]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a68:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a74:	f7fd fdec 	bl	8003650 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fd fde8 	bl	8003650 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e030      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x734>
 8005a9a:	e028      	b.n	8005aee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b0c      	cmp	r3, #12
 8005aa0:	d023      	beq.n	8005aea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa2:	4b09      	ldr	r3, [pc, #36]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a08      	ldr	r2, [pc, #32]	@ (8005ac8 <HAL_RCC_OscConfig+0x780>)
 8005aa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aae:	f7fd fdcf 	bl	8003650 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab4:	e00c      	b.n	8005ad0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab6:	f7fd fdcb 	bl	8003650 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d905      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e013      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad0:	4b09      	ldr	r3, [pc, #36]	@ (8005af8 <HAL_RCC_OscConfig+0x7b0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ec      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <HAL_RCC_OscConfig+0x7b0>)
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	4905      	ldr	r1, [pc, #20]	@ (8005af8 <HAL_RCC_OscConfig+0x7b0>)
 8005ae2:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <HAL_RCC_OscConfig+0x7b4>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]
 8005ae8:	e001      	b.n	8005aee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	feeefffc 	.word	0xfeeefffc

08005b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0e7      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b14:	4b75      	ldr	r3, [pc, #468]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d910      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b22:	4b72      	ldr	r3, [pc, #456]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 0207 	bic.w	r2, r3, #7
 8005b2a:	4970      	ldr	r1, [pc, #448]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b32:	4b6e      	ldr	r3, [pc, #440]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0cf      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d010      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	4b66      	ldr	r3, [pc, #408]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d908      	bls.n	8005b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b60:	4b63      	ldr	r3, [pc, #396]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4960      	ldr	r1, [pc, #384]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04c      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d107      	bne.n	8005b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b86:	4b5a      	ldr	r3, [pc, #360]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d121      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e0a6      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b9e:	4b54      	ldr	r3, [pc, #336]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d115      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e09a      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d107      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d109      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e08e      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e086      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bd6:	4b46      	ldr	r3, [pc, #280]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 0203 	bic.w	r2, r3, #3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4943      	ldr	r1, [pc, #268]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be8:	f7fd fd32 	bl	8003650 <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	e00a      	b.n	8005c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf0:	f7fd fd2e 	bl	8003650 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e06e      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	4b3a      	ldr	r3, [pc, #232]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 020c 	and.w	r2, r3, #12
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d1eb      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	4b31      	ldr	r3, [pc, #196]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d208      	bcs.n	8005c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c34:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	492b      	ldr	r1, [pc, #172]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c46:	4b29      	ldr	r3, [pc, #164]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d210      	bcs.n	8005c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c54:	4b25      	ldr	r3, [pc, #148]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 0207 	bic.w	r2, r3, #7
 8005c5c:	4923      	ldr	r1, [pc, #140]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c64:	4b21      	ldr	r3, [pc, #132]	@ (8005cec <HAL_RCC_ClockConfig+0x1ec>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d001      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e036      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c82:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	4918      	ldr	r1, [pc, #96]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ca0:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4910      	ldr	r1, [pc, #64]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cb4:	f000 f824 	bl	8005d00 <HAL_RCC_GetSysClockFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	490b      	ldr	r1, [pc, #44]	@ (8005cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	4a09      	ldr	r2, [pc, #36]	@ (8005cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8005cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cd4:	4b09      	ldr	r3, [pc, #36]	@ (8005cfc <HAL_RCC_ClockConfig+0x1fc>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fd fc69 	bl	80035b0 <HAL_InitTick>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40022000 	.word	0x40022000
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	0800f6c0 	.word	0x0800f6c0
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	20000050 	.word	0x20000050

08005d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b089      	sub	sp, #36	@ 0x24
 8005d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d18:	4b3b      	ldr	r3, [pc, #236]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x34>
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d121      	bne.n	8005d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d11e      	bne.n	8005d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d34:	4b34      	ldr	r3, [pc, #208]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d40:	4b31      	ldr	r3, [pc, #196]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	e005      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d50:	4b2d      	ldr	r3, [pc, #180]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10d      	bne.n	8005d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d70:	e00a      	b.n	8005d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d102      	bne.n	8005d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d78:	4b25      	ldr	r3, [pc, #148]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e004      	b.n	8005d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d101      	bne.n	8005d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d84:	4b23      	ldr	r3, [pc, #140]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d134      	bne.n	8005df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d003      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0xac>
 8005da4:	e005      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005da6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8005da8:	617b      	str	r3, [r7, #20]
      break;
 8005daa:	e005      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005dac:	4b19      	ldr	r3, [pc, #100]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dae:	617b      	str	r3, [r7, #20]
      break;
 8005db0:	e002      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	617b      	str	r3, [r7, #20]
      break;
 8005db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005db8:	4b13      	ldr	r3, [pc, #76]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005dc6:	4b10      	ldr	r3, [pc, #64]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	fb03 f202 	mul.w	r2, r3, r2
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dde:	4b0a      	ldr	r3, [pc, #40]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	0e5b      	lsrs	r3, r3, #25
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	3301      	adds	r3, #1
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005df8:	69bb      	ldr	r3, [r7, #24]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3724      	adds	r7, #36	@ 0x24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	0800f6d8 	.word	0x0800f6d8
 8005e10:	00f42400 	.word	0x00f42400
 8005e14:	007a1200 	.word	0x007a1200

08005e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e1c:	4b03      	ldr	r3, [pc, #12]	@ (8005e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000004 	.word	0x20000004

08005e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e34:	f7ff fff0 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b06      	ldr	r3, [pc, #24]	@ (8005e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	4904      	ldr	r1, [pc, #16]	@ (8005e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40021000 	.word	0x40021000
 8005e58:	0800f6d0 	.word	0x0800f6d0

08005e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e60:	f7ff ffda 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e64:	4602      	mov	r2, r0
 8005e66:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	0adb      	lsrs	r3, r3, #11
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	4904      	ldr	r1, [pc, #16]	@ (8005e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e72:	5ccb      	ldrb	r3, [r1, r3]
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40021000 	.word	0x40021000
 8005e84:	0800f6d0 	.word	0x0800f6d0

08005e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e94:	4b2a      	ldr	r3, [pc, #168]	@ (8005f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ea0:	f7ff f922 	bl	80050e8 <HAL_PWREx_GetVoltageRange>
 8005ea4:	6178      	str	r0, [r7, #20]
 8005ea6:	e014      	b.n	8005ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ea8:	4b25      	ldr	r3, [pc, #148]	@ (8005f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eac:	4a24      	ldr	r2, [pc, #144]	@ (8005f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb4:	4b22      	ldr	r3, [pc, #136]	@ (8005f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ec0:	f7ff f912 	bl	80050e8 <HAL_PWREx_GetVoltageRange>
 8005ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eca:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed8:	d10b      	bne.n	8005ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b80      	cmp	r3, #128	@ 0x80
 8005ede:	d919      	bls.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ee4:	d902      	bls.n	8005eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	e013      	b.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eec:	2301      	movs	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	e010      	b.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b80      	cmp	r3, #128	@ 0x80
 8005ef6:	d902      	bls.n	8005efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ef8:	2303      	movs	r3, #3
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	e00a      	b.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b80      	cmp	r3, #128	@ 0x80
 8005f02:	d102      	bne.n	8005f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f04:	2302      	movs	r3, #2
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	e004      	b.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b70      	cmp	r3, #112	@ 0x70
 8005f0e:	d101      	bne.n	8005f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f10:	2301      	movs	r3, #1
 8005f12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f14:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 0207 	bic.w	r2, r3, #7
 8005f1c:	4909      	ldr	r1, [pc, #36]	@ (8005f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f24:	4b07      	ldr	r3, [pc, #28]	@ (8005f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d001      	beq.n	8005f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40022000 	.word	0x40022000

08005f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f50:	2300      	movs	r3, #0
 8005f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f54:	2300      	movs	r3, #0
 8005f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d041      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f6c:	d02a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f72:	d824      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f78:	d008      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f7e:	d81e      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f88:	d010      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f8a:	e018      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f8c:	4b86      	ldr	r3, [pc, #536]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a85      	ldr	r2, [pc, #532]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f98:	e015      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 facb 	bl	800653c <RCCEx_PLLSAI1_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005faa:	e00c      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3320      	adds	r3, #32
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fbb6 	bl	8006724 <RCCEx_PLLSAI2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fbc:	e003      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc6:	7cfb      	ldrb	r3, [r7, #19]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fcc:	4b76      	ldr	r3, [pc, #472]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fda:	4973      	ldr	r1, [pc, #460]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d041      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ff8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ffc:	d02a      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005ffe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006002:	d824      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006004:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006008:	d008      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800600a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800600e:	d81e      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006018:	d010      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800601a:	e018      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800601c:	4b62      	ldr	r3, [pc, #392]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a61      	ldr	r2, [pc, #388]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006026:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006028:	e015      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fa83 	bl	800653c <RCCEx_PLLSAI1_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800603a:	e00c      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3320      	adds	r3, #32
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fb6e 	bl	8006724 <RCCEx_PLLSAI2_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800604c:	e003      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	74fb      	strb	r3, [r7, #19]
      break;
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800605c:	4b52      	ldr	r3, [pc, #328]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006062:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800606a:	494f      	ldr	r1, [pc, #316]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006072:	e001      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006074:	7cfb      	ldrb	r3, [r7, #19]
 8006076:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80a0 	beq.w	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006086:	2300      	movs	r3, #0
 8006088:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800608a:	4b47      	ldr	r3, [pc, #284]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00d      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a0:	4b41      	ldr	r3, [pc, #260]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a4:	4a40      	ldr	r2, [pc, #256]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ac:	4b3e      	ldr	r3, [pc, #248]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b8:	2301      	movs	r3, #1
 80060ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060bc:	4b3b      	ldr	r3, [pc, #236]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a3a      	ldr	r2, [pc, #232]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060c8:	f7fd fac2 	bl	8003650 <HAL_GetTick>
 80060cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ce:	e009      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d0:	f7fd fabe 	bl	8003650 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d902      	bls.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	74fb      	strb	r3, [r7, #19]
        break;
 80060e2:	e005      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060e4:	4b31      	ldr	r3, [pc, #196]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0ef      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80060f0:	7cfb      	ldrb	r3, [r7, #19]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d15c      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060f6:	4b2c      	ldr	r3, [pc, #176]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006100:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01f      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	429a      	cmp	r2, r3
 8006112:	d019      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006114:	4b24      	ldr	r3, [pc, #144]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800611e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006120:	4b21      	ldr	r3, [pc, #132]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006126:	4a20      	ldr	r2, [pc, #128]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800612c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006130:	4b1d      	ldr	r3, [pc, #116]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006136:	4a1c      	ldr	r2, [pc, #112]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800613c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006140:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d016      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006152:	f7fd fa7d 	bl	8003650 <HAL_GetTick>
 8006156:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006158:	e00b      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7fd fa79 	bl	8003650 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006168:	4293      	cmp	r3, r2
 800616a:	d902      	bls.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	74fb      	strb	r3, [r7, #19]
            break;
 8006170:	e006      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006172:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ec      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10c      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006186:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006196:	4904      	ldr	r1, [pc, #16]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800619e:	e009      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	74bb      	strb	r3, [r7, #18]
 80061a4:	e006      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80061a6:	bf00      	nop
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	7cfb      	ldrb	r3, [r7, #19]
 80061b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b4:	7c7b      	ldrb	r3, [r7, #17]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d105      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ba:	4b9e      	ldr	r3, [pc, #632]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061be:	4a9d      	ldr	r2, [pc, #628]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061d2:	4b98      	ldr	r3, [pc, #608]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d8:	f023 0203 	bic.w	r2, r3, #3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	4994      	ldr	r1, [pc, #592]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fa:	f023 020c 	bic.w	r2, r3, #12
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006202:	498c      	ldr	r1, [pc, #560]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006216:	4b87      	ldr	r3, [pc, #540]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006224:	4983      	ldr	r1, [pc, #524]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006238:	4b7e      	ldr	r3, [pc, #504]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	497b      	ldr	r1, [pc, #492]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800625a:	4b76      	ldr	r3, [pc, #472]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006268:	4972      	ldr	r1, [pc, #456]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800627c:	4b6d      	ldr	r3, [pc, #436]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628a:	496a      	ldr	r1, [pc, #424]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800629e:	4b65      	ldr	r3, [pc, #404]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ac:	4961      	ldr	r1, [pc, #388]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062c0:	4b5c      	ldr	r3, [pc, #368]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ce:	4959      	ldr	r1, [pc, #356]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062e2:	4b54      	ldr	r3, [pc, #336]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f0:	4950      	ldr	r1, [pc, #320]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006304:	4b4b      	ldr	r3, [pc, #300]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006312:	4948      	ldr	r1, [pc, #288]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006326:	4b43      	ldr	r3, [pc, #268]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006334:	493f      	ldr	r1, [pc, #252]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d028      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006348:	4b3a      	ldr	r3, [pc, #232]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006356:	4937      	ldr	r1, [pc, #220]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006366:	d106      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006368:	4b32      	ldr	r3, [pc, #200]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4a31      	ldr	r2, [pc, #196]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006372:	60d3      	str	r3, [r2, #12]
 8006374:	e011      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800637a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800637e:	d10c      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	2101      	movs	r1, #1
 8006386:	4618      	mov	r0, r3
 8006388:	f000 f8d8 	bl	800653c <RCCEx_PLLSAI1_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006390:	7cfb      	ldrb	r3, [r7, #19]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006396:	7cfb      	ldrb	r3, [r7, #19]
 8006398:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d028      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063a6:	4b23      	ldr	r3, [pc, #140]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	491f      	ldr	r1, [pc, #124]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063c4:	d106      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063d0:	60d3      	str	r3, [r2, #12]
 80063d2:	e011      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063dc:	d10c      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2101      	movs	r1, #1
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 f8a9 	bl	800653c <RCCEx_PLLSAI1_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ee:	7cfb      	ldrb	r3, [r7, #19]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80063f4:	7cfb      	ldrb	r3, [r7, #19]
 80063f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02b      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006404:	4b0b      	ldr	r3, [pc, #44]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006412:	4908      	ldr	r1, [pc, #32]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006422:	d109      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006424:	4b03      	ldr	r3, [pc, #12]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4a02      	ldr	r2, [pc, #8]	@ (8006434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800642e:	60d3      	str	r3, [r2, #12]
 8006430:	e014      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006440:	d10c      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3304      	adds	r3, #4
 8006446:	2101      	movs	r1, #1
 8006448:	4618      	mov	r0, r3
 800644a:	f000 f877 	bl	800653c <RCCEx_PLLSAI1_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006452:	7cfb      	ldrb	r3, [r7, #19]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006458:	7cfb      	ldrb	r3, [r7, #19]
 800645a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d02f      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006468:	4b2b      	ldr	r3, [pc, #172]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006476:	4928      	ldr	r1, [pc, #160]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006486:	d10d      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	2102      	movs	r1, #2
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f854 	bl	800653c <RCCEx_PLLSAI1_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006498:	7cfb      	ldrb	r3, [r7, #19]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d014      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	74bb      	strb	r3, [r7, #18]
 80064a2:	e011      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3320      	adds	r3, #32
 80064b2:	2102      	movs	r1, #2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f935 	bl	8006724 <RCCEx_PLLSAI2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064be:	7cfb      	ldrb	r3, [r7, #19]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064d4:	4b10      	ldr	r3, [pc, #64]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e2:	490d      	ldr	r1, [pc, #52]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064f6:	4b08      	ldr	r3, [pc, #32]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006506:	4904      	ldr	r1, [pc, #16]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006508:	4313      	orrs	r3, r2
 800650a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800650e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40021000 	.word	0x40021000

0800651c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006520:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a04      	ldr	r2, [pc, #16]	@ (8006538 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006526:	f043 0304 	orr.w	r3, r3, #4
 800652a:	6013      	str	r3, [r2, #0]
}
 800652c:	bf00      	nop
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000

0800653c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800654a:	4b75      	ldr	r3, [pc, #468]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006556:	4b72      	ldr	r3, [pc, #456]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0203 	and.w	r2, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d10d      	bne.n	8006582 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
       ||
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800656e:	4b6c      	ldr	r3, [pc, #432]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
       ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d047      	beq.n	8006612 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	73fb      	strb	r3, [r7, #15]
 8006586:	e044      	b.n	8006612 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b03      	cmp	r3, #3
 800658e:	d018      	beq.n	80065c2 <RCCEx_PLLSAI1_Config+0x86>
 8006590:	2b03      	cmp	r3, #3
 8006592:	d825      	bhi.n	80065e0 <RCCEx_PLLSAI1_Config+0xa4>
 8006594:	2b01      	cmp	r3, #1
 8006596:	d002      	beq.n	800659e <RCCEx_PLLSAI1_Config+0x62>
 8006598:	2b02      	cmp	r3, #2
 800659a:	d009      	beq.n	80065b0 <RCCEx_PLLSAI1_Config+0x74>
 800659c:	e020      	b.n	80065e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800659e:	4b60      	ldr	r3, [pc, #384]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d11d      	bne.n	80065e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ae:	e01a      	b.n	80065e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065b0:	4b5b      	ldr	r3, [pc, #364]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d116      	bne.n	80065ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c0:	e013      	b.n	80065ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065c2:	4b57      	ldr	r3, [pc, #348]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065ce:	4b54      	ldr	r3, [pc, #336]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065de:	e006      	b.n	80065ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	73fb      	strb	r3, [r7, #15]
      break;
 80065e4:	e004      	b.n	80065f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065e6:	bf00      	nop
 80065e8:	e002      	b.n	80065f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065ea:	bf00      	nop
 80065ec:	e000      	b.n	80065f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10d      	bne.n	8006612 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	3b01      	subs	r3, #1
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	430b      	orrs	r3, r1
 800660c:	4944      	ldr	r1, [pc, #272]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800660e:	4313      	orrs	r3, r2
 8006610:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d17d      	bne.n	8006714 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006618:	4b41      	ldr	r3, [pc, #260]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a40      	ldr	r2, [pc, #256]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800661e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006624:	f7fd f814 	bl	8003650 <HAL_GetTick>
 8006628:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800662a:	e009      	b.n	8006640 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800662c:	f7fd f810 	bl	8003650 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d902      	bls.n	8006640 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	73fb      	strb	r3, [r7, #15]
        break;
 800663e:	e005      	b.n	800664c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006640:	4b37      	ldr	r3, [pc, #220]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1ef      	bne.n	800662c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d160      	bne.n	8006714 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d111      	bne.n	800667c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006658:	4b31      	ldr	r3, [pc, #196]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6892      	ldr	r2, [r2, #8]
 8006668:	0211      	lsls	r1, r2, #8
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68d2      	ldr	r2, [r2, #12]
 800666e:	0912      	lsrs	r2, r2, #4
 8006670:	0452      	lsls	r2, r2, #17
 8006672:	430a      	orrs	r2, r1
 8006674:	492a      	ldr	r1, [pc, #168]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006676:	4313      	orrs	r3, r2
 8006678:	610b      	str	r3, [r1, #16]
 800667a:	e027      	b.n	80066cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d112      	bne.n	80066a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006682:	4b27      	ldr	r3, [pc, #156]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800668a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6892      	ldr	r2, [r2, #8]
 8006692:	0211      	lsls	r1, r2, #8
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6912      	ldr	r2, [r2, #16]
 8006698:	0852      	lsrs	r2, r2, #1
 800669a:	3a01      	subs	r2, #1
 800669c:	0552      	lsls	r2, r2, #21
 800669e:	430a      	orrs	r2, r1
 80066a0:	491f      	ldr	r1, [pc, #124]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	610b      	str	r3, [r1, #16]
 80066a6:	e011      	b.n	80066cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80066b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6892      	ldr	r2, [r2, #8]
 80066b8:	0211      	lsls	r1, r2, #8
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6952      	ldr	r2, [r2, #20]
 80066be:	0852      	lsrs	r2, r2, #1
 80066c0:	3a01      	subs	r2, #1
 80066c2:	0652      	lsls	r2, r2, #25
 80066c4:	430a      	orrs	r2, r1
 80066c6:	4916      	ldr	r1, [pc, #88]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066cc:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a13      	ldr	r2, [pc, #76]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d8:	f7fc ffba 	bl	8003650 <HAL_GetTick>
 80066dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066de:	e009      	b.n	80066f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066e0:	f7fc ffb6 	bl	8003650 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d902      	bls.n	80066f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	73fb      	strb	r3, [r7, #15]
          break;
 80066f2:	e005      	b.n	8006700 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0ef      	beq.n	80066e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006706:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	4904      	ldr	r1, [pc, #16]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40021000 	.word	0x40021000

08006724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006732:	4b6a      	ldr	r3, [pc, #424]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d018      	beq.n	8006770 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800673e:	4b67      	ldr	r3, [pc, #412]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0203 	and.w	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d10d      	bne.n	800676a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
       ||
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006756:	4b61      	ldr	r3, [pc, #388]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	091b      	lsrs	r3, r3, #4
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
       ||
 8006766:	429a      	cmp	r2, r3
 8006768:	d047      	beq.n	80067fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
 800676e:	e044      	b.n	80067fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d018      	beq.n	80067aa <RCCEx_PLLSAI2_Config+0x86>
 8006778:	2b03      	cmp	r3, #3
 800677a:	d825      	bhi.n	80067c8 <RCCEx_PLLSAI2_Config+0xa4>
 800677c:	2b01      	cmp	r3, #1
 800677e:	d002      	beq.n	8006786 <RCCEx_PLLSAI2_Config+0x62>
 8006780:	2b02      	cmp	r3, #2
 8006782:	d009      	beq.n	8006798 <RCCEx_PLLSAI2_Config+0x74>
 8006784:	e020      	b.n	80067c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006786:	4b55      	ldr	r3, [pc, #340]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d11d      	bne.n	80067ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006796:	e01a      	b.n	80067ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006798:	4b50      	ldr	r3, [pc, #320]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d116      	bne.n	80067d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067a8:	e013      	b.n	80067d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067aa:	4b4c      	ldr	r3, [pc, #304]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10f      	bne.n	80067d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067b6:	4b49      	ldr	r3, [pc, #292]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067c6:	e006      	b.n	80067d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
      break;
 80067cc:	e004      	b.n	80067d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067ce:	bf00      	nop
 80067d0:	e002      	b.n	80067d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067d2:	bf00      	nop
 80067d4:	e000      	b.n	80067d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10d      	bne.n	80067fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067de:	4b3f      	ldr	r3, [pc, #252]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	430b      	orrs	r3, r1
 80067f4:	4939      	ldr	r1, [pc, #228]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d167      	bne.n	80068d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006800:	4b36      	ldr	r3, [pc, #216]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a35      	ldr	r2, [pc, #212]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800680a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800680c:	f7fc ff20 	bl	8003650 <HAL_GetTick>
 8006810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006812:	e009      	b.n	8006828 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006814:	f7fc ff1c 	bl	8003650 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d902      	bls.n	8006828 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	73fb      	strb	r3, [r7, #15]
        break;
 8006826:	e005      	b.n	8006834 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006828:	4b2c      	ldr	r3, [pc, #176]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1ef      	bne.n	8006814 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d14a      	bne.n	80068d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d111      	bne.n	8006864 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006840:	4b26      	ldr	r3, [pc, #152]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6892      	ldr	r2, [r2, #8]
 8006850:	0211      	lsls	r1, r2, #8
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68d2      	ldr	r2, [r2, #12]
 8006856:	0912      	lsrs	r2, r2, #4
 8006858:	0452      	lsls	r2, r2, #17
 800685a:	430a      	orrs	r2, r1
 800685c:	491f      	ldr	r1, [pc, #124]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800685e:	4313      	orrs	r3, r2
 8006860:	614b      	str	r3, [r1, #20]
 8006862:	e011      	b.n	8006888 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006864:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800686c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6892      	ldr	r2, [r2, #8]
 8006874:	0211      	lsls	r1, r2, #8
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6912      	ldr	r2, [r2, #16]
 800687a:	0852      	lsrs	r2, r2, #1
 800687c:	3a01      	subs	r2, #1
 800687e:	0652      	lsls	r2, r2, #25
 8006880:	430a      	orrs	r2, r1
 8006882:	4916      	ldr	r1, [pc, #88]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006884:	4313      	orrs	r3, r2
 8006886:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006888:	4b14      	ldr	r3, [pc, #80]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a13      	ldr	r2, [pc, #76]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800688e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006892:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006894:	f7fc fedc 	bl	8003650 <HAL_GetTick>
 8006898:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800689a:	e009      	b.n	80068b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800689c:	f7fc fed8 	bl	8003650 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d902      	bls.n	80068b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	73fb      	strb	r3, [r7, #15]
          break;
 80068ae:	e005      	b.n	80068bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068b0:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ef      	beq.n	800689c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80068c2:	4b06      	ldr	r3, [pc, #24]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	4904      	ldr	r1, [pc, #16]	@ (80068dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40021000 	.word	0x40021000

080068e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e095      	b.n	8006a1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d108      	bne.n	800690c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006902:	d009      	beq.n	8006918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	61da      	str	r2, [r3, #28]
 800690a:	e005      	b.n	8006918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f877 	bl	8006a26 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006958:	d902      	bls.n	8006960 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e002      	b.n	8006966 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006964:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800696e:	d007      	beq.n	8006980 <HAL_SPI_Init+0xa0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006978:	d002      	beq.n	8006980 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c2:	ea42 0103 	orr.w	r1, r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	0c1b      	lsrs	r3, r3, #16
 80069dc:	f003 0204 	and.w	r2, r3, #4
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80069fc:	ea42 0103 	orr.w	r1, r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b08a      	sub	sp, #40	@ 0x28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a4c:	f7fc fe00 	bl	8003650 <HAL_GetTick>
 8006a50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006a60:	887b      	ldrh	r3, [r7, #2]
 8006a62:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a68:	7ffb      	ldrb	r3, [r7, #31]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d00c      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x4e>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a74:	d106      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x4a>
 8006a7e:	7ffb      	ldrb	r3, [r7, #31]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d001      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006a84:	2302      	movs	r3, #2
 8006a86:	e1f3      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x60>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x60>
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e1e8      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_SPI_TransmitReceive+0x72>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e1e1      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x436>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d003      	beq.n	8006ac8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2205      	movs	r2, #5
 8006ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	887a      	ldrh	r2, [r7, #2]
 8006ad8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	887a      	ldrh	r2, [r7, #2]
 8006ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	887a      	ldrh	r2, [r7, #2]
 8006aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	887a      	ldrh	r2, [r7, #2]
 8006af4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b0a:	d802      	bhi.n	8006b12 <HAL_SPI_TransmitReceive+0xd8>
 8006b0c:	8abb      	ldrh	r3, [r7, #20]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d908      	bls.n	8006b24 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	e007      	b.n	8006b34 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3e:	2b40      	cmp	r3, #64	@ 0x40
 8006b40:	d007      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b5a:	f240 8083 	bls.w	8006c64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_SPI_TransmitReceive+0x132>
 8006b66:	8afb      	ldrh	r3, [r7, #22]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d16f      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b70:	881a      	ldrh	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	1c9a      	adds	r2, r3, #2
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b90:	e05c      	b.n	8006c4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x19e>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d016      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x19e>
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d113      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	1c9a      	adds	r2, r3, #2
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d11c      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x1e6>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d016      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfc:	b292      	uxth	r2, r2
 8006bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	1c9a      	adds	r2, r3, #2
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c20:	f7fc fd16 	bl	8003650 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d80d      	bhi.n	8006c4c <HAL_SPI_TransmitReceive+0x212>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d009      	beq.n	8006c4c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e111      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d19d      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x158>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d197      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x158>
 8006c62:	e0e5      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0x23a>
 8006c6c:	8afb      	ldrh	r3, [r7, #22]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	f040 80d1 	bne.w	8006e16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d912      	bls.n	8006ca4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8e:	1c9a      	adds	r2, r3, #2
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b02      	subs	r3, #2
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ca2:	e0b8      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cca:	e0a4      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d134      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x30a>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d02f      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x30a>
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d12c      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d912      	bls.n	8006d1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	881a      	ldrh	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b02      	subs	r3, #2
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d18:	e012      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d148      	bne.n	8006de4 <HAL_SPI_TransmitReceive+0x3aa>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d042      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d923      	bls.n	8006db2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	b292      	uxth	r2, r2
 8006d76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b02      	subs	r3, #2
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d81f      	bhi.n	8006de0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006dae:	605a      	str	r2, [r3, #4]
 8006db0:	e016      	b.n	8006de0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f103 020c 	add.w	r2, r3, #12
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	7812      	ldrb	r2, [r2, #0]
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006de0:	2301      	movs	r3, #1
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006de4:	f7fc fc34 	bl	8003650 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d803      	bhi.n	8006dfc <HAL_SPI_TransmitReceive+0x3c2>
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_TransmitReceive+0x3c8>
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e02c      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f47f af55 	bne.w	8006ccc <HAL_SPI_TransmitReceive+0x292>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f47f af4e 	bne.w	8006ccc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e30:	6a3a      	ldr	r2, [r7, #32]
 8006e32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f94b 	bl	80070d0 <SPI_EndRxTxTransaction>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e00e      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3728      	adds	r7, #40	@ 0x28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e86:	b2db      	uxtb	r3, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ea4:	f7fc fbd4 	bl	8003650 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eb4:	f7fc fbcc 	bl	8003650 <HAL_GetTick>
 8006eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eba:	4b39      	ldr	r3, [pc, #228]	@ (8006fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	015b      	lsls	r3, r3, #5
 8006ec0:	0d1b      	lsrs	r3, r3, #20
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	fb02 f303 	mul.w	r3, r2, r3
 8006ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eca:	e054      	b.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d050      	beq.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ed4:	f7fc fbbc 	bl	8003650 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d902      	bls.n	8006eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d13d      	bne.n	8006f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f02:	d111      	bne.n	8006f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f0c:	d004      	beq.n	8006f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f16:	d107      	bne.n	8006f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f30:	d10f      	bne.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e017      	b.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	bf0c      	ite	eq
 8006f86:	2301      	moveq	r3, #1
 8006f88:	2300      	movne	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d19b      	bne.n	8006ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000004 	.word	0x20000004

08006fa4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fb6:	f7fc fb4b 	bl	8003650 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006fc6:	f7fc fb43 	bl	8003650 <HAL_GetTick>
 8006fca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	330c      	adds	r3, #12
 8006fd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80070cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	00da      	lsls	r2, r3, #3
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	0d1b      	lsrs	r3, r3, #20
 8006fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fec:	e060      	b.n	80070b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ff4:	d107      	bne.n	8007006 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007004:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d050      	beq.n	80070b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800700e:	f7fc fb1f 	bl	8003650 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800701a:	429a      	cmp	r2, r3
 800701c:	d902      	bls.n	8007024 <SPI_WaitFifoStateUntilTimeout+0x80>
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	d13d      	bne.n	80070a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007032:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800703c:	d111      	bne.n	8007062 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007046:	d004      	beq.n	8007052 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007050:	d107      	bne.n	8007062 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706a:	d10f      	bne.n	800708c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800708a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e010      	b.n	80070c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4013      	ands	r3, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d196      	bne.n	8006fee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3728      	adds	r7, #40	@ 0x28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20000004 	.word	0x20000004

080070d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff ff5b 	bl	8006fa4 <SPI_WaitFifoStateUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f8:	f043 0220 	orr.w	r2, r3, #32
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e027      	b.n	8007154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	2180      	movs	r1, #128	@ 0x80
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7ff fec0 	bl	8006e94 <SPI_WaitFlagStateUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d007      	beq.n	800712a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	f043 0220 	orr.w	r2, r3, #32
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e014      	b.n	8007154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2200      	movs	r2, #0
 8007132:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff ff34 	bl	8006fa4 <SPI_WaitFifoStateUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007146:	f043 0220 	orr.w	r2, r3, #32
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e000      	b.n	8007154 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e040      	b.n	80071f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fb f9f8 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	@ 0x24
 8007188:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fb6a 	bl	800787c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f8af 	bl	800730c <UART_SetConfig>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e01b      	b.n	80071f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fbe9 	bl	80079c0 <UART_CheckIdleState>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	@ 0x28
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800720c:	2b20      	cmp	r3, #32
 800720e:	d177      	bne.n	8007300 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Transmit+0x24>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e070      	b.n	8007302 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2221      	movs	r2, #33	@ 0x21
 800722c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722e:	f7fc fa0f 	bl	8003650 <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800724c:	d108      	bne.n	8007260 <HAL_UART_Transmit+0x68>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e003      	b.n	8007268 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007268:	e02f      	b.n	80072ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	@ 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fc4b 	bl	8007b10 <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e03b      	b.n	8007302 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10b      	bne.n	80072a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	881a      	ldrh	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800729c:	b292      	uxth	r2, r2
 800729e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	3302      	adds	r3, #2
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	e007      	b.n	80072b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	3301      	adds	r3, #1
 80072b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1c9      	bne.n	800726a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2140      	movs	r1, #64	@ 0x40
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fc15 	bl	8007b10 <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e005      	b.n	8007302 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007300:	2302      	movs	r3, #2
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3720      	adds	r7, #32
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007310:	b08a      	sub	sp, #40	@ 0x28
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	431a      	orrs	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	431a      	orrs	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	4313      	orrs	r3, r2
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4ba4      	ldr	r3, [pc, #656]	@ (80075cc <UART_SetConfig+0x2c0>)
 800733c:	4013      	ands	r3, r2
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007344:	430b      	orrs	r3, r1
 8007346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a99      	ldr	r2, [pc, #612]	@ (80075d0 <UART_SetConfig+0x2c4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d004      	beq.n	8007378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007374:	4313      	orrs	r3, r2
 8007376:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007388:	430a      	orrs	r2, r1
 800738a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a90      	ldr	r2, [pc, #576]	@ (80075d4 <UART_SetConfig+0x2c8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d126      	bne.n	80073e4 <UART_SetConfig+0xd8>
 8007396:	4b90      	ldr	r3, [pc, #576]	@ (80075d8 <UART_SetConfig+0x2cc>)
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739c:	f003 0303 	and.w	r3, r3, #3
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d81b      	bhi.n	80073dc <UART_SetConfig+0xd0>
 80073a4:	a201      	add	r2, pc, #4	@ (adr r2, 80073ac <UART_SetConfig+0xa0>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073bd 	.word	0x080073bd
 80073b0:	080073cd 	.word	0x080073cd
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	080073d5 	.word	0x080073d5
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073c2:	e116      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80073c4:	2302      	movs	r3, #2
 80073c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ca:	e112      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80073cc:	2304      	movs	r3, #4
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073d2:	e10e      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80073d4:	2308      	movs	r3, #8
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073da:	e10a      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80073dc:	2310      	movs	r3, #16
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073e2:	e106      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a7c      	ldr	r2, [pc, #496]	@ (80075dc <UART_SetConfig+0x2d0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d138      	bne.n	8007460 <UART_SetConfig+0x154>
 80073ee:	4b7a      	ldr	r3, [pc, #488]	@ (80075d8 <UART_SetConfig+0x2cc>)
 80073f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f4:	f003 030c 	and.w	r3, r3, #12
 80073f8:	2b0c      	cmp	r3, #12
 80073fa:	d82d      	bhi.n	8007458 <UART_SetConfig+0x14c>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0xf8>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007439 	.word	0x08007439
 8007408:	08007459 	.word	0x08007459
 800740c:	08007459 	.word	0x08007459
 8007410:	08007459 	.word	0x08007459
 8007414:	08007449 	.word	0x08007449
 8007418:	08007459 	.word	0x08007459
 800741c:	08007459 	.word	0x08007459
 8007420:	08007459 	.word	0x08007459
 8007424:	08007441 	.word	0x08007441
 8007428:	08007459 	.word	0x08007459
 800742c:	08007459 	.word	0x08007459
 8007430:	08007459 	.word	0x08007459
 8007434:	08007451 	.word	0x08007451
 8007438:	2300      	movs	r3, #0
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800743e:	e0d8      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007440:	2302      	movs	r3, #2
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007446:	e0d4      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007448:	2304      	movs	r3, #4
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800744e:	e0d0      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007450:	2308      	movs	r3, #8
 8007452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007456:	e0cc      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007458:	2310      	movs	r3, #16
 800745a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800745e:	e0c8      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a5e      	ldr	r2, [pc, #376]	@ (80075e0 <UART_SetConfig+0x2d4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d125      	bne.n	80074b6 <UART_SetConfig+0x1aa>
 800746a:	4b5b      	ldr	r3, [pc, #364]	@ (80075d8 <UART_SetConfig+0x2cc>)
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007470:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007474:	2b30      	cmp	r3, #48	@ 0x30
 8007476:	d016      	beq.n	80074a6 <UART_SetConfig+0x19a>
 8007478:	2b30      	cmp	r3, #48	@ 0x30
 800747a:	d818      	bhi.n	80074ae <UART_SetConfig+0x1a2>
 800747c:	2b20      	cmp	r3, #32
 800747e:	d00a      	beq.n	8007496 <UART_SetConfig+0x18a>
 8007480:	2b20      	cmp	r3, #32
 8007482:	d814      	bhi.n	80074ae <UART_SetConfig+0x1a2>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <UART_SetConfig+0x182>
 8007488:	2b10      	cmp	r3, #16
 800748a:	d008      	beq.n	800749e <UART_SetConfig+0x192>
 800748c:	e00f      	b.n	80074ae <UART_SetConfig+0x1a2>
 800748e:	2300      	movs	r3, #0
 8007490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007494:	e0ad      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007496:	2302      	movs	r3, #2
 8007498:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749c:	e0a9      	b.n	80075f2 <UART_SetConfig+0x2e6>
 800749e:	2304      	movs	r3, #4
 80074a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a4:	e0a5      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80074a6:	2308      	movs	r3, #8
 80074a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ac:	e0a1      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80074ae:	2310      	movs	r3, #16
 80074b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074b4:	e09d      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4a      	ldr	r2, [pc, #296]	@ (80075e4 <UART_SetConfig+0x2d8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d125      	bne.n	800750c <UART_SetConfig+0x200>
 80074c0:	4b45      	ldr	r3, [pc, #276]	@ (80075d8 <UART_SetConfig+0x2cc>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80074cc:	d016      	beq.n	80074fc <UART_SetConfig+0x1f0>
 80074ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80074d0:	d818      	bhi.n	8007504 <UART_SetConfig+0x1f8>
 80074d2:	2b80      	cmp	r3, #128	@ 0x80
 80074d4:	d00a      	beq.n	80074ec <UART_SetConfig+0x1e0>
 80074d6:	2b80      	cmp	r3, #128	@ 0x80
 80074d8:	d814      	bhi.n	8007504 <UART_SetConfig+0x1f8>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <UART_SetConfig+0x1d8>
 80074de:	2b40      	cmp	r3, #64	@ 0x40
 80074e0:	d008      	beq.n	80074f4 <UART_SetConfig+0x1e8>
 80074e2:	e00f      	b.n	8007504 <UART_SetConfig+0x1f8>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ea:	e082      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80074ec:	2302      	movs	r3, #2
 80074ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f2:	e07e      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80074f4:	2304      	movs	r3, #4
 80074f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074fa:	e07a      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80074fc:	2308      	movs	r3, #8
 80074fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007502:	e076      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007504:	2310      	movs	r3, #16
 8007506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800750a:	e072      	b.n	80075f2 <UART_SetConfig+0x2e6>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a35      	ldr	r2, [pc, #212]	@ (80075e8 <UART_SetConfig+0x2dc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d12a      	bne.n	800756c <UART_SetConfig+0x260>
 8007516:	4b30      	ldr	r3, [pc, #192]	@ (80075d8 <UART_SetConfig+0x2cc>)
 8007518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007524:	d01a      	beq.n	800755c <UART_SetConfig+0x250>
 8007526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800752a:	d81b      	bhi.n	8007564 <UART_SetConfig+0x258>
 800752c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007530:	d00c      	beq.n	800754c <UART_SetConfig+0x240>
 8007532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007536:	d815      	bhi.n	8007564 <UART_SetConfig+0x258>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <UART_SetConfig+0x238>
 800753c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007540:	d008      	beq.n	8007554 <UART_SetConfig+0x248>
 8007542:	e00f      	b.n	8007564 <UART_SetConfig+0x258>
 8007544:	2300      	movs	r3, #0
 8007546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754a:	e052      	b.n	80075f2 <UART_SetConfig+0x2e6>
 800754c:	2302      	movs	r3, #2
 800754e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007552:	e04e      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800755a:	e04a      	b.n	80075f2 <UART_SetConfig+0x2e6>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007562:	e046      	b.n	80075f2 <UART_SetConfig+0x2e6>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800756a:	e042      	b.n	80075f2 <UART_SetConfig+0x2e6>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a17      	ldr	r2, [pc, #92]	@ (80075d0 <UART_SetConfig+0x2c4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d13a      	bne.n	80075ec <UART_SetConfig+0x2e0>
 8007576:	4b18      	ldr	r3, [pc, #96]	@ (80075d8 <UART_SetConfig+0x2cc>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007584:	d01a      	beq.n	80075bc <UART_SetConfig+0x2b0>
 8007586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800758a:	d81b      	bhi.n	80075c4 <UART_SetConfig+0x2b8>
 800758c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007590:	d00c      	beq.n	80075ac <UART_SetConfig+0x2a0>
 8007592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007596:	d815      	bhi.n	80075c4 <UART_SetConfig+0x2b8>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <UART_SetConfig+0x298>
 800759c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a0:	d008      	beq.n	80075b4 <UART_SetConfig+0x2a8>
 80075a2:	e00f      	b.n	80075c4 <UART_SetConfig+0x2b8>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075aa:	e022      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80075ac:	2302      	movs	r3, #2
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b2:	e01e      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ba:	e01a      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c2:	e016      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ca:	e012      	b.n	80075f2 <UART_SetConfig+0x2e6>
 80075cc:	efff69f3 	.word	0xefff69f3
 80075d0:	40008000 	.word	0x40008000
 80075d4:	40013800 	.word	0x40013800
 80075d8:	40021000 	.word	0x40021000
 80075dc:	40004400 	.word	0x40004400
 80075e0:	40004800 	.word	0x40004800
 80075e4:	40004c00 	.word	0x40004c00
 80075e8:	40005000 	.word	0x40005000
 80075ec:	2310      	movs	r3, #16
 80075ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a9f      	ldr	r2, [pc, #636]	@ (8007874 <UART_SetConfig+0x568>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d17a      	bne.n	80076f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007600:	2b08      	cmp	r3, #8
 8007602:	d824      	bhi.n	800764e <UART_SetConfig+0x342>
 8007604:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <UART_SetConfig+0x300>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	08007631 	.word	0x08007631
 8007610:	0800764f 	.word	0x0800764f
 8007614:	08007639 	.word	0x08007639
 8007618:	0800764f 	.word	0x0800764f
 800761c:	0800763f 	.word	0x0800763f
 8007620:	0800764f 	.word	0x0800764f
 8007624:	0800764f 	.word	0x0800764f
 8007628:	0800764f 	.word	0x0800764f
 800762c:	08007647 	.word	0x08007647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007630:	f7fe fbfe 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8007634:	61f8      	str	r0, [r7, #28]
        break;
 8007636:	e010      	b.n	800765a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007638:	4b8f      	ldr	r3, [pc, #572]	@ (8007878 <UART_SetConfig+0x56c>)
 800763a:	61fb      	str	r3, [r7, #28]
        break;
 800763c:	e00d      	b.n	800765a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800763e:	f7fe fb5f 	bl	8005d00 <HAL_RCC_GetSysClockFreq>
 8007642:	61f8      	str	r0, [r7, #28]
        break;
 8007644:	e009      	b.n	800765a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800764a:	61fb      	str	r3, [r7, #28]
        break;
 800764c:	e005      	b.n	800765a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007658:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80fb 	beq.w	8007858 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	4413      	add	r3, r2
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	429a      	cmp	r2, r3
 8007670:	d305      	bcc.n	800767e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	429a      	cmp	r2, r3
 800767c:	d903      	bls.n	8007686 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007684:	e0e8      	b.n	8007858 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2200      	movs	r2, #0
 800768a:	461c      	mov	r4, r3
 800768c:	4615      	mov	r5, r2
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	f04f 0300 	mov.w	r3, #0
 8007696:	022b      	lsls	r3, r5, #8
 8007698:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800769c:	0222      	lsls	r2, r4, #8
 800769e:	68f9      	ldr	r1, [r7, #12]
 80076a0:	6849      	ldr	r1, [r1, #4]
 80076a2:	0849      	lsrs	r1, r1, #1
 80076a4:	2000      	movs	r0, #0
 80076a6:	4688      	mov	r8, r1
 80076a8:	4681      	mov	r9, r0
 80076aa:	eb12 0a08 	adds.w	sl, r2, r8
 80076ae:	eb43 0b09 	adc.w	fp, r3, r9
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	603b      	str	r3, [r7, #0]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c0:	4650      	mov	r0, sl
 80076c2:	4659      	mov	r1, fp
 80076c4:	f7f9 fac0 	bl	8000c48 <__aeabi_uldivmod>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4613      	mov	r3, r2
 80076ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076d6:	d308      	bcc.n	80076ea <UART_SetConfig+0x3de>
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076de:	d204      	bcs.n	80076ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	60da      	str	r2, [r3, #12]
 80076e8:	e0b6      	b.n	8007858 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076f0:	e0b2      	b.n	8007858 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076fa:	d15e      	bne.n	80077ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80076fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007700:	2b08      	cmp	r3, #8
 8007702:	d828      	bhi.n	8007756 <UART_SetConfig+0x44a>
 8007704:	a201      	add	r2, pc, #4	@ (adr r2, 800770c <UART_SetConfig+0x400>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007731 	.word	0x08007731
 8007710:	08007739 	.word	0x08007739
 8007714:	08007741 	.word	0x08007741
 8007718:	08007757 	.word	0x08007757
 800771c:	08007747 	.word	0x08007747
 8007720:	08007757 	.word	0x08007757
 8007724:	08007757 	.word	0x08007757
 8007728:	08007757 	.word	0x08007757
 800772c:	0800774f 	.word	0x0800774f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007730:	f7fe fb7e 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8007734:	61f8      	str	r0, [r7, #28]
        break;
 8007736:	e014      	b.n	8007762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007738:	f7fe fb90 	bl	8005e5c <HAL_RCC_GetPCLK2Freq>
 800773c:	61f8      	str	r0, [r7, #28]
        break;
 800773e:	e010      	b.n	8007762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007740:	4b4d      	ldr	r3, [pc, #308]	@ (8007878 <UART_SetConfig+0x56c>)
 8007742:	61fb      	str	r3, [r7, #28]
        break;
 8007744:	e00d      	b.n	8007762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007746:	f7fe fadb 	bl	8005d00 <HAL_RCC_GetSysClockFreq>
 800774a:	61f8      	str	r0, [r7, #28]
        break;
 800774c:	e009      	b.n	8007762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800774e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007752:	61fb      	str	r3, [r7, #28]
        break;
 8007754:	e005      	b.n	8007762 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d077      	beq.n	8007858 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005a      	lsls	r2, r3, #1
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	441a      	add	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2b0f      	cmp	r3, #15
 8007782:	d916      	bls.n	80077b2 <UART_SetConfig+0x4a6>
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800778a:	d212      	bcs.n	80077b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	b29b      	uxth	r3, r3
 8007790:	f023 030f 	bic.w	r3, r3, #15
 8007794:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	085b      	lsrs	r3, r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	8afb      	ldrh	r3, [r7, #22]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	8afa      	ldrh	r2, [r7, #22]
 80077ae:	60da      	str	r2, [r3, #12]
 80077b0:	e052      	b.n	8007858 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077b8:	e04e      	b.n	8007858 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d827      	bhi.n	8007812 <UART_SetConfig+0x506>
 80077c2:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <UART_SetConfig+0x4bc>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	08007813 	.word	0x08007813
 80077d8:	08007803 	.word	0x08007803
 80077dc:	08007813 	.word	0x08007813
 80077e0:	08007813 	.word	0x08007813
 80077e4:	08007813 	.word	0x08007813
 80077e8:	0800780b 	.word	0x0800780b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ec:	f7fe fb20 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 80077f0:	61f8      	str	r0, [r7, #28]
        break;
 80077f2:	e014      	b.n	800781e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077f4:	f7fe fb32 	bl	8005e5c <HAL_RCC_GetPCLK2Freq>
 80077f8:	61f8      	str	r0, [r7, #28]
        break;
 80077fa:	e010      	b.n	800781e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007878 <UART_SetConfig+0x56c>)
 80077fe:	61fb      	str	r3, [r7, #28]
        break;
 8007800:	e00d      	b.n	800781e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007802:	f7fe fa7d 	bl	8005d00 <HAL_RCC_GetSysClockFreq>
 8007806:	61f8      	str	r0, [r7, #28]
        break;
 8007808:	e009      	b.n	800781e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800780a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800780e:	61fb      	str	r3, [r7, #28]
        break;
 8007810:	e005      	b.n	800781e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800781c:	bf00      	nop
    }

    if (pclk != 0U)
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d019      	beq.n	8007858 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	085a      	lsrs	r2, r3, #1
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	fbb2 f3f3 	udiv	r3, r2, r3
 8007836:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b0f      	cmp	r3, #15
 800783c:	d909      	bls.n	8007852 <UART_SetConfig+0x546>
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007844:	d205      	bcs.n	8007852 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60da      	str	r2, [r3, #12]
 8007850:	e002      	b.n	8007858 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007864:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007868:	4618      	mov	r0, r3
 800786a:	3728      	adds	r7, #40	@ 0x28
 800786c:	46bd      	mov	sp, r7
 800786e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007872:	bf00      	nop
 8007874:	40008000 	.word	0x40008000
 8007878:	00f42400 	.word	0x00f42400

0800787c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01a      	beq.n	8007992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800797a:	d10a      	bne.n	8007992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	605a      	str	r2, [r3, #4]
  }
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b098      	sub	sp, #96	@ 0x60
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079d0:	f7fb fe3e 	bl	8003650 <HAL_GetTick>
 80079d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d12e      	bne.n	8007a42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ec:	2200      	movs	r2, #0
 80079ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f88c 	bl	8007b10 <UART_WaitOnFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d021      	beq.n	8007a42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	e853 3f00 	ldrex	r3, [r3]
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e6      	bne.n	80079fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e062      	b.n	8007b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d149      	bne.n	8007ae4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f856 	bl	8007b10 <UART_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d03c      	beq.n	8007ae4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	623b      	str	r3, [r7, #32]
   return(result);
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e6      	bne.n	8007a6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0301 	bic.w	r3, r3, #1
 8007ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007abc:	61fa      	str	r2, [r7, #28]
 8007abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	69b9      	ldr	r1, [r7, #24]
 8007ac2:	69fa      	ldr	r2, [r7, #28]
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e5      	bne.n	8007a9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e011      	b.n	8007b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3758      	adds	r7, #88	@ 0x58
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b20:	e04f      	b.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d04b      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2a:	f7fb fd91 	bl	8003650 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e04e      	b.n	8007be2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d037      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b80      	cmp	r3, #128	@ 0x80
 8007b56:	d034      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b40      	cmp	r3, #64	@ 0x40
 8007b5c:	d031      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d110      	bne.n	8007b8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2208      	movs	r2, #8
 8007b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f838 	bl	8007bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e029      	b.n	8007be2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b9c:	d111      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f81e 	bl	8007bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e00f      	b.n	8007be2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	bf0c      	ite	eq
 8007bd2:	2301      	moveq	r3, #1
 8007bd4:	2300      	movne	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d0a0      	beq.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b095      	sub	sp, #84	@ 0x54
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3308      	adds	r3, #8
 8007c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e5      	bne.n	8007c24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d118      	bne.n	8007c92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	f023 0310 	bic.w	r3, r3, #16
 8007c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6979      	ldr	r1, [r7, #20]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e6      	bne.n	8007c60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ca6:	bf00      	nop
 8007ca8:	3754      	adds	r7, #84	@ 0x54
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	f107 001c 	add.w	r0, r7, #28
 8007cc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa69 	bl	80081a8 <USB_CoreReset>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007cda:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cee:	e005      	b.n	8007cfc <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d08:	b004      	add	sp, #16
 8007d0a:	4770      	bx	lr

08007d0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f023 0201 	bic.w	r2, r3, #1
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d115      	bne.n	8007d7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d5c:	200a      	movs	r0, #10
 8007d5e:	f7fb fc83 	bl	8003668 <HAL_Delay>
      ms += 10U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	330a      	adds	r3, #10
 8007d66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fa0f 	bl	800818c <USB_GetMode>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d01e      	beq.n	8007db2 <USB_SetCurrentMode+0x84>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d78:	d9f0      	bls.n	8007d5c <USB_SetCurrentMode+0x2e>
 8007d7a:	e01a      	b.n	8007db2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d115      	bne.n	8007dae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d8e:	200a      	movs	r0, #10
 8007d90:	f7fb fc6a 	bl	8003668 <HAL_Delay>
      ms += 10U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	330a      	adds	r3, #10
 8007d98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9f6 	bl	800818c <USB_GetMode>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <USB_SetCurrentMode+0x84>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2bc7      	cmp	r3, #199	@ 0xc7
 8007daa:	d9f0      	bls.n	8007d8e <USB_SetCurrentMode+0x60>
 8007dac:	e001      	b.n	8007db2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e005      	b.n	8007dbe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2bc8      	cmp	r3, #200	@ 0xc8
 8007db6:	d101      	bne.n	8007dbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dc8:	b084      	sub	sp, #16
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	e009      	b.n	8007dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3340      	adds	r3, #64	@ 0x40
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b0e      	cmp	r3, #14
 8007e00:	d9f2      	bls.n	8007de8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d11c      	bne.n	8007e44 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e18:	f043 0302 	orr.w	r3, r3, #2
 8007e1c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	e005      	b.n	8007e50 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e56:	461a      	mov	r2, r3
 8007e58:	2300      	movs	r3, #0
 8007e5a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e5c:	2103      	movs	r1, #3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f95a 	bl	8008118 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e64:	2110      	movs	r1, #16
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8f6 	bl	8008058 <USB_FlushTxFifo>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f920 	bl	80080bc <USB_FlushRxFifo>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	2300      	movs	r3, #0
 8007e90:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	e043      	b.n	8007f38 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ec6:	d118      	bne.n	8007efa <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eda:	461a      	mov	r2, r3
 8007edc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	e013      	b.n	8007f0c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	e008      	b.n	8007f0c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	3301      	adds	r3, #1
 8007f36:	613b      	str	r3, [r7, #16]
 8007f38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d3b5      	bcc.n	8007eb0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f44:	2300      	movs	r3, #0
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	e043      	b.n	8007fd2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f60:	d118      	bne.n	8007f94 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f74:	461a      	mov	r2, r3
 8007f76:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	e013      	b.n	8007fa6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	e008      	b.n	8007fa6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007fca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d3b5      	bcc.n	8007f4a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ff0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ffe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f043 0210 	orr.w	r2, r3, #16
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <USB_DevInit+0x28c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008018:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	f043 0208 	orr.w	r2, r3, #8
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800802c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008030:	2b01      	cmp	r3, #1
 8008032:	d107      	bne.n	8008044 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800803c:	f043 0304 	orr.w	r3, r3, #4
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008050:	b004      	add	sp, #16
 8008052:	4770      	bx	lr
 8008054:	803c3800 	.word	0x803c3800

08008058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008072:	d901      	bls.n	8008078 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e01b      	b.n	80080b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	daf2      	bge.n	8008066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	019b      	lsls	r3, r3, #6
 8008088:	f043 0220 	orr.w	r2, r3, #32
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3301      	adds	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800809c:	d901      	bls.n	80080a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e006      	b.n	80080b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d0f0      	beq.n	8008090 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080d4:	d901      	bls.n	80080da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e018      	b.n	800810c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	daf2      	bge.n	80080c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2210      	movs	r2, #16
 80080ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3301      	adds	r3, #1
 80080f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080f8:	d901      	bls.n	80080fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e006      	b.n	800810c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b10      	cmp	r3, #16
 8008108:	d0f0      	beq.n	80080ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008138:	4313      	orrs	r3, r2
 800813a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008164:	f023 0303 	bic.w	r3, r3, #3
 8008168:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008178:	f043 0302 	orr.w	r3, r3, #2
 800817c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	f003 0301 	and.w	r3, r3, #1
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081c0:	d901      	bls.n	80081c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e01b      	b.n	80081fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	daf2      	bge.n	80081b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f043 0201 	orr.w	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081ea:	d901      	bls.n	80081f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e006      	b.n	80081fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d0f0      	beq.n	80081de <USB_CoreReset+0x36>

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b08c      	sub	sp, #48	@ 0x30
 800820e:	af00      	add	r7, sp, #0
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
 8008216:	460b      	mov	r3, r1
 8008218:	71bb      	strb	r3, [r7, #6]
 800821a:	4613      	mov	r3, r2
 800821c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8008222:	79bb      	ldrb	r3, [r7, #6]
 8008224:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8008226:	797b      	ldrb	r3, [r7, #5]
 8008228:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800822a:	f107 030c 	add.w	r3, r7, #12
 800822e:	2207      	movs	r2, #7
 8008230:	2100      	movs	r1, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f005 fb08 	bl	800d848 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008238:	f107 0318 	add.w	r3, r7, #24
 800823c:	2218      	movs	r2, #24
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f005 fb01 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008246:	233f      	movs	r3, #63	@ 0x3f
 8008248:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800824a:	238a      	movs	r3, #138	@ 0x8a
 800824c:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800824e:	f107 0314 	add.w	r3, r7, #20
 8008252:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008254:	2303      	movs	r3, #3
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8008258:	f107 030c 	add.w	r3, r7, #12
 800825c:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800825e:	2307      	movs	r3, #7
 8008260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008262:	f107 0318 	add.w	r3, r7, #24
 8008266:	2100      	movs	r1, #0
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fea1 	bl	8008fb0 <hci_send_req>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	da01      	bge.n	8008278 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8008274:	23ff      	movs	r3, #255	@ 0xff
 8008276:	e014      	b.n	80082a2 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008278:	7b3b      	ldrb	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800827e:	7b3b      	ldrb	r3, [r7, #12]
 8008280:	e00f      	b.n	80082a2 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008282:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008286:	b29a      	uxth	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800828c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008290:	b29a      	uxth	r2, r3
 8008292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008294:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008296:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800829a:	b29a      	uxth	r2, r3
 800829c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3730      	adds	r7, #48	@ 0x30
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b08e      	sub	sp, #56	@ 0x38
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80082be:	f107 0314 	add.w	r3, r7, #20
 80082c2:	2207      	movs	r2, #7
 80082c4:	2100      	movs	r1, #0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f005 fabe 	bl	800d848 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082cc:	f107 0320 	add.w	r3, r7, #32
 80082d0:	2218      	movs	r2, #24
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f005 fab7 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082da:	233f      	movs	r3, #63	@ 0x3f
 80082dc:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80082de:	238a      	movs	r3, #138	@ 0x8a
 80082e0:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 80082e2:	f107 031c 	add.w	r3, r7, #28
 80082e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80082e8:	2301      	movs	r3, #1
 80082ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80082f2:	2307      	movs	r3, #7
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80082f6:	f107 0320 	add.w	r3, r7, #32
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fe57 	bl	8008fb0 <hci_send_req>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	da01      	bge.n	800830c <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008308:	23ff      	movs	r3, #255	@ 0xff
 800830a:	e014      	b.n	8008336 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800830c:	7d3b      	ldrb	r3, [r7, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8008312:	7d3b      	ldrb	r3, [r7, #20]
 8008314:	e00f      	b.n	8008336 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008316:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800831a:	b29a      	uxth	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008320:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800832a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800832e:	b29a      	uxth	r2, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3738      	adds	r7, #56	@ 0x38
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800833e:	b590      	push	{r4, r7, lr}
 8008340:	b095      	sub	sp, #84	@ 0x54
 8008342:	af00      	add	r7, sp, #0
 8008344:	4604      	mov	r4, r0
 8008346:	4608      	mov	r0, r1
 8008348:	4611      	mov	r1, r2
 800834a:	461a      	mov	r2, r3
 800834c:	4623      	mov	r3, r4
 800834e:	71fb      	strb	r3, [r7, #7]
 8008350:	4603      	mov	r3, r0
 8008352:	80bb      	strh	r3, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	807b      	strh	r3, [r7, #2]
 8008358:	4613      	mov	r3, r2
 800835a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8008362:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008366:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800836a:	4413      	add	r3, r2
 800836c:	330e      	adds	r3, #14
 800836e:	2b28      	cmp	r3, #40	@ 0x28
 8008370:	d901      	bls.n	8008376 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8008372:	2342      	movs	r3, #66	@ 0x42
 8008374:	e0c9      	b.n	800850a <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8008376:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800837a:	3350      	adds	r3, #80	@ 0x50
 800837c:	443b      	add	r3, r7
 800837e:	79fa      	ldrb	r2, [r7, #7]
 8008380:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008384:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008388:	3301      	adds	r3, #1
 800838a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800838e:	88bb      	ldrh	r3, [r7, #4]
 8008390:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008392:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008396:	f107 0208 	add.w	r2, r7, #8
 800839a:	4413      	add	r3, r2
 800839c:	88ba      	ldrh	r2, [r7, #4]
 800839e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80083a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083a4:	3302      	adds	r3, #2
 80083a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80083aa:	887b      	ldrh	r3, [r7, #2]
 80083ac:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80083ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083b2:	f107 0208 	add.w	r2, r7, #8
 80083b6:	4413      	add	r3, r2
 80083b8:	887a      	ldrh	r2, [r7, #2]
 80083ba:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80083bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083c0:	3302      	adds	r3, #2
 80083c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80083c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083ca:	3350      	adds	r3, #80	@ 0x50
 80083cc:	443b      	add	r3, r7
 80083ce:	79ba      	ldrb	r2, [r7, #6]
 80083d0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80083d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083d8:	3301      	adds	r3, #1
 80083da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80083de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083e2:	3350      	adds	r3, #80	@ 0x50
 80083e4:	443b      	add	r3, r7
 80083e6:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80083ea:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80083ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083f2:	3301      	adds	r3, #1
 80083f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80083f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083fc:	3350      	adds	r3, #80	@ 0x50
 80083fe:	443b      	add	r3, r7
 8008400:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008404:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008408:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800840c:	3301      	adds	r3, #1
 800840e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008412:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008416:	f107 0208 	add.w	r2, r7, #8
 800841a:	4413      	add	r3, r2
 800841c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008420:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008422:	4618      	mov	r0, r3
 8008424:	f005 fa8f 	bl	800d946 <memcpy>
  indx +=  LocalNameLen;
 8008428:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800842c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8008430:	4413      	add	r3, r2
 8008432:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8008436:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800843a:	3350      	adds	r3, #80	@ 0x50
 800843c:	443b      	add	r3, r7
 800843e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008442:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008446:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800844a:	3301      	adds	r3, #1
 800844c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008450:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008454:	f107 0208 	add.w	r2, r7, #8
 8008458:	4413      	add	r3, r2
 800845a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800845e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008460:	4618      	mov	r0, r3
 8008462:	f005 fa70 	bl	800d946 <memcpy>
  indx +=  ServiceUUIDLen;  
 8008466:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800846a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800846e:	4413      	add	r3, r2
 8008470:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008474:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8008478:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800847c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008480:	f107 0208 	add.w	r2, r7, #8
 8008484:	4413      	add	r3, r2
 8008486:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800848a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800848c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008490:	3302      	adds	r3, #2
 8008492:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008496:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800849a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800849e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084a2:	f107 0208 	add.w	r2, r7, #8
 80084a6:	4413      	add	r3, r2
 80084a8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80084ac:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80084ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084b2:	3302      	adds	r3, #2
 80084b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80084b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80084bc:	2218      	movs	r2, #24
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f005 f9c1 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80084c6:	233f      	movs	r3, #63	@ 0x3f
 80084c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80084ca:	2383      	movs	r3, #131	@ 0x83
 80084cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 80084d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084d8:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 80084da:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80084de:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 80084e0:	2301      	movs	r3, #1
 80084e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80084e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fd60 	bl	8008fb0 <hci_send_req>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da01      	bge.n	80084fa <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80084f6:	23ff      	movs	r3, #255	@ 0xff
 80084f8:	e007      	b.n	800850a <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80084fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <aci_gap_set_discoverable+0x1ca>
    return status;
 8008502:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008506:	e000      	b.n	800850a <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3754      	adds	r7, #84	@ 0x54
 800850e:	46bd      	mov	sp, r7
 8008510:	bd90      	pop	{r4, r7, pc}

08008512 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008512:	b590      	push	{r4, r7, lr}
 8008514:	b091      	sub	sp, #68	@ 0x44
 8008516:	af00      	add	r7, sp, #0
 8008518:	603a      	str	r2, [r7, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	4603      	mov	r3, r0
 800851e:	71fb      	strb	r3, [r7, #7]
 8008520:	460b      	mov	r3, r1
 8008522:	71bb      	strb	r3, [r7, #6]
 8008524:	4613      	mov	r3, r2
 8008526:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800852c:	79bb      	ldrb	r3, [r7, #6]
 800852e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008530:	79bb      	ldrb	r3, [r7, #6]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	f107 030e 	add.w	r3, r7, #14
 800853c:	6814      	ldr	r4, [r2, #0]
 800853e:	6850      	ldr	r0, [r2, #4]
 8008540:	6891      	ldr	r1, [r2, #8]
 8008542:	68d2      	ldr	r2, [r2, #12]
 8008544:	601c      	str	r4, [r3, #0]
 8008546:	6058      	str	r0, [r3, #4]
 8008548:	6099      	str	r1, [r3, #8]
 800854a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800854c:	797b      	ldrb	r3, [r7, #5]
 800854e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008550:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8008554:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008556:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800855a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800855e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008560:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8008564:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8008568:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800856c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008570:	2218      	movs	r2, #24
 8008572:	2100      	movs	r1, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f005 f967 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800857a:	233f      	movs	r3, #63	@ 0x3f
 800857c:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800857e:	2386      	movs	r3, #134	@ 0x86
 8008580:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8008582:	f107 030c 	add.w	r3, r7, #12
 8008586:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008588:	231a      	movs	r3, #26
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 800858c:	f107 030b 	add.w	r3, r7, #11
 8008590:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8008592:	2301      	movs	r3, #1
 8008594:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800859a:	2100      	movs	r1, #0
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fd07 	bl	8008fb0 <hci_send_req>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da01      	bge.n	80085ac <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80085a8:	23ff      	movs	r3, #255	@ 0xff
 80085aa:	e005      	b.n	80085b8 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <aci_gap_set_auth_requirement+0xa4>
    return status;
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	e000      	b.n	80085b8 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3744      	adds	r7, #68	@ 0x44
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd90      	pop	{r4, r7, pc}

080085c0 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b092      	sub	sp, #72	@ 0x48
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	2b1f      	cmp	r3, #31
 80085d6:	d901      	bls.n	80085dc <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 80085d8:	2342      	movs	r3, #66	@ 0x42
 80085da:	e03e      	b.n	800865a <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 80085dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085e0:	3348      	adds	r3, #72	@ 0x48
 80085e2:	443b      	add	r3, r7
 80085e4:	79fa      	ldrb	r2, [r7, #7]
 80085e6:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 80085ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085ee:	3301      	adds	r3, #1
 80085f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80085f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085f8:	f107 0208 	add.w	r2, r7, #8
 80085fc:	4413      	add	r3, r2
 80085fe:	79fa      	ldrb	r2, [r7, #7]
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f005 f99f 	bl	800d946 <memcpy>
  indx +=  AdvLen;
 8008608:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	4413      	add	r3, r2
 8008610:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008614:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008618:	2218      	movs	r2, #24
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f005 f913 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008622:	233f      	movs	r3, #63	@ 0x3f
 8008624:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8008626:	238e      	movs	r3, #142	@ 0x8e
 8008628:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008630:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008634:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8008636:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800863a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 800863c:	2301      	movs	r3, #1
 800863e:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008640:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fcb2 	bl	8008fb0 <hci_send_req>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	da01      	bge.n	8008656 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8008652:	23ff      	movs	r3, #255	@ 0xff
 8008654:	e001      	b.n	800865a <aci_gap_update_adv_data+0x9a>
    
  return status;
 8008656:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800865a:	4618      	mov	r0, r3
 800865c:	3748      	adds	r7, #72	@ 0x48
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b088      	sub	sp, #32
 8008666:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008668:	f107 0308 	add.w	r3, r7, #8
 800866c:	2218      	movs	r2, #24
 800866e:	2100      	movs	r1, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f005 f8e9 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008676:	233f      	movs	r3, #63	@ 0x3f
 8008678:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800867a:	f240 1301 	movw	r3, #257	@ 0x101
 800867e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008680:	1dfb      	adds	r3, r7, #7
 8008682:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008684:	2301      	movs	r3, #1
 8008686:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008688:	f107 0308 	add.w	r3, r7, #8
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fc8e 	bl	8008fb0 <hci_send_req>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	da01      	bge.n	800869e <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800869a:	23ff      	movs	r3, #255	@ 0xff
 800869c:	e000      	b.n	80086a0 <aci_gatt_init+0x3e>

  return status;
 800869e:	79fb      	ldrb	r3, [r7, #7]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3720      	adds	r7, #32
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b090      	sub	sp, #64	@ 0x40
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6039      	str	r1, [r7, #0]
 80086b0:	4611      	mov	r1, r2
 80086b2:	461a      	mov	r2, r3
 80086b4:	4603      	mov	r3, r0
 80086b6:	71fb      	strb	r3, [r7, #7]
 80086b8:	460b      	mov	r3, r1
 80086ba:	71bb      	strb	r3, [r7, #6]
 80086bc:	4613      	mov	r3, r2
 80086be:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 80086c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80086ca:	3340      	adds	r3, #64	@ 0x40
 80086cc:	443b      	add	r3, r7
 80086ce:	79fa      	ldrb	r2, [r7, #7]
 80086d0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80086d4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80086d8:	3301      	adds	r3, #1
 80086da:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d103      	bne.n	80086ec <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80086e4:	2302      	movs	r3, #2
 80086e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80086ea:	e002      	b.n	80086f2 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80086ec:	2310      	movs	r3, #16
 80086ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80086f2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80086f6:	f107 020c 	add.w	r2, r7, #12
 80086fa:	4413      	add	r3, r2
 80086fc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f005 f91f 	bl	800d946 <memcpy>
  indx +=  uuid_len;
 8008708:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800870c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008710:	4413      	add	r3, r2
 8008712:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8008716:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800871a:	3340      	adds	r3, #64	@ 0x40
 800871c:	443b      	add	r3, r7
 800871e:	79ba      	ldrb	r2, [r7, #6]
 8008720:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008724:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008728:	3301      	adds	r3, #1
 800872a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800872e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008732:	3340      	adds	r3, #64	@ 0x40
 8008734:	443b      	add	r3, r7
 8008736:	797a      	ldrb	r2, [r7, #5]
 8008738:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800873c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008740:	3301      	adds	r3, #1
 8008742:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008746:	f107 0320 	add.w	r3, r7, #32
 800874a:	2203      	movs	r2, #3
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f005 f87a 	bl	800d848 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008758:	2218      	movs	r2, #24
 800875a:	2100      	movs	r1, #0
 800875c:	4618      	mov	r0, r3
 800875e:	f005 f873 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008762:	233f      	movs	r3, #63	@ 0x3f
 8008764:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8008766:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800876a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800876c:	f107 030c 	add.w	r3, r7, #12
 8008770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8008772:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008776:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8008778:	f107 0320 	add.w	r3, r7, #32
 800877c:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800877e:	2303      	movs	r3, #3
 8008780:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008786:	2100      	movs	r1, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fc11 	bl	8008fb0 <hci_send_req>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	da01      	bge.n	8008798 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008794:	23ff      	movs	r3, #255	@ 0xff
 8008796:	e00c      	b.n	80087b2 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008798:	f897 3020 	ldrb.w	r3, [r7, #32]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <aci_gatt_add_serv+0xfe>
    return resp.status;
 80087a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087a4:	e005      	b.n	80087b2 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80087a6:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087ae:	801a      	strh	r2, [r3, #0]

  return 0;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3740      	adds	r7, #64	@ 0x40
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b092      	sub	sp, #72	@ 0x48
 80087be:	af00      	add	r7, sp, #0
 80087c0:	603a      	str	r2, [r7, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	4603      	mov	r3, r0
 80087c6:	80fb      	strh	r3, [r7, #6]
 80087c8:	460b      	mov	r3, r1
 80087ca:	717b      	strb	r3, [r7, #5]
 80087cc:	4613      	mov	r3, r2
 80087ce:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80087da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80087de:	f107 020c 	add.w	r2, r7, #12
 80087e2:	4413      	add	r3, r2
 80087e4:	88fa      	ldrh	r2, [r7, #6]
 80087e6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80087e8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80087ec:	3302      	adds	r3, #2
 80087ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 80087f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80087f6:	3348      	adds	r3, #72	@ 0x48
 80087f8:	443b      	add	r3, r7
 80087fa:	797a      	ldrb	r2, [r7, #5]
 80087fc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008800:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008804:	3301      	adds	r3, #1
 8008806:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800880a:	797b      	ldrb	r3, [r7, #5]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d103      	bne.n	8008818 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008810:	2302      	movs	r3, #2
 8008812:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008816:	e002      	b.n	800881e <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800881e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008822:	f107 020c 	add.w	r2, r7, #12
 8008826:	4413      	add	r3, r2
 8008828:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	4618      	mov	r0, r3
 8008830:	f005 f889 	bl	800d946 <memcpy>
  indx +=  uuid_len;
 8008834:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008838:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800883c:	4413      	add	r3, r2
 800883e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008842:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008846:	3348      	adds	r3, #72	@ 0x48
 8008848:	443b      	add	r3, r7
 800884a:	793a      	ldrb	r2, [r7, #4]
 800884c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008850:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008854:	3301      	adds	r3, #1
 8008856:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800885a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800885e:	3348      	adds	r3, #72	@ 0x48
 8008860:	443b      	add	r3, r7
 8008862:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008866:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800886a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800886e:	3301      	adds	r3, #1
 8008870:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8008874:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008878:	3348      	adds	r3, #72	@ 0x48
 800887a:	443b      	add	r3, r7
 800887c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008880:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008884:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008888:	3301      	adds	r3, #1
 800888a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 800888e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008892:	3348      	adds	r3, #72	@ 0x48
 8008894:	443b      	add	r3, r7
 8008896:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800889a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800889e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088a2:	3301      	adds	r3, #1
 80088a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 80088a8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088ac:	3348      	adds	r3, #72	@ 0x48
 80088ae:	443b      	add	r3, r7
 80088b0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80088b4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80088b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088bc:	3301      	adds	r3, #1
 80088be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 80088c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088c6:	3348      	adds	r3, #72	@ 0x48
 80088c8:	443b      	add	r3, r7
 80088ca:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80088ce:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80088d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088d6:	3301      	adds	r3, #1
 80088d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80088dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80088e0:	2203      	movs	r2, #3
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f004 ffaf 	bl	800d848 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088ee:	2218      	movs	r2, #24
 80088f0:	2100      	movs	r1, #0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f004 ffa8 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80088f8:	233f      	movs	r3, #63	@ 0x3f
 80088fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80088fc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008900:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008908:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800890c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800890e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008914:	2303      	movs	r3, #3
 8008916:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008918:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800891c:	2100      	movs	r1, #0
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fb46 	bl	8008fb0 <hci_send_req>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	da01      	bge.n	800892e <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800892a:	23ff      	movs	r3, #255	@ 0xff
 800892c:	e00c      	b.n	8008948 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800892e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <aci_gatt_add_char+0x182>
    return resp.status;
 8008936:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800893a:	e005      	b.n	8008948 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800893c:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008940:	b29a      	uxth	r2, r3
 8008942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008944:	801a      	strh	r2, [r3, #0]

  return 0;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3748      	adds	r7, #72	@ 0x48
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b0ab      	sub	sp, #172	@ 0xac
 8008954:	af00      	add	r7, sp, #0
 8008956:	4604      	mov	r4, r0
 8008958:	4608      	mov	r0, r1
 800895a:	4611      	mov	r1, r2
 800895c:	461a      	mov	r2, r3
 800895e:	4623      	mov	r3, r4
 8008960:	80fb      	strh	r3, [r7, #6]
 8008962:	4603      	mov	r3, r0
 8008964:	80bb      	strh	r3, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
 800896a:	4613      	mov	r3, r2
 800896c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008974:	78bb      	ldrb	r3, [r7, #2]
 8008976:	2b7a      	cmp	r3, #122	@ 0x7a
 8008978:	d901      	bls.n	800897e <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800897a:	2342      	movs	r3, #66	@ 0x42
 800897c:	e074      	b.n	8008a68 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008982:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008986:	f107 0208 	add.w	r2, r7, #8
 800898a:	4413      	add	r3, r2
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008990:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008994:	3302      	adds	r3, #2
 8008996:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 800899a:	88bb      	ldrh	r3, [r7, #4]
 800899c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800899e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80089a2:	f107 0208 	add.w	r2, r7, #8
 80089a6:	4413      	add	r3, r2
 80089a8:	88ba      	ldrh	r2, [r7, #4]
 80089aa:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80089ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80089b0:	3302      	adds	r3, #2
 80089b2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 80089b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80089ba:	33a8      	adds	r3, #168	@ 0xa8
 80089bc:	443b      	add	r3, r7
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80089c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80089c8:	3301      	adds	r3, #1
 80089ca:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 80089ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80089d2:	33a8      	adds	r3, #168	@ 0xa8
 80089d4:	443b      	add	r3, r7
 80089d6:	78ba      	ldrb	r2, [r7, #2]
 80089d8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80089dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80089e0:	3301      	adds	r3, #1
 80089e2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80089e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80089ea:	f107 0208 	add.w	r2, r7, #8
 80089ee:	4413      	add	r3, r2
 80089f0:	78ba      	ldrb	r2, [r7, #2]
 80089f2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80089f6:	4618      	mov	r0, r3
 80089f8:	f004 ffa5 	bl	800d946 <memcpy>
  indx +=  charValueLen;
 80089fc:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008a00:	78bb      	ldrb	r3, [r7, #2]
 8008a02:	4413      	add	r3, r2
 8008a04:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a08:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008a0c:	2218      	movs	r2, #24
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f004 ff19 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a16:	233f      	movs	r3, #63	@ 0x3f
 8008a18:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008a1c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008a20:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008a24:	f107 0308 	add.w	r3, r7, #8
 8008a28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008a2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008a34:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008a38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008a42:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008a46:	2100      	movs	r1, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fab1 	bl	8008fb0 <hci_send_req>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	da01      	bge.n	8008a58 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8008a54:	23ff      	movs	r3, #255	@ 0xff
 8008a56:	e007      	b.n	8008a68 <aci_gatt_update_char_value+0x118>

  if (status) {
 8008a58:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <aci_gatt_update_char_value+0x116>
    return status;
 8008a60:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008a64:	e000      	b.n	8008a68 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	37ac      	adds	r7, #172	@ 0xac
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd90      	pop	{r4, r7, pc}

08008a70 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08a      	sub	sp, #40	@ 0x28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	4603      	mov	r3, r0
 8008a78:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008a7a:	88fb      	ldrh	r3, [r7, #6]
 8008a7c:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a7e:	f107 0310 	add.w	r3, r7, #16
 8008a82:	2218      	movs	r2, #24
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f004 fede 	bl	800d848 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008a8c:	233f      	movs	r3, #63	@ 0x3f
 8008a8e:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008a90:	f240 1327 	movw	r3, #295	@ 0x127
 8008a94:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008a96:	f107 030c 	add.w	r3, r7, #12
 8008a9a:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008aa0:	f107 030b 	add.w	r3, r7, #11
 8008aa4:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008aaa:	f107 0310 	add.w	r3, r7, #16
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fa7d 	bl	8008fb0 <hci_send_req>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da01      	bge.n	8008ac0 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008abc:	23ff      	movs	r3, #255	@ 0xff
 8008abe:	e000      	b.n	8008ac2 <aci_gatt_allow_read+0x52>

    return status;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3728      	adds	r7, #40	@ 0x28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b0ac      	sub	sp, #176	@ 0xb0
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60ba      	str	r2, [r7, #8]
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ae2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008ae6:	2218      	movs	r2, #24
 8008ae8:	2100      	movs	r1, #0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f004 feac 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008af0:	233f      	movs	r3, #63	@ 0x3f
 8008af2:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008af6:	230d      	movs	r3, #13
 8008af8:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008afc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008b04:	2301      	movs	r3, #1
 8008b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8008b0a:	f107 0314 	add.w	r3, r7, #20
 8008b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008b12:	2380      	movs	r3, #128	@ 0x80
 8008b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b18:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fa46 	bl	8008fb0 <hci_send_req>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	da01      	bge.n	8008b2e <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8008b2a:	23ff      	movs	r3, #255	@ 0xff
 8008b2c:	e01e      	b.n	8008b6c <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8008b2e:	7d3b      	ldrb	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008b34:	7d3b      	ldrb	r3, [r7, #20]
 8008b36:	e019      	b.n	8008b6c <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8008b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	89bb      	ldrh	r3, [r7, #12]
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d201      	bcs.n	8008b56 <aci_hal_read_config_data+0x8c>
 8008b52:	89ba      	ldrh	r2, [r7, #12]
 8008b54:	e002      	b.n	8008b5c <aci_hal_read_config_data+0x92>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f107 0314 	add.w	r3, r7, #20
 8008b60:	3301      	adds	r3, #1
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f004 feee 	bl	800d946 <memcpy>
  
  return 0;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	37b0      	adds	r7, #176	@ 0xb0
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	@ 0x28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	460a      	mov	r2, r1
 8008b7e:	71fb      	strb	r3, [r7, #7]
 8008b80:	4613      	mov	r3, r2
 8008b82:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008b88:	79bb      	ldrb	r3, [r7, #6]
 8008b8a:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b8c:	f107 0310 	add.w	r3, r7, #16
 8008b90:	2218      	movs	r2, #24
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f004 fe57 	bl	800d848 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b9a:	233f      	movs	r3, #63	@ 0x3f
 8008b9c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008b9e:	230f      	movs	r3, #15
 8008ba0:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008bac:	f107 030b 	add.w	r3, r7, #11
 8008bb0:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 f9f7 	bl	8008fb0 <hci_send_req>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	da01      	bge.n	8008bcc <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008bc8:	23ff      	movs	r3, #255	@ 0xff
 8008bca:	e000      	b.n	8008bce <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3728      	adds	r7, #40	@ 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008bd6:	b590      	push	{r4, r7, lr}
 8008bd8:	b089      	sub	sp, #36	@ 0x24
 8008bda:	af02      	add	r7, sp, #8
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008be0:	f107 0410 	add.w	r4, r7, #16
 8008be4:	f107 0215 	add.w	r2, r7, #21
 8008be8:	f107 0112 	add.w	r1, r7, #18
 8008bec:	f107 0016 	add.w	r0, r7, #22
 8008bf0:	f107 030e 	add.w	r3, r7, #14
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	4623      	mov	r3, r4
 8008bf8:	f000 f853 	bl	8008ca2 <hci_le_read_local_version>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d126      	bne.n	8008c54 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008c06:	8a7b      	ldrh	r3, [r7, #18]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008c12:	8a7b      	ldrh	r3, [r7, #18]
 8008c14:	021b      	lsls	r3, r3, #8
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b21a      	sxth	r2, r3
 8008c22:	89fb      	ldrh	r3, [r7, #14]
 8008c24:	091b      	lsrs	r3, r3, #4
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	b21b      	sxth	r3, r3
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	b21b      	sxth	r3, r3
 8008c30:	4313      	orrs	r3, r2
 8008c32:	b21b      	sxth	r3, r3
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	b21a      	sxth	r2, r3
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	b21b      	sxth	r3, r3
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	b21b      	sxth	r3, r3
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	b21b      	sxth	r3, r3
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd90      	pop	{r4, r7, pc}

08008c5e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b088      	sub	sp, #32
 8008c62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c64:	f107 0308 	add.w	r3, r7, #8
 8008c68:	2218      	movs	r2, #24
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f004 fdeb 	bl	800d848 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008c76:	2303      	movs	r3, #3
 8008c78:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008c7a:	1dfb      	adds	r3, r7, #7
 8008c7c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008c82:	f107 0308 	add.w	r3, r7, #8
 8008c86:	2100      	movs	r1, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 f991 	bl	8008fb0 <hci_send_req>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	da01      	bge.n	8008c98 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008c94:	23ff      	movs	r3, #255	@ 0xff
 8008c96:	e000      	b.n	8008c9a <hci_reset+0x3c>
  
  return status;  
 8008c98:	79fb      	ldrb	r3, [r7, #7]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3720      	adds	r7, #32
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b08e      	sub	sp, #56	@ 0x38
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008cb0:	f107 0314 	add.w	r3, r7, #20
 8008cb4:	2209      	movs	r2, #9
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f004 fdc5 	bl	800d848 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008cbe:	f107 0320 	add.w	r3, r7, #32
 8008cc2:	2218      	movs	r2, #24
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f004 fdbe 	bl	800d848 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008ccc:	2304      	movs	r3, #4
 8008cce:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008ce2:	2309      	movs	r3, #9
 8008ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008ce6:	f107 0320 	add.w	r3, r7, #32
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 f95f 	bl	8008fb0 <hci_send_req>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da01      	bge.n	8008cfc <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008cf8:	23ff      	movs	r3, #255	@ 0xff
 8008cfa:	e018      	b.n	8008d2e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008cfc:	7d3b      	ldrb	r3, [r7, #20]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <hci_le_read_local_version+0x64>
    return resp.status;
 8008d02:	7d3b      	ldrb	r3, [r7, #20]
 8008d04:	e013      	b.n	8008d2e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008d06:	7d7a      	ldrb	r2, [r7, #21]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008d0c:	8afa      	ldrh	r2, [r7, #22]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008d12:	7e3a      	ldrb	r2, [r7, #24]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008d18:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008d22:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d2a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3738      	adds	r7, #56	@ 0x38
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b092      	sub	sp, #72	@ 0x48
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	6039      	str	r1, [r7, #0]
 8008d40:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008d42:	f107 0310 	add.w	r3, r7, #16
 8008d46:	2220      	movs	r2, #32
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f004 fd7c 	bl	800d848 <memset>
  scan_resp_cp.length = length;
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	2b1f      	cmp	r3, #31
 8008d58:	bf28      	it	cs
 8008d5a:	231f      	movcs	r3, #31
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f107 0310 	add.w	r3, r7, #16
 8008d64:	3301      	adds	r3, #1
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f004 fdec 	bl	800d946 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008d72:	2218      	movs	r2, #24
 8008d74:	2100      	movs	r1, #0
 8008d76:	4618      	mov	r0, r3
 8008d78:	f004 fd66 	bl	800d848 <memset>
  rq.ogf = OGF_LE_CTL;
 8008d7c:	2308      	movs	r3, #8
 8008d7e:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008d80:	2309      	movs	r3, #9
 8008d82:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8008d84:	f107 0310 	add.w	r3, r7, #16
 8008d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008d8a:	2320      	movs	r3, #32
 8008d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8008d8e:	f107 030f 	add.w	r3, r7, #15
 8008d92:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8008d94:	2301      	movs	r3, #1
 8008d96:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008d98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f906 	bl	8008fb0 <hci_send_req>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da01      	bge.n	8008dae <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008daa:	23ff      	movs	r3, #255	@ 0xff
 8008dac:	e000      	b.n	8008db0 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3748      	adds	r7, #72	@ 0x48
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d001      	beq.n	8008dd2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e00c      	b.n	8008dec <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3302      	adds	r3, #2
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008de0:	3b03      	subs	r3, #3
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d001      	beq.n	8008dea <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008de6:	2302      	movs	r3, #2
 8008de8:	e000      	b.n	8008dec <verify_packet+0x34>
  
  return 0;      
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b0a6      	sub	sp, #152	@ 0x98
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	4603      	mov	r3, r0
 8008e02:	81fb      	strh	r3, [r7, #14]
 8008e04:	460b      	mov	r3, r1
 8008e06:	81bb      	strh	r3, [r7, #12]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008e0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e14:	b21a      	sxth	r2, r3
 8008e16:	89fb      	ldrh	r3, [r7, #14]
 8008e18:	029b      	lsls	r3, r3, #10
 8008e1a:	b21b      	sxth	r3, r3
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	b21b      	sxth	r3, r3
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008e2c:	f107 0318 	add.w	r3, r7, #24
 8008e30:	3301      	adds	r3, #1
 8008e32:	461a      	mov	r2, r3
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	8819      	ldrh	r1, [r3, #0]
 8008e3a:	789b      	ldrb	r3, [r3, #2]
 8008e3c:	8011      	strh	r1, [r2, #0]
 8008e3e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008e40:	f107 0318 	add.w	r3, r7, #24
 8008e44:	3304      	adds	r3, #4
 8008e46:	7afa      	ldrb	r2, [r7, #11]
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f004 fd7b 	bl	800d946 <memcpy>
  
  if (hciContext.io.Send)
 8008e50:	4b08      	ldr	r3, [pc, #32]	@ (8008e74 <send_cmd+0x7c>)
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008e58:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <send_cmd+0x7c>)
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	7afa      	ldrb	r2, [r7, #11]
 8008e5e:	b292      	uxth	r2, r2
 8008e60:	3204      	adds	r2, #4
 8008e62:	b291      	uxth	r1, r2
 8008e64:	f107 0218 	add.w	r2, r7, #24
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4798      	blx	r3
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3798      	adds	r7, #152	@ 0x98
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	200016d0 	.word	0x200016d0

08008e78 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008e82:	e00a      	b.n	8008e9a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008e84:	f107 030c 	add.w	r3, r7, #12
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6838      	ldr	r0, [r7, #0]
 8008e8c:	f000 fae8 	bl	8009460 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fa4f 	bl	8009338 <list_insert_head>
  while (!list_is_empty(src_list))
 8008e9a:	6838      	ldr	r0, [r7, #0]
 8008e9c:	f000 fa2a 	bl	80092f4 <list_is_empty>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0ee      	beq.n	8008e84 <move_list+0xc>
  }
}
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008eb6:	e009      	b.n	8008ecc <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4809      	ldr	r0, [pc, #36]	@ (8008ee4 <free_event_list+0x34>)
 8008ebe:	f000 faa8 	bl	8009412 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4808      	ldr	r0, [pc, #32]	@ (8008ee8 <free_event_list+0x38>)
 8008ec8:	f000 fa5c 	bl	8009384 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008ecc:	4806      	ldr	r0, [pc, #24]	@ (8008ee8 <free_event_list+0x38>)
 8008ece:	f000 faee 	bl	80094ae <list_get_size>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	ddef      	ble.n	8008eb8 <free_event_list+0x8>
  }
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2000140c 	.word	0x2000140c
 8008ee8:	20001404 	.word	0x20001404

08008eec <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008efc:	4a18      	ldr	r2, [pc, #96]	@ (8008f60 <hci_init+0x74>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008f02:	4818      	ldr	r0, [pc, #96]	@ (8008f64 <hci_init+0x78>)
 8008f04:	f000 f9e6 	bl	80092d4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008f08:	4817      	ldr	r0, [pc, #92]	@ (8008f68 <hci_init+0x7c>)
 8008f0a:	f000 f9e3 	bl	80092d4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008f0e:	f7f8 fdd9 	bl	8001ac4 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]
 8008f16:	e00c      	b.n	8008f32 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	228c      	movs	r2, #140	@ 0x8c
 8008f1c:	fb02 f303 	mul.w	r3, r2, r3
 8008f20:	4a12      	ldr	r2, [pc, #72]	@ (8008f6c <hci_init+0x80>)
 8008f22:	4413      	add	r3, r2
 8008f24:	4619      	mov	r1, r3
 8008f26:	480f      	ldr	r0, [pc, #60]	@ (8008f64 <hci_init+0x78>)
 8008f28:	f000 fa2c 	bl	8009384 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d9ef      	bls.n	8008f18 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008f38:	4b09      	ldr	r3, [pc, #36]	@ (8008f60 <hci_init+0x74>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <hci_init+0x5c>
 8008f40:	4b07      	ldr	r3, [pc, #28]	@ (8008f60 <hci_init+0x74>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2000      	movs	r0, #0
 8008f46:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008f48:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <hci_init+0x74>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <hci_init+0x6a>
 8008f50:	4b03      	ldr	r3, [pc, #12]	@ (8008f60 <hci_init+0x74>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	4798      	blx	r3
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	200016d0 	.word	0x200016d0
 8008f64:	20001404 	.word	0x20001404
 8008f68:	2000140c 	.word	0x2000140c
 8008f6c:	20001414 	.word	0x20001414

08008f70 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8008fac <hci_register_io_bus+0x3c>)
 8008f7e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	4a09      	ldr	r2, [pc, #36]	@ (8008fac <hci_register_io_bus+0x3c>)
 8008f86:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	4a07      	ldr	r2, [pc, #28]	@ (8008fac <hci_register_io_bus+0x3c>)
 8008f8e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	4a05      	ldr	r2, [pc, #20]	@ (8008fac <hci_register_io_bus+0x3c>)
 8008f96:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	4a03      	ldr	r2, [pc, #12]	@ (8008fac <hci_register_io_bus+0x3c>)
 8008f9e:	6093      	str	r3, [r2, #8]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	200016d0 	.word	0x200016d0

08008fb0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	@ 0x38
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	885b      	ldrh	r3, [r3, #2]
 8008fc0:	b21b      	sxth	r3, r3
 8008fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fc6:	b21a      	sxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	029b      	lsls	r3, r3, #10
 8008fce:	b21b      	sxth	r3, r3
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	b21b      	sxth	r3, r3
 8008fd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f978 	bl	80092d4 <list_init_head>

  free_event_list();
 8008fe4:	f7ff ff64 	bl	8008eb0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	8818      	ldrh	r0, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8859      	ldrh	r1, [r3, #2]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f7ff fefd 	bl	8008df8 <send_cmd>
  
  if (async)
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <hci_send_req+0x58>
  {
    return 0;
 8009004:	2300      	movs	r3, #0
 8009006:	e0e2      	b.n	80091ce <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009008:	f7fa fb22 	bl	8003650 <HAL_GetTick>
 800900c:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800900e:	f7fa fb1f 	bl	8003650 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800901c:	f200 80b3 	bhi.w	8009186 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8009020:	486d      	ldr	r0, [pc, #436]	@ (80091d8 <hci_send_req+0x228>)
 8009022:	f000 f967 	bl	80092f4 <list_is_empty>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d000      	beq.n	800902e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800902c:	e7ef      	b.n	800900e <hci_send_req+0x5e>
      {
        break;
 800902e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009030:	f107 0310 	add.w	r3, r7, #16
 8009034:	4619      	mov	r1, r3
 8009036:	4868      	ldr	r0, [pc, #416]	@ (80091d8 <hci_send_req+0x228>)
 8009038:	f000 f9eb 	bl	8009412 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	3308      	adds	r3, #8
 8009040:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b04      	cmp	r3, #4
 8009048:	d17f      	bne.n	800914a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800904a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904c:	3301      	adds	r3, #1
 800904e:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	3308      	adds	r3, #8
 8009054:	3303      	adds	r3, #3
 8009056:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800905e:	3b03      	subs	r3, #3
 8009060:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8009062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b3e      	cmp	r3, #62	@ 0x3e
 8009068:	d04c      	beq.n	8009104 <hci_send_req+0x154>
 800906a:	2b3e      	cmp	r3, #62	@ 0x3e
 800906c:	dc68      	bgt.n	8009140 <hci_send_req+0x190>
 800906e:	2b10      	cmp	r3, #16
 8009070:	f000 808b 	beq.w	800918a <hci_send_req+0x1da>
 8009074:	2b10      	cmp	r3, #16
 8009076:	dc63      	bgt.n	8009140 <hci_send_req+0x190>
 8009078:	2b0e      	cmp	r3, #14
 800907a:	d023      	beq.n	80090c4 <hci_send_req+0x114>
 800907c:	2b0f      	cmp	r3, #15
 800907e:	d15f      	bne.n	8009140 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	885b      	ldrh	r3, [r3, #2]
 8009088:	b29b      	uxth	r3, r3
 800908a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800908c:	429a      	cmp	r2, r3
 800908e:	d17e      	bne.n	800918e <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2b0f      	cmp	r3, #15
 8009096:	d004      	beq.n	80090a2 <hci_send_req+0xf2>
          if (cs->status) {
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d051      	beq.n	8009144 <hci_send_req+0x194>
            goto failed;
 80090a0:	e078      	b.n	8009194 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695a      	ldr	r2, [r3, #20]
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	bf28      	it	cs
 80090ac:	461a      	movcs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6918      	ldr	r0, [r3, #16]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	461a      	mov	r2, r3
 80090bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090be:	f004 fc42 	bl	800d946 <memcpy>
        goto done;
 80090c2:	e078      	b.n	80091b6 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d15d      	bne.n	8009192 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	3303      	adds	r3, #3
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	3b03      	subs	r3, #3
 80090e0:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695a      	ldr	r2, [r3, #20]
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	bf28      	it	cs
 80090ec:	461a      	movcs	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6918      	ldr	r0, [r3, #16]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090fe:	f004 fc22 	bl	800d946 <memcpy>
        goto done;
 8009102:	e058      	b.n	80091b6 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d118      	bne.n	8009148 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	3b01      	subs	r3, #1
 800911a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695a      	ldr	r2, [r3, #20]
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	429a      	cmp	r2, r3
 8009124:	bf28      	it	cs
 8009126:	461a      	movcs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6918      	ldr	r0, [r3, #16]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	1c59      	adds	r1, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	461a      	mov	r2, r3
 800913a:	f004 fc04 	bl	800d946 <memcpy>
        goto done;
 800913e:	e03a      	b.n	80091b6 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009140:	bf00      	nop
 8009142:	e002      	b.n	800914a <hci_send_req+0x19a>
          break;
 8009144:	bf00      	nop
 8009146:	e000      	b.n	800914a <hci_send_req+0x19a>
          break;
 8009148:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800914a:	4824      	ldr	r0, [pc, #144]	@ (80091dc <hci_send_req+0x22c>)
 800914c:	f000 f8d2 	bl	80092f4 <list_is_empty>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00d      	beq.n	8009172 <hci_send_req+0x1c2>
 8009156:	4820      	ldr	r0, [pc, #128]	@ (80091d8 <hci_send_req+0x228>)
 8009158:	f000 f8cc 	bl	80092f4 <list_is_empty>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d007      	beq.n	8009172 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	4619      	mov	r1, r3
 8009166:	481d      	ldr	r0, [pc, #116]	@ (80091dc <hci_send_req+0x22c>)
 8009168:	f000 f90c 	bl	8009384 <list_insert_tail>
      hciReadPacket=NULL;
 800916c:	2300      	movs	r3, #0
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	e008      	b.n	8009184 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	4611      	mov	r1, r2
 800917a:	4618      	mov	r0, r3
 800917c:	f000 f902 	bl	8009384 <list_insert_tail>
      hciReadPacket=NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	613b      	str	r3, [r7, #16]
  {
 8009184:	e740      	b.n	8009008 <hci_send_req+0x58>
        goto failed;
 8009186:	bf00      	nop
 8009188:	e004      	b.n	8009194 <hci_send_req+0x1e4>
        goto failed;
 800918a:	bf00      	nop
 800918c:	e002      	b.n	8009194 <hci_send_req+0x1e4>
          goto failed;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <hci_send_req+0x1e4>
          goto failed;
 8009192:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	4619      	mov	r1, r3
 800919e:	480f      	ldr	r0, [pc, #60]	@ (80091dc <hci_send_req+0x22c>)
 80091a0:	f000 f8ca 	bl	8009338 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80091a4:	f107 0308 	add.w	r3, r7, #8
 80091a8:	4619      	mov	r1, r3
 80091aa:	480b      	ldr	r0, [pc, #44]	@ (80091d8 <hci_send_req+0x228>)
 80091ac:	f7ff fe64 	bl	8008e78 <move_list>

  return -1;
 80091b0:	f04f 33ff 	mov.w	r3, #4294967295
 80091b4:	e00b      	b.n	80091ce <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	4619      	mov	r1, r3
 80091ba:	4808      	ldr	r0, [pc, #32]	@ (80091dc <hci_send_req+0x22c>)
 80091bc:	f000 f8bc 	bl	8009338 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80091c0:	f107 0308 	add.w	r3, r7, #8
 80091c4:	4619      	mov	r1, r3
 80091c6:	4804      	ldr	r0, [pc, #16]	@ (80091d8 <hci_send_req+0x228>)
 80091c8:	f7ff fe56 	bl	8008e78 <move_list>

  return 0;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3738      	adds	r7, #56	@ 0x38
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	2000140c 	.word	0x2000140c
 80091dc:	20001404 	.word	0x20001404

080091e0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80091ea:	e013      	b.n	8009214 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80091ec:	1d3b      	adds	r3, r7, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	480e      	ldr	r0, [pc, #56]	@ (800922c <hci_user_evt_proc+0x4c>)
 80091f2:	f000 f90e 	bl	8009412 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80091f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009230 <hci_user_evt_proc+0x50>)
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80091fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <hci_user_evt_proc+0x50>)
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	3208      	adds	r2, #8
 8009206:	4610      	mov	r0, r2
 8009208:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4619      	mov	r1, r3
 800920e:	4809      	ldr	r0, [pc, #36]	@ (8009234 <hci_user_evt_proc+0x54>)
 8009210:	f000 f8b8 	bl	8009384 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009214:	4805      	ldr	r0, [pc, #20]	@ (800922c <hci_user_evt_proc+0x4c>)
 8009216:	f000 f86d 	bl	80092f4 <list_is_empty>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0e5      	beq.n	80091ec <hci_user_evt_proc+0xc>
  }
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	2000140c 	.word	0x2000140c
 8009230:	200016d0 	.word	0x200016d0
 8009234:	20001404 	.word	0x20001404

08009238 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009248:	481f      	ldr	r0, [pc, #124]	@ (80092c8 <hci_notify_asynch_evt+0x90>)
 800924a:	f000 f853 	bl	80092f4 <list_is_empty>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d132      	bne.n	80092ba <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	4619      	mov	r1, r3
 800925a:	481b      	ldr	r0, [pc, #108]	@ (80092c8 <hci_notify_asynch_evt+0x90>)
 800925c:	f000 f8d9 	bl	8009412 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009260:	4b1a      	ldr	r3, [pc, #104]	@ (80092cc <hci_notify_asynch_evt+0x94>)
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d02a      	beq.n	80092be <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009268:	4b18      	ldr	r3, [pc, #96]	@ (80092cc <hci_notify_asynch_evt+0x94>)
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	3208      	adds	r2, #8
 8009270:	2180      	movs	r1, #128	@ 0x80
 8009272:	4610      	mov	r0, r2
 8009274:	4798      	blx	r3
 8009276:	4603      	mov	r3, r0
 8009278:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800927a:	7cfb      	ldrb	r3, [r7, #19]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d016      	beq.n	80092ae <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	7cfa      	ldrb	r2, [r7, #19]
 8009284:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fd94 	bl	8008db8 <verify_packet>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d105      	bne.n	80092a2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4619      	mov	r1, r3
 800929a:	480d      	ldr	r0, [pc, #52]	@ (80092d0 <hci_notify_asynch_evt+0x98>)
 800929c:	f000 f872 	bl	8009384 <list_insert_tail>
 80092a0:	e00d      	b.n	80092be <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4619      	mov	r1, r3
 80092a6:	4808      	ldr	r0, [pc, #32]	@ (80092c8 <hci_notify_asynch_evt+0x90>)
 80092a8:	f000 f846 	bl	8009338 <list_insert_head>
 80092ac:	e007      	b.n	80092be <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4619      	mov	r1, r3
 80092b2:	4805      	ldr	r0, [pc, #20]	@ (80092c8 <hci_notify_asynch_evt+0x90>)
 80092b4:	f000 f840 	bl	8009338 <list_insert_head>
 80092b8:	e001      	b.n	80092be <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80092be:	697b      	ldr	r3, [r7, #20]

}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20001404 	.word	0x20001404
 80092cc:	200016d0 	.word	0x200016d0
 80092d0:	2000140c 	.word	0x2000140c

080092d4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	605a      	str	r2, [r3, #4]
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009300:	60fb      	str	r3, [r7, #12]
  return(result);
 8009302:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009306:	b672      	cpsid	i
}
 8009308:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d102      	bne.n	800931a <list_is_empty+0x26>
  {
    return_value = 1;
 8009314:	2301      	movs	r3, #1
 8009316:	75fb      	strb	r3, [r7, #23]
 8009318:	e001      	b.n	800931e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	75fb      	strb	r3, [r7, #23]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f383 8810 	msr	PRIMASK, r3
}
 8009328:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
}
 800932c:	4618      	mov	r0, r3
 800932e:	371c      	adds	r7, #28
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009342:	f3ef 8310 	mrs	r3, PRIMASK
 8009346:	60fb      	str	r3, [r7, #12]
  return(result);
 8009348:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800934a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800934c:	b672      	cpsid	i
}
 800934e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f383 8810 	msr	PRIMASK, r3
}
 8009376:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009378:	bf00      	nop
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800938e:	f3ef 8310 	mrs	r3, PRIMASK
 8009392:	60fb      	str	r3, [r7, #12]
  return(result);
 8009394:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009398:	b672      	cpsid	i
}
 800939a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f383 8810 	msr	PRIMASK, r3
}
 80093c2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80093c4:	bf00      	nop
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093d8:	f3ef 8310 	mrs	r3, PRIMASK
 80093dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80093de:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80093e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80093e2:	b672      	cpsid	i
}
 80093e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	6852      	ldr	r2, [r2, #4]
 80093f8:	605a      	str	r2, [r3, #4]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f383 8810 	msr	PRIMASK, r3
}
 8009404:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b086      	sub	sp, #24
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800941c:	f3ef 8310 	mrs	r3, PRIMASK
 8009420:	60fb      	str	r3, [r7, #12]
  return(result);
 8009422:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009424:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009426:	b672      	cpsid	i
}
 8009428:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff ffca 	bl	80093d0 <list_remove_node>
  (*node)->next = NULL;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2200      	movs	r2, #0
 800944a:	605a      	str	r2, [r3, #4]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f383 8810 	msr	PRIMASK, r3
}
 8009456:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009458:	bf00      	nop
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800946a:	f3ef 8310 	mrs	r3, PRIMASK
 800946e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009470:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009474:	b672      	cpsid	i
}
 8009476:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff ffa3 	bl	80093d0 <list_remove_node>
  (*node)->next = NULL;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2200      	movs	r2, #0
 8009498:	605a      	str	r2, [r3, #4]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f383 8810 	msr	PRIMASK, r3
}
 80094a4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80094a6:	bf00      	nop
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b089      	sub	sp, #36	@ 0x24
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  int size = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ba:	f3ef 8310 	mrs	r3, PRIMASK
 80094be:	613b      	str	r3, [r7, #16]
  return(result);
 80094c0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80094c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094c4:	b672      	cpsid	i
}
 80094c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80094ce:	e005      	b.n	80094dc <list_get_size+0x2e>
  {
    size++;
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	3301      	adds	r3, #1
 80094d4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d1f5      	bne.n	80094d0 <list_get_size+0x22>
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f383 8810 	msr	PRIMASK, r3
}
 80094ee:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80094f0:	69fb      	ldr	r3, [r7, #28]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3724      	adds	r7, #36	@ 0x24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
	...

08009500 <__NVIC_SetPriority>:
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800950c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009510:	2b00      	cmp	r3, #0
 8009512:	db0a      	blt.n	800952a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	b2da      	uxtb	r2, r3
 8009518:	490c      	ldr	r1, [pc, #48]	@ (800954c <__NVIC_SetPriority+0x4c>)
 800951a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800951e:	0112      	lsls	r2, r2, #4
 8009520:	b2d2      	uxtb	r2, r2
 8009522:	440b      	add	r3, r1
 8009524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009528:	e00a      	b.n	8009540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	b2da      	uxtb	r2, r3
 800952e:	4908      	ldr	r1, [pc, #32]	@ (8009550 <__NVIC_SetPriority+0x50>)
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	3b04      	subs	r3, #4
 8009538:	0112      	lsls	r2, r2, #4
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	440b      	add	r3, r1
 800953e:	761a      	strb	r2, [r3, #24]
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	e000e100 	.word	0xe000e100
 8009550:	e000ed00 	.word	0xe000ed00

08009554 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009558:	2100      	movs	r1, #0
 800955a:	f06f 0004 	mvn.w	r0, #4
 800955e:	f7ff ffcf 	bl	8009500 <__NVIC_SetPriority>
#endif
}
 8009562:	bf00      	nop
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800956e:	f3ef 8305 	mrs	r3, IPSR
 8009572:	603b      	str	r3, [r7, #0]
  return(result);
 8009574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800957a:	f06f 0305 	mvn.w	r3, #5
 800957e:	607b      	str	r3, [r7, #4]
 8009580:	e00c      	b.n	800959c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009582:	4b0a      	ldr	r3, [pc, #40]	@ (80095ac <osKernelInitialize+0x44>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d105      	bne.n	8009596 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800958a:	4b08      	ldr	r3, [pc, #32]	@ (80095ac <osKernelInitialize+0x44>)
 800958c:	2201      	movs	r2, #1
 800958e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009590:	2300      	movs	r3, #0
 8009592:	607b      	str	r3, [r7, #4]
 8009594:	e002      	b.n	800959c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009596:	f04f 33ff 	mov.w	r3, #4294967295
 800959a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800959c:	687b      	ldr	r3, [r7, #4]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	200016f0 	.word	0x200016f0

080095b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095b6:	f3ef 8305 	mrs	r3, IPSR
 80095ba:	603b      	str	r3, [r7, #0]
  return(result);
 80095bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80095c2:	f06f 0305 	mvn.w	r3, #5
 80095c6:	607b      	str	r3, [r7, #4]
 80095c8:	e010      	b.n	80095ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095ca:	4b0b      	ldr	r3, [pc, #44]	@ (80095f8 <osKernelStart+0x48>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d109      	bne.n	80095e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80095d2:	f7ff ffbf 	bl	8009554 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80095d6:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <osKernelStart+0x48>)
 80095d8:	2202      	movs	r2, #2
 80095da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80095dc:	f001 fcca 	bl	800af74 <vTaskStartScheduler>
      stat = osOK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	607b      	str	r3, [r7, #4]
 80095e4:	e002      	b.n	80095ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80095e6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095ec:	687b      	ldr	r3, [r7, #4]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200016f0 	.word	0x200016f0

080095fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08e      	sub	sp, #56	@ 0x38
 8009600:	af04      	add	r7, sp, #16
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800960c:	f3ef 8305 	mrs	r3, IPSR
 8009610:	617b      	str	r3, [r7, #20]
  return(result);
 8009612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009614:	2b00      	cmp	r3, #0
 8009616:	d17e      	bne.n	8009716 <osThreadNew+0x11a>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d07b      	beq.n	8009716 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800961e:	2380      	movs	r3, #128	@ 0x80
 8009620:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009622:	2318      	movs	r3, #24
 8009624:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800962a:	f04f 33ff 	mov.w	r3, #4294967295
 800962e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d045      	beq.n	80096c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <osThreadNew+0x48>
        name = attr->name;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <osThreadNew+0x6e>
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	2b38      	cmp	r3, #56	@ 0x38
 800965c:	d805      	bhi.n	800966a <osThreadNew+0x6e>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <osThreadNew+0x72>
        return (NULL);
 800966a:	2300      	movs	r3, #0
 800966c:	e054      	b.n	8009718 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	089b      	lsrs	r3, r3, #2
 800967c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00e      	beq.n	80096a4 <osThreadNew+0xa8>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	2b5b      	cmp	r3, #91	@ 0x5b
 800968c:	d90a      	bls.n	80096a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <osThreadNew+0xa8>
        mem = 1;
 800969e:	2301      	movs	r3, #1
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	e010      	b.n	80096c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10c      	bne.n	80096c6 <osThreadNew+0xca>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d108      	bne.n	80096c6 <osThreadNew+0xca>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <osThreadNew+0xca>
          mem = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	61bb      	str	r3, [r7, #24]
 80096c0:	e001      	b.n	80096c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d110      	bne.n	80096ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096d4:	9202      	str	r2, [sp, #8]
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6a3a      	ldr	r2, [r7, #32]
 80096e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f001 fa6a 	bl	800abbc <xTaskCreateStatic>
 80096e8:	4603      	mov	r3, r0
 80096ea:	613b      	str	r3, [r7, #16]
 80096ec:	e013      	b.n	8009716 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d110      	bne.n	8009716 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	f107 0310 	add.w	r3, r7, #16
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f001 fab8 	bl	800ac7c <xTaskCreate>
 800970c:	4603      	mov	r3, r0
 800970e:	2b01      	cmp	r3, #1
 8009710:	d001      	beq.n	8009716 <osThreadNew+0x11a>
            hTask = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009716:	693b      	ldr	r3, [r7, #16]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3728      	adds	r7, #40	@ 0x28
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009728:	f3ef 8305 	mrs	r3, IPSR
 800972c:	60bb      	str	r3, [r7, #8]
  return(result);
 800972e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <osDelay+0x1c>
    stat = osErrorISR;
 8009734:	f06f 0305 	mvn.w	r3, #5
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e007      	b.n	800974c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800973c:	2300      	movs	r3, #0
 800973e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 fbde 	bl	800af08 <vTaskDelay>
    }
  }

  return (stat);
 800974c:	68fb      	ldr	r3, [r7, #12]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009756:	b580      	push	{r7, lr}
 8009758:	b08a      	sub	sp, #40	@ 0x28
 800975a:	af02      	add	r7, sp, #8
 800975c:	60f8      	str	r0, [r7, #12]
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009766:	f3ef 8305 	mrs	r3, IPSR
 800976a:	613b      	str	r3, [r7, #16]
  return(result);
 800976c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800976e:	2b00      	cmp	r3, #0
 8009770:	d175      	bne.n	800985e <osSemaphoreNew+0x108>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d072      	beq.n	800985e <osSemaphoreNew+0x108>
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	429a      	cmp	r2, r3
 800977e:	d86e      	bhi.n	800985e <osSemaphoreNew+0x108>
    mem = -1;
 8009780:	f04f 33ff 	mov.w	r3, #4294967295
 8009784:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d015      	beq.n	80097b8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <osSemaphoreNew+0x4c>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	2b4f      	cmp	r3, #79	@ 0x4f
 800979a:	d902      	bls.n	80097a2 <osSemaphoreNew+0x4c>
        mem = 1;
 800979c:	2301      	movs	r3, #1
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	e00c      	b.n	80097bc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d108      	bne.n	80097bc <osSemaphoreNew+0x66>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d104      	bne.n	80097bc <osSemaphoreNew+0x66>
          mem = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	e001      	b.n	80097bc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d04c      	beq.n	800985e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d128      	bne.n	800981c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d10a      	bne.n	80097e6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	2203      	movs	r2, #3
 80097d6:	9200      	str	r2, [sp, #0]
 80097d8:	2200      	movs	r2, #0
 80097da:	2100      	movs	r1, #0
 80097dc:	2001      	movs	r0, #1
 80097de:	f000 fa2b 	bl	8009c38 <xQueueGenericCreateStatic>
 80097e2:	61f8      	str	r0, [r7, #28]
 80097e4:	e005      	b.n	80097f2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80097e6:	2203      	movs	r2, #3
 80097e8:	2100      	movs	r1, #0
 80097ea:	2001      	movs	r0, #1
 80097ec:	f000 faa1 	bl	8009d32 <xQueueGenericCreate>
 80097f0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d022      	beq.n	800983e <osSemaphoreNew+0xe8>
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d01f      	beq.n	800983e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097fe:	2300      	movs	r3, #0
 8009800:	2200      	movs	r2, #0
 8009802:	2100      	movs	r1, #0
 8009804:	69f8      	ldr	r0, [r7, #28]
 8009806:	f000 fb61 	bl	8009ecc <xQueueGenericSend>
 800980a:	4603      	mov	r3, r0
 800980c:	2b01      	cmp	r3, #1
 800980e:	d016      	beq.n	800983e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009810:	69f8      	ldr	r0, [r7, #28]
 8009812:	f000 ffff 	bl	800a814 <vQueueDelete>
            hSemaphore = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	61fb      	str	r3, [r7, #28]
 800981a:	e010      	b.n	800983e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d108      	bne.n	8009834 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	461a      	mov	r2, r3
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fadf 	bl	8009dee <xQueueCreateCountingSemaphoreStatic>
 8009830:	61f8      	str	r0, [r7, #28]
 8009832:	e004      	b.n	800983e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009834:	68b9      	ldr	r1, [r7, #8]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 fb12 	bl	8009e60 <xQueueCreateCountingSemaphore>
 800983c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00c      	beq.n	800985e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <osSemaphoreNew+0xfc>
          name = attr->name;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e001      	b.n	8009856 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009856:	6979      	ldr	r1, [r7, #20]
 8009858:	69f8      	ldr	r0, [r7, #28]
 800985a:	f001 f927 	bl	800aaac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800985e:	69fb      	ldr	r3, [r7, #28]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3720      	adds	r7, #32
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d103      	bne.n	8009888 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009880:	f06f 0303 	mvn.w	r3, #3
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	e039      	b.n	80098fc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009888:	f3ef 8305 	mrs	r3, IPSR
 800988c:	60fb      	str	r3, [r7, #12]
  return(result);
 800988e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009890:	2b00      	cmp	r3, #0
 8009892:	d022      	beq.n	80098da <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800989a:	f06f 0303 	mvn.w	r3, #3
 800989e:	617b      	str	r3, [r7, #20]
 80098a0:	e02c      	b.n	80098fc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	461a      	mov	r2, r3
 80098ac:	2100      	movs	r1, #0
 80098ae:	6938      	ldr	r0, [r7, #16]
 80098b0:	f000 ff2e 	bl	800a710 <xQueueReceiveFromISR>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d003      	beq.n	80098c2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80098ba:	f06f 0302 	mvn.w	r3, #2
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e01c      	b.n	80098fc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d019      	beq.n	80098fc <osSemaphoreAcquire+0x94>
 80098c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <osSemaphoreAcquire+0xa0>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	e010      	b.n	80098fc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6938      	ldr	r0, [r7, #16]
 80098de:	f000 fe07 	bl	800a4f0 <xQueueSemaphoreTake>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d009      	beq.n	80098fc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80098ee:	f06f 0301 	mvn.w	r3, #1
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	e002      	b.n	80098fc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80098f6:	f06f 0302 	mvn.w	r3, #2
 80098fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80098fc:	697b      	ldr	r3, [r7, #20]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009918:	2300      	movs	r3, #0
 800991a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009922:	f06f 0303 	mvn.w	r3, #3
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e02c      	b.n	8009984 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800992a:	f3ef 8305 	mrs	r3, IPSR
 800992e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009930:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009932:	2b00      	cmp	r3, #0
 8009934:	d01a      	beq.n	800996c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009936:	2300      	movs	r3, #0
 8009938:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	4619      	mov	r1, r3
 8009940:	6938      	ldr	r0, [r7, #16]
 8009942:	f000 fc63 	bl	800a20c <xQueueGiveFromISR>
 8009946:	4603      	mov	r3, r0
 8009948:	2b01      	cmp	r3, #1
 800994a:	d003      	beq.n	8009954 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800994c:	f06f 0302 	mvn.w	r3, #2
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	e017      	b.n	8009984 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d014      	beq.n	8009984 <osSemaphoreRelease+0x78>
 800995a:	4b0d      	ldr	r3, [pc, #52]	@ (8009990 <osSemaphoreRelease+0x84>)
 800995c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	e00b      	b.n	8009984 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800996c:	2300      	movs	r3, #0
 800996e:	2200      	movs	r2, #0
 8009970:	2100      	movs	r1, #0
 8009972:	6938      	ldr	r0, [r7, #16]
 8009974:	f000 faaa 	bl	8009ecc <xQueueGenericSend>
 8009978:	4603      	mov	r3, r0
 800997a:	2b01      	cmp	r3, #1
 800997c:	d002      	beq.n	8009984 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800997e:	f06f 0302 	mvn.w	r3, #2
 8009982:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009984:	697b      	ldr	r3, [r7, #20]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a07      	ldr	r2, [pc, #28]	@ (80099c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80099a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4a06      	ldr	r2, [pc, #24]	@ (80099c4 <vApplicationGetIdleTaskMemory+0x30>)
 80099aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2280      	movs	r2, #128	@ 0x80
 80099b0:	601a      	str	r2, [r3, #0]
}
 80099b2:	bf00      	nop
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	200016f4 	.word	0x200016f4
 80099c4:	20001750 	.word	0x20001750

080099c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4a07      	ldr	r2, [pc, #28]	@ (80099f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80099d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	4a06      	ldr	r2, [pc, #24]	@ (80099f8 <vApplicationGetTimerTaskMemory+0x30>)
 80099de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099e6:	601a      	str	r2, [r3, #0]
}
 80099e8:	bf00      	nop
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	20001950 	.word	0x20001950
 80099f8:	200019ac 	.word	0x200019ac

080099fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f103 0208 	add.w	r2, r3, #8
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295
 8009a14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f103 0208 	add.w	r2, r3, #8
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f103 0208 	add.w	r2, r3, #8
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]
}
 8009a92:	bf00      	nop
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab4:	d103      	bne.n	8009abe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	e00c      	b.n	8009ad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e002      	b.n	8009acc <vListInsert+0x2e>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d2f6      	bcs.n	8009ac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	601a      	str	r2, [r3, #0]
}
 8009b04:	bf00      	nop
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6892      	ldr	r2, [r2, #8]
 8009b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	6852      	ldr	r2, [r2, #4]
 8009b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d103      	bne.n	8009b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	1e5a      	subs	r2, r3, #1
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10b      	bne.n	8009b90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	e7fd      	b.n	8009b8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b90:	f002 fcaa 	bl	800c4e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b9c:	68f9      	ldr	r1, [r7, #12]
 8009b9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	441a      	add	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bc6:	fb01 f303 	mul.w	r3, r1, r3
 8009bca:	441a      	add	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	22ff      	movs	r2, #255	@ 0xff
 8009bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	22ff      	movs	r2, #255	@ 0xff
 8009bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d114      	bne.n	8009c10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01a      	beq.n	8009c24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3310      	adds	r3, #16
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fc4c 	bl	800b490 <xTaskRemoveFromEventList>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d012      	beq.n	8009c24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009c34 <xQueueGenericReset+0xd0>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	e009      	b.n	8009c24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3310      	adds	r3, #16
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fef1 	bl	80099fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3324      	adds	r3, #36	@ 0x24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff feec 	bl	80099fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c24:	f002 fc92 	bl	800c54c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c28:	2301      	movs	r3, #1
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08e      	sub	sp, #56	@ 0x38
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10b      	bne.n	8009c64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	e7fd      	b.n	8009c60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10b      	bne.n	8009c82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	e7fd      	b.n	8009c7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <xQueueGenericCreateStatic+0x56>
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <xQueueGenericCreateStatic+0x5a>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e000      	b.n	8009c94 <xQueueGenericCreateStatic+0x5c>
 8009c92:	2300      	movs	r3, #0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10b      	bne.n	8009cb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	623b      	str	r3, [r7, #32]
}
 8009caa:	bf00      	nop
 8009cac:	bf00      	nop
 8009cae:	e7fd      	b.n	8009cac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d102      	bne.n	8009cbc <xQueueGenericCreateStatic+0x84>
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <xQueueGenericCreateStatic+0x88>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e000      	b.n	8009cc2 <xQueueGenericCreateStatic+0x8a>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10b      	bne.n	8009cde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	61fb      	str	r3, [r7, #28]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cde:	2350      	movs	r3, #80	@ 0x50
 8009ce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b50      	cmp	r3, #80	@ 0x50
 8009ce6:	d00b      	beq.n	8009d00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	61bb      	str	r3, [r7, #24]
}
 8009cfa:	bf00      	nop
 8009cfc:	bf00      	nop
 8009cfe:	e7fd      	b.n	8009cfc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00d      	beq.n	8009d28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	68b9      	ldr	r1, [r7, #8]
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 f840 	bl	8009da8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3730      	adds	r7, #48	@ 0x30
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b08a      	sub	sp, #40	@ 0x28
 8009d36:	af02      	add	r7, sp, #8
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10b      	bne.n	8009d5e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	613b      	str	r3, [r7, #16]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	fb02 f303 	mul.w	r3, r2, r3
 8009d66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	3350      	adds	r3, #80	@ 0x50
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f002 fcdd 	bl	800c72c <pvPortMalloc>
 8009d72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d011      	beq.n	8009d9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	3350      	adds	r3, #80	@ 0x50
 8009d82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d8c:	79fa      	ldrb	r2, [r7, #7]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 f805 	bl	8009da8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3720      	adds	r7, #32
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d103      	bne.n	8009dc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	69b8      	ldr	r0, [r7, #24]
 8009dda:	f7ff fec3 	bl	8009b64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	78fa      	ldrb	r2, [r7, #3]
 8009de2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b08a      	sub	sp, #40	@ 0x28
 8009df2:	af02      	add	r7, sp, #8
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10b      	bne.n	8009e18 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	61bb      	str	r3, [r7, #24]
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	e7fd      	b.n	8009e14 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d90b      	bls.n	8009e38 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	617b      	str	r3, [r7, #20]
}
 8009e32:	bf00      	nop
 8009e34:	bf00      	nop
 8009e36:	e7fd      	b.n	8009e34 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e38:	2302      	movs	r3, #2
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff fef8 	bl	8009c38 <xQueueGenericCreateStatic>
 8009e48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e56:	69fb      	ldr	r3, [r7, #28]
	}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3720      	adds	r7, #32
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10b      	bne.n	8009e88 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	613b      	str	r3, [r7, #16]
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	e7fd      	b.n	8009e84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d90b      	bls.n	8009ea8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	60fb      	str	r3, [r7, #12]
}
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
 8009ea6:	e7fd      	b.n	8009ea4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	2100      	movs	r1, #0
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff ff40 	bl	8009d32 <xQueueGenericCreate>
 8009eb2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ec0:	697b      	ldr	r3, [r7, #20]
	}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08e      	sub	sp, #56	@ 0x38
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009eda:	2300      	movs	r3, #0
 8009edc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <xQueueGenericSend+0x34>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	e7fd      	b.n	8009efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d103      	bne.n	8009f0e <xQueueGenericSend+0x42>
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <xQueueGenericSend+0x46>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e000      	b.n	8009f14 <xQueueGenericSend+0x48>
 8009f12:	2300      	movs	r3, #0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10b      	bne.n	8009f30 <xQueueGenericSend+0x64>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d103      	bne.n	8009f3e <xQueueGenericSend+0x72>
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d101      	bne.n	8009f42 <xQueueGenericSend+0x76>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <xQueueGenericSend+0x78>
 8009f42:	2300      	movs	r3, #0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <xQueueGenericSend+0x94>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	623b      	str	r3, [r7, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	bf00      	nop
 8009f5e:	e7fd      	b.n	8009f5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f60:	f001 fc56 	bl	800b810 <xTaskGetSchedulerState>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d102      	bne.n	8009f70 <xQueueGenericSend+0xa4>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <xQueueGenericSend+0xa8>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <xQueueGenericSend+0xaa>
 8009f74:	2300      	movs	r3, #0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <xQueueGenericSend+0xc6>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	61fb      	str	r3, [r7, #28]
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	e7fd      	b.n	8009f8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f92:	f002 faa9 	bl	800c4e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d302      	bcc.n	8009fa8 <xQueueGenericSend+0xdc>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d129      	bne.n	8009ffc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	68b9      	ldr	r1, [r7, #8]
 8009fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fae:	f000 fc6d 	bl	800a88c <prvCopyDataToQueue>
 8009fb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d010      	beq.n	8009fde <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbe:	3324      	adds	r3, #36	@ 0x24
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f001 fa65 	bl	800b490 <xTaskRemoveFromEventList>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d013      	beq.n	8009ff4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fcc:	4b3f      	ldr	r3, [pc, #252]	@ (800a0cc <xQueueGenericSend+0x200>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	e00a      	b.n	8009ff4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d007      	beq.n	8009ff4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fe4:	4b39      	ldr	r3, [pc, #228]	@ (800a0cc <xQueueGenericSend+0x200>)
 8009fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ff4:	f002 faaa 	bl	800c54c <vPortExitCritical>
				return pdPASS;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e063      	b.n	800a0c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d103      	bne.n	800a00a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a002:	f002 faa3 	bl	800c54c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a006:	2300      	movs	r3, #0
 800a008:	e05c      	b.n	800a0c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a00a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d106      	bne.n	800a01e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a010:	f107 0314 	add.w	r3, r7, #20
 800a014:	4618      	mov	r0, r3
 800a016:	f001 fa9f 	bl	800b558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a01a:	2301      	movs	r3, #1
 800a01c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a01e:	f002 fa95 	bl	800c54c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a022:	f001 f80f 	bl	800b044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a026:	f002 fa5f 	bl	800c4e8 <vPortEnterCritical>
 800a02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a030:	b25b      	sxtb	r3, r3
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d103      	bne.n	800a040 <xQueueGenericSend+0x174>
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a046:	b25b      	sxtb	r3, r3
 800a048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04c:	d103      	bne.n	800a056 <xQueueGenericSend+0x18a>
 800a04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a056:	f002 fa79 	bl	800c54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a05a:	1d3a      	adds	r2, r7, #4
 800a05c:	f107 0314 	add.w	r3, r7, #20
 800a060:	4611      	mov	r1, r2
 800a062:	4618      	mov	r0, r3
 800a064:	f001 fa8e 	bl	800b584 <xTaskCheckForTimeOut>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d124      	bne.n	800a0b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a06e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a070:	f000 fd04 	bl	800aa7c <prvIsQueueFull>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d018      	beq.n	800a0ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	3310      	adds	r3, #16
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f001 f9b2 	bl	800b3ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a08a:	f000 fc8f 	bl	800a9ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a08e:	f000 ffe7 	bl	800b060 <xTaskResumeAll>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	f47f af7c 	bne.w	8009f92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a09a:	4b0c      	ldr	r3, [pc, #48]	@ (800a0cc <xQueueGenericSend+0x200>)
 800a09c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	e772      	b.n	8009f92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0ae:	f000 fc7d 	bl	800a9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0b2:	f000 ffd5 	bl	800b060 <xTaskResumeAll>
 800a0b6:	e76c      	b.n	8009f92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0ba:	f000 fc77 	bl	800a9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0be:	f000 ffcf 	bl	800b060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3738      	adds	r7, #56	@ 0x38
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	e000ed04 	.word	0xe000ed04

0800a0d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b090      	sub	sp, #64	@ 0x40
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0fa:	bf00      	nop
 800a0fc:	bf00      	nop
 800a0fe:	e7fd      	b.n	800a0fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d103      	bne.n	800a10e <xQueueGenericSendFromISR+0x3e>
 800a106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <xQueueGenericSendFromISR+0x42>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueGenericSendFromISR+0x44>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d103      	bne.n	800a13e <xQueueGenericSendFromISR+0x6e>
 800a136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <xQueueGenericSendFromISR+0x72>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <xQueueGenericSendFromISR+0x74>
 800a142:	2300      	movs	r3, #0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10b      	bne.n	800a160 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	623b      	str	r3, [r7, #32]
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a160:	f002 faa2 	bl	800c6a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a164:	f3ef 8211 	mrs	r2, BASEPRI
 800a168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	61fa      	str	r2, [r7, #28]
 800a17a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a17c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a17e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d302      	bcc.n	800a192 <xQueueGenericSendFromISR+0xc2>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d12f      	bne.n	800a1f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1a8:	f000 fb70 	bl	800a88c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b4:	d112      	bne.n	800a1dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d016      	beq.n	800a1ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c0:	3324      	adds	r3, #36	@ 0x24
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 f964 	bl	800b490 <xTaskRemoveFromEventList>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00e      	beq.n	800a1ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e007      	b.n	800a1ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	b25a      	sxtb	r2, r3
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a1f0:	e001      	b.n	800a1f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a204:	4618      	mov	r0, r3
 800a206:	3740      	adds	r7, #64	@ 0x40
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08e      	sub	sp, #56	@ 0x38
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10b      	bne.n	800a238 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	623b      	str	r3, [r7, #32]
}
 800a232:	bf00      	nop
 800a234:	bf00      	nop
 800a236:	e7fd      	b.n	800a234 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00b      	beq.n	800a258 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	61fb      	str	r3, [r7, #28]
}
 800a252:	bf00      	nop
 800a254:	bf00      	nop
 800a256:	e7fd      	b.n	800a254 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d103      	bne.n	800a268 <xQueueGiveFromISR+0x5c>
 800a260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <xQueueGiveFromISR+0x60>
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <xQueueGiveFromISR+0x62>
 800a26c:	2300      	movs	r3, #0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	61bb      	str	r3, [r7, #24]
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a28a:	f002 fa0d 	bl	800c6a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a28e:	f3ef 8211 	mrs	r2, BASEPRI
 800a292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	617a      	str	r2, [r7, #20]
 800a2a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a2a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d22b      	bcs.n	800a312 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d4:	d112      	bne.n	800a2fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d016      	beq.n	800a30c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	3324      	adds	r3, #36	@ 0x24
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f001 f8d4 	bl	800b490 <xTaskRemoveFromEventList>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00e      	beq.n	800a30c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	e007      	b.n	800a30c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a300:	3301      	adds	r3, #1
 800a302:	b2db      	uxtb	r3, r3
 800a304:	b25a      	sxtb	r2, r3
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a30c:	2301      	movs	r3, #1
 800a30e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a310:	e001      	b.n	800a316 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a312:	2300      	movs	r3, #0
 800a314:	637b      	str	r3, [r7, #52]	@ 0x34
 800a316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a318:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f383 8811 	msr	BASEPRI, r3
}
 800a320:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a324:	4618      	mov	r0, r3
 800a326:	3738      	adds	r7, #56	@ 0x38
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08c      	sub	sp, #48	@ 0x30
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a338:	2300      	movs	r3, #0
 800a33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10b      	bne.n	800a35e <xQueueReceive+0x32>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	623b      	str	r3, [r7, #32]
}
 800a358:	bf00      	nop
 800a35a:	bf00      	nop
 800a35c:	e7fd      	b.n	800a35a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d103      	bne.n	800a36c <xQueueReceive+0x40>
 800a364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <xQueueReceive+0x44>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <xQueueReceive+0x46>
 800a370:	2300      	movs	r3, #0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10b      	bne.n	800a38e <xQueueReceive+0x62>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	61fb      	str	r3, [r7, #28]
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	e7fd      	b.n	800a38a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a38e:	f001 fa3f 	bl	800b810 <xTaskGetSchedulerState>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <xQueueReceive+0x72>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <xQueueReceive+0x76>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e000      	b.n	800a3a4 <xQueueReceive+0x78>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10b      	bne.n	800a3c0 <xQueueReceive+0x94>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	61bb      	str	r3, [r7, #24]
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	e7fd      	b.n	800a3bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3c0:	f002 f892 	bl	800c4e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01f      	beq.n	800a410 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3d0:	68b9      	ldr	r1, [r7, #8]
 800a3d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3d4:	f000 fac4 	bl	800a960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3da:	1e5a      	subs	r2, r3, #1
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00f      	beq.n	800a408 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ea:	3310      	adds	r3, #16
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 f84f 	bl	800b490 <xTaskRemoveFromEventList>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d007      	beq.n	800a408 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3f8:	4b3c      	ldr	r3, [pc, #240]	@ (800a4ec <xQueueReceive+0x1c0>)
 800a3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a408:	f002 f8a0 	bl	800c54c <vPortExitCritical>
				return pdPASS;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e069      	b.n	800a4e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d103      	bne.n	800a41e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a416:	f002 f899 	bl	800c54c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e062      	b.n	800a4e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d106      	bne.n	800a432 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a424:	f107 0310 	add.w	r3, r7, #16
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 f895 	bl	800b558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a42e:	2301      	movs	r3, #1
 800a430:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a432:	f002 f88b 	bl	800c54c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a436:	f000 fe05 	bl	800b044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a43a:	f002 f855 	bl	800c4e8 <vPortEnterCritical>
 800a43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a444:	b25b      	sxtb	r3, r3
 800a446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44a:	d103      	bne.n	800a454 <xQueueReceive+0x128>
 800a44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a45a:	b25b      	sxtb	r3, r3
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a460:	d103      	bne.n	800a46a <xQueueReceive+0x13e>
 800a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a46a:	f002 f86f 	bl	800c54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a46e:	1d3a      	adds	r2, r7, #4
 800a470:	f107 0310 	add.w	r3, r7, #16
 800a474:	4611      	mov	r1, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f001 f884 	bl	800b584 <xTaskCheckForTimeOut>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d123      	bne.n	800a4ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a484:	f000 fae4 	bl	800aa50 <prvIsQueueEmpty>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d017      	beq.n	800a4be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a490:	3324      	adds	r3, #36	@ 0x24
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	4611      	mov	r1, r2
 800a496:	4618      	mov	r0, r3
 800a498:	f000 ffa8 	bl	800b3ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a49c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a49e:	f000 fa85 	bl	800a9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4a2:	f000 fddd 	bl	800b060 <xTaskResumeAll>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d189      	bne.n	800a3c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a4ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ec <xQueueReceive+0x1c0>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	e780      	b.n	800a3c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4c0:	f000 fa74 	bl	800a9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4c4:	f000 fdcc 	bl	800b060 <xTaskResumeAll>
 800a4c8:	e77a      	b.n	800a3c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4cc:	f000 fa6e 	bl	800a9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4d0:	f000 fdc6 	bl	800b060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4d6:	f000 fabb 	bl	800aa50 <prvIsQueueEmpty>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f43f af6f 	beq.w	800a3c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3730      	adds	r7, #48	@ 0x30
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	e000ed04 	.word	0xe000ed04

0800a4f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08e      	sub	sp, #56	@ 0x38
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a502:	2300      	movs	r3, #0
 800a504:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10b      	bne.n	800a524 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	623b      	str	r3, [r7, #32]
}
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	e7fd      	b.n	800a520 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	61fb      	str	r3, [r7, #28]
}
 800a53e:	bf00      	nop
 800a540:	bf00      	nop
 800a542:	e7fd      	b.n	800a540 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a544:	f001 f964 	bl	800b810 <xTaskGetSchedulerState>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d102      	bne.n	800a554 <xQueueSemaphoreTake+0x64>
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <xQueueSemaphoreTake+0x68>
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <xQueueSemaphoreTake+0x6a>
 800a558:	2300      	movs	r3, #0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10b      	bne.n	800a576 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	61bb      	str	r3, [r7, #24]
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	e7fd      	b.n	800a572 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a576:	f001 ffb7 	bl	800c4e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a57e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a582:	2b00      	cmp	r3, #0
 800a584:	d024      	beq.n	800a5d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	1e5a      	subs	r2, r3, #1
 800a58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d104      	bne.n	800a5a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a596:	f001 fab5 	bl	800bb04 <pvTaskIncrementMutexHeldCount>
 800a59a:	4602      	mov	r2, r0
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00f      	beq.n	800a5c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5aa:	3310      	adds	r3, #16
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 ff6f 	bl	800b490 <xTaskRemoveFromEventList>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5b8:	4b54      	ldr	r3, [pc, #336]	@ (800a70c <xQueueSemaphoreTake+0x21c>)
 800a5ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5c8:	f001 ffc0 	bl	800c54c <vPortExitCritical>
				return pdPASS;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e098      	b.n	800a702 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d112      	bne.n	800a5fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	617b      	str	r3, [r7, #20]
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	e7fd      	b.n	800a5f0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5f4:	f001 ffaa 	bl	800c54c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e082      	b.n	800a702 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	4618      	mov	r0, r3
 800a608:	f000 ffa6 	bl	800b558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a60c:	2301      	movs	r3, #1
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a610:	f001 ff9c 	bl	800c54c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a614:	f000 fd16 	bl	800b044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a618:	f001 ff66 	bl	800c4e8 <vPortEnterCritical>
 800a61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a622:	b25b      	sxtb	r3, r3
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d103      	bne.n	800a632 <xQueueSemaphoreTake+0x142>
 800a62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a638:	b25b      	sxtb	r3, r3
 800a63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63e:	d103      	bne.n	800a648 <xQueueSemaphoreTake+0x158>
 800a640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a648:	f001 ff80 	bl	800c54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a64c:	463a      	mov	r2, r7
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f000 ff95 	bl	800b584 <xTaskCheckForTimeOut>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d132      	bne.n	800a6c6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a660:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a662:	f000 f9f5 	bl	800aa50 <prvIsQueueEmpty>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d026      	beq.n	800a6ba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d109      	bne.n	800a688 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a674:	f001 ff38 	bl	800c4e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 f8e5 	bl	800b84c <xTaskPriorityInherit>
 800a682:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a684:	f001 ff62 	bl	800c54c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68a:	3324      	adds	r3, #36	@ 0x24
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f000 feab 	bl	800b3ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a696:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a698:	f000 f988 	bl	800a9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a69c:	f000 fce0 	bl	800b060 <xTaskResumeAll>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f47f af67 	bne.w	800a576 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a6a8:	4b18      	ldr	r3, [pc, #96]	@ (800a70c <xQueueSemaphoreTake+0x21c>)
 800a6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	e75d      	b.n	800a576 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a6ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6bc:	f000 f976 	bl	800a9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6c0:	f000 fcce 	bl	800b060 <xTaskResumeAll>
 800a6c4:	e757      	b.n	800a576 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a6c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6c8:	f000 f970 	bl	800a9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6cc:	f000 fcc8 	bl	800b060 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6d2:	f000 f9bd 	bl	800aa50 <prvIsQueueEmpty>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f43f af4c 	beq.w	800a576 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00d      	beq.n	800a700 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a6e4:	f001 ff00 	bl	800c4e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6ea:	f000 f8b7 	bl	800a85c <prvGetDisinheritPriorityAfterTimeout>
 800a6ee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 f980 	bl	800b9fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6fc:	f001 ff26 	bl	800c54c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a702:	4618      	mov	r0, r3
 800a704:	3738      	adds	r7, #56	@ 0x38
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	e000ed04 	.word	0xe000ed04

0800a710 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08e      	sub	sp, #56	@ 0x38
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10b      	bne.n	800a73e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	623b      	str	r3, [r7, #32]
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	e7fd      	b.n	800a73a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d103      	bne.n	800a74c <xQueueReceiveFromISR+0x3c>
 800a744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <xQueueReceiveFromISR+0x40>
 800a74c:	2301      	movs	r3, #1
 800a74e:	e000      	b.n	800a752 <xQueueReceiveFromISR+0x42>
 800a750:	2300      	movs	r3, #0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10b      	bne.n	800a76e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	61fb      	str	r3, [r7, #28]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a76e:	f001 ff9b 	bl	800c6a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a772:	f3ef 8211 	mrs	r2, BASEPRI
 800a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	61ba      	str	r2, [r7, #24]
 800a788:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a78a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a792:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a796:	2b00      	cmp	r3, #0
 800a798:	d02f      	beq.n	800a7fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7a4:	68b9      	ldr	r1, [r7, #8]
 800a7a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7a8:	f000 f8da 	bl	800a960 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ae:	1e5a      	subs	r2, r3, #1
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a7b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7bc:	d112      	bne.n	800a7e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d016      	beq.n	800a7f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c8:	3310      	adds	r3, #16
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 fe60 	bl	800b490 <xTaskRemoveFromEventList>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00e      	beq.n	800a7f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00b      	beq.n	800a7f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e007      	b.n	800a7f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	b25a      	sxtb	r2, r3
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f8:	e001      	b.n	800a7fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a800:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f383 8811 	msr	BASEPRI, r3
}
 800a808:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3738      	adds	r7, #56	@ 0x38
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <vQueueDelete+0x2a>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60bb      	str	r3, [r7, #8]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f95e 	bl	800ab00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d102      	bne.n	800a854 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f002 f83a 	bl	800c8c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d006      	beq.n	800a87a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	e001      	b.n	800a87e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a87e:	68fb      	ldr	r3, [r7, #12]
	}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a898:	2300      	movs	r3, #0
 800a89a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10d      	bne.n	800a8c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d14d      	bne.n	800a94e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f001 f830 	bl	800b91c <xTaskPriorityDisinherit>
 800a8bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	609a      	str	r2, [r3, #8]
 800a8c4:	e043      	b.n	800a94e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d119      	bne.n	800a900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6858      	ldr	r0, [r3, #4]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68b9      	ldr	r1, [r7, #8]
 800a8d8:	f003 f835 	bl	800d946 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d32b      	bcc.n	800a94e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	605a      	str	r2, [r3, #4]
 800a8fe:	e026      	b.n	800a94e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	68d8      	ldr	r0, [r3, #12]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a908:	461a      	mov	r2, r3
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	f003 f81b 	bl	800d946 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a918:	425b      	negs	r3, r3
 800a91a:	441a      	add	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68da      	ldr	r2, [r3, #12]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d207      	bcs.n	800a93c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a934:	425b      	negs	r3, r3
 800a936:	441a      	add	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d105      	bne.n	800a94e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a956:	697b      	ldr	r3, [r7, #20]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d018      	beq.n	800a9a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68da      	ldr	r2, [r3, #12]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a97a:	441a      	add	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d303      	bcc.n	800a994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68d9      	ldr	r1, [r3, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a99c:	461a      	mov	r2, r3
 800a99e:	6838      	ldr	r0, [r7, #0]
 800a9a0:	f002 ffd1 	bl	800d946 <memcpy>
	}
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9b4:	f001 fd98 	bl	800c4e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9c0:	e011      	b.n	800a9e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d012      	beq.n	800a9f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3324      	adds	r3, #36	@ 0x24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fd5e 	bl	800b490 <xTaskRemoveFromEventList>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9da:	f000 fe37 	bl	800b64c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dce9      	bgt.n	800a9c2 <prvUnlockQueue+0x16>
 800a9ee:	e000      	b.n	800a9f2 <prvUnlockQueue+0x46>
					break;
 800a9f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	22ff      	movs	r2, #255	@ 0xff
 800a9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a9fa:	f001 fda7 	bl	800c54c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9fe:	f001 fd73 	bl	800c4e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa0a:	e011      	b.n	800aa30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d012      	beq.n	800aa3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3310      	adds	r3, #16
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fd39 	bl	800b490 <xTaskRemoveFromEventList>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa24:	f000 fe12 	bl	800b64c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dce9      	bgt.n	800aa0c <prvUnlockQueue+0x60>
 800aa38:	e000      	b.n	800aa3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	22ff      	movs	r2, #255	@ 0xff
 800aa40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa44:	f001 fd82 	bl	800c54c <vPortExitCritical>
}
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa58:	f001 fd46 	bl	800c4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	e001      	b.n	800aa6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa6e:	f001 fd6d 	bl	800c54c <vPortExitCritical>

	return xReturn;
 800aa72:	68fb      	ldr	r3, [r7, #12]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa84:	f001 fd30 	bl	800c4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d102      	bne.n	800aa9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa94:	2301      	movs	r3, #1
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	e001      	b.n	800aa9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa9e:	f001 fd55 	bl	800c54c <vPortExitCritical>

	return xReturn;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	e014      	b.n	800aae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aabc:	4a0f      	ldr	r2, [pc, #60]	@ (800aafc <vQueueAddToRegistry+0x50>)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10b      	bne.n	800aae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aac8:	490c      	ldr	r1, [pc, #48]	@ (800aafc <vQueueAddToRegistry+0x50>)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aad2:	4a0a      	ldr	r2, [pc, #40]	@ (800aafc <vQueueAddToRegistry+0x50>)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	4413      	add	r3, r2
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aade:	e006      	b.n	800aaee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3301      	adds	r3, #1
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b07      	cmp	r3, #7
 800aaea:	d9e7      	bls.n	800aabc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	20001dac 	.word	0x20001dac

0800ab00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	e016      	b.n	800ab3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab0e:	4a10      	ldr	r2, [pc, #64]	@ (800ab50 <vQueueUnregisterQueue+0x50>)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	00db      	lsls	r3, r3, #3
 800ab14:	4413      	add	r3, r2
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d10b      	bne.n	800ab36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ab50 <vQueueUnregisterQueue+0x50>)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2100      	movs	r1, #0
 800ab24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ab28:	4a09      	ldr	r2, [pc, #36]	@ (800ab50 <vQueueUnregisterQueue+0x50>)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	4413      	add	r3, r2
 800ab30:	2200      	movs	r2, #0
 800ab32:	605a      	str	r2, [r3, #4]
				break;
 800ab34:	e006      	b.n	800ab44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b07      	cmp	r3, #7
 800ab40:	d9e5      	bls.n	800ab0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	20001dac 	.word	0x20001dac

0800ab54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab64:	f001 fcc0 	bl	800c4e8 <vPortEnterCritical>
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab6e:	b25b      	sxtb	r3, r3
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d103      	bne.n	800ab7e <vQueueWaitForMessageRestricted+0x2a>
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab84:	b25b      	sxtb	r3, r3
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8a:	d103      	bne.n	800ab94 <vQueueWaitForMessageRestricted+0x40>
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab94:	f001 fcda 	bl	800c54c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d106      	bne.n	800abae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	3324      	adds	r3, #36	@ 0x24
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 fc45 	bl	800b438 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800abae:	6978      	ldr	r0, [r7, #20]
 800abb0:	f7ff fefc 	bl	800a9ac <prvUnlockQueue>
	}
 800abb4:	bf00      	nop
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08e      	sub	sp, #56	@ 0x38
 800abc0:	af04      	add	r7, sp, #16
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10b      	bne.n	800abe8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	623b      	str	r3, [r7, #32]
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10b      	bne.n	800ac06 <xTaskCreateStatic+0x4a>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	61fb      	str	r3, [r7, #28]
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	e7fd      	b.n	800ac02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac06:	235c      	movs	r3, #92	@ 0x5c
 800ac08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac0e:	d00b      	beq.n	800ac28 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	61bb      	str	r3, [r7, #24]
}
 800ac22:	bf00      	nop
 800ac24:	bf00      	nop
 800ac26:	e7fd      	b.n	800ac24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01e      	beq.n	800ac6e <xTaskCreateStatic+0xb2>
 800ac30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d01b      	beq.n	800ac6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9303      	str	r3, [sp, #12]
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	9302      	str	r3, [sp, #8]
 800ac50:	f107 0314 	add.w	r3, r7, #20
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 f850 	bl	800ad06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac68:	f000 f8de 	bl	800ae28 <prvAddNewTaskToReadyList>
 800ac6c:	e001      	b.n	800ac72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac72:	697b      	ldr	r3, [r7, #20]
	}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3728      	adds	r7, #40	@ 0x28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	@ 0x30
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac8c:	88fb      	ldrh	r3, [r7, #6]
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4618      	mov	r0, r3
 800ac92:	f001 fd4b 	bl	800c72c <pvPortMalloc>
 800ac96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00e      	beq.n	800acbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac9e:	205c      	movs	r0, #92	@ 0x5c
 800aca0:	f001 fd44 	bl	800c72c <pvPortMalloc>
 800aca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	631a      	str	r2, [r3, #48]	@ 0x30
 800acb2:	e005      	b.n	800acc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acb4:	6978      	ldr	r0, [r7, #20]
 800acb6:	f001 fe07 	bl	800c8c8 <vPortFree>
 800acba:	e001      	b.n	800acc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acbc:	2300      	movs	r3, #0
 800acbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d017      	beq.n	800acf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acce:	88fa      	ldrh	r2, [r7, #6]
 800acd0:	2300      	movs	r3, #0
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	9302      	str	r3, [sp, #8]
 800acd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68b9      	ldr	r1, [r7, #8]
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f000 f80e 	bl	800ad06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acea:	69f8      	ldr	r0, [r7, #28]
 800acec:	f000 f89c 	bl	800ae28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acf0:	2301      	movs	r3, #1
 800acf2:	61bb      	str	r3, [r7, #24]
 800acf4:	e002      	b.n	800acfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295
 800acfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acfc:	69bb      	ldr	r3, [r7, #24]
	}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3720      	adds	r7, #32
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b088      	sub	sp, #32
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	21a5      	movs	r1, #165	@ 0xa5
 800ad20:	f002 fd92 	bl	800d848 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	f023 0307 	bic.w	r3, r3, #7
 800ad3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	f003 0307 	and.w	r3, r3, #7
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00b      	beq.n	800ad60 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	617b      	str	r3, [r7, #20]
}
 800ad5a:	bf00      	nop
 800ad5c:	bf00      	nop
 800ad5e:	e7fd      	b.n	800ad5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d01f      	beq.n	800ada6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad66:	2300      	movs	r3, #0
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	e012      	b.n	800ad92 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	4413      	add	r3, r2
 800ad72:	7819      	ldrb	r1, [r3, #0]
 800ad74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	3334      	adds	r3, #52	@ 0x34
 800ad7c:	460a      	mov	r2, r1
 800ad7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	4413      	add	r3, r2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d006      	beq.n	800ad9a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	61fb      	str	r3, [r7, #28]
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	2b0f      	cmp	r3, #15
 800ad96:	d9e9      	bls.n	800ad6c <prvInitialiseNewTask+0x66>
 800ad98:	e000      	b.n	800ad9c <prvInitialiseNewTask+0x96>
			{
				break;
 800ad9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ada4:	e003      	b.n	800adae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ada6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800adae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb0:	2b37      	cmp	r3, #55	@ 0x37
 800adb2:	d901      	bls.n	800adb8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800adb4:	2337      	movs	r3, #55	@ 0x37
 800adb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800adb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adc2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800adc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc6:	2200      	movs	r2, #0
 800adc8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adcc:	3304      	adds	r3, #4
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fe34 	bl	8009a3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800add4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add6:	3318      	adds	r3, #24
 800add8:	4618      	mov	r0, r3
 800adda:	f7fe fe2f 	bl	8009a3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ade2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ade4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adf2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	2200      	movs	r2, #0
 800adf8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	68f9      	ldr	r1, [r7, #12]
 800ae06:	69b8      	ldr	r0, [r7, #24]
 800ae08:	f001 fa3e 	bl	800c288 <pxPortInitialiseStack>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae1e:	bf00      	nop
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae30:	f001 fb5a 	bl	800c4e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae34:	4b2d      	ldr	r3, [pc, #180]	@ (800aeec <prvAddNewTaskToReadyList+0xc4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	4a2c      	ldr	r2, [pc, #176]	@ (800aeec <prvAddNewTaskToReadyList+0xc4>)
 800ae3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae3e:	4b2c      	ldr	r3, [pc, #176]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d109      	bne.n	800ae5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae46:	4a2a      	ldr	r2, [pc, #168]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae4c:	4b27      	ldr	r3, [pc, #156]	@ (800aeec <prvAddNewTaskToReadyList+0xc4>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d110      	bne.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae54:	f000 fc1e 	bl	800b694 <prvInitialiseTaskLists>
 800ae58:	e00d      	b.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae5a:	4b26      	ldr	r3, [pc, #152]	@ (800aef4 <prvAddNewTaskToReadyList+0xcc>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae62:	4b23      	ldr	r3, [pc, #140]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d802      	bhi.n	800ae76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae70:	4a1f      	ldr	r2, [pc, #124]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae76:	4b20      	ldr	r3, [pc, #128]	@ (800aef8 <prvAddNewTaskToReadyList+0xd0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	4a1e      	ldr	r2, [pc, #120]	@ (800aef8 <prvAddNewTaskToReadyList+0xd0>)
 800ae7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae80:	4b1d      	ldr	r3, [pc, #116]	@ (800aef8 <prvAddNewTaskToReadyList+0xd0>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae8c:	4b1b      	ldr	r3, [pc, #108]	@ (800aefc <prvAddNewTaskToReadyList+0xd4>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d903      	bls.n	800ae9c <prvAddNewTaskToReadyList+0x74>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae98:	4a18      	ldr	r2, [pc, #96]	@ (800aefc <prvAddNewTaskToReadyList+0xd4>)
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4a15      	ldr	r2, [pc, #84]	@ (800af00 <prvAddNewTaskToReadyList+0xd8>)
 800aeaa:	441a      	add	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	f7fe fdcf 	bl	8009a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aeb8:	f001 fb48 	bl	800c54c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aebc:	4b0d      	ldr	r3, [pc, #52]	@ (800aef4 <prvAddNewTaskToReadyList+0xcc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00e      	beq.n	800aee2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aec4:	4b0a      	ldr	r3, [pc, #40]	@ (800aef0 <prvAddNewTaskToReadyList+0xc8>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	429a      	cmp	r2, r3
 800aed0:	d207      	bcs.n	800aee2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aed2:	4b0c      	ldr	r3, [pc, #48]	@ (800af04 <prvAddNewTaskToReadyList+0xdc>)
 800aed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee2:	bf00      	nop
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	200022c0 	.word	0x200022c0
 800aef0:	20001dec 	.word	0x20001dec
 800aef4:	200022cc 	.word	0x200022cc
 800aef8:	200022dc 	.word	0x200022dc
 800aefc:	200022c8 	.word	0x200022c8
 800af00:	20001df0 	.word	0x20001df0
 800af04:	e000ed04 	.word	0xe000ed04

0800af08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d018      	beq.n	800af4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af1a:	4b14      	ldr	r3, [pc, #80]	@ (800af6c <vTaskDelay+0x64>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <vTaskDelay+0x32>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	60bb      	str	r3, [r7, #8]
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop
 800af38:	e7fd      	b.n	800af36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af3a:	f000 f883 	bl	800b044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af3e:	2100      	movs	r1, #0
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fdf3 	bl	800bb2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af46:	f000 f88b 	bl	800b060 <xTaskResumeAll>
 800af4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d107      	bne.n	800af62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800af52:	4b07      	ldr	r3, [pc, #28]	@ (800af70 <vTaskDelay+0x68>)
 800af54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af62:	bf00      	nop
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	200022e8 	.word	0x200022e8
 800af70:	e000ed04 	.word	0xe000ed04

0800af74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08a      	sub	sp, #40	@ 0x28
 800af78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af82:	463a      	mov	r2, r7
 800af84:	1d39      	adds	r1, r7, #4
 800af86:	f107 0308 	add.w	r3, r7, #8
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe fd02 	bl	8009994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	9202      	str	r2, [sp, #8]
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	2300      	movs	r3, #0
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	2300      	movs	r3, #0
 800afa0:	460a      	mov	r2, r1
 800afa2:	4922      	ldr	r1, [pc, #136]	@ (800b02c <vTaskStartScheduler+0xb8>)
 800afa4:	4822      	ldr	r0, [pc, #136]	@ (800b030 <vTaskStartScheduler+0xbc>)
 800afa6:	f7ff fe09 	bl	800abbc <xTaskCreateStatic>
 800afaa:	4603      	mov	r3, r0
 800afac:	4a21      	ldr	r2, [pc, #132]	@ (800b034 <vTaskStartScheduler+0xc0>)
 800afae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afb0:	4b20      	ldr	r3, [pc, #128]	@ (800b034 <vTaskStartScheduler+0xc0>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afb8:	2301      	movs	r3, #1
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	e001      	b.n	800afc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d102      	bne.n	800afce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afc8:	f000 fe04 	bl	800bbd4 <xTimerCreateTimerTask>
 800afcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d116      	bne.n	800b002 <vTaskStartScheduler+0x8e>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	613b      	str	r3, [r7, #16]
}
 800afe6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afe8:	4b13      	ldr	r3, [pc, #76]	@ (800b038 <vTaskStartScheduler+0xc4>)
 800afea:	f04f 32ff 	mov.w	r2, #4294967295
 800afee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aff0:	4b12      	ldr	r3, [pc, #72]	@ (800b03c <vTaskStartScheduler+0xc8>)
 800aff2:	2201      	movs	r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aff6:	4b12      	ldr	r3, [pc, #72]	@ (800b040 <vTaskStartScheduler+0xcc>)
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800affc:	f001 f9d0 	bl	800c3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b000:	e00f      	b.n	800b022 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b008:	d10b      	bne.n	800b022 <vTaskStartScheduler+0xae>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	60fb      	str	r3, [r7, #12]
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	e7fd      	b.n	800b01e <vTaskStartScheduler+0xaa>
}
 800b022:	bf00      	nop
 800b024:	3718      	adds	r7, #24
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	0800f674 	.word	0x0800f674
 800b030:	0800b665 	.word	0x0800b665
 800b034:	200022e4 	.word	0x200022e4
 800b038:	200022e0 	.word	0x200022e0
 800b03c:	200022cc 	.word	0x200022cc
 800b040:	200022c4 	.word	0x200022c4

0800b044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b044:	b480      	push	{r7}
 800b046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b048:	4b04      	ldr	r3, [pc, #16]	@ (800b05c <vTaskSuspendAll+0x18>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3301      	adds	r3, #1
 800b04e:	4a03      	ldr	r2, [pc, #12]	@ (800b05c <vTaskSuspendAll+0x18>)
 800b050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b052:	bf00      	nop
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	200022e8 	.word	0x200022e8

0800b060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b06e:	4b42      	ldr	r3, [pc, #264]	@ (800b178 <xTaskResumeAll+0x118>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10b      	bne.n	800b08e <xTaskResumeAll+0x2e>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	603b      	str	r3, [r7, #0]
}
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	e7fd      	b.n	800b08a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b08e:	f001 fa2b 	bl	800c4e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b092:	4b39      	ldr	r3, [pc, #228]	@ (800b178 <xTaskResumeAll+0x118>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3b01      	subs	r3, #1
 800b098:	4a37      	ldr	r2, [pc, #220]	@ (800b178 <xTaskResumeAll+0x118>)
 800b09a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b09c:	4b36      	ldr	r3, [pc, #216]	@ (800b178 <xTaskResumeAll+0x118>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d162      	bne.n	800b16a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0a4:	4b35      	ldr	r3, [pc, #212]	@ (800b17c <xTaskResumeAll+0x11c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d05e      	beq.n	800b16a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0ac:	e02f      	b.n	800b10e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ae:	4b34      	ldr	r3, [pc, #208]	@ (800b180 <xTaskResumeAll+0x120>)
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3318      	adds	r3, #24
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fd28 	bl	8009b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fd23 	bl	8009b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ce:	4b2d      	ldr	r3, [pc, #180]	@ (800b184 <xTaskResumeAll+0x124>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d903      	bls.n	800b0de <xTaskResumeAll+0x7e>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0da:	4a2a      	ldr	r2, [pc, #168]	@ (800b184 <xTaskResumeAll+0x124>)
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4a27      	ldr	r2, [pc, #156]	@ (800b188 <xTaskResumeAll+0x128>)
 800b0ec:	441a      	add	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	f7fe fcae 	bl	8009a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0fe:	4b23      	ldr	r3, [pc, #140]	@ (800b18c <xTaskResumeAll+0x12c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b104:	429a      	cmp	r2, r3
 800b106:	d302      	bcc.n	800b10e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b108:	4b21      	ldr	r3, [pc, #132]	@ (800b190 <xTaskResumeAll+0x130>)
 800b10a:	2201      	movs	r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b10e:	4b1c      	ldr	r3, [pc, #112]	@ (800b180 <xTaskResumeAll+0x120>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1cb      	bne.n	800b0ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b11c:	f000 fb58 	bl	800b7d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b120:	4b1c      	ldr	r3, [pc, #112]	@ (800b194 <xTaskResumeAll+0x134>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d010      	beq.n	800b14e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b12c:	f000 f846 	bl	800b1bc <xTaskIncrementTick>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b136:	4b16      	ldr	r3, [pc, #88]	@ (800b190 <xTaskResumeAll+0x130>)
 800b138:	2201      	movs	r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3b01      	subs	r3, #1
 800b140:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1f1      	bne.n	800b12c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b148:	4b12      	ldr	r3, [pc, #72]	@ (800b194 <xTaskResumeAll+0x134>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b14e:	4b10      	ldr	r3, [pc, #64]	@ (800b190 <xTaskResumeAll+0x130>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d009      	beq.n	800b16a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b156:	2301      	movs	r3, #1
 800b158:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b15a:	4b0f      	ldr	r3, [pc, #60]	@ (800b198 <xTaskResumeAll+0x138>)
 800b15c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b16a:	f001 f9ef 	bl	800c54c <vPortExitCritical>

	return xAlreadyYielded;
 800b16e:	68bb      	ldr	r3, [r7, #8]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	200022e8 	.word	0x200022e8
 800b17c:	200022c0 	.word	0x200022c0
 800b180:	20002280 	.word	0x20002280
 800b184:	200022c8 	.word	0x200022c8
 800b188:	20001df0 	.word	0x20001df0
 800b18c:	20001dec 	.word	0x20001dec
 800b190:	200022d4 	.word	0x200022d4
 800b194:	200022d0 	.word	0x200022d0
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1a2:	4b05      	ldr	r3, [pc, #20]	@ (800b1b8 <xTaskGetTickCount+0x1c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1a8:	687b      	ldr	r3, [r7, #4]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	200022c4 	.word	0x200022c4

0800b1bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c6:	4b4f      	ldr	r3, [pc, #316]	@ (800b304 <xTaskIncrementTick+0x148>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f040 8090 	bne.w	800b2f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1d0:	4b4d      	ldr	r3, [pc, #308]	@ (800b308 <xTaskIncrementTick+0x14c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1d8:	4a4b      	ldr	r2, [pc, #300]	@ (800b308 <xTaskIncrementTick+0x14c>)
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d121      	bne.n	800b228 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1e4:	4b49      	ldr	r3, [pc, #292]	@ (800b30c <xTaskIncrementTick+0x150>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00b      	beq.n	800b206 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	603b      	str	r3, [r7, #0]
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	e7fd      	b.n	800b202 <xTaskIncrementTick+0x46>
 800b206:	4b41      	ldr	r3, [pc, #260]	@ (800b30c <xTaskIncrementTick+0x150>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	4b40      	ldr	r3, [pc, #256]	@ (800b310 <xTaskIncrementTick+0x154>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a3e      	ldr	r2, [pc, #248]	@ (800b30c <xTaskIncrementTick+0x150>)
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	4a3e      	ldr	r2, [pc, #248]	@ (800b310 <xTaskIncrementTick+0x154>)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	4b3e      	ldr	r3, [pc, #248]	@ (800b314 <xTaskIncrementTick+0x158>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3301      	adds	r3, #1
 800b220:	4a3c      	ldr	r2, [pc, #240]	@ (800b314 <xTaskIncrementTick+0x158>)
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	f000 fad4 	bl	800b7d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b228:	4b3b      	ldr	r3, [pc, #236]	@ (800b318 <xTaskIncrementTick+0x15c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d349      	bcc.n	800b2c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b232:	4b36      	ldr	r3, [pc, #216]	@ (800b30c <xTaskIncrementTick+0x150>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d104      	bne.n	800b246 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b23c:	4b36      	ldr	r3, [pc, #216]	@ (800b318 <xTaskIncrementTick+0x15c>)
 800b23e:	f04f 32ff 	mov.w	r2, #4294967295
 800b242:	601a      	str	r2, [r3, #0]
					break;
 800b244:	e03f      	b.n	800b2c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b246:	4b31      	ldr	r3, [pc, #196]	@ (800b30c <xTaskIncrementTick+0x150>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d203      	bcs.n	800b266 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b25e:	4a2e      	ldr	r2, [pc, #184]	@ (800b318 <xTaskIncrementTick+0x15c>)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b264:	e02f      	b.n	800b2c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	3304      	adds	r3, #4
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fc50 	bl	8009b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b274:	2b00      	cmp	r3, #0
 800b276:	d004      	beq.n	800b282 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	3318      	adds	r3, #24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fc47 	bl	8009b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b286:	4b25      	ldr	r3, [pc, #148]	@ (800b31c <xTaskIncrementTick+0x160>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d903      	bls.n	800b296 <xTaskIncrementTick+0xda>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b292:	4a22      	ldr	r2, [pc, #136]	@ (800b31c <xTaskIncrementTick+0x160>)
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29a:	4613      	mov	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b320 <xTaskIncrementTick+0x164>)
 800b2a4:	441a      	add	r2, r3
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	f7fe fbd2 	bl	8009a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b6:	4b1b      	ldr	r3, [pc, #108]	@ (800b324 <xTaskIncrementTick+0x168>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d3b8      	bcc.n	800b232 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2c4:	e7b5      	b.n	800b232 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2c6:	4b17      	ldr	r3, [pc, #92]	@ (800b324 <xTaskIncrementTick+0x168>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2cc:	4914      	ldr	r1, [pc, #80]	@ (800b320 <xTaskIncrementTick+0x164>)
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	440b      	add	r3, r1
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d901      	bls.n	800b2e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2e2:	4b11      	ldr	r3, [pc, #68]	@ (800b328 <xTaskIncrementTick+0x16c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	617b      	str	r3, [r7, #20]
 800b2ee:	e004      	b.n	800b2fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b32c <xTaskIncrementTick+0x170>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	4a0d      	ldr	r2, [pc, #52]	@ (800b32c <xTaskIncrementTick+0x170>)
 800b2f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2fa:	697b      	ldr	r3, [r7, #20]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	200022e8 	.word	0x200022e8
 800b308:	200022c4 	.word	0x200022c4
 800b30c:	20002278 	.word	0x20002278
 800b310:	2000227c 	.word	0x2000227c
 800b314:	200022d8 	.word	0x200022d8
 800b318:	200022e0 	.word	0x200022e0
 800b31c:	200022c8 	.word	0x200022c8
 800b320:	20001df0 	.word	0x20001df0
 800b324:	20001dec 	.word	0x20001dec
 800b328:	200022d4 	.word	0x200022d4
 800b32c:	200022d0 	.word	0x200022d0

0800b330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b336:	4b28      	ldr	r3, [pc, #160]	@ (800b3d8 <vTaskSwitchContext+0xa8>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b33e:	4b27      	ldr	r3, [pc, #156]	@ (800b3dc <vTaskSwitchContext+0xac>)
 800b340:	2201      	movs	r2, #1
 800b342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b344:	e042      	b.n	800b3cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b346:	4b25      	ldr	r3, [pc, #148]	@ (800b3dc <vTaskSwitchContext+0xac>)
 800b348:	2200      	movs	r2, #0
 800b34a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b34c:	4b24      	ldr	r3, [pc, #144]	@ (800b3e0 <vTaskSwitchContext+0xb0>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	e011      	b.n	800b378 <vTaskSwitchContext+0x48>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10b      	bne.n	800b372 <vTaskSwitchContext+0x42>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	607b      	str	r3, [r7, #4]
}
 800b36c:	bf00      	nop
 800b36e:	bf00      	nop
 800b370:	e7fd      	b.n	800b36e <vTaskSwitchContext+0x3e>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3b01      	subs	r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	491a      	ldr	r1, [pc, #104]	@ (800b3e4 <vTaskSwitchContext+0xb4>)
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	4613      	mov	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	440b      	add	r3, r1
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0e3      	beq.n	800b354 <vTaskSwitchContext+0x24>
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a13      	ldr	r2, [pc, #76]	@ (800b3e4 <vTaskSwitchContext+0xb4>)
 800b398:	4413      	add	r3, r2
 800b39a:	60bb      	str	r3, [r7, #8]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	605a      	str	r2, [r3, #4]
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d104      	bne.n	800b3bc <vTaskSwitchContext+0x8c>
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	605a      	str	r2, [r3, #4]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	4a09      	ldr	r2, [pc, #36]	@ (800b3e8 <vTaskSwitchContext+0xb8>)
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	4a06      	ldr	r2, [pc, #24]	@ (800b3e0 <vTaskSwitchContext+0xb0>)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6013      	str	r3, [r2, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	200022e8 	.word	0x200022e8
 800b3dc:	200022d4 	.word	0x200022d4
 800b3e0:	200022c8 	.word	0x200022c8
 800b3e4:	20001df0 	.word	0x20001df0
 800b3e8:	20001dec 	.word	0x20001dec

0800b3ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10b      	bne.n	800b414 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	60fb      	str	r3, [r7, #12]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b414:	4b07      	ldr	r3, [pc, #28]	@ (800b434 <vTaskPlaceOnEventList+0x48>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3318      	adds	r3, #24
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fe fb3e 	bl	8009a9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b422:	2101      	movs	r1, #1
 800b424:	6838      	ldr	r0, [r7, #0]
 800b426:	f000 fb81 	bl	800bb2c <prvAddCurrentTaskToDelayedList>
}
 800b42a:	bf00      	nop
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20001dec 	.word	0x20001dec

0800b438 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10b      	bne.n	800b462 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	617b      	str	r3, [r7, #20]
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b462:	4b0a      	ldr	r3, [pc, #40]	@ (800b48c <vTaskPlaceOnEventListRestricted+0x54>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3318      	adds	r3, #24
 800b468:	4619      	mov	r1, r3
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7fe faf3 	bl	8009a56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d002      	beq.n	800b47c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b476:	f04f 33ff 	mov.w	r3, #4294967295
 800b47a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	68b8      	ldr	r0, [r7, #8]
 800b480:	f000 fb54 	bl	800bb2c <prvAddCurrentTaskToDelayedList>
	}
 800b484:	bf00      	nop
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20001dec 	.word	0x20001dec

0800b490 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10b      	bne.n	800b4be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	60fb      	str	r3, [r7, #12]
}
 800b4b8:	bf00      	nop
 800b4ba:	bf00      	nop
 800b4bc:	e7fd      	b.n	800b4ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	3318      	adds	r3, #24
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fe fb24 	bl	8009b10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4c8:	4b1d      	ldr	r3, [pc, #116]	@ (800b540 <xTaskRemoveFromEventList+0xb0>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d11d      	bne.n	800b50c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fb1b 	bl	8009b10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4de:	4b19      	ldr	r3, [pc, #100]	@ (800b544 <xTaskRemoveFromEventList+0xb4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d903      	bls.n	800b4ee <xTaskRemoveFromEventList+0x5e>
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ea:	4a16      	ldr	r2, [pc, #88]	@ (800b544 <xTaskRemoveFromEventList+0xb4>)
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4a13      	ldr	r2, [pc, #76]	@ (800b548 <xTaskRemoveFromEventList+0xb8>)
 800b4fc:	441a      	add	r2, r3
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	3304      	adds	r3, #4
 800b502:	4619      	mov	r1, r3
 800b504:	4610      	mov	r0, r2
 800b506:	f7fe faa6 	bl	8009a56 <vListInsertEnd>
 800b50a:	e005      	b.n	800b518 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	3318      	adds	r3, #24
 800b510:	4619      	mov	r1, r3
 800b512:	480e      	ldr	r0, [pc, #56]	@ (800b54c <xTaskRemoveFromEventList+0xbc>)
 800b514:	f7fe fa9f 	bl	8009a56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b51c:	4b0c      	ldr	r3, [pc, #48]	@ (800b550 <xTaskRemoveFromEventList+0xc0>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b522:	429a      	cmp	r2, r3
 800b524:	d905      	bls.n	800b532 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b526:	2301      	movs	r3, #1
 800b528:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b52a:	4b0a      	ldr	r3, [pc, #40]	@ (800b554 <xTaskRemoveFromEventList+0xc4>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	e001      	b.n	800b536 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b532:	2300      	movs	r3, #0
 800b534:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b536:	697b      	ldr	r3, [r7, #20]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	200022e8 	.word	0x200022e8
 800b544:	200022c8 	.word	0x200022c8
 800b548:	20001df0 	.word	0x20001df0
 800b54c:	20002280 	.word	0x20002280
 800b550:	20001dec 	.word	0x20001dec
 800b554:	200022d4 	.word	0x200022d4

0800b558 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b560:	4b06      	ldr	r3, [pc, #24]	@ (800b57c <vTaskInternalSetTimeOutState+0x24>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b568:	4b05      	ldr	r3, [pc, #20]	@ (800b580 <vTaskInternalSetTimeOutState+0x28>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	605a      	str	r2, [r3, #4]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	200022d8 	.word	0x200022d8
 800b580:	200022c4 	.word	0x200022c4

0800b584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10b      	bne.n	800b5ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	613b      	str	r3, [r7, #16]
}
 800b5a6:	bf00      	nop
 800b5a8:	bf00      	nop
 800b5aa:	e7fd      	b.n	800b5a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10b      	bne.n	800b5ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	60fb      	str	r3, [r7, #12]
}
 800b5c4:	bf00      	nop
 800b5c6:	bf00      	nop
 800b5c8:	e7fd      	b.n	800b5c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b5ca:	f000 ff8d 	bl	800c4e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b644 <xTaskCheckForTimeOut+0xc0>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d102      	bne.n	800b5ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e023      	b.n	800b636 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b15      	ldr	r3, [pc, #84]	@ (800b648 <xTaskCheckForTimeOut+0xc4>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d007      	beq.n	800b60a <xTaskCheckForTimeOut+0x86>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	429a      	cmp	r2, r3
 800b602:	d302      	bcc.n	800b60a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	61fb      	str	r3, [r7, #28]
 800b608:	e015      	b.n	800b636 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	429a      	cmp	r2, r3
 800b612:	d20b      	bcs.n	800b62c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ff99 	bl	800b558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	e004      	b.n	800b636 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b636:	f000 ff89 	bl	800c54c <vPortExitCritical>

	return xReturn;
 800b63a:	69fb      	ldr	r3, [r7, #28]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	200022c4 	.word	0x200022c4
 800b648:	200022d8 	.word	0x200022d8

0800b64c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b650:	4b03      	ldr	r3, [pc, #12]	@ (800b660 <vTaskMissedYield+0x14>)
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	200022d4 	.word	0x200022d4

0800b664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b66c:	f000 f852 	bl	800b714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b670:	4b06      	ldr	r3, [pc, #24]	@ (800b68c <prvIdleTask+0x28>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d9f9      	bls.n	800b66c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b678:	4b05      	ldr	r3, [pc, #20]	@ (800b690 <prvIdleTask+0x2c>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b688:	e7f0      	b.n	800b66c <prvIdleTask+0x8>
 800b68a:	bf00      	nop
 800b68c:	20001df0 	.word	0x20001df0
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	e00c      	b.n	800b6ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a12      	ldr	r2, [pc, #72]	@ (800b6f4 <prvInitialiseTaskLists+0x60>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe f9a4 	bl	80099fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b37      	cmp	r3, #55	@ 0x37
 800b6be:	d9ef      	bls.n	800b6a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6c0:	480d      	ldr	r0, [pc, #52]	@ (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	f7fe f99b 	bl	80099fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c6:	480d      	ldr	r0, [pc, #52]	@ (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6c8:	f7fe f998 	bl	80099fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6cc:	480c      	ldr	r0, [pc, #48]	@ (800b700 <prvInitialiseTaskLists+0x6c>)
 800b6ce:	f7fe f995 	bl	80099fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6d2:	480c      	ldr	r0, [pc, #48]	@ (800b704 <prvInitialiseTaskLists+0x70>)
 800b6d4:	f7fe f992 	bl	80099fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d8:	480b      	ldr	r0, [pc, #44]	@ (800b708 <prvInitialiseTaskLists+0x74>)
 800b6da:	f7fe f98f 	bl	80099fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6de:	4b0b      	ldr	r3, [pc, #44]	@ (800b70c <prvInitialiseTaskLists+0x78>)
 800b6e0:	4a05      	ldr	r2, [pc, #20]	@ (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b710 <prvInitialiseTaskLists+0x7c>)
 800b6e6:	4a05      	ldr	r2, [pc, #20]	@ (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20001df0 	.word	0x20001df0
 800b6f8:	20002250 	.word	0x20002250
 800b6fc:	20002264 	.word	0x20002264
 800b700:	20002280 	.word	0x20002280
 800b704:	20002294 	.word	0x20002294
 800b708:	200022ac 	.word	0x200022ac
 800b70c:	20002278 	.word	0x20002278
 800b710:	2000227c 	.word	0x2000227c

0800b714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b71a:	e019      	b.n	800b750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b71c:	f000 fee4 	bl	800c4e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b720:	4b10      	ldr	r3, [pc, #64]	@ (800b764 <prvCheckTasksWaitingTermination+0x50>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3304      	adds	r3, #4
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe f9ef 	bl	8009b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b732:	4b0d      	ldr	r3, [pc, #52]	@ (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3b01      	subs	r3, #1
 800b738:	4a0b      	ldr	r2, [pc, #44]	@ (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b73a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b73c:	4b0b      	ldr	r3, [pc, #44]	@ (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3b01      	subs	r3, #1
 800b742:	4a0a      	ldr	r2, [pc, #40]	@ (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b746:	f000 ff01 	bl	800c54c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f810 	bl	800b770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b750:	4b06      	ldr	r3, [pc, #24]	@ (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e1      	bne.n	800b71c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20002294 	.word	0x20002294
 800b768:	200022c0 	.word	0x200022c0
 800b76c:	200022a8 	.word	0x200022a8

0800b770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d108      	bne.n	800b794 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b786:	4618      	mov	r0, r3
 800b788:	f001 f89e 	bl	800c8c8 <vPortFree>
				vPortFree( pxTCB );
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 f89b 	bl	800c8c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b792:	e019      	b.n	800b7c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d103      	bne.n	800b7a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 f892 	bl	800c8c8 <vPortFree>
	}
 800b7a4:	e010      	b.n	800b7c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d00b      	beq.n	800b7c8 <prvDeleteTCB+0x58>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	60fb      	str	r3, [r7, #12]
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	e7fd      	b.n	800b7c4 <prvDeleteTCB+0x54>
	}
 800b7c8:	bf00      	nop
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b808 <prvResetNextTaskUnblockTime+0x38>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d104      	bne.n	800b7ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b80c <prvResetNextTaskUnblockTime+0x3c>)
 800b7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7e8:	e008      	b.n	800b7fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ea:	4b07      	ldr	r3, [pc, #28]	@ (800b808 <prvResetNextTaskUnblockTime+0x38>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	4a04      	ldr	r2, [pc, #16]	@ (800b80c <prvResetNextTaskUnblockTime+0x3c>)
 800b7fa:	6013      	str	r3, [r2, #0]
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	20002278 	.word	0x20002278
 800b80c:	200022e0 	.word	0x200022e0

0800b810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b816:	4b0b      	ldr	r3, [pc, #44]	@ (800b844 <xTaskGetSchedulerState+0x34>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d102      	bne.n	800b824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b81e:	2301      	movs	r3, #1
 800b820:	607b      	str	r3, [r7, #4]
 800b822:	e008      	b.n	800b836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b824:	4b08      	ldr	r3, [pc, #32]	@ (800b848 <xTaskGetSchedulerState+0x38>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d102      	bne.n	800b832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b82c:	2302      	movs	r3, #2
 800b82e:	607b      	str	r3, [r7, #4]
 800b830:	e001      	b.n	800b836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b832:	2300      	movs	r3, #0
 800b834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b836:	687b      	ldr	r3, [r7, #4]
	}
 800b838:	4618      	mov	r0, r3
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	200022cc 	.word	0x200022cc
 800b848:	200022e8 	.word	0x200022e8

0800b84c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b858:	2300      	movs	r3, #0
 800b85a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d051      	beq.n	800b906 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b866:	4b2a      	ldr	r3, [pc, #168]	@ (800b910 <xTaskPriorityInherit+0xc4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d241      	bcs.n	800b8f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	2b00      	cmp	r3, #0
 800b876:	db06      	blt.n	800b886 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b878:	4b25      	ldr	r3, [pc, #148]	@ (800b910 <xTaskPriorityInherit+0xc4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6959      	ldr	r1, [r3, #20]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4a1f      	ldr	r2, [pc, #124]	@ (800b914 <xTaskPriorityInherit+0xc8>)
 800b898:	4413      	add	r3, r2
 800b89a:	4299      	cmp	r1, r3
 800b89c:	d122      	bne.n	800b8e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe f934 	bl	8009b10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8a8:	4b19      	ldr	r3, [pc, #100]	@ (800b910 <xTaskPriorityInherit+0xc4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8b6:	4b18      	ldr	r3, [pc, #96]	@ (800b918 <xTaskPriorityInherit+0xcc>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d903      	bls.n	800b8c6 <xTaskPriorityInherit+0x7a>
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c2:	4a15      	ldr	r2, [pc, #84]	@ (800b918 <xTaskPriorityInherit+0xcc>)
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4a10      	ldr	r2, [pc, #64]	@ (800b914 <xTaskPriorityInherit+0xc8>)
 800b8d4:	441a      	add	r2, r3
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	3304      	adds	r3, #4
 800b8da:	4619      	mov	r1, r3
 800b8dc:	4610      	mov	r0, r2
 800b8de:	f7fe f8ba 	bl	8009a56 <vListInsertEnd>
 800b8e2:	e004      	b.n	800b8ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b910 <xTaskPriorityInherit+0xc4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	60fb      	str	r3, [r7, #12]
 800b8f2:	e008      	b.n	800b906 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8f8:	4b05      	ldr	r3, [pc, #20]	@ (800b910 <xTaskPriorityInherit+0xc4>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d201      	bcs.n	800b906 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b902:	2301      	movs	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b906:	68fb      	ldr	r3, [r7, #12]
	}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	20001dec 	.word	0x20001dec
 800b914:	20001df0 	.word	0x20001df0
 800b918:	200022c8 	.word	0x200022c8

0800b91c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b928:	2300      	movs	r3, #0
 800b92a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d058      	beq.n	800b9e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b932:	4b2f      	ldr	r3, [pc, #188]	@ (800b9f0 <xTaskPriorityDisinherit+0xd4>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d00b      	beq.n	800b954 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60fb      	str	r3, [r7, #12]
}
 800b94e:	bf00      	nop
 800b950:	bf00      	nop
 800b952:	e7fd      	b.n	800b950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10b      	bne.n	800b974 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	60bb      	str	r3, [r7, #8]
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	e7fd      	b.n	800b970 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b978:	1e5a      	subs	r2, r3, #1
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b986:	429a      	cmp	r2, r3
 800b988:	d02c      	beq.n	800b9e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d128      	bne.n	800b9e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	3304      	adds	r3, #4
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe f8ba 	bl	8009b10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b9f4 <xTaskPriorityDisinherit+0xd8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d903      	bls.n	800b9c4 <xTaskPriorityDisinherit+0xa8>
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c0:	4a0c      	ldr	r2, [pc, #48]	@ (800b9f4 <xTaskPriorityDisinherit+0xd8>)
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4a09      	ldr	r2, [pc, #36]	@ (800b9f8 <xTaskPriorityDisinherit+0xdc>)
 800b9d2:	441a      	add	r2, r3
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4610      	mov	r0, r2
 800b9dc:	f7fe f83b 	bl	8009a56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9e4:	697b      	ldr	r3, [r7, #20]
	}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20001dec 	.word	0x20001dec
 800b9f4:	200022c8 	.word	0x200022c8
 800b9f8:	20001df0 	.word	0x20001df0

0800b9fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d06c      	beq.n	800baee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10b      	bne.n	800ba34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	60fb      	str	r3, [r7, #12]
}
 800ba2e:	bf00      	nop
 800ba30:	bf00      	nop
 800ba32:	e7fd      	b.n	800ba30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d902      	bls.n	800ba44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	61fb      	str	r3, [r7, #28]
 800ba42:	e002      	b.n	800ba4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d04c      	beq.n	800baee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d147      	bne.n	800baee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ba5e:	4b26      	ldr	r3, [pc, #152]	@ (800baf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d10b      	bne.n	800ba80 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ba68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	60bb      	str	r3, [r7, #8]
}
 800ba7a:	bf00      	nop
 800ba7c:	bf00      	nop
 800ba7e:	e7fd      	b.n	800ba7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	69fa      	ldr	r2, [r7, #28]
 800ba8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	db04      	blt.n	800ba9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	6959      	ldr	r1, [r3, #20]
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	4613      	mov	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4a13      	ldr	r2, [pc, #76]	@ (800bafc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800baae:	4413      	add	r3, r2
 800bab0:	4299      	cmp	r1, r3
 800bab2:	d11c      	bne.n	800baee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	3304      	adds	r3, #4
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe f829 	bl	8009b10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac2:	4b0f      	ldr	r3, [pc, #60]	@ (800bb00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d903      	bls.n	800bad2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bace:	4a0c      	ldr	r2, [pc, #48]	@ (800bb00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad6:	4613      	mov	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4a07      	ldr	r2, [pc, #28]	@ (800bafc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bae0:	441a      	add	r2, r3
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	3304      	adds	r3, #4
 800bae6:	4619      	mov	r1, r3
 800bae8:	4610      	mov	r0, r2
 800baea:	f7fd ffb4 	bl	8009a56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800baee:	bf00      	nop
 800baf0:	3720      	adds	r7, #32
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20001dec 	.word	0x20001dec
 800bafc:	20001df0 	.word	0x20001df0
 800bb00:	200022c8 	.word	0x200022c8

0800bb04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb04:	b480      	push	{r7}
 800bb06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb08:	4b07      	ldr	r3, [pc, #28]	@ (800bb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d004      	beq.n	800bb1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb10:	4b05      	ldr	r3, [pc, #20]	@ (800bb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb16:	3201      	adds	r2, #1
 800bb18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bb1a:	4b03      	ldr	r3, [pc, #12]	@ (800bb28 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
	}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	20001dec 	.word	0x20001dec

0800bb2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb36:	4b21      	ldr	r3, [pc, #132]	@ (800bbbc <prvAddCurrentTaskToDelayedList+0x90>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb3c:	4b20      	ldr	r3, [pc, #128]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fd ffe4 	bl	8009b10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4e:	d10a      	bne.n	800bb66 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d007      	beq.n	800bb66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb56:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4819      	ldr	r0, [pc, #100]	@ (800bbc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb60:	f7fd ff79 	bl	8009a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb64:	e026      	b.n	800bbb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb6e:	4b14      	ldr	r3, [pc, #80]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d209      	bcs.n	800bb92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb7e:	4b12      	ldr	r3, [pc, #72]	@ (800bbc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7fd ff87 	bl	8009a9e <vListInsert>
}
 800bb90:	e010      	b.n	800bbb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb92:	4b0e      	ldr	r3, [pc, #56]	@ (800bbcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	4610      	mov	r0, r2
 800bba0:	f7fd ff7d 	bl	8009a9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bba4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d202      	bcs.n	800bbb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bbae:	4a08      	ldr	r2, [pc, #32]	@ (800bbd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	6013      	str	r3, [r2, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	200022c4 	.word	0x200022c4
 800bbc0:	20001dec 	.word	0x20001dec
 800bbc4:	200022ac 	.word	0x200022ac
 800bbc8:	2000227c 	.word	0x2000227c
 800bbcc:	20002278 	.word	0x20002278
 800bbd0:	200022e0 	.word	0x200022e0

0800bbd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	@ 0x28
 800bbd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bbde:	f000 fb13 	bl	800c208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bbe2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc58 <xTimerCreateTimerTask+0x84>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d021      	beq.n	800bc2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bbea:	2300      	movs	r3, #0
 800bbec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbf2:	1d3a      	adds	r2, r7, #4
 800bbf4:	f107 0108 	add.w	r1, r7, #8
 800bbf8:	f107 030c 	add.w	r3, r7, #12
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fd fee3 	bl	80099c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc02:	6879      	ldr	r1, [r7, #4]
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	9202      	str	r2, [sp, #8]
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	2300      	movs	r3, #0
 800bc12:	460a      	mov	r2, r1
 800bc14:	4911      	ldr	r1, [pc, #68]	@ (800bc5c <xTimerCreateTimerTask+0x88>)
 800bc16:	4812      	ldr	r0, [pc, #72]	@ (800bc60 <xTimerCreateTimerTask+0x8c>)
 800bc18:	f7fe ffd0 	bl	800abbc <xTaskCreateStatic>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	4a11      	ldr	r2, [pc, #68]	@ (800bc64 <xTimerCreateTimerTask+0x90>)
 800bc20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc22:	4b10      	ldr	r3, [pc, #64]	@ (800bc64 <xTimerCreateTimerTask+0x90>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10b      	bne.n	800bc4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	613b      	str	r3, [r7, #16]
}
 800bc46:	bf00      	nop
 800bc48:	bf00      	nop
 800bc4a:	e7fd      	b.n	800bc48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc4c:	697b      	ldr	r3, [r7, #20]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	2000231c 	.word	0x2000231c
 800bc5c:	0800f67c 	.word	0x0800f67c
 800bc60:	0800bda1 	.word	0x0800bda1
 800bc64:	20002320 	.word	0x20002320

0800bc68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08a      	sub	sp, #40	@ 0x28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10b      	bne.n	800bc98 <xTimerGenericCommand+0x30>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	623b      	str	r3, [r7, #32]
}
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
 800bc96:	e7fd      	b.n	800bc94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc98:	4b19      	ldr	r3, [pc, #100]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d02a      	beq.n	800bcf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b05      	cmp	r3, #5
 800bcb0:	dc18      	bgt.n	800bce4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bcb2:	f7ff fdad 	bl	800b810 <xTaskGetSchedulerState>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d109      	bne.n	800bcd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bcbc:	4b10      	ldr	r3, [pc, #64]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bcbe:	6818      	ldr	r0, [r3, #0]
 800bcc0:	f107 0110 	add.w	r1, r7, #16
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcc8:	f7fe f900 	bl	8009ecc <xQueueGenericSend>
 800bccc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bcce:	e012      	b.n	800bcf6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	f107 0110 	add.w	r1, r7, #16
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f7fe f8f6 	bl	8009ecc <xQueueGenericSend>
 800bce0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bce2:	e008      	b.n	800bcf6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bce4:	4b06      	ldr	r3, [pc, #24]	@ (800bd00 <xTimerGenericCommand+0x98>)
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	f107 0110 	add.w	r1, r7, #16
 800bcec:	2300      	movs	r3, #0
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	f7fe f9ee 	bl	800a0d0 <xQueueGenericSendFromISR>
 800bcf4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3728      	adds	r7, #40	@ 0x28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	2000231c 	.word	0x2000231c

0800bd04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd0e:	4b23      	ldr	r3, [pc, #140]	@ (800bd9c <prvProcessExpiredTimer+0x98>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fd fef7 	bl	8009b10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd28:	f003 0304 	and.w	r3, r3, #4
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d023      	beq.n	800bd78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	699a      	ldr	r2, [r3, #24]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	18d1      	adds	r1, r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	6978      	ldr	r0, [r7, #20]
 800bd3e:	f000 f8d5 	bl	800beec <prvInsertTimerInActiveList>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d020      	beq.n	800bd8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	2100      	movs	r1, #0
 800bd52:	6978      	ldr	r0, [r7, #20]
 800bd54:	f7ff ff88 	bl	800bc68 <xTimerGenericCommand>
 800bd58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d114      	bne.n	800bd8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	60fb      	str	r3, [r7, #12]
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	e7fd      	b.n	800bd74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	6978      	ldr	r0, [r7, #20]
 800bd90:	4798      	blx	r3
}
 800bd92:	bf00      	nop
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20002314 	.word	0x20002314

0800bda0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bda8:	f107 0308 	add.w	r3, r7, #8
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 f859 	bl	800be64 <prvGetNextExpireTime>
 800bdb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 f805 	bl	800bdc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bdbe:	f000 f8d7 	bl	800bf70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdc2:	bf00      	nop
 800bdc4:	e7f0      	b.n	800bda8 <prvTimerTask+0x8>
	...

0800bdc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bdd2:	f7ff f937 	bl	800b044 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdd6:	f107 0308 	add.w	r3, r7, #8
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f866 	bl	800beac <prvSampleTimeNow>
 800bde0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d130      	bne.n	800be4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <prvProcessTimerOrBlockTask+0x3c>
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d806      	bhi.n	800be04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bdf6:	f7ff f933 	bl	800b060 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff ff81 	bl	800bd04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be02:	e024      	b.n	800be4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d008      	beq.n	800be1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be0a:	4b13      	ldr	r3, [pc, #76]	@ (800be58 <prvProcessTimerOrBlockTask+0x90>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <prvProcessTimerOrBlockTask+0x50>
 800be14:	2301      	movs	r3, #1
 800be16:	e000      	b.n	800be1a <prvProcessTimerOrBlockTask+0x52>
 800be18:	2300      	movs	r3, #0
 800be1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be1c:	4b0f      	ldr	r3, [pc, #60]	@ (800be5c <prvProcessTimerOrBlockTask+0x94>)
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4619      	mov	r1, r3
 800be2a:	f7fe fe93 	bl	800ab54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be2e:	f7ff f917 	bl	800b060 <xTaskResumeAll>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be38:	4b09      	ldr	r3, [pc, #36]	@ (800be60 <prvProcessTimerOrBlockTask+0x98>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
}
 800be48:	e001      	b.n	800be4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be4a:	f7ff f909 	bl	800b060 <xTaskResumeAll>
}
 800be4e:	bf00      	nop
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20002318 	.word	0x20002318
 800be5c:	2000231c 	.word	0x2000231c
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be6c:	4b0e      	ldr	r3, [pc, #56]	@ (800bea8 <prvGetNextExpireTime+0x44>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <prvGetNextExpireTime+0x16>
 800be76:	2201      	movs	r2, #1
 800be78:	e000      	b.n	800be7c <prvGetNextExpireTime+0x18>
 800be7a:	2200      	movs	r2, #0
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d105      	bne.n	800be94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be88:	4b07      	ldr	r3, [pc, #28]	@ (800bea8 <prvGetNextExpireTime+0x44>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	e001      	b.n	800be98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be94:	2300      	movs	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be98:	68fb      	ldr	r3, [r7, #12]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	20002314 	.word	0x20002314

0800beac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800beb4:	f7ff f972 	bl	800b19c <xTaskGetTickCount>
 800beb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800beba:	4b0b      	ldr	r3, [pc, #44]	@ (800bee8 <prvSampleTimeNow+0x3c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d205      	bcs.n	800bed0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bec4:	f000 f93a 	bl	800c13c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	e002      	b.n	800bed6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bed6:	4a04      	ldr	r2, [pc, #16]	@ (800bee8 <prvSampleTimeNow+0x3c>)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bedc:	68fb      	ldr	r3, [r7, #12]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20002324 	.word	0x20002324

0800beec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d812      	bhi.n	800bf38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d302      	bcc.n	800bf26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	e01b      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf26:	4b10      	ldr	r3, [pc, #64]	@ (800bf68 <prvInsertTimerInActiveList+0x7c>)
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f7fd fdb4 	bl	8009a9e <vListInsert>
 800bf36:	e012      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d206      	bcs.n	800bf4e <prvInsertTimerInActiveList+0x62>
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d302      	bcc.n	800bf4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e007      	b.n	800bf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf4e:	4b07      	ldr	r3, [pc, #28]	@ (800bf6c <prvInsertTimerInActiveList+0x80>)
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7fd fda0 	bl	8009a9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf5e:	697b      	ldr	r3, [r7, #20]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3718      	adds	r7, #24
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	20002318 	.word	0x20002318
 800bf6c:	20002314 	.word	0x20002314

0800bf70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08e      	sub	sp, #56	@ 0x38
 800bf74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf76:	e0ce      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	da19      	bge.n	800bfb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf7e:	1d3b      	adds	r3, r7, #4
 800bf80:	3304      	adds	r3, #4
 800bf82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10b      	bne.n	800bfa2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	61fb      	str	r3, [r7, #28]
}
 800bf9c:	bf00      	nop
 800bf9e:	bf00      	nop
 800bfa0:	e7fd      	b.n	800bf9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfa8:	6850      	ldr	r0, [r2, #4]
 800bfaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfac:	6892      	ldr	r2, [r2, #8]
 800bfae:	4611      	mov	r1, r2
 800bfb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f2c0 80ae 	blt.w	800c116 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d004      	beq.n	800bfd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fd fda0 	bl	8009b10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfd0:	463b      	mov	r3, r7
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7ff ff6a 	bl	800beac <prvSampleTimeNow>
 800bfd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	f200 8097 	bhi.w	800c110 <prvProcessReceivedCommands+0x1a0>
 800bfe2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe8 <prvProcessReceivedCommands+0x78>)
 800bfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe8:	0800c011 	.word	0x0800c011
 800bfec:	0800c011 	.word	0x0800c011
 800bff0:	0800c011 	.word	0x0800c011
 800bff4:	0800c087 	.word	0x0800c087
 800bff8:	0800c09b 	.word	0x0800c09b
 800bffc:	0800c0e7 	.word	0x0800c0e7
 800c000:	0800c011 	.word	0x0800c011
 800c004:	0800c011 	.word	0x0800c011
 800c008:	0800c087 	.word	0x0800c087
 800c00c:	0800c09b 	.word	0x0800c09b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c016:	f043 0301 	orr.w	r3, r3, #1
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	18d1      	adds	r1, r2, r3
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c030:	f7ff ff5c 	bl	800beec <prvInsertTimerInActiveList>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d06c      	beq.n	800c114 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	6a1b      	ldr	r3, [r3, #32]
 800c03e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c048:	f003 0304 	and.w	r3, r3, #4
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d061      	beq.n	800c114 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	441a      	add	r2, r3
 800c058:	2300      	movs	r3, #0
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	2300      	movs	r3, #0
 800c05e:	2100      	movs	r1, #0
 800c060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c062:	f7ff fe01 	bl	800bc68 <xTimerGenericCommand>
 800c066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d152      	bne.n	800c114 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	61bb      	str	r3, [r7, #24]
}
 800c080:	bf00      	nop
 800c082:	bf00      	nop
 800c084:	e7fd      	b.n	800c082 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c08c:	f023 0301 	bic.w	r3, r3, #1
 800c090:	b2da      	uxtb	r2, r3
 800c092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c094:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c098:	e03d      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0a0:	f043 0301 	orr.w	r3, r3, #1
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10b      	bne.n	800c0d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	617b      	str	r3, [r7, #20]
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	e7fd      	b.n	800c0ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	18d1      	adds	r1, r2, r3
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0e0:	f7ff ff04 	bl	800beec <prvInsertTimerInActiveList>
					break;
 800c0e4:	e017      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ec:	f003 0302 	and.w	r3, r3, #2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c0f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0f6:	f000 fbe7 	bl	800c8c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0fa:	e00c      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c102:	f023 0301 	bic.w	r3, r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c10e:	e002      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c110:	bf00      	nop
 800c112:	e000      	b.n	800c116 <prvProcessReceivedCommands+0x1a6>
					break;
 800c114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c116:	4b08      	ldr	r3, [pc, #32]	@ (800c138 <prvProcessReceivedCommands+0x1c8>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	1d39      	adds	r1, r7, #4
 800c11c:	2200      	movs	r2, #0
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe f904 	bl	800a32c <xQueueReceive>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	f47f af26 	bne.w	800bf78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c12c:	bf00      	nop
 800c12e:	bf00      	nop
 800c130:	3730      	adds	r7, #48	@ 0x30
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	2000231c 	.word	0x2000231c

0800c13c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c142:	e049      	b.n	800c1d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c144:	4b2e      	ldr	r3, [pc, #184]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14e:	4b2c      	ldr	r3, [pc, #176]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3304      	adds	r3, #4
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd fcd7 	bl	8009b10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a1b      	ldr	r3, [r3, #32]
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c170:	f003 0304 	and.w	r3, r3, #4
 800c174:	2b00      	cmp	r3, #0
 800c176:	d02f      	beq.n	800c1d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	693a      	ldr	r2, [r7, #16]
 800c17e:	4413      	add	r3, r2
 800c180:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	429a      	cmp	r2, r3
 800c188:	d90e      	bls.n	800c1a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c196:	4b1a      	ldr	r3, [pc, #104]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3304      	adds	r3, #4
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f7fd fc7c 	bl	8009a9e <vListInsert>
 800c1a6:	e017      	b.n	800c1d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f7ff fd58 	bl	800bc68 <xTimerGenericCommand>
 800c1b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10b      	bne.n	800c1d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	603b      	str	r3, [r7, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	bf00      	nop
 800c1d6:	e7fd      	b.n	800c1d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d8:	4b09      	ldr	r3, [pc, #36]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1b0      	bne.n	800c144 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1e2:	4b07      	ldr	r3, [pc, #28]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1e8:	4b06      	ldr	r3, [pc, #24]	@ (800c204 <prvSwitchTimerLists+0xc8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a04      	ldr	r2, [pc, #16]	@ (800c200 <prvSwitchTimerLists+0xc4>)
 800c1ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1f0:	4a04      	ldr	r2, [pc, #16]	@ (800c204 <prvSwitchTimerLists+0xc8>)
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	6013      	str	r3, [r2, #0]
}
 800c1f6:	bf00      	nop
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20002314 	.word	0x20002314
 800c204:	20002318 	.word	0x20002318

0800c208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c20e:	f000 f96b 	bl	800c4e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c212:	4b15      	ldr	r3, [pc, #84]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d120      	bne.n	800c25c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c21a:	4814      	ldr	r0, [pc, #80]	@ (800c26c <prvCheckForValidListAndQueue+0x64>)
 800c21c:	f7fd fbee 	bl	80099fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c220:	4813      	ldr	r0, [pc, #76]	@ (800c270 <prvCheckForValidListAndQueue+0x68>)
 800c222:	f7fd fbeb 	bl	80099fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c226:	4b13      	ldr	r3, [pc, #76]	@ (800c274 <prvCheckForValidListAndQueue+0x6c>)
 800c228:	4a10      	ldr	r2, [pc, #64]	@ (800c26c <prvCheckForValidListAndQueue+0x64>)
 800c22a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c22c:	4b12      	ldr	r3, [pc, #72]	@ (800c278 <prvCheckForValidListAndQueue+0x70>)
 800c22e:	4a10      	ldr	r2, [pc, #64]	@ (800c270 <prvCheckForValidListAndQueue+0x68>)
 800c230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c232:	2300      	movs	r3, #0
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	4b11      	ldr	r3, [pc, #68]	@ (800c27c <prvCheckForValidListAndQueue+0x74>)
 800c238:	4a11      	ldr	r2, [pc, #68]	@ (800c280 <prvCheckForValidListAndQueue+0x78>)
 800c23a:	2110      	movs	r1, #16
 800c23c:	200a      	movs	r0, #10
 800c23e:	f7fd fcfb 	bl	8009c38 <xQueueGenericCreateStatic>
 800c242:	4603      	mov	r3, r0
 800c244:	4a08      	ldr	r2, [pc, #32]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c248:	4b07      	ldr	r3, [pc, #28]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d005      	beq.n	800c25c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c250:	4b05      	ldr	r3, [pc, #20]	@ (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	490b      	ldr	r1, [pc, #44]	@ (800c284 <prvCheckForValidListAndQueue+0x7c>)
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fc28 	bl	800aaac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c25c:	f000 f976 	bl	800c54c <vPortExitCritical>
}
 800c260:	bf00      	nop
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	2000231c 	.word	0x2000231c
 800c26c:	200022ec 	.word	0x200022ec
 800c270:	20002300 	.word	0x20002300
 800c274:	20002314 	.word	0x20002314
 800c278:	20002318 	.word	0x20002318
 800c27c:	200023c8 	.word	0x200023c8
 800c280:	20002328 	.word	0x20002328
 800c284:	0800f684 	.word	0x0800f684

0800c288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3b04      	subs	r3, #4
 800c298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c2a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3b04      	subs	r3, #4
 800c2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f023 0201 	bic.w	r2, r3, #1
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3b04      	subs	r3, #4
 800c2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2b8:	4a0c      	ldr	r2, [pc, #48]	@ (800c2ec <pxPortInitialiseStack+0x64>)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3b14      	subs	r3, #20
 800c2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3b04      	subs	r3, #4
 800c2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f06f 0202 	mvn.w	r2, #2
 800c2d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	3b20      	subs	r3, #32
 800c2dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2de:	68fb      	ldr	r3, [r7, #12]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3714      	adds	r7, #20
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	0800c2f1 	.word	0x0800c2f1

0800c2f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c2fa:	4b13      	ldr	r3, [pc, #76]	@ (800c348 <prvTaskExitError+0x58>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c302:	d00b      	beq.n	800c31c <prvTaskExitError+0x2c>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	60fb      	str	r3, [r7, #12]
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	e7fd      	b.n	800c318 <prvTaskExitError+0x28>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	60bb      	str	r3, [r7, #8]
}
 800c32e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c330:	bf00      	nop
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d0fc      	beq.n	800c332 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	20000058 	.word	0x20000058
 800c34c:	00000000 	.word	0x00000000

0800c350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c350:	4b07      	ldr	r3, [pc, #28]	@ (800c370 <pxCurrentTCBConst2>)
 800c352:	6819      	ldr	r1, [r3, #0]
 800c354:	6808      	ldr	r0, [r1, #0]
 800c356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35a:	f380 8809 	msr	PSP, r0
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f04f 0000 	mov.w	r0, #0
 800c366:	f380 8811 	msr	BASEPRI, r0
 800c36a:	4770      	bx	lr
 800c36c:	f3af 8000 	nop.w

0800c370 <pxCurrentTCBConst2>:
 800c370:	20001dec 	.word	0x20001dec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop

0800c378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c378:	4808      	ldr	r0, [pc, #32]	@ (800c39c <prvPortStartFirstTask+0x24>)
 800c37a:	6800      	ldr	r0, [r0, #0]
 800c37c:	6800      	ldr	r0, [r0, #0]
 800c37e:	f380 8808 	msr	MSP, r0
 800c382:	f04f 0000 	mov.w	r0, #0
 800c386:	f380 8814 	msr	CONTROL, r0
 800c38a:	b662      	cpsie	i
 800c38c:	b661      	cpsie	f
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	df00      	svc	0
 800c398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c39a:	bf00      	nop
 800c39c:	e000ed08 	.word	0xe000ed08

0800c3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3a6:	4b47      	ldr	r3, [pc, #284]	@ (800c4c4 <xPortStartScheduler+0x124>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a47      	ldr	r2, [pc, #284]	@ (800c4c8 <xPortStartScheduler+0x128>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d10b      	bne.n	800c3c8 <xPortStartScheduler+0x28>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	613b      	str	r3, [r7, #16]
}
 800c3c2:	bf00      	nop
 800c3c4:	bf00      	nop
 800c3c6:	e7fd      	b.n	800c3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4c4 <xPortStartScheduler+0x124>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a3f      	ldr	r2, [pc, #252]	@ (800c4cc <xPortStartScheduler+0x12c>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d10b      	bne.n	800c3ea <xPortStartScheduler+0x4a>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	60fb      	str	r3, [r7, #12]
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	e7fd      	b.n	800c3e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3ea:	4b39      	ldr	r3, [pc, #228]	@ (800c4d0 <xPortStartScheduler+0x130>)
 800c3ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	22ff      	movs	r2, #255	@ 0xff
 800c3fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	b2db      	uxtb	r3, r3
 800c402:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	4b31      	ldr	r3, [pc, #196]	@ (800c4d4 <xPortStartScheduler+0x134>)
 800c410:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c412:	4b31      	ldr	r3, [pc, #196]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c414:	2207      	movs	r2, #7
 800c416:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c418:	e009      	b.n	800c42e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c41a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3b01      	subs	r3, #1
 800c420:	4a2d      	ldr	r2, [pc, #180]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c42e:	78fb      	ldrb	r3, [r7, #3]
 800c430:	b2db      	uxtb	r3, r3
 800c432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c436:	2b80      	cmp	r3, #128	@ 0x80
 800c438:	d0ef      	beq.n	800c41a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c43a:	4b27      	ldr	r3, [pc, #156]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f1c3 0307 	rsb	r3, r3, #7
 800c442:	2b04      	cmp	r3, #4
 800c444:	d00b      	beq.n	800c45e <xPortStartScheduler+0xbe>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	60bb      	str	r3, [r7, #8]
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	e7fd      	b.n	800c45a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c45e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	021b      	lsls	r3, r3, #8
 800c464:	4a1c      	ldr	r2, [pc, #112]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c468:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c470:	4a19      	ldr	r2, [pc, #100]	@ (800c4d8 <xPortStartScheduler+0x138>)
 800c472:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	b2da      	uxtb	r2, r3
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c47c:	4b17      	ldr	r3, [pc, #92]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a16      	ldr	r2, [pc, #88]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c488:	4b14      	ldr	r3, [pc, #80]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a13      	ldr	r2, [pc, #76]	@ (800c4dc <xPortStartScheduler+0x13c>)
 800c48e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c492:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c494:	f000 f8da 	bl	800c64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c498:	4b11      	ldr	r3, [pc, #68]	@ (800c4e0 <xPortStartScheduler+0x140>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c49e:	f000 f8f9 	bl	800c694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4a2:	4b10      	ldr	r3, [pc, #64]	@ (800c4e4 <xPortStartScheduler+0x144>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e4 <xPortStartScheduler+0x144>)
 800c4a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c4ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4ae:	f7ff ff63 	bl	800c378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4b2:	f7fe ff3d 	bl	800b330 <vTaskSwitchContext>
	prvTaskExitError();
 800c4b6:	f7ff ff1b 	bl	800c2f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	e000ed00 	.word	0xe000ed00
 800c4c8:	410fc271 	.word	0x410fc271
 800c4cc:	410fc270 	.word	0x410fc270
 800c4d0:	e000e400 	.word	0xe000e400
 800c4d4:	20002418 	.word	0x20002418
 800c4d8:	2000241c 	.word	0x2000241c
 800c4dc:	e000ed20 	.word	0xe000ed20
 800c4e0:	20000058 	.word	0x20000058
 800c4e4:	e000ef34 	.word	0xe000ef34

0800c4e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	607b      	str	r3, [r7, #4]
}
 800c500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c502:	4b10      	ldr	r3, [pc, #64]	@ (800c544 <vPortEnterCritical+0x5c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3301      	adds	r3, #1
 800c508:	4a0e      	ldr	r2, [pc, #56]	@ (800c544 <vPortEnterCritical+0x5c>)
 800c50a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c50c:	4b0d      	ldr	r3, [pc, #52]	@ (800c544 <vPortEnterCritical+0x5c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d110      	bne.n	800c536 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c514:	4b0c      	ldr	r3, [pc, #48]	@ (800c548 <vPortEnterCritical+0x60>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00b      	beq.n	800c536 <vPortEnterCritical+0x4e>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	603b      	str	r3, [r7, #0]
}
 800c530:	bf00      	nop
 800c532:	bf00      	nop
 800c534:	e7fd      	b.n	800c532 <vPortEnterCritical+0x4a>
	}
}
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	20000058 	.word	0x20000058
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c552:	4b12      	ldr	r3, [pc, #72]	@ (800c59c <vPortExitCritical+0x50>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10b      	bne.n	800c572 <vPortExitCritical+0x26>
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	607b      	str	r3, [r7, #4]
}
 800c56c:	bf00      	nop
 800c56e:	bf00      	nop
 800c570:	e7fd      	b.n	800c56e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c572:	4b0a      	ldr	r3, [pc, #40]	@ (800c59c <vPortExitCritical+0x50>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3b01      	subs	r3, #1
 800c578:	4a08      	ldr	r2, [pc, #32]	@ (800c59c <vPortExitCritical+0x50>)
 800c57a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c57c:	4b07      	ldr	r3, [pc, #28]	@ (800c59c <vPortExitCritical+0x50>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d105      	bne.n	800c590 <vPortExitCritical+0x44>
 800c584:	2300      	movs	r3, #0
 800c586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	f383 8811 	msr	BASEPRI, r3
}
 800c58e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	20000058 	.word	0x20000058

0800c5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5a0:	f3ef 8009 	mrs	r0, PSP
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	4b15      	ldr	r3, [pc, #84]	@ (800c600 <pxCurrentTCBConst>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	f01e 0f10 	tst.w	lr, #16
 800c5b0:	bf08      	it	eq
 800c5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ba:	6010      	str	r0, [r2, #0]
 800c5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c5c4:	f380 8811 	msr	BASEPRI, r0
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f7fe feae 	bl	800b330 <vTaskSwitchContext>
 800c5d4:	f04f 0000 	mov.w	r0, #0
 800c5d8:	f380 8811 	msr	BASEPRI, r0
 800c5dc:	bc09      	pop	{r0, r3}
 800c5de:	6819      	ldr	r1, [r3, #0]
 800c5e0:	6808      	ldr	r0, [r1, #0]
 800c5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e6:	f01e 0f10 	tst.w	lr, #16
 800c5ea:	bf08      	it	eq
 800c5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5f0:	f380 8809 	msr	PSP, r0
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	f3af 8000 	nop.w

0800c600 <pxCurrentTCBConst>:
 800c600:	20001dec 	.word	0x20001dec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop

0800c608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	607b      	str	r3, [r7, #4]
}
 800c620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c622:	f7fe fdcb 	bl	800b1bc <xTaskIncrementTick>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c62c:	4b06      	ldr	r3, [pc, #24]	@ (800c648 <xPortSysTickHandler+0x40>)
 800c62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	2300      	movs	r3, #0
 800c636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	f383 8811 	msr	BASEPRI, r3
}
 800c63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c650:	4b0b      	ldr	r3, [pc, #44]	@ (800c680 <vPortSetupTimerInterrupt+0x34>)
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c656:	4b0b      	ldr	r3, [pc, #44]	@ (800c684 <vPortSetupTimerInterrupt+0x38>)
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c65c:	4b0a      	ldr	r3, [pc, #40]	@ (800c688 <vPortSetupTimerInterrupt+0x3c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a0a      	ldr	r2, [pc, #40]	@ (800c68c <vPortSetupTimerInterrupt+0x40>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	099b      	lsrs	r3, r3, #6
 800c668:	4a09      	ldr	r2, [pc, #36]	@ (800c690 <vPortSetupTimerInterrupt+0x44>)
 800c66a:	3b01      	subs	r3, #1
 800c66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c66e:	4b04      	ldr	r3, [pc, #16]	@ (800c680 <vPortSetupTimerInterrupt+0x34>)
 800c670:	2207      	movs	r2, #7
 800c672:	601a      	str	r2, [r3, #0]
}
 800c674:	bf00      	nop
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	e000e010 	.word	0xe000e010
 800c684:	e000e018 	.word	0xe000e018
 800c688:	20000004 	.word	0x20000004
 800c68c:	10624dd3 	.word	0x10624dd3
 800c690:	e000e014 	.word	0xe000e014

0800c694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c6a4 <vPortEnableVFP+0x10>
 800c698:	6801      	ldr	r1, [r0, #0]
 800c69a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c69e:	6001      	str	r1, [r0, #0]
 800c6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6a2:	bf00      	nop
 800c6a4:	e000ed88 	.word	0xe000ed88

0800c6a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6ae:	f3ef 8305 	mrs	r3, IPSR
 800c6b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b0f      	cmp	r3, #15
 800c6b8:	d915      	bls.n	800c6e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6ba:	4a18      	ldr	r2, [pc, #96]	@ (800c71c <vPortValidateInterruptPriority+0x74>)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	4413      	add	r3, r2
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c6c4:	4b16      	ldr	r3, [pc, #88]	@ (800c720 <vPortValidateInterruptPriority+0x78>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	7afa      	ldrb	r2, [r7, #11]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d20b      	bcs.n	800c6e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	607b      	str	r3, [r7, #4]
}
 800c6e0:	bf00      	nop
 800c6e2:	bf00      	nop
 800c6e4:	e7fd      	b.n	800c6e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c724 <vPortValidateInterruptPriority+0x7c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c728 <vPortValidateInterruptPriority+0x80>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d90b      	bls.n	800c70e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	603b      	str	r3, [r7, #0]
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <vPortValidateInterruptPriority+0x62>
	}
 800c70e:	bf00      	nop
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	e000e3f0 	.word	0xe000e3f0
 800c720:	20002418 	.word	0x20002418
 800c724:	e000ed0c 	.word	0xe000ed0c
 800c728:	2000241c 	.word	0x2000241c

0800c72c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	@ 0x28
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c734:	2300      	movs	r3, #0
 800c736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c738:	f7fe fc84 	bl	800b044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c73c:	4b5c      	ldr	r3, [pc, #368]	@ (800c8b0 <pvPortMalloc+0x184>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c744:	f000 f924 	bl	800c990 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c748:	4b5a      	ldr	r3, [pc, #360]	@ (800c8b4 <pvPortMalloc+0x188>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4013      	ands	r3, r2
 800c750:	2b00      	cmp	r3, #0
 800c752:	f040 8095 	bne.w	800c880 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01e      	beq.n	800c79a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c75c:	2208      	movs	r2, #8
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4413      	add	r3, r2
 800c762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d015      	beq.n	800c79a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f023 0307 	bic.w	r3, r3, #7
 800c774:	3308      	adds	r3, #8
 800c776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f003 0307 	and.w	r3, r3, #7
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00b      	beq.n	800c79a <pvPortMalloc+0x6e>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	617b      	str	r3, [r7, #20]
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	e7fd      	b.n	800c796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d06f      	beq.n	800c880 <pvPortMalloc+0x154>
 800c7a0:	4b45      	ldr	r3, [pc, #276]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d86a      	bhi.n	800c880 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7aa:	4b44      	ldr	r3, [pc, #272]	@ (800c8bc <pvPortMalloc+0x190>)
 800c7ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7ae:	4b43      	ldr	r3, [pc, #268]	@ (800c8bc <pvPortMalloc+0x190>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7b4:	e004      	b.n	800c7c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d903      	bls.n	800c7d2 <pvPortMalloc+0xa6>
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f1      	bne.n	800c7b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7d2:	4b37      	ldr	r3, [pc, #220]	@ (800c8b0 <pvPortMalloc+0x184>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d051      	beq.n	800c880 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7dc:	6a3b      	ldr	r3, [r7, #32]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	4413      	add	r3, r2
 800c7e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	1ad2      	subs	r2, r2, r3
 800c7f6:	2308      	movs	r3, #8
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d920      	bls.n	800c840 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4413      	add	r3, r2
 800c804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	f003 0307 	and.w	r3, r3, #7
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <pvPortMalloc+0xfc>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	613b      	str	r3, [r7, #16]
}
 800c822:	bf00      	nop
 800c824:	bf00      	nop
 800c826:	e7fd      	b.n	800c824 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c83a:	69b8      	ldr	r0, [r7, #24]
 800c83c:	f000 f90a 	bl	800ca54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c840:	4b1d      	ldr	r3, [pc, #116]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	4a1b      	ldr	r2, [pc, #108]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c84c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c84e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	4b1b      	ldr	r3, [pc, #108]	@ (800c8c0 <pvPortMalloc+0x194>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d203      	bcs.n	800c862 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c85a:	4b17      	ldr	r3, [pc, #92]	@ (800c8b8 <pvPortMalloc+0x18c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a18      	ldr	r2, [pc, #96]	@ (800c8c0 <pvPortMalloc+0x194>)
 800c860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	4b13      	ldr	r3, [pc, #76]	@ (800c8b4 <pvPortMalloc+0x188>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	431a      	orrs	r2, r3
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c876:	4b13      	ldr	r3, [pc, #76]	@ (800c8c4 <pvPortMalloc+0x198>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3301      	adds	r3, #1
 800c87c:	4a11      	ldr	r2, [pc, #68]	@ (800c8c4 <pvPortMalloc+0x198>)
 800c87e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c880:	f7fe fbee 	bl	800b060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	60fb      	str	r3, [r7, #12]
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	e7fd      	b.n	800c8a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3728      	adds	r7, #40	@ 0x28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20002fe0 	.word	0x20002fe0
 800c8b4:	20002ff4 	.word	0x20002ff4
 800c8b8:	20002fe4 	.word	0x20002fe4
 800c8bc:	20002fd8 	.word	0x20002fd8
 800c8c0:	20002fe8 	.word	0x20002fe8
 800c8c4:	20002fec 	.word	0x20002fec

0800c8c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d04f      	beq.n	800c97a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8da:	2308      	movs	r3, #8
 800c8dc:	425b      	negs	r3, r3
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	4b25      	ldr	r3, [pc, #148]	@ (800c984 <vPortFree+0xbc>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10b      	bne.n	800c90e <vPortFree+0x46>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	60fb      	str	r3, [r7, #12]
}
 800c908:	bf00      	nop
 800c90a:	bf00      	nop
 800c90c:	e7fd      	b.n	800c90a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00b      	beq.n	800c92e <vPortFree+0x66>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	60bb      	str	r3, [r7, #8]
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	4b14      	ldr	r3, [pc, #80]	@ (800c984 <vPortFree+0xbc>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4013      	ands	r3, r2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01e      	beq.n	800c97a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11a      	bne.n	800c97a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	4b0e      	ldr	r3, [pc, #56]	@ (800c984 <vPortFree+0xbc>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	43db      	mvns	r3, r3
 800c94e:	401a      	ands	r2, r3
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c954:	f7fe fb76 	bl	800b044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	4b0a      	ldr	r3, [pc, #40]	@ (800c988 <vPortFree+0xc0>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4413      	add	r3, r2
 800c962:	4a09      	ldr	r2, [pc, #36]	@ (800c988 <vPortFree+0xc0>)
 800c964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c966:	6938      	ldr	r0, [r7, #16]
 800c968:	f000 f874 	bl	800ca54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c96c:	4b07      	ldr	r3, [pc, #28]	@ (800c98c <vPortFree+0xc4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3301      	adds	r3, #1
 800c972:	4a06      	ldr	r2, [pc, #24]	@ (800c98c <vPortFree+0xc4>)
 800c974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c976:	f7fe fb73 	bl	800b060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c97a:	bf00      	nop
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20002ff4 	.word	0x20002ff4
 800c988:	20002fe4 	.word	0x20002fe4
 800c98c:	20002ff0 	.word	0x20002ff0

0800c990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c996:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c99a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c99c:	4b27      	ldr	r3, [pc, #156]	@ (800ca3c <prvHeapInit+0xac>)
 800c99e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f003 0307 	and.w	r3, r3, #7
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00c      	beq.n	800c9c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3307      	adds	r3, #7
 800c9ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0307 	bic.w	r3, r3, #7
 800c9b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	4a1f      	ldr	r2, [pc, #124]	@ (800ca3c <prvHeapInit+0xac>)
 800c9c0:	4413      	add	r3, r2
 800c9c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9c8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca40 <prvHeapInit+0xb0>)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9ce:	4b1c      	ldr	r3, [pc, #112]	@ (800ca40 <prvHeapInit+0xb0>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9dc:	2208      	movs	r2, #8
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	1a9b      	subs	r3, r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f023 0307 	bic.w	r3, r3, #7
 800c9ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4a15      	ldr	r2, [pc, #84]	@ (800ca44 <prvHeapInit+0xb4>)
 800c9f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ca44 <prvHeapInit+0xb4>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9fa:	4b12      	ldr	r3, [pc, #72]	@ (800ca44 <prvHeapInit+0xb4>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	1ad2      	subs	r2, r2, r3
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca10:	4b0c      	ldr	r3, [pc, #48]	@ (800ca44 <prvHeapInit+0xb4>)
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	4a0a      	ldr	r2, [pc, #40]	@ (800ca48 <prvHeapInit+0xb8>)
 800ca1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	4a09      	ldr	r2, [pc, #36]	@ (800ca4c <prvHeapInit+0xbc>)
 800ca26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca28:	4b09      	ldr	r3, [pc, #36]	@ (800ca50 <prvHeapInit+0xc0>)
 800ca2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca2e:	601a      	str	r2, [r3, #0]
}
 800ca30:	bf00      	nop
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	20002420 	.word	0x20002420
 800ca40:	20002fd8 	.word	0x20002fd8
 800ca44:	20002fe0 	.word	0x20002fe0
 800ca48:	20002fe8 	.word	0x20002fe8
 800ca4c:	20002fe4 	.word	0x20002fe4
 800ca50:	20002ff4 	.word	0x20002ff4

0800ca54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca5c:	4b28      	ldr	r3, [pc, #160]	@ (800cb00 <prvInsertBlockIntoFreeList+0xac>)
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	e002      	b.n	800ca68 <prvInsertBlockIntoFreeList+0x14>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d8f7      	bhi.n	800ca62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d108      	bne.n	800ca96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	441a      	add	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	441a      	add	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d118      	bne.n	800cadc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	4b15      	ldr	r3, [pc, #84]	@ (800cb04 <prvInsertBlockIntoFreeList+0xb0>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d00d      	beq.n	800cad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	441a      	add	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	e008      	b.n	800cae4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cad2:	4b0c      	ldr	r3, [pc, #48]	@ (800cb04 <prvInsertBlockIntoFreeList+0xb0>)
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	e003      	b.n	800cae4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d002      	beq.n	800caf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caf2:	bf00      	nop
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20002fd8 	.word	0x20002fd8
 800cb04:	20002fe0 	.word	0x20002fe0

0800cb08 <rand>:
 800cb08:	4b16      	ldr	r3, [pc, #88]	@ (800cb64 <rand+0x5c>)
 800cb0a:	b510      	push	{r4, lr}
 800cb0c:	681c      	ldr	r4, [r3, #0]
 800cb0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb10:	b9b3      	cbnz	r3, 800cb40 <rand+0x38>
 800cb12:	2018      	movs	r0, #24
 800cb14:	f001 fdda 	bl	800e6cc <malloc>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	6320      	str	r0, [r4, #48]	@ 0x30
 800cb1c:	b920      	cbnz	r0, 800cb28 <rand+0x20>
 800cb1e:	4b12      	ldr	r3, [pc, #72]	@ (800cb68 <rand+0x60>)
 800cb20:	4812      	ldr	r0, [pc, #72]	@ (800cb6c <rand+0x64>)
 800cb22:	2152      	movs	r1, #82	@ 0x52
 800cb24:	f000 ff1e 	bl	800d964 <__assert_func>
 800cb28:	4911      	ldr	r1, [pc, #68]	@ (800cb70 <rand+0x68>)
 800cb2a:	4b12      	ldr	r3, [pc, #72]	@ (800cb74 <rand+0x6c>)
 800cb2c:	e9c0 1300 	strd	r1, r3, [r0]
 800cb30:	4b11      	ldr	r3, [pc, #68]	@ (800cb78 <rand+0x70>)
 800cb32:	6083      	str	r3, [r0, #8]
 800cb34:	230b      	movs	r3, #11
 800cb36:	8183      	strh	r3, [r0, #12]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cb40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cb42:	480e      	ldr	r0, [pc, #56]	@ (800cb7c <rand+0x74>)
 800cb44:	690b      	ldr	r3, [r1, #16]
 800cb46:	694c      	ldr	r4, [r1, #20]
 800cb48:	4a0d      	ldr	r2, [pc, #52]	@ (800cb80 <rand+0x78>)
 800cb4a:	4358      	muls	r0, r3
 800cb4c:	fb02 0004 	mla	r0, r2, r4, r0
 800cb50:	fba3 3202 	umull	r3, r2, r3, r2
 800cb54:	3301      	adds	r3, #1
 800cb56:	eb40 0002 	adc.w	r0, r0, r2
 800cb5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cb5e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cb62:	bd10      	pop	{r4, pc}
 800cb64:	20000068 	.word	0x20000068
 800cb68:	0800f71c 	.word	0x0800f71c
 800cb6c:	0800f733 	.word	0x0800f733
 800cb70:	abcd330e 	.word	0xabcd330e
 800cb74:	e66d1234 	.word	0xe66d1234
 800cb78:	0005deec 	.word	0x0005deec
 800cb7c:	5851f42d 	.word	0x5851f42d
 800cb80:	4c957f2d 	.word	0x4c957f2d

0800cb84 <__cvt>:
 800cb84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb88:	ec57 6b10 	vmov	r6, r7, d0
 800cb8c:	2f00      	cmp	r7, #0
 800cb8e:	460c      	mov	r4, r1
 800cb90:	4619      	mov	r1, r3
 800cb92:	463b      	mov	r3, r7
 800cb94:	bfbb      	ittet	lt
 800cb96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb9a:	461f      	movlt	r7, r3
 800cb9c:	2300      	movge	r3, #0
 800cb9e:	232d      	movlt	r3, #45	@ 0x2d
 800cba0:	700b      	strb	r3, [r1, #0]
 800cba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cba4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cba8:	4691      	mov	r9, r2
 800cbaa:	f023 0820 	bic.w	r8, r3, #32
 800cbae:	bfbc      	itt	lt
 800cbb0:	4632      	movlt	r2, r6
 800cbb2:	4616      	movlt	r6, r2
 800cbb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbb8:	d005      	beq.n	800cbc6 <__cvt+0x42>
 800cbba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cbbe:	d100      	bne.n	800cbc2 <__cvt+0x3e>
 800cbc0:	3401      	adds	r4, #1
 800cbc2:	2102      	movs	r1, #2
 800cbc4:	e000      	b.n	800cbc8 <__cvt+0x44>
 800cbc6:	2103      	movs	r1, #3
 800cbc8:	ab03      	add	r3, sp, #12
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	ab02      	add	r3, sp, #8
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	ec47 6b10 	vmov	d0, r6, r7
 800cbd4:	4653      	mov	r3, sl
 800cbd6:	4622      	mov	r2, r4
 800cbd8:	f000 ff6a 	bl	800dab0 <_dtoa_r>
 800cbdc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	d119      	bne.n	800cc18 <__cvt+0x94>
 800cbe4:	f019 0f01 	tst.w	r9, #1
 800cbe8:	d00e      	beq.n	800cc08 <__cvt+0x84>
 800cbea:	eb00 0904 	add.w	r9, r0, r4
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	f7f3 ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbfa:	b108      	cbz	r0, 800cc00 <__cvt+0x7c>
 800cbfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc00:	2230      	movs	r2, #48	@ 0x30
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	454b      	cmp	r3, r9
 800cc06:	d31e      	bcc.n	800cc46 <__cvt+0xc2>
 800cc08:	9b03      	ldr	r3, [sp, #12]
 800cc0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc0c:	1b5b      	subs	r3, r3, r5
 800cc0e:	4628      	mov	r0, r5
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	b004      	add	sp, #16
 800cc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc1c:	eb00 0904 	add.w	r9, r0, r4
 800cc20:	d1e5      	bne.n	800cbee <__cvt+0x6a>
 800cc22:	7803      	ldrb	r3, [r0, #0]
 800cc24:	2b30      	cmp	r3, #48	@ 0x30
 800cc26:	d10a      	bne.n	800cc3e <__cvt+0xba>
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc34:	b918      	cbnz	r0, 800cc3e <__cvt+0xba>
 800cc36:	f1c4 0401 	rsb	r4, r4, #1
 800cc3a:	f8ca 4000 	str.w	r4, [sl]
 800cc3e:	f8da 3000 	ldr.w	r3, [sl]
 800cc42:	4499      	add	r9, r3
 800cc44:	e7d3      	b.n	800cbee <__cvt+0x6a>
 800cc46:	1c59      	adds	r1, r3, #1
 800cc48:	9103      	str	r1, [sp, #12]
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	e7d9      	b.n	800cc02 <__cvt+0x7e>

0800cc4e <__exponent>:
 800cc4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc50:	2900      	cmp	r1, #0
 800cc52:	bfba      	itte	lt
 800cc54:	4249      	neglt	r1, r1
 800cc56:	232d      	movlt	r3, #45	@ 0x2d
 800cc58:	232b      	movge	r3, #43	@ 0x2b
 800cc5a:	2909      	cmp	r1, #9
 800cc5c:	7002      	strb	r2, [r0, #0]
 800cc5e:	7043      	strb	r3, [r0, #1]
 800cc60:	dd29      	ble.n	800ccb6 <__exponent+0x68>
 800cc62:	f10d 0307 	add.w	r3, sp, #7
 800cc66:	461d      	mov	r5, r3
 800cc68:	270a      	movs	r7, #10
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc70:	fb07 1416 	mls	r4, r7, r6, r1
 800cc74:	3430      	adds	r4, #48	@ 0x30
 800cc76:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	2c63      	cmp	r4, #99	@ 0x63
 800cc7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc82:	4631      	mov	r1, r6
 800cc84:	dcf1      	bgt.n	800cc6a <__exponent+0x1c>
 800cc86:	3130      	adds	r1, #48	@ 0x30
 800cc88:	1e94      	subs	r4, r2, #2
 800cc8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc8e:	1c41      	adds	r1, r0, #1
 800cc90:	4623      	mov	r3, r4
 800cc92:	42ab      	cmp	r3, r5
 800cc94:	d30a      	bcc.n	800ccac <__exponent+0x5e>
 800cc96:	f10d 0309 	add.w	r3, sp, #9
 800cc9a:	1a9b      	subs	r3, r3, r2
 800cc9c:	42ac      	cmp	r4, r5
 800cc9e:	bf88      	it	hi
 800cca0:	2300      	movhi	r3, #0
 800cca2:	3302      	adds	r3, #2
 800cca4:	4403      	add	r3, r0
 800cca6:	1a18      	subs	r0, r3, r0
 800cca8:	b003      	add	sp, #12
 800ccaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ccb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ccb4:	e7ed      	b.n	800cc92 <__exponent+0x44>
 800ccb6:	2330      	movs	r3, #48	@ 0x30
 800ccb8:	3130      	adds	r1, #48	@ 0x30
 800ccba:	7083      	strb	r3, [r0, #2]
 800ccbc:	70c1      	strb	r1, [r0, #3]
 800ccbe:	1d03      	adds	r3, r0, #4
 800ccc0:	e7f1      	b.n	800cca6 <__exponent+0x58>
	...

0800ccc4 <_printf_float>:
 800ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	b08d      	sub	sp, #52	@ 0x34
 800ccca:	460c      	mov	r4, r1
 800cccc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ccd0:	4616      	mov	r6, r2
 800ccd2:	461f      	mov	r7, r3
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	f000 fdbf 	bl	800d858 <_localeconv_r>
 800ccda:	6803      	ldr	r3, [r0, #0]
 800ccdc:	9304      	str	r3, [sp, #16]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7f3 fac6 	bl	8000270 <strlen>
 800cce4:	2300      	movs	r3, #0
 800cce6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cce8:	f8d8 3000 	ldr.w	r3, [r8]
 800ccec:	9005      	str	r0, [sp, #20]
 800ccee:	3307      	adds	r3, #7
 800ccf0:	f023 0307 	bic.w	r3, r3, #7
 800ccf4:	f103 0208 	add.w	r2, r3, #8
 800ccf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ccfc:	f8d4 b000 	ldr.w	fp, [r4]
 800cd00:	f8c8 2000 	str.w	r2, [r8]
 800cd04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd0c:	9307      	str	r3, [sp, #28]
 800cd0e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd1a:	4b9c      	ldr	r3, [pc, #624]	@ (800cf8c <_printf_float+0x2c8>)
 800cd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd20:	f7f3 ff04 	bl	8000b2c <__aeabi_dcmpun>
 800cd24:	bb70      	cbnz	r0, 800cd84 <_printf_float+0xc0>
 800cd26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd2a:	4b98      	ldr	r3, [pc, #608]	@ (800cf8c <_printf_float+0x2c8>)
 800cd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd30:	f7f3 fede 	bl	8000af0 <__aeabi_dcmple>
 800cd34:	bb30      	cbnz	r0, 800cd84 <_printf_float+0xc0>
 800cd36:	2200      	movs	r2, #0
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	f7f3 fecd 	bl	8000adc <__aeabi_dcmplt>
 800cd42:	b110      	cbz	r0, 800cd4a <_printf_float+0x86>
 800cd44:	232d      	movs	r3, #45	@ 0x2d
 800cd46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd4a:	4a91      	ldr	r2, [pc, #580]	@ (800cf90 <_printf_float+0x2cc>)
 800cd4c:	4b91      	ldr	r3, [pc, #580]	@ (800cf94 <_printf_float+0x2d0>)
 800cd4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cd52:	bf94      	ite	ls
 800cd54:	4690      	movls	r8, r2
 800cd56:	4698      	movhi	r8, r3
 800cd58:	2303      	movs	r3, #3
 800cd5a:	6123      	str	r3, [r4, #16]
 800cd5c:	f02b 0304 	bic.w	r3, fp, #4
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	f04f 0900 	mov.w	r9, #0
 800cd66:	9700      	str	r7, [sp, #0]
 800cd68:	4633      	mov	r3, r6
 800cd6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f000 f9d2 	bl	800d118 <_printf_common>
 800cd74:	3001      	adds	r0, #1
 800cd76:	f040 808d 	bne.w	800ce94 <_printf_float+0x1d0>
 800cd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7e:	b00d      	add	sp, #52	@ 0x34
 800cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd84:	4642      	mov	r2, r8
 800cd86:	464b      	mov	r3, r9
 800cd88:	4640      	mov	r0, r8
 800cd8a:	4649      	mov	r1, r9
 800cd8c:	f7f3 fece 	bl	8000b2c <__aeabi_dcmpun>
 800cd90:	b140      	cbz	r0, 800cda4 <_printf_float+0xe0>
 800cd92:	464b      	mov	r3, r9
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	bfbc      	itt	lt
 800cd98:	232d      	movlt	r3, #45	@ 0x2d
 800cd9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd9e:	4a7e      	ldr	r2, [pc, #504]	@ (800cf98 <_printf_float+0x2d4>)
 800cda0:	4b7e      	ldr	r3, [pc, #504]	@ (800cf9c <_printf_float+0x2d8>)
 800cda2:	e7d4      	b.n	800cd4e <_printf_float+0x8a>
 800cda4:	6863      	ldr	r3, [r4, #4]
 800cda6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cdaa:	9206      	str	r2, [sp, #24]
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	d13b      	bne.n	800ce28 <_printf_float+0x164>
 800cdb0:	2306      	movs	r3, #6
 800cdb2:	6063      	str	r3, [r4, #4]
 800cdb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cdb8:	2300      	movs	r3, #0
 800cdba:	6022      	str	r2, [r4, #0]
 800cdbc:	9303      	str	r3, [sp, #12]
 800cdbe:	ab0a      	add	r3, sp, #40	@ 0x28
 800cdc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cdc4:	ab09      	add	r3, sp, #36	@ 0x24
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	6861      	ldr	r1, [r4, #4]
 800cdca:	ec49 8b10 	vmov	d0, r8, r9
 800cdce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f7ff fed6 	bl	800cb84 <__cvt>
 800cdd8:	9b06      	ldr	r3, [sp, #24]
 800cdda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cddc:	2b47      	cmp	r3, #71	@ 0x47
 800cdde:	4680      	mov	r8, r0
 800cde0:	d129      	bne.n	800ce36 <_printf_float+0x172>
 800cde2:	1cc8      	adds	r0, r1, #3
 800cde4:	db02      	blt.n	800cdec <_printf_float+0x128>
 800cde6:	6863      	ldr	r3, [r4, #4]
 800cde8:	4299      	cmp	r1, r3
 800cdea:	dd41      	ble.n	800ce70 <_printf_float+0x1ac>
 800cdec:	f1aa 0a02 	sub.w	sl, sl, #2
 800cdf0:	fa5f fa8a 	uxtb.w	sl, sl
 800cdf4:	3901      	subs	r1, #1
 800cdf6:	4652      	mov	r2, sl
 800cdf8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cdfc:	9109      	str	r1, [sp, #36]	@ 0x24
 800cdfe:	f7ff ff26 	bl	800cc4e <__exponent>
 800ce02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce04:	1813      	adds	r3, r2, r0
 800ce06:	2a01      	cmp	r2, #1
 800ce08:	4681      	mov	r9, r0
 800ce0a:	6123      	str	r3, [r4, #16]
 800ce0c:	dc02      	bgt.n	800ce14 <_printf_float+0x150>
 800ce0e:	6822      	ldr	r2, [r4, #0]
 800ce10:	07d2      	lsls	r2, r2, #31
 800ce12:	d501      	bpl.n	800ce18 <_printf_float+0x154>
 800ce14:	3301      	adds	r3, #1
 800ce16:	6123      	str	r3, [r4, #16]
 800ce18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0a2      	beq.n	800cd66 <_printf_float+0xa2>
 800ce20:	232d      	movs	r3, #45	@ 0x2d
 800ce22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce26:	e79e      	b.n	800cd66 <_printf_float+0xa2>
 800ce28:	9a06      	ldr	r2, [sp, #24]
 800ce2a:	2a47      	cmp	r2, #71	@ 0x47
 800ce2c:	d1c2      	bne.n	800cdb4 <_printf_float+0xf0>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1c0      	bne.n	800cdb4 <_printf_float+0xf0>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e7bd      	b.n	800cdb2 <_printf_float+0xee>
 800ce36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce3a:	d9db      	bls.n	800cdf4 <_printf_float+0x130>
 800ce3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ce40:	d118      	bne.n	800ce74 <_printf_float+0x1b0>
 800ce42:	2900      	cmp	r1, #0
 800ce44:	6863      	ldr	r3, [r4, #4]
 800ce46:	dd0b      	ble.n	800ce60 <_printf_float+0x19c>
 800ce48:	6121      	str	r1, [r4, #16]
 800ce4a:	b913      	cbnz	r3, 800ce52 <_printf_float+0x18e>
 800ce4c:	6822      	ldr	r2, [r4, #0]
 800ce4e:	07d0      	lsls	r0, r2, #31
 800ce50:	d502      	bpl.n	800ce58 <_printf_float+0x194>
 800ce52:	3301      	adds	r3, #1
 800ce54:	440b      	add	r3, r1
 800ce56:	6123      	str	r3, [r4, #16]
 800ce58:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ce5a:	f04f 0900 	mov.w	r9, #0
 800ce5e:	e7db      	b.n	800ce18 <_printf_float+0x154>
 800ce60:	b913      	cbnz	r3, 800ce68 <_printf_float+0x1a4>
 800ce62:	6822      	ldr	r2, [r4, #0]
 800ce64:	07d2      	lsls	r2, r2, #31
 800ce66:	d501      	bpl.n	800ce6c <_printf_float+0x1a8>
 800ce68:	3302      	adds	r3, #2
 800ce6a:	e7f4      	b.n	800ce56 <_printf_float+0x192>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e7f2      	b.n	800ce56 <_printf_float+0x192>
 800ce70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce76:	4299      	cmp	r1, r3
 800ce78:	db05      	blt.n	800ce86 <_printf_float+0x1c2>
 800ce7a:	6823      	ldr	r3, [r4, #0]
 800ce7c:	6121      	str	r1, [r4, #16]
 800ce7e:	07d8      	lsls	r0, r3, #31
 800ce80:	d5ea      	bpl.n	800ce58 <_printf_float+0x194>
 800ce82:	1c4b      	adds	r3, r1, #1
 800ce84:	e7e7      	b.n	800ce56 <_printf_float+0x192>
 800ce86:	2900      	cmp	r1, #0
 800ce88:	bfd4      	ite	le
 800ce8a:	f1c1 0202 	rsble	r2, r1, #2
 800ce8e:	2201      	movgt	r2, #1
 800ce90:	4413      	add	r3, r2
 800ce92:	e7e0      	b.n	800ce56 <_printf_float+0x192>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	055a      	lsls	r2, r3, #21
 800ce98:	d407      	bmi.n	800ceaa <_printf_float+0x1e6>
 800ce9a:	6923      	ldr	r3, [r4, #16]
 800ce9c:	4642      	mov	r2, r8
 800ce9e:	4631      	mov	r1, r6
 800cea0:	4628      	mov	r0, r5
 800cea2:	47b8      	blx	r7
 800cea4:	3001      	adds	r0, #1
 800cea6:	d12b      	bne.n	800cf00 <_printf_float+0x23c>
 800cea8:	e767      	b.n	800cd7a <_printf_float+0xb6>
 800ceaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ceae:	f240 80dd 	bls.w	800d06c <_printf_float+0x3a8>
 800ceb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f7f3 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d033      	beq.n	800cf2a <_printf_float+0x266>
 800cec2:	4a37      	ldr	r2, [pc, #220]	@ (800cfa0 <_printf_float+0x2dc>)
 800cec4:	2301      	movs	r3, #1
 800cec6:	4631      	mov	r1, r6
 800cec8:	4628      	mov	r0, r5
 800ceca:	47b8      	blx	r7
 800cecc:	3001      	adds	r0, #1
 800cece:	f43f af54 	beq.w	800cd7a <_printf_float+0xb6>
 800ced2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ced6:	4543      	cmp	r3, r8
 800ced8:	db02      	blt.n	800cee0 <_printf_float+0x21c>
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	07d8      	lsls	r0, r3, #31
 800cede:	d50f      	bpl.n	800cf00 <_printf_float+0x23c>
 800cee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cee4:	4631      	mov	r1, r6
 800cee6:	4628      	mov	r0, r5
 800cee8:	47b8      	blx	r7
 800ceea:	3001      	adds	r0, #1
 800ceec:	f43f af45 	beq.w	800cd7a <_printf_float+0xb6>
 800cef0:	f04f 0900 	mov.w	r9, #0
 800cef4:	f108 38ff 	add.w	r8, r8, #4294967295
 800cef8:	f104 0a1a 	add.w	sl, r4, #26
 800cefc:	45c8      	cmp	r8, r9
 800cefe:	dc09      	bgt.n	800cf14 <_printf_float+0x250>
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	079b      	lsls	r3, r3, #30
 800cf04:	f100 8103 	bmi.w	800d10e <_printf_float+0x44a>
 800cf08:	68e0      	ldr	r0, [r4, #12]
 800cf0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf0c:	4298      	cmp	r0, r3
 800cf0e:	bfb8      	it	lt
 800cf10:	4618      	movlt	r0, r3
 800cf12:	e734      	b.n	800cd7e <_printf_float+0xba>
 800cf14:	2301      	movs	r3, #1
 800cf16:	4652      	mov	r2, sl
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b8      	blx	r7
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f43f af2b 	beq.w	800cd7a <_printf_float+0xb6>
 800cf24:	f109 0901 	add.w	r9, r9, #1
 800cf28:	e7e8      	b.n	800cefc <_printf_float+0x238>
 800cf2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dc39      	bgt.n	800cfa4 <_printf_float+0x2e0>
 800cf30:	4a1b      	ldr	r2, [pc, #108]	@ (800cfa0 <_printf_float+0x2dc>)
 800cf32:	2301      	movs	r3, #1
 800cf34:	4631      	mov	r1, r6
 800cf36:	4628      	mov	r0, r5
 800cf38:	47b8      	blx	r7
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	f43f af1d 	beq.w	800cd7a <_printf_float+0xb6>
 800cf40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cf44:	ea59 0303 	orrs.w	r3, r9, r3
 800cf48:	d102      	bne.n	800cf50 <_printf_float+0x28c>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	07d9      	lsls	r1, r3, #31
 800cf4e:	d5d7      	bpl.n	800cf00 <_printf_float+0x23c>
 800cf50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf54:	4631      	mov	r1, r6
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	f43f af0d 	beq.w	800cd7a <_printf_float+0xb6>
 800cf60:	f04f 0a00 	mov.w	sl, #0
 800cf64:	f104 0b1a 	add.w	fp, r4, #26
 800cf68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf6a:	425b      	negs	r3, r3
 800cf6c:	4553      	cmp	r3, sl
 800cf6e:	dc01      	bgt.n	800cf74 <_printf_float+0x2b0>
 800cf70:	464b      	mov	r3, r9
 800cf72:	e793      	b.n	800ce9c <_printf_float+0x1d8>
 800cf74:	2301      	movs	r3, #1
 800cf76:	465a      	mov	r2, fp
 800cf78:	4631      	mov	r1, r6
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	47b8      	blx	r7
 800cf7e:	3001      	adds	r0, #1
 800cf80:	f43f aefb 	beq.w	800cd7a <_printf_float+0xb6>
 800cf84:	f10a 0a01 	add.w	sl, sl, #1
 800cf88:	e7ee      	b.n	800cf68 <_printf_float+0x2a4>
 800cf8a:	bf00      	nop
 800cf8c:	7fefffff 	.word	0x7fefffff
 800cf90:	0800f78b 	.word	0x0800f78b
 800cf94:	0800f78f 	.word	0x0800f78f
 800cf98:	0800f793 	.word	0x0800f793
 800cf9c:	0800f797 	.word	0x0800f797
 800cfa0:	0800f79b 	.word	0x0800f79b
 800cfa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfa6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfaa:	4553      	cmp	r3, sl
 800cfac:	bfa8      	it	ge
 800cfae:	4653      	movge	r3, sl
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	4699      	mov	r9, r3
 800cfb4:	dc36      	bgt.n	800d024 <_printf_float+0x360>
 800cfb6:	f04f 0b00 	mov.w	fp, #0
 800cfba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfbe:	f104 021a 	add.w	r2, r4, #26
 800cfc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfc4:	9306      	str	r3, [sp, #24]
 800cfc6:	eba3 0309 	sub.w	r3, r3, r9
 800cfca:	455b      	cmp	r3, fp
 800cfcc:	dc31      	bgt.n	800d032 <_printf_float+0x36e>
 800cfce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd0:	459a      	cmp	sl, r3
 800cfd2:	dc3a      	bgt.n	800d04a <_printf_float+0x386>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	07da      	lsls	r2, r3, #31
 800cfd8:	d437      	bmi.n	800d04a <_printf_float+0x386>
 800cfda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfdc:	ebaa 0903 	sub.w	r9, sl, r3
 800cfe0:	9b06      	ldr	r3, [sp, #24]
 800cfe2:	ebaa 0303 	sub.w	r3, sl, r3
 800cfe6:	4599      	cmp	r9, r3
 800cfe8:	bfa8      	it	ge
 800cfea:	4699      	movge	r9, r3
 800cfec:	f1b9 0f00 	cmp.w	r9, #0
 800cff0:	dc33      	bgt.n	800d05a <_printf_float+0x396>
 800cff2:	f04f 0800 	mov.w	r8, #0
 800cff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cffa:	f104 0b1a 	add.w	fp, r4, #26
 800cffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d000:	ebaa 0303 	sub.w	r3, sl, r3
 800d004:	eba3 0309 	sub.w	r3, r3, r9
 800d008:	4543      	cmp	r3, r8
 800d00a:	f77f af79 	ble.w	800cf00 <_printf_float+0x23c>
 800d00e:	2301      	movs	r3, #1
 800d010:	465a      	mov	r2, fp
 800d012:	4631      	mov	r1, r6
 800d014:	4628      	mov	r0, r5
 800d016:	47b8      	blx	r7
 800d018:	3001      	adds	r0, #1
 800d01a:	f43f aeae 	beq.w	800cd7a <_printf_float+0xb6>
 800d01e:	f108 0801 	add.w	r8, r8, #1
 800d022:	e7ec      	b.n	800cffe <_printf_float+0x33a>
 800d024:	4642      	mov	r2, r8
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	d1c2      	bne.n	800cfb6 <_printf_float+0x2f2>
 800d030:	e6a3      	b.n	800cd7a <_printf_float+0xb6>
 800d032:	2301      	movs	r3, #1
 800d034:	4631      	mov	r1, r6
 800d036:	4628      	mov	r0, r5
 800d038:	9206      	str	r2, [sp, #24]
 800d03a:	47b8      	blx	r7
 800d03c:	3001      	adds	r0, #1
 800d03e:	f43f ae9c 	beq.w	800cd7a <_printf_float+0xb6>
 800d042:	9a06      	ldr	r2, [sp, #24]
 800d044:	f10b 0b01 	add.w	fp, fp, #1
 800d048:	e7bb      	b.n	800cfc2 <_printf_float+0x2fe>
 800d04a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d04e:	4631      	mov	r1, r6
 800d050:	4628      	mov	r0, r5
 800d052:	47b8      	blx	r7
 800d054:	3001      	adds	r0, #1
 800d056:	d1c0      	bne.n	800cfda <_printf_float+0x316>
 800d058:	e68f      	b.n	800cd7a <_printf_float+0xb6>
 800d05a:	9a06      	ldr	r2, [sp, #24]
 800d05c:	464b      	mov	r3, r9
 800d05e:	4442      	add	r2, r8
 800d060:	4631      	mov	r1, r6
 800d062:	4628      	mov	r0, r5
 800d064:	47b8      	blx	r7
 800d066:	3001      	adds	r0, #1
 800d068:	d1c3      	bne.n	800cff2 <_printf_float+0x32e>
 800d06a:	e686      	b.n	800cd7a <_printf_float+0xb6>
 800d06c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d070:	f1ba 0f01 	cmp.w	sl, #1
 800d074:	dc01      	bgt.n	800d07a <_printf_float+0x3b6>
 800d076:	07db      	lsls	r3, r3, #31
 800d078:	d536      	bpl.n	800d0e8 <_printf_float+0x424>
 800d07a:	2301      	movs	r3, #1
 800d07c:	4642      	mov	r2, r8
 800d07e:	4631      	mov	r1, r6
 800d080:	4628      	mov	r0, r5
 800d082:	47b8      	blx	r7
 800d084:	3001      	adds	r0, #1
 800d086:	f43f ae78 	beq.w	800cd7a <_printf_float+0xb6>
 800d08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d08e:	4631      	mov	r1, r6
 800d090:	4628      	mov	r0, r5
 800d092:	47b8      	blx	r7
 800d094:	3001      	adds	r0, #1
 800d096:	f43f ae70 	beq.w	800cd7a <_printf_float+0xb6>
 800d09a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d09e:	2200      	movs	r2, #0
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0a6:	f7f3 fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0aa:	b9c0      	cbnz	r0, 800d0de <_printf_float+0x41a>
 800d0ac:	4653      	mov	r3, sl
 800d0ae:	f108 0201 	add.w	r2, r8, #1
 800d0b2:	4631      	mov	r1, r6
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	47b8      	blx	r7
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d10c      	bne.n	800d0d6 <_printf_float+0x412>
 800d0bc:	e65d      	b.n	800cd7a <_printf_float+0xb6>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	465a      	mov	r2, fp
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	47b8      	blx	r7
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	f43f ae56 	beq.w	800cd7a <_printf_float+0xb6>
 800d0ce:	f108 0801 	add.w	r8, r8, #1
 800d0d2:	45d0      	cmp	r8, sl
 800d0d4:	dbf3      	blt.n	800d0be <_printf_float+0x3fa>
 800d0d6:	464b      	mov	r3, r9
 800d0d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d0dc:	e6df      	b.n	800ce9e <_printf_float+0x1da>
 800d0de:	f04f 0800 	mov.w	r8, #0
 800d0e2:	f104 0b1a 	add.w	fp, r4, #26
 800d0e6:	e7f4      	b.n	800d0d2 <_printf_float+0x40e>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	4642      	mov	r2, r8
 800d0ec:	e7e1      	b.n	800d0b2 <_printf_float+0x3ee>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	464a      	mov	r2, r9
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	47b8      	blx	r7
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	f43f ae3e 	beq.w	800cd7a <_printf_float+0xb6>
 800d0fe:	f108 0801 	add.w	r8, r8, #1
 800d102:	68e3      	ldr	r3, [r4, #12]
 800d104:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d106:	1a5b      	subs	r3, r3, r1
 800d108:	4543      	cmp	r3, r8
 800d10a:	dcf0      	bgt.n	800d0ee <_printf_float+0x42a>
 800d10c:	e6fc      	b.n	800cf08 <_printf_float+0x244>
 800d10e:	f04f 0800 	mov.w	r8, #0
 800d112:	f104 0919 	add.w	r9, r4, #25
 800d116:	e7f4      	b.n	800d102 <_printf_float+0x43e>

0800d118 <_printf_common>:
 800d118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d11c:	4616      	mov	r6, r2
 800d11e:	4698      	mov	r8, r3
 800d120:	688a      	ldr	r2, [r1, #8]
 800d122:	690b      	ldr	r3, [r1, #16]
 800d124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d128:	4293      	cmp	r3, r2
 800d12a:	bfb8      	it	lt
 800d12c:	4613      	movlt	r3, r2
 800d12e:	6033      	str	r3, [r6, #0]
 800d130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d134:	4607      	mov	r7, r0
 800d136:	460c      	mov	r4, r1
 800d138:	b10a      	cbz	r2, 800d13e <_printf_common+0x26>
 800d13a:	3301      	adds	r3, #1
 800d13c:	6033      	str	r3, [r6, #0]
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	0699      	lsls	r1, r3, #26
 800d142:	bf42      	ittt	mi
 800d144:	6833      	ldrmi	r3, [r6, #0]
 800d146:	3302      	addmi	r3, #2
 800d148:	6033      	strmi	r3, [r6, #0]
 800d14a:	6825      	ldr	r5, [r4, #0]
 800d14c:	f015 0506 	ands.w	r5, r5, #6
 800d150:	d106      	bne.n	800d160 <_printf_common+0x48>
 800d152:	f104 0a19 	add.w	sl, r4, #25
 800d156:	68e3      	ldr	r3, [r4, #12]
 800d158:	6832      	ldr	r2, [r6, #0]
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	42ab      	cmp	r3, r5
 800d15e:	dc26      	bgt.n	800d1ae <_printf_common+0x96>
 800d160:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d164:	6822      	ldr	r2, [r4, #0]
 800d166:	3b00      	subs	r3, #0
 800d168:	bf18      	it	ne
 800d16a:	2301      	movne	r3, #1
 800d16c:	0692      	lsls	r2, r2, #26
 800d16e:	d42b      	bmi.n	800d1c8 <_printf_common+0xb0>
 800d170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d174:	4641      	mov	r1, r8
 800d176:	4638      	mov	r0, r7
 800d178:	47c8      	blx	r9
 800d17a:	3001      	adds	r0, #1
 800d17c:	d01e      	beq.n	800d1bc <_printf_common+0xa4>
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	6922      	ldr	r2, [r4, #16]
 800d182:	f003 0306 	and.w	r3, r3, #6
 800d186:	2b04      	cmp	r3, #4
 800d188:	bf02      	ittt	eq
 800d18a:	68e5      	ldreq	r5, [r4, #12]
 800d18c:	6833      	ldreq	r3, [r6, #0]
 800d18e:	1aed      	subeq	r5, r5, r3
 800d190:	68a3      	ldr	r3, [r4, #8]
 800d192:	bf0c      	ite	eq
 800d194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d198:	2500      	movne	r5, #0
 800d19a:	4293      	cmp	r3, r2
 800d19c:	bfc4      	itt	gt
 800d19e:	1a9b      	subgt	r3, r3, r2
 800d1a0:	18ed      	addgt	r5, r5, r3
 800d1a2:	2600      	movs	r6, #0
 800d1a4:	341a      	adds	r4, #26
 800d1a6:	42b5      	cmp	r5, r6
 800d1a8:	d11a      	bne.n	800d1e0 <_printf_common+0xc8>
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	e008      	b.n	800d1c0 <_printf_common+0xa8>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	4652      	mov	r2, sl
 800d1b2:	4641      	mov	r1, r8
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	47c8      	blx	r9
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	d103      	bne.n	800d1c4 <_printf_common+0xac>
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c4:	3501      	adds	r5, #1
 800d1c6:	e7c6      	b.n	800d156 <_printf_common+0x3e>
 800d1c8:	18e1      	adds	r1, r4, r3
 800d1ca:	1c5a      	adds	r2, r3, #1
 800d1cc:	2030      	movs	r0, #48	@ 0x30
 800d1ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1d2:	4422      	add	r2, r4
 800d1d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1dc:	3302      	adds	r3, #2
 800d1de:	e7c7      	b.n	800d170 <_printf_common+0x58>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	47c8      	blx	r9
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	d0e6      	beq.n	800d1bc <_printf_common+0xa4>
 800d1ee:	3601      	adds	r6, #1
 800d1f0:	e7d9      	b.n	800d1a6 <_printf_common+0x8e>
	...

0800d1f4 <_printf_i>:
 800d1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f8:	7e0f      	ldrb	r7, [r1, #24]
 800d1fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d1fc:	2f78      	cmp	r7, #120	@ 0x78
 800d1fe:	4691      	mov	r9, r2
 800d200:	4680      	mov	r8, r0
 800d202:	460c      	mov	r4, r1
 800d204:	469a      	mov	sl, r3
 800d206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d20a:	d807      	bhi.n	800d21c <_printf_i+0x28>
 800d20c:	2f62      	cmp	r7, #98	@ 0x62
 800d20e:	d80a      	bhi.n	800d226 <_printf_i+0x32>
 800d210:	2f00      	cmp	r7, #0
 800d212:	f000 80d2 	beq.w	800d3ba <_printf_i+0x1c6>
 800d216:	2f58      	cmp	r7, #88	@ 0x58
 800d218:	f000 80b9 	beq.w	800d38e <_printf_i+0x19a>
 800d21c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d224:	e03a      	b.n	800d29c <_printf_i+0xa8>
 800d226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d22a:	2b15      	cmp	r3, #21
 800d22c:	d8f6      	bhi.n	800d21c <_printf_i+0x28>
 800d22e:	a101      	add	r1, pc, #4	@ (adr r1, 800d234 <_printf_i+0x40>)
 800d230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d234:	0800d28d 	.word	0x0800d28d
 800d238:	0800d2a1 	.word	0x0800d2a1
 800d23c:	0800d21d 	.word	0x0800d21d
 800d240:	0800d21d 	.word	0x0800d21d
 800d244:	0800d21d 	.word	0x0800d21d
 800d248:	0800d21d 	.word	0x0800d21d
 800d24c:	0800d2a1 	.word	0x0800d2a1
 800d250:	0800d21d 	.word	0x0800d21d
 800d254:	0800d21d 	.word	0x0800d21d
 800d258:	0800d21d 	.word	0x0800d21d
 800d25c:	0800d21d 	.word	0x0800d21d
 800d260:	0800d3a1 	.word	0x0800d3a1
 800d264:	0800d2cb 	.word	0x0800d2cb
 800d268:	0800d35b 	.word	0x0800d35b
 800d26c:	0800d21d 	.word	0x0800d21d
 800d270:	0800d21d 	.word	0x0800d21d
 800d274:	0800d3c3 	.word	0x0800d3c3
 800d278:	0800d21d 	.word	0x0800d21d
 800d27c:	0800d2cb 	.word	0x0800d2cb
 800d280:	0800d21d 	.word	0x0800d21d
 800d284:	0800d21d 	.word	0x0800d21d
 800d288:	0800d363 	.word	0x0800d363
 800d28c:	6833      	ldr	r3, [r6, #0]
 800d28e:	1d1a      	adds	r2, r3, #4
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6032      	str	r2, [r6, #0]
 800d294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d29c:	2301      	movs	r3, #1
 800d29e:	e09d      	b.n	800d3dc <_printf_i+0x1e8>
 800d2a0:	6833      	ldr	r3, [r6, #0]
 800d2a2:	6820      	ldr	r0, [r4, #0]
 800d2a4:	1d19      	adds	r1, r3, #4
 800d2a6:	6031      	str	r1, [r6, #0]
 800d2a8:	0606      	lsls	r6, r0, #24
 800d2aa:	d501      	bpl.n	800d2b0 <_printf_i+0xbc>
 800d2ac:	681d      	ldr	r5, [r3, #0]
 800d2ae:	e003      	b.n	800d2b8 <_printf_i+0xc4>
 800d2b0:	0645      	lsls	r5, r0, #25
 800d2b2:	d5fb      	bpl.n	800d2ac <_printf_i+0xb8>
 800d2b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2b8:	2d00      	cmp	r5, #0
 800d2ba:	da03      	bge.n	800d2c4 <_printf_i+0xd0>
 800d2bc:	232d      	movs	r3, #45	@ 0x2d
 800d2be:	426d      	negs	r5, r5
 800d2c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2c4:	4859      	ldr	r0, [pc, #356]	@ (800d42c <_printf_i+0x238>)
 800d2c6:	230a      	movs	r3, #10
 800d2c8:	e011      	b.n	800d2ee <_printf_i+0xfa>
 800d2ca:	6821      	ldr	r1, [r4, #0]
 800d2cc:	6833      	ldr	r3, [r6, #0]
 800d2ce:	0608      	lsls	r0, r1, #24
 800d2d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2d4:	d402      	bmi.n	800d2dc <_printf_i+0xe8>
 800d2d6:	0649      	lsls	r1, r1, #25
 800d2d8:	bf48      	it	mi
 800d2da:	b2ad      	uxthmi	r5, r5
 800d2dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2de:	4853      	ldr	r0, [pc, #332]	@ (800d42c <_printf_i+0x238>)
 800d2e0:	6033      	str	r3, [r6, #0]
 800d2e2:	bf14      	ite	ne
 800d2e4:	230a      	movne	r3, #10
 800d2e6:	2308      	moveq	r3, #8
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d2ee:	6866      	ldr	r6, [r4, #4]
 800d2f0:	60a6      	str	r6, [r4, #8]
 800d2f2:	2e00      	cmp	r6, #0
 800d2f4:	bfa2      	ittt	ge
 800d2f6:	6821      	ldrge	r1, [r4, #0]
 800d2f8:	f021 0104 	bicge.w	r1, r1, #4
 800d2fc:	6021      	strge	r1, [r4, #0]
 800d2fe:	b90d      	cbnz	r5, 800d304 <_printf_i+0x110>
 800d300:	2e00      	cmp	r6, #0
 800d302:	d04b      	beq.n	800d39c <_printf_i+0x1a8>
 800d304:	4616      	mov	r6, r2
 800d306:	fbb5 f1f3 	udiv	r1, r5, r3
 800d30a:	fb03 5711 	mls	r7, r3, r1, r5
 800d30e:	5dc7      	ldrb	r7, [r0, r7]
 800d310:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d314:	462f      	mov	r7, r5
 800d316:	42bb      	cmp	r3, r7
 800d318:	460d      	mov	r5, r1
 800d31a:	d9f4      	bls.n	800d306 <_printf_i+0x112>
 800d31c:	2b08      	cmp	r3, #8
 800d31e:	d10b      	bne.n	800d338 <_printf_i+0x144>
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	07df      	lsls	r7, r3, #31
 800d324:	d508      	bpl.n	800d338 <_printf_i+0x144>
 800d326:	6923      	ldr	r3, [r4, #16]
 800d328:	6861      	ldr	r1, [r4, #4]
 800d32a:	4299      	cmp	r1, r3
 800d32c:	bfde      	ittt	le
 800d32e:	2330      	movle	r3, #48	@ 0x30
 800d330:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d334:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d338:	1b92      	subs	r2, r2, r6
 800d33a:	6122      	str	r2, [r4, #16]
 800d33c:	f8cd a000 	str.w	sl, [sp]
 800d340:	464b      	mov	r3, r9
 800d342:	aa03      	add	r2, sp, #12
 800d344:	4621      	mov	r1, r4
 800d346:	4640      	mov	r0, r8
 800d348:	f7ff fee6 	bl	800d118 <_printf_common>
 800d34c:	3001      	adds	r0, #1
 800d34e:	d14a      	bne.n	800d3e6 <_printf_i+0x1f2>
 800d350:	f04f 30ff 	mov.w	r0, #4294967295
 800d354:	b004      	add	sp, #16
 800d356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	f043 0320 	orr.w	r3, r3, #32
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	4833      	ldr	r0, [pc, #204]	@ (800d430 <_printf_i+0x23c>)
 800d364:	2778      	movs	r7, #120	@ 0x78
 800d366:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	6831      	ldr	r1, [r6, #0]
 800d36e:	061f      	lsls	r7, r3, #24
 800d370:	f851 5b04 	ldr.w	r5, [r1], #4
 800d374:	d402      	bmi.n	800d37c <_printf_i+0x188>
 800d376:	065f      	lsls	r7, r3, #25
 800d378:	bf48      	it	mi
 800d37a:	b2ad      	uxthmi	r5, r5
 800d37c:	6031      	str	r1, [r6, #0]
 800d37e:	07d9      	lsls	r1, r3, #31
 800d380:	bf44      	itt	mi
 800d382:	f043 0320 	orrmi.w	r3, r3, #32
 800d386:	6023      	strmi	r3, [r4, #0]
 800d388:	b11d      	cbz	r5, 800d392 <_printf_i+0x19e>
 800d38a:	2310      	movs	r3, #16
 800d38c:	e7ac      	b.n	800d2e8 <_printf_i+0xf4>
 800d38e:	4827      	ldr	r0, [pc, #156]	@ (800d42c <_printf_i+0x238>)
 800d390:	e7e9      	b.n	800d366 <_printf_i+0x172>
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	f023 0320 	bic.w	r3, r3, #32
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	e7f6      	b.n	800d38a <_printf_i+0x196>
 800d39c:	4616      	mov	r6, r2
 800d39e:	e7bd      	b.n	800d31c <_printf_i+0x128>
 800d3a0:	6833      	ldr	r3, [r6, #0]
 800d3a2:	6825      	ldr	r5, [r4, #0]
 800d3a4:	6961      	ldr	r1, [r4, #20]
 800d3a6:	1d18      	adds	r0, r3, #4
 800d3a8:	6030      	str	r0, [r6, #0]
 800d3aa:	062e      	lsls	r6, r5, #24
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	d501      	bpl.n	800d3b4 <_printf_i+0x1c0>
 800d3b0:	6019      	str	r1, [r3, #0]
 800d3b2:	e002      	b.n	800d3ba <_printf_i+0x1c6>
 800d3b4:	0668      	lsls	r0, r5, #25
 800d3b6:	d5fb      	bpl.n	800d3b0 <_printf_i+0x1bc>
 800d3b8:	8019      	strh	r1, [r3, #0]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	6123      	str	r3, [r4, #16]
 800d3be:	4616      	mov	r6, r2
 800d3c0:	e7bc      	b.n	800d33c <_printf_i+0x148>
 800d3c2:	6833      	ldr	r3, [r6, #0]
 800d3c4:	1d1a      	adds	r2, r3, #4
 800d3c6:	6032      	str	r2, [r6, #0]
 800d3c8:	681e      	ldr	r6, [r3, #0]
 800d3ca:	6862      	ldr	r2, [r4, #4]
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f7f2 fefe 	bl	80001d0 <memchr>
 800d3d4:	b108      	cbz	r0, 800d3da <_printf_i+0x1e6>
 800d3d6:	1b80      	subs	r0, r0, r6
 800d3d8:	6060      	str	r0, [r4, #4]
 800d3da:	6863      	ldr	r3, [r4, #4]
 800d3dc:	6123      	str	r3, [r4, #16]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3e4:	e7aa      	b.n	800d33c <_printf_i+0x148>
 800d3e6:	6923      	ldr	r3, [r4, #16]
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	47d0      	blx	sl
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d0ad      	beq.n	800d350 <_printf_i+0x15c>
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	079b      	lsls	r3, r3, #30
 800d3f8:	d413      	bmi.n	800d422 <_printf_i+0x22e>
 800d3fa:	68e0      	ldr	r0, [r4, #12]
 800d3fc:	9b03      	ldr	r3, [sp, #12]
 800d3fe:	4298      	cmp	r0, r3
 800d400:	bfb8      	it	lt
 800d402:	4618      	movlt	r0, r3
 800d404:	e7a6      	b.n	800d354 <_printf_i+0x160>
 800d406:	2301      	movs	r3, #1
 800d408:	4632      	mov	r2, r6
 800d40a:	4649      	mov	r1, r9
 800d40c:	4640      	mov	r0, r8
 800d40e:	47d0      	blx	sl
 800d410:	3001      	adds	r0, #1
 800d412:	d09d      	beq.n	800d350 <_printf_i+0x15c>
 800d414:	3501      	adds	r5, #1
 800d416:	68e3      	ldr	r3, [r4, #12]
 800d418:	9903      	ldr	r1, [sp, #12]
 800d41a:	1a5b      	subs	r3, r3, r1
 800d41c:	42ab      	cmp	r3, r5
 800d41e:	dcf2      	bgt.n	800d406 <_printf_i+0x212>
 800d420:	e7eb      	b.n	800d3fa <_printf_i+0x206>
 800d422:	2500      	movs	r5, #0
 800d424:	f104 0619 	add.w	r6, r4, #25
 800d428:	e7f5      	b.n	800d416 <_printf_i+0x222>
 800d42a:	bf00      	nop
 800d42c:	0800f79d 	.word	0x0800f79d
 800d430:	0800f7ae 	.word	0x0800f7ae

0800d434 <std>:
 800d434:	2300      	movs	r3, #0
 800d436:	b510      	push	{r4, lr}
 800d438:	4604      	mov	r4, r0
 800d43a:	e9c0 3300 	strd	r3, r3, [r0]
 800d43e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d442:	6083      	str	r3, [r0, #8]
 800d444:	8181      	strh	r1, [r0, #12]
 800d446:	6643      	str	r3, [r0, #100]	@ 0x64
 800d448:	81c2      	strh	r2, [r0, #14]
 800d44a:	6183      	str	r3, [r0, #24]
 800d44c:	4619      	mov	r1, r3
 800d44e:	2208      	movs	r2, #8
 800d450:	305c      	adds	r0, #92	@ 0x5c
 800d452:	f000 f9f9 	bl	800d848 <memset>
 800d456:	4b0d      	ldr	r3, [pc, #52]	@ (800d48c <std+0x58>)
 800d458:	6263      	str	r3, [r4, #36]	@ 0x24
 800d45a:	4b0d      	ldr	r3, [pc, #52]	@ (800d490 <std+0x5c>)
 800d45c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d45e:	4b0d      	ldr	r3, [pc, #52]	@ (800d494 <std+0x60>)
 800d460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d462:	4b0d      	ldr	r3, [pc, #52]	@ (800d498 <std+0x64>)
 800d464:	6323      	str	r3, [r4, #48]	@ 0x30
 800d466:	4b0d      	ldr	r3, [pc, #52]	@ (800d49c <std+0x68>)
 800d468:	6224      	str	r4, [r4, #32]
 800d46a:	429c      	cmp	r4, r3
 800d46c:	d006      	beq.n	800d47c <std+0x48>
 800d46e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d472:	4294      	cmp	r4, r2
 800d474:	d002      	beq.n	800d47c <std+0x48>
 800d476:	33d0      	adds	r3, #208	@ 0xd0
 800d478:	429c      	cmp	r4, r3
 800d47a:	d105      	bne.n	800d488 <std+0x54>
 800d47c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d484:	f000 ba5c 	b.w	800d940 <__retarget_lock_init_recursive>
 800d488:	bd10      	pop	{r4, pc}
 800d48a:	bf00      	nop
 800d48c:	0800d699 	.word	0x0800d699
 800d490:	0800d6bb 	.word	0x0800d6bb
 800d494:	0800d6f3 	.word	0x0800d6f3
 800d498:	0800d717 	.word	0x0800d717
 800d49c:	20002ff8 	.word	0x20002ff8

0800d4a0 <stdio_exit_handler>:
 800d4a0:	4a02      	ldr	r2, [pc, #8]	@ (800d4ac <stdio_exit_handler+0xc>)
 800d4a2:	4903      	ldr	r1, [pc, #12]	@ (800d4b0 <stdio_exit_handler+0x10>)
 800d4a4:	4803      	ldr	r0, [pc, #12]	@ (800d4b4 <stdio_exit_handler+0x14>)
 800d4a6:	f000 b869 	b.w	800d57c <_fwalk_sglue>
 800d4aa:	bf00      	nop
 800d4ac:	2000005c 	.word	0x2000005c
 800d4b0:	0800f2c9 	.word	0x0800f2c9
 800d4b4:	2000006c 	.word	0x2000006c

0800d4b8 <cleanup_stdio>:
 800d4b8:	6841      	ldr	r1, [r0, #4]
 800d4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d4ec <cleanup_stdio+0x34>)
 800d4bc:	4299      	cmp	r1, r3
 800d4be:	b510      	push	{r4, lr}
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	d001      	beq.n	800d4c8 <cleanup_stdio+0x10>
 800d4c4:	f001 ff00 	bl	800f2c8 <_fflush_r>
 800d4c8:	68a1      	ldr	r1, [r4, #8]
 800d4ca:	4b09      	ldr	r3, [pc, #36]	@ (800d4f0 <cleanup_stdio+0x38>)
 800d4cc:	4299      	cmp	r1, r3
 800d4ce:	d002      	beq.n	800d4d6 <cleanup_stdio+0x1e>
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f001 fef9 	bl	800f2c8 <_fflush_r>
 800d4d6:	68e1      	ldr	r1, [r4, #12]
 800d4d8:	4b06      	ldr	r3, [pc, #24]	@ (800d4f4 <cleanup_stdio+0x3c>)
 800d4da:	4299      	cmp	r1, r3
 800d4dc:	d004      	beq.n	800d4e8 <cleanup_stdio+0x30>
 800d4de:	4620      	mov	r0, r4
 800d4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4e4:	f001 bef0 	b.w	800f2c8 <_fflush_r>
 800d4e8:	bd10      	pop	{r4, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20002ff8 	.word	0x20002ff8
 800d4f0:	20003060 	.word	0x20003060
 800d4f4:	200030c8 	.word	0x200030c8

0800d4f8 <global_stdio_init.part.0>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d528 <global_stdio_init.part.0+0x30>)
 800d4fc:	4c0b      	ldr	r4, [pc, #44]	@ (800d52c <global_stdio_init.part.0+0x34>)
 800d4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800d530 <global_stdio_init.part.0+0x38>)
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	4620      	mov	r0, r4
 800d504:	2200      	movs	r2, #0
 800d506:	2104      	movs	r1, #4
 800d508:	f7ff ff94 	bl	800d434 <std>
 800d50c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d510:	2201      	movs	r2, #1
 800d512:	2109      	movs	r1, #9
 800d514:	f7ff ff8e 	bl	800d434 <std>
 800d518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d51c:	2202      	movs	r2, #2
 800d51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d522:	2112      	movs	r1, #18
 800d524:	f7ff bf86 	b.w	800d434 <std>
 800d528:	20003130 	.word	0x20003130
 800d52c:	20002ff8 	.word	0x20002ff8
 800d530:	0800d4a1 	.word	0x0800d4a1

0800d534 <__sfp_lock_acquire>:
 800d534:	4801      	ldr	r0, [pc, #4]	@ (800d53c <__sfp_lock_acquire+0x8>)
 800d536:	f000 ba04 	b.w	800d942 <__retarget_lock_acquire_recursive>
 800d53a:	bf00      	nop
 800d53c:	20003139 	.word	0x20003139

0800d540 <__sfp_lock_release>:
 800d540:	4801      	ldr	r0, [pc, #4]	@ (800d548 <__sfp_lock_release+0x8>)
 800d542:	f000 b9ff 	b.w	800d944 <__retarget_lock_release_recursive>
 800d546:	bf00      	nop
 800d548:	20003139 	.word	0x20003139

0800d54c <__sinit>:
 800d54c:	b510      	push	{r4, lr}
 800d54e:	4604      	mov	r4, r0
 800d550:	f7ff fff0 	bl	800d534 <__sfp_lock_acquire>
 800d554:	6a23      	ldr	r3, [r4, #32]
 800d556:	b11b      	cbz	r3, 800d560 <__sinit+0x14>
 800d558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d55c:	f7ff bff0 	b.w	800d540 <__sfp_lock_release>
 800d560:	4b04      	ldr	r3, [pc, #16]	@ (800d574 <__sinit+0x28>)
 800d562:	6223      	str	r3, [r4, #32]
 800d564:	4b04      	ldr	r3, [pc, #16]	@ (800d578 <__sinit+0x2c>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1f5      	bne.n	800d558 <__sinit+0xc>
 800d56c:	f7ff ffc4 	bl	800d4f8 <global_stdio_init.part.0>
 800d570:	e7f2      	b.n	800d558 <__sinit+0xc>
 800d572:	bf00      	nop
 800d574:	0800d4b9 	.word	0x0800d4b9
 800d578:	20003130 	.word	0x20003130

0800d57c <_fwalk_sglue>:
 800d57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d580:	4607      	mov	r7, r0
 800d582:	4688      	mov	r8, r1
 800d584:	4614      	mov	r4, r2
 800d586:	2600      	movs	r6, #0
 800d588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d58c:	f1b9 0901 	subs.w	r9, r9, #1
 800d590:	d505      	bpl.n	800d59e <_fwalk_sglue+0x22>
 800d592:	6824      	ldr	r4, [r4, #0]
 800d594:	2c00      	cmp	r4, #0
 800d596:	d1f7      	bne.n	800d588 <_fwalk_sglue+0xc>
 800d598:	4630      	mov	r0, r6
 800d59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d59e:	89ab      	ldrh	r3, [r5, #12]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d907      	bls.n	800d5b4 <_fwalk_sglue+0x38>
 800d5a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	d003      	beq.n	800d5b4 <_fwalk_sglue+0x38>
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	47c0      	blx	r8
 800d5b2:	4306      	orrs	r6, r0
 800d5b4:	3568      	adds	r5, #104	@ 0x68
 800d5b6:	e7e9      	b.n	800d58c <_fwalk_sglue+0x10>

0800d5b8 <iprintf>:
 800d5b8:	b40f      	push	{r0, r1, r2, r3}
 800d5ba:	b507      	push	{r0, r1, r2, lr}
 800d5bc:	4906      	ldr	r1, [pc, #24]	@ (800d5d8 <iprintf+0x20>)
 800d5be:	ab04      	add	r3, sp, #16
 800d5c0:	6808      	ldr	r0, [r1, #0]
 800d5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5c6:	6881      	ldr	r1, [r0, #8]
 800d5c8:	9301      	str	r3, [sp, #4]
 800d5ca:	f001 fce1 	bl	800ef90 <_vfiprintf_r>
 800d5ce:	b003      	add	sp, #12
 800d5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d4:	b004      	add	sp, #16
 800d5d6:	4770      	bx	lr
 800d5d8:	20000068 	.word	0x20000068

0800d5dc <_puts_r>:
 800d5dc:	6a03      	ldr	r3, [r0, #32]
 800d5de:	b570      	push	{r4, r5, r6, lr}
 800d5e0:	6884      	ldr	r4, [r0, #8]
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	460e      	mov	r6, r1
 800d5e6:	b90b      	cbnz	r3, 800d5ec <_puts_r+0x10>
 800d5e8:	f7ff ffb0 	bl	800d54c <__sinit>
 800d5ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5ee:	07db      	lsls	r3, r3, #31
 800d5f0:	d405      	bmi.n	800d5fe <_puts_r+0x22>
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	0598      	lsls	r0, r3, #22
 800d5f6:	d402      	bmi.n	800d5fe <_puts_r+0x22>
 800d5f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5fa:	f000 f9a2 	bl	800d942 <__retarget_lock_acquire_recursive>
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	0719      	lsls	r1, r3, #28
 800d602:	d502      	bpl.n	800d60a <_puts_r+0x2e>
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d135      	bne.n	800d676 <_puts_r+0x9a>
 800d60a:	4621      	mov	r1, r4
 800d60c:	4628      	mov	r0, r5
 800d60e:	f000 f8c5 	bl	800d79c <__swsetup_r>
 800d612:	b380      	cbz	r0, 800d676 <_puts_r+0x9a>
 800d614:	f04f 35ff 	mov.w	r5, #4294967295
 800d618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d61a:	07da      	lsls	r2, r3, #31
 800d61c:	d405      	bmi.n	800d62a <_puts_r+0x4e>
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	059b      	lsls	r3, r3, #22
 800d622:	d402      	bmi.n	800d62a <_puts_r+0x4e>
 800d624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d626:	f000 f98d 	bl	800d944 <__retarget_lock_release_recursive>
 800d62a:	4628      	mov	r0, r5
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
 800d62e:	2b00      	cmp	r3, #0
 800d630:	da04      	bge.n	800d63c <_puts_r+0x60>
 800d632:	69a2      	ldr	r2, [r4, #24]
 800d634:	429a      	cmp	r2, r3
 800d636:	dc17      	bgt.n	800d668 <_puts_r+0x8c>
 800d638:	290a      	cmp	r1, #10
 800d63a:	d015      	beq.n	800d668 <_puts_r+0x8c>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	1c5a      	adds	r2, r3, #1
 800d640:	6022      	str	r2, [r4, #0]
 800d642:	7019      	strb	r1, [r3, #0]
 800d644:	68a3      	ldr	r3, [r4, #8]
 800d646:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d64a:	3b01      	subs	r3, #1
 800d64c:	60a3      	str	r3, [r4, #8]
 800d64e:	2900      	cmp	r1, #0
 800d650:	d1ed      	bne.n	800d62e <_puts_r+0x52>
 800d652:	2b00      	cmp	r3, #0
 800d654:	da11      	bge.n	800d67a <_puts_r+0x9e>
 800d656:	4622      	mov	r2, r4
 800d658:	210a      	movs	r1, #10
 800d65a:	4628      	mov	r0, r5
 800d65c:	f000 f85f 	bl	800d71e <__swbuf_r>
 800d660:	3001      	adds	r0, #1
 800d662:	d0d7      	beq.n	800d614 <_puts_r+0x38>
 800d664:	250a      	movs	r5, #10
 800d666:	e7d7      	b.n	800d618 <_puts_r+0x3c>
 800d668:	4622      	mov	r2, r4
 800d66a:	4628      	mov	r0, r5
 800d66c:	f000 f857 	bl	800d71e <__swbuf_r>
 800d670:	3001      	adds	r0, #1
 800d672:	d1e7      	bne.n	800d644 <_puts_r+0x68>
 800d674:	e7ce      	b.n	800d614 <_puts_r+0x38>
 800d676:	3e01      	subs	r6, #1
 800d678:	e7e4      	b.n	800d644 <_puts_r+0x68>
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	6022      	str	r2, [r4, #0]
 800d680:	220a      	movs	r2, #10
 800d682:	701a      	strb	r2, [r3, #0]
 800d684:	e7ee      	b.n	800d664 <_puts_r+0x88>
	...

0800d688 <puts>:
 800d688:	4b02      	ldr	r3, [pc, #8]	@ (800d694 <puts+0xc>)
 800d68a:	4601      	mov	r1, r0
 800d68c:	6818      	ldr	r0, [r3, #0]
 800d68e:	f7ff bfa5 	b.w	800d5dc <_puts_r>
 800d692:	bf00      	nop
 800d694:	20000068 	.word	0x20000068

0800d698 <__sread>:
 800d698:	b510      	push	{r4, lr}
 800d69a:	460c      	mov	r4, r1
 800d69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a0:	f000 f900 	bl	800d8a4 <_read_r>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	bfab      	itete	ge
 800d6a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d6ac:	181b      	addge	r3, r3, r0
 800d6ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6b2:	bfac      	ite	ge
 800d6b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6b6:	81a3      	strhlt	r3, [r4, #12]
 800d6b8:	bd10      	pop	{r4, pc}

0800d6ba <__swrite>:
 800d6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6be:	461f      	mov	r7, r3
 800d6c0:	898b      	ldrh	r3, [r1, #12]
 800d6c2:	05db      	lsls	r3, r3, #23
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	460c      	mov	r4, r1
 800d6c8:	4616      	mov	r6, r2
 800d6ca:	d505      	bpl.n	800d6d8 <__swrite+0x1e>
 800d6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6d0:	2302      	movs	r3, #2
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f000 f8d4 	bl	800d880 <_lseek_r>
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6e2:	81a3      	strh	r3, [r4, #12]
 800d6e4:	4632      	mov	r2, r6
 800d6e6:	463b      	mov	r3, r7
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ee:	f000 b8eb 	b.w	800d8c8 <_write_r>

0800d6f2 <__sseek>:
 800d6f2:	b510      	push	{r4, lr}
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6fa:	f000 f8c1 	bl	800d880 <_lseek_r>
 800d6fe:	1c43      	adds	r3, r0, #1
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	bf15      	itete	ne
 800d704:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d70a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d70e:	81a3      	strheq	r3, [r4, #12]
 800d710:	bf18      	it	ne
 800d712:	81a3      	strhne	r3, [r4, #12]
 800d714:	bd10      	pop	{r4, pc}

0800d716 <__sclose>:
 800d716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d71a:	f000 b8a1 	b.w	800d860 <_close_r>

0800d71e <__swbuf_r>:
 800d71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d720:	460e      	mov	r6, r1
 800d722:	4614      	mov	r4, r2
 800d724:	4605      	mov	r5, r0
 800d726:	b118      	cbz	r0, 800d730 <__swbuf_r+0x12>
 800d728:	6a03      	ldr	r3, [r0, #32]
 800d72a:	b90b      	cbnz	r3, 800d730 <__swbuf_r+0x12>
 800d72c:	f7ff ff0e 	bl	800d54c <__sinit>
 800d730:	69a3      	ldr	r3, [r4, #24]
 800d732:	60a3      	str	r3, [r4, #8]
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	071a      	lsls	r2, r3, #28
 800d738:	d501      	bpl.n	800d73e <__swbuf_r+0x20>
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	b943      	cbnz	r3, 800d750 <__swbuf_r+0x32>
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f000 f82b 	bl	800d79c <__swsetup_r>
 800d746:	b118      	cbz	r0, 800d750 <__swbuf_r+0x32>
 800d748:	f04f 37ff 	mov.w	r7, #4294967295
 800d74c:	4638      	mov	r0, r7
 800d74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	6922      	ldr	r2, [r4, #16]
 800d754:	1a98      	subs	r0, r3, r2
 800d756:	6963      	ldr	r3, [r4, #20]
 800d758:	b2f6      	uxtb	r6, r6
 800d75a:	4283      	cmp	r3, r0
 800d75c:	4637      	mov	r7, r6
 800d75e:	dc05      	bgt.n	800d76c <__swbuf_r+0x4e>
 800d760:	4621      	mov	r1, r4
 800d762:	4628      	mov	r0, r5
 800d764:	f001 fdb0 	bl	800f2c8 <_fflush_r>
 800d768:	2800      	cmp	r0, #0
 800d76a:	d1ed      	bne.n	800d748 <__swbuf_r+0x2a>
 800d76c:	68a3      	ldr	r3, [r4, #8]
 800d76e:	3b01      	subs	r3, #1
 800d770:	60a3      	str	r3, [r4, #8]
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	6022      	str	r2, [r4, #0]
 800d778:	701e      	strb	r6, [r3, #0]
 800d77a:	6962      	ldr	r2, [r4, #20]
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	429a      	cmp	r2, r3
 800d780:	d004      	beq.n	800d78c <__swbuf_r+0x6e>
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	07db      	lsls	r3, r3, #31
 800d786:	d5e1      	bpl.n	800d74c <__swbuf_r+0x2e>
 800d788:	2e0a      	cmp	r6, #10
 800d78a:	d1df      	bne.n	800d74c <__swbuf_r+0x2e>
 800d78c:	4621      	mov	r1, r4
 800d78e:	4628      	mov	r0, r5
 800d790:	f001 fd9a 	bl	800f2c8 <_fflush_r>
 800d794:	2800      	cmp	r0, #0
 800d796:	d0d9      	beq.n	800d74c <__swbuf_r+0x2e>
 800d798:	e7d6      	b.n	800d748 <__swbuf_r+0x2a>
	...

0800d79c <__swsetup_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	4b29      	ldr	r3, [pc, #164]	@ (800d844 <__swsetup_r+0xa8>)
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	460c      	mov	r4, r1
 800d7a6:	b118      	cbz	r0, 800d7b0 <__swsetup_r+0x14>
 800d7a8:	6a03      	ldr	r3, [r0, #32]
 800d7aa:	b90b      	cbnz	r3, 800d7b0 <__swsetup_r+0x14>
 800d7ac:	f7ff fece 	bl	800d54c <__sinit>
 800d7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b4:	0719      	lsls	r1, r3, #28
 800d7b6:	d422      	bmi.n	800d7fe <__swsetup_r+0x62>
 800d7b8:	06da      	lsls	r2, r3, #27
 800d7ba:	d407      	bmi.n	800d7cc <__swsetup_r+0x30>
 800d7bc:	2209      	movs	r2, #9
 800d7be:	602a      	str	r2, [r5, #0]
 800d7c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ca:	e033      	b.n	800d834 <__swsetup_r+0x98>
 800d7cc:	0758      	lsls	r0, r3, #29
 800d7ce:	d512      	bpl.n	800d7f6 <__swsetup_r+0x5a>
 800d7d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7d2:	b141      	cbz	r1, 800d7e6 <__swsetup_r+0x4a>
 800d7d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7d8:	4299      	cmp	r1, r3
 800d7da:	d002      	beq.n	800d7e2 <__swsetup_r+0x46>
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f000 ff2b 	bl	800e638 <_free_r>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d7ec:	81a3      	strh	r3, [r4, #12]
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	6063      	str	r3, [r4, #4]
 800d7f2:	6923      	ldr	r3, [r4, #16]
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	89a3      	ldrh	r3, [r4, #12]
 800d7f8:	f043 0308 	orr.w	r3, r3, #8
 800d7fc:	81a3      	strh	r3, [r4, #12]
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	b94b      	cbnz	r3, 800d816 <__swsetup_r+0x7a>
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d80c:	d003      	beq.n	800d816 <__swsetup_r+0x7a>
 800d80e:	4621      	mov	r1, r4
 800d810:	4628      	mov	r0, r5
 800d812:	f001 fdb9 	bl	800f388 <__smakebuf_r>
 800d816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d81a:	f013 0201 	ands.w	r2, r3, #1
 800d81e:	d00a      	beq.n	800d836 <__swsetup_r+0x9a>
 800d820:	2200      	movs	r2, #0
 800d822:	60a2      	str	r2, [r4, #8]
 800d824:	6962      	ldr	r2, [r4, #20]
 800d826:	4252      	negs	r2, r2
 800d828:	61a2      	str	r2, [r4, #24]
 800d82a:	6922      	ldr	r2, [r4, #16]
 800d82c:	b942      	cbnz	r2, 800d840 <__swsetup_r+0xa4>
 800d82e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d832:	d1c5      	bne.n	800d7c0 <__swsetup_r+0x24>
 800d834:	bd38      	pop	{r3, r4, r5, pc}
 800d836:	0799      	lsls	r1, r3, #30
 800d838:	bf58      	it	pl
 800d83a:	6962      	ldrpl	r2, [r4, #20]
 800d83c:	60a2      	str	r2, [r4, #8]
 800d83e:	e7f4      	b.n	800d82a <__swsetup_r+0x8e>
 800d840:	2000      	movs	r0, #0
 800d842:	e7f7      	b.n	800d834 <__swsetup_r+0x98>
 800d844:	20000068 	.word	0x20000068

0800d848 <memset>:
 800d848:	4402      	add	r2, r0
 800d84a:	4603      	mov	r3, r0
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d100      	bne.n	800d852 <memset+0xa>
 800d850:	4770      	bx	lr
 800d852:	f803 1b01 	strb.w	r1, [r3], #1
 800d856:	e7f9      	b.n	800d84c <memset+0x4>

0800d858 <_localeconv_r>:
 800d858:	4800      	ldr	r0, [pc, #0]	@ (800d85c <_localeconv_r+0x4>)
 800d85a:	4770      	bx	lr
 800d85c:	200001a8 	.word	0x200001a8

0800d860 <_close_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4d06      	ldr	r5, [pc, #24]	@ (800d87c <_close_r+0x1c>)
 800d864:	2300      	movs	r3, #0
 800d866:	4604      	mov	r4, r0
 800d868:	4608      	mov	r0, r1
 800d86a:	602b      	str	r3, [r5, #0]
 800d86c:	f7f5 f82e 	bl	80028cc <_close>
 800d870:	1c43      	adds	r3, r0, #1
 800d872:	d102      	bne.n	800d87a <_close_r+0x1a>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	b103      	cbz	r3, 800d87a <_close_r+0x1a>
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	20003134 	.word	0x20003134

0800d880 <_lseek_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4d07      	ldr	r5, [pc, #28]	@ (800d8a0 <_lseek_r+0x20>)
 800d884:	4604      	mov	r4, r0
 800d886:	4608      	mov	r0, r1
 800d888:	4611      	mov	r1, r2
 800d88a:	2200      	movs	r2, #0
 800d88c:	602a      	str	r2, [r5, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	f7f5 f843 	bl	800291a <_lseek>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_lseek_r+0x1e>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_lseek_r+0x1e>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	20003134 	.word	0x20003134

0800d8a4 <_read_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	4d07      	ldr	r5, [pc, #28]	@ (800d8c4 <_read_r+0x20>)
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	4608      	mov	r0, r1
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	602a      	str	r2, [r5, #0]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	f7f4 ffd1 	bl	800285a <_read>
 800d8b8:	1c43      	adds	r3, r0, #1
 800d8ba:	d102      	bne.n	800d8c2 <_read_r+0x1e>
 800d8bc:	682b      	ldr	r3, [r5, #0]
 800d8be:	b103      	cbz	r3, 800d8c2 <_read_r+0x1e>
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}
 800d8c4:	20003134 	.word	0x20003134

0800d8c8 <_write_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4d07      	ldr	r5, [pc, #28]	@ (800d8e8 <_write_r+0x20>)
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	4608      	mov	r0, r1
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	602a      	str	r2, [r5, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	f7f4 ffdc 	bl	8002894 <_write>
 800d8dc:	1c43      	adds	r3, r0, #1
 800d8de:	d102      	bne.n	800d8e6 <_write_r+0x1e>
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	b103      	cbz	r3, 800d8e6 <_write_r+0x1e>
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	bd38      	pop	{r3, r4, r5, pc}
 800d8e8:	20003134 	.word	0x20003134

0800d8ec <__errno>:
 800d8ec:	4b01      	ldr	r3, [pc, #4]	@ (800d8f4 <__errno+0x8>)
 800d8ee:	6818      	ldr	r0, [r3, #0]
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	20000068 	.word	0x20000068

0800d8f8 <__libc_init_array>:
 800d8f8:	b570      	push	{r4, r5, r6, lr}
 800d8fa:	4d0d      	ldr	r5, [pc, #52]	@ (800d930 <__libc_init_array+0x38>)
 800d8fc:	4c0d      	ldr	r4, [pc, #52]	@ (800d934 <__libc_init_array+0x3c>)
 800d8fe:	1b64      	subs	r4, r4, r5
 800d900:	10a4      	asrs	r4, r4, #2
 800d902:	2600      	movs	r6, #0
 800d904:	42a6      	cmp	r6, r4
 800d906:	d109      	bne.n	800d91c <__libc_init_array+0x24>
 800d908:	4d0b      	ldr	r5, [pc, #44]	@ (800d938 <__libc_init_array+0x40>)
 800d90a:	4c0c      	ldr	r4, [pc, #48]	@ (800d93c <__libc_init_array+0x44>)
 800d90c:	f001 fe28 	bl	800f560 <_init>
 800d910:	1b64      	subs	r4, r4, r5
 800d912:	10a4      	asrs	r4, r4, #2
 800d914:	2600      	movs	r6, #0
 800d916:	42a6      	cmp	r6, r4
 800d918:	d105      	bne.n	800d926 <__libc_init_array+0x2e>
 800d91a:	bd70      	pop	{r4, r5, r6, pc}
 800d91c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d920:	4798      	blx	r3
 800d922:	3601      	adds	r6, #1
 800d924:	e7ee      	b.n	800d904 <__libc_init_array+0xc>
 800d926:	f855 3b04 	ldr.w	r3, [r5], #4
 800d92a:	4798      	blx	r3
 800d92c:	3601      	adds	r6, #1
 800d92e:	e7f2      	b.n	800d916 <__libc_init_array+0x1e>
 800d930:	0800faec 	.word	0x0800faec
 800d934:	0800faec 	.word	0x0800faec
 800d938:	0800faec 	.word	0x0800faec
 800d93c:	0800faf0 	.word	0x0800faf0

0800d940 <__retarget_lock_init_recursive>:
 800d940:	4770      	bx	lr

0800d942 <__retarget_lock_acquire_recursive>:
 800d942:	4770      	bx	lr

0800d944 <__retarget_lock_release_recursive>:
 800d944:	4770      	bx	lr

0800d946 <memcpy>:
 800d946:	440a      	add	r2, r1
 800d948:	4291      	cmp	r1, r2
 800d94a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d94e:	d100      	bne.n	800d952 <memcpy+0xc>
 800d950:	4770      	bx	lr
 800d952:	b510      	push	{r4, lr}
 800d954:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d95c:	4291      	cmp	r1, r2
 800d95e:	d1f9      	bne.n	800d954 <memcpy+0xe>
 800d960:	bd10      	pop	{r4, pc}
	...

0800d964 <__assert_func>:
 800d964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d966:	4614      	mov	r4, r2
 800d968:	461a      	mov	r2, r3
 800d96a:	4b09      	ldr	r3, [pc, #36]	@ (800d990 <__assert_func+0x2c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4605      	mov	r5, r0
 800d970:	68d8      	ldr	r0, [r3, #12]
 800d972:	b954      	cbnz	r4, 800d98a <__assert_func+0x26>
 800d974:	4b07      	ldr	r3, [pc, #28]	@ (800d994 <__assert_func+0x30>)
 800d976:	461c      	mov	r4, r3
 800d978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d97c:	9100      	str	r1, [sp, #0]
 800d97e:	462b      	mov	r3, r5
 800d980:	4905      	ldr	r1, [pc, #20]	@ (800d998 <__assert_func+0x34>)
 800d982:	f001 fcc9 	bl	800f318 <fiprintf>
 800d986:	f001 fd6d 	bl	800f464 <abort>
 800d98a:	4b04      	ldr	r3, [pc, #16]	@ (800d99c <__assert_func+0x38>)
 800d98c:	e7f4      	b.n	800d978 <__assert_func+0x14>
 800d98e:	bf00      	nop
 800d990:	20000068 	.word	0x20000068
 800d994:	0800f7fa 	.word	0x0800f7fa
 800d998:	0800f7cc 	.word	0x0800f7cc
 800d99c:	0800f7bf 	.word	0x0800f7bf

0800d9a0 <quorem>:
 800d9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	6903      	ldr	r3, [r0, #16]
 800d9a6:	690c      	ldr	r4, [r1, #16]
 800d9a8:	42a3      	cmp	r3, r4
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	db7e      	blt.n	800daac <quorem+0x10c>
 800d9ae:	3c01      	subs	r4, #1
 800d9b0:	f101 0814 	add.w	r8, r1, #20
 800d9b4:	00a3      	lsls	r3, r4, #2
 800d9b6:	f100 0514 	add.w	r5, r0, #20
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9c0:	9301      	str	r3, [sp, #4]
 800d9c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9d6:	d32e      	bcc.n	800da36 <quorem+0x96>
 800d9d8:	f04f 0a00 	mov.w	sl, #0
 800d9dc:	46c4      	mov	ip, r8
 800d9de:	46ae      	mov	lr, r5
 800d9e0:	46d3      	mov	fp, sl
 800d9e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9e6:	b298      	uxth	r0, r3
 800d9e8:	fb06 a000 	mla	r0, r6, r0, sl
 800d9ec:	0c02      	lsrs	r2, r0, #16
 800d9ee:	0c1b      	lsrs	r3, r3, #16
 800d9f0:	fb06 2303 	mla	r3, r6, r3, r2
 800d9f4:	f8de 2000 	ldr.w	r2, [lr]
 800d9f8:	b280      	uxth	r0, r0
 800d9fa:	b292      	uxth	r2, r2
 800d9fc:	1a12      	subs	r2, r2, r0
 800d9fe:	445a      	add	r2, fp
 800da00:	f8de 0000 	ldr.w	r0, [lr]
 800da04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da08:	b29b      	uxth	r3, r3
 800da0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800da0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800da12:	b292      	uxth	r2, r2
 800da14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800da18:	45e1      	cmp	r9, ip
 800da1a:	f84e 2b04 	str.w	r2, [lr], #4
 800da1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800da22:	d2de      	bcs.n	800d9e2 <quorem+0x42>
 800da24:	9b00      	ldr	r3, [sp, #0]
 800da26:	58eb      	ldr	r3, [r5, r3]
 800da28:	b92b      	cbnz	r3, 800da36 <quorem+0x96>
 800da2a:	9b01      	ldr	r3, [sp, #4]
 800da2c:	3b04      	subs	r3, #4
 800da2e:	429d      	cmp	r5, r3
 800da30:	461a      	mov	r2, r3
 800da32:	d32f      	bcc.n	800da94 <quorem+0xf4>
 800da34:	613c      	str	r4, [r7, #16]
 800da36:	4638      	mov	r0, r7
 800da38:	f001 f978 	bl	800ed2c <__mcmp>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	db25      	blt.n	800da8c <quorem+0xec>
 800da40:	4629      	mov	r1, r5
 800da42:	2000      	movs	r0, #0
 800da44:	f858 2b04 	ldr.w	r2, [r8], #4
 800da48:	f8d1 c000 	ldr.w	ip, [r1]
 800da4c:	fa1f fe82 	uxth.w	lr, r2
 800da50:	fa1f f38c 	uxth.w	r3, ip
 800da54:	eba3 030e 	sub.w	r3, r3, lr
 800da58:	4403      	add	r3, r0
 800da5a:	0c12      	lsrs	r2, r2, #16
 800da5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800da60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800da64:	b29b      	uxth	r3, r3
 800da66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da6a:	45c1      	cmp	r9, r8
 800da6c:	f841 3b04 	str.w	r3, [r1], #4
 800da70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800da74:	d2e6      	bcs.n	800da44 <quorem+0xa4>
 800da76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da7e:	b922      	cbnz	r2, 800da8a <quorem+0xea>
 800da80:	3b04      	subs	r3, #4
 800da82:	429d      	cmp	r5, r3
 800da84:	461a      	mov	r2, r3
 800da86:	d30b      	bcc.n	800daa0 <quorem+0x100>
 800da88:	613c      	str	r4, [r7, #16]
 800da8a:	3601      	adds	r6, #1
 800da8c:	4630      	mov	r0, r6
 800da8e:	b003      	add	sp, #12
 800da90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da94:	6812      	ldr	r2, [r2, #0]
 800da96:	3b04      	subs	r3, #4
 800da98:	2a00      	cmp	r2, #0
 800da9a:	d1cb      	bne.n	800da34 <quorem+0x94>
 800da9c:	3c01      	subs	r4, #1
 800da9e:	e7c6      	b.n	800da2e <quorem+0x8e>
 800daa0:	6812      	ldr	r2, [r2, #0]
 800daa2:	3b04      	subs	r3, #4
 800daa4:	2a00      	cmp	r2, #0
 800daa6:	d1ef      	bne.n	800da88 <quorem+0xe8>
 800daa8:	3c01      	subs	r4, #1
 800daaa:	e7ea      	b.n	800da82 <quorem+0xe2>
 800daac:	2000      	movs	r0, #0
 800daae:	e7ee      	b.n	800da8e <quorem+0xee>

0800dab0 <_dtoa_r>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	69c7      	ldr	r7, [r0, #28]
 800dab6:	b099      	sub	sp, #100	@ 0x64
 800dab8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dabc:	ec55 4b10 	vmov	r4, r5, d0
 800dac0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dac2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dac4:	4683      	mov	fp, r0
 800dac6:	920e      	str	r2, [sp, #56]	@ 0x38
 800dac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daca:	b97f      	cbnz	r7, 800daec <_dtoa_r+0x3c>
 800dacc:	2010      	movs	r0, #16
 800dace:	f000 fdfd 	bl	800e6cc <malloc>
 800dad2:	4602      	mov	r2, r0
 800dad4:	f8cb 001c 	str.w	r0, [fp, #28]
 800dad8:	b920      	cbnz	r0, 800dae4 <_dtoa_r+0x34>
 800dada:	4ba7      	ldr	r3, [pc, #668]	@ (800dd78 <_dtoa_r+0x2c8>)
 800dadc:	21ef      	movs	r1, #239	@ 0xef
 800dade:	48a7      	ldr	r0, [pc, #668]	@ (800dd7c <_dtoa_r+0x2cc>)
 800dae0:	f7ff ff40 	bl	800d964 <__assert_func>
 800dae4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dae8:	6007      	str	r7, [r0, #0]
 800daea:	60c7      	str	r7, [r0, #12]
 800daec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800daf0:	6819      	ldr	r1, [r3, #0]
 800daf2:	b159      	cbz	r1, 800db0c <_dtoa_r+0x5c>
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	604a      	str	r2, [r1, #4]
 800daf8:	2301      	movs	r3, #1
 800dafa:	4093      	lsls	r3, r2
 800dafc:	608b      	str	r3, [r1, #8]
 800dafe:	4658      	mov	r0, fp
 800db00:	f000 feda 	bl	800e8b8 <_Bfree>
 800db04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800db08:	2200      	movs	r2, #0
 800db0a:	601a      	str	r2, [r3, #0]
 800db0c:	1e2b      	subs	r3, r5, #0
 800db0e:	bfb9      	ittee	lt
 800db10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800db14:	9303      	strlt	r3, [sp, #12]
 800db16:	2300      	movge	r3, #0
 800db18:	6033      	strge	r3, [r6, #0]
 800db1a:	9f03      	ldr	r7, [sp, #12]
 800db1c:	4b98      	ldr	r3, [pc, #608]	@ (800dd80 <_dtoa_r+0x2d0>)
 800db1e:	bfbc      	itt	lt
 800db20:	2201      	movlt	r2, #1
 800db22:	6032      	strlt	r2, [r6, #0]
 800db24:	43bb      	bics	r3, r7
 800db26:	d112      	bne.n	800db4e <_dtoa_r+0x9e>
 800db28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800db2e:	6013      	str	r3, [r2, #0]
 800db30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db34:	4323      	orrs	r3, r4
 800db36:	f000 854d 	beq.w	800e5d4 <_dtoa_r+0xb24>
 800db3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dd94 <_dtoa_r+0x2e4>
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 854f 	beq.w	800e5e4 <_dtoa_r+0xb34>
 800db46:	f10a 0303 	add.w	r3, sl, #3
 800db4a:	f000 bd49 	b.w	800e5e0 <_dtoa_r+0xb30>
 800db4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db52:	2200      	movs	r2, #0
 800db54:	ec51 0b17 	vmov	r0, r1, d7
 800db58:	2300      	movs	r3, #0
 800db5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800db5e:	f7f2 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800db62:	4680      	mov	r8, r0
 800db64:	b158      	cbz	r0, 800db7e <_dtoa_r+0xce>
 800db66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db68:	2301      	movs	r3, #1
 800db6a:	6013      	str	r3, [r2, #0]
 800db6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db6e:	b113      	cbz	r3, 800db76 <_dtoa_r+0xc6>
 800db70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800db72:	4b84      	ldr	r3, [pc, #528]	@ (800dd84 <_dtoa_r+0x2d4>)
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dd98 <_dtoa_r+0x2e8>
 800db7a:	f000 bd33 	b.w	800e5e4 <_dtoa_r+0xb34>
 800db7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db82:	aa16      	add	r2, sp, #88	@ 0x58
 800db84:	a917      	add	r1, sp, #92	@ 0x5c
 800db86:	4658      	mov	r0, fp
 800db88:	f001 f980 	bl	800ee8c <__d2b>
 800db8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800db90:	4681      	mov	r9, r0
 800db92:	2e00      	cmp	r6, #0
 800db94:	d077      	beq.n	800dc86 <_dtoa_r+0x1d6>
 800db96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800db9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dba4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dba8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dbac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4b74      	ldr	r3, [pc, #464]	@ (800dd88 <_dtoa_r+0x2d8>)
 800dbb6:	f7f2 fb67 	bl	8000288 <__aeabi_dsub>
 800dbba:	a369      	add	r3, pc, #420	@ (adr r3, 800dd60 <_dtoa_r+0x2b0>)
 800dbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc0:	f7f2 fd1a 	bl	80005f8 <__aeabi_dmul>
 800dbc4:	a368      	add	r3, pc, #416	@ (adr r3, 800dd68 <_dtoa_r+0x2b8>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	f7f2 fb5f 	bl	800028c <__adddf3>
 800dbce:	4604      	mov	r4, r0
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	f7f2 fca6 	bl	8000524 <__aeabi_i2d>
 800dbd8:	a365      	add	r3, pc, #404	@ (adr r3, 800dd70 <_dtoa_r+0x2c0>)
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	f7f2 fd0b 	bl	80005f8 <__aeabi_dmul>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7f2 fb4f 	bl	800028c <__adddf3>
 800dbee:	4604      	mov	r4, r0
 800dbf0:	460d      	mov	r5, r1
 800dbf2:	f7f2 ffb1 	bl	8000b58 <__aeabi_d2iz>
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 ff6c 	bl	8000adc <__aeabi_dcmplt>
 800dc04:	b140      	cbz	r0, 800dc18 <_dtoa_r+0x168>
 800dc06:	4638      	mov	r0, r7
 800dc08:	f7f2 fc8c 	bl	8000524 <__aeabi_i2d>
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	462b      	mov	r3, r5
 800dc10:	f7f2 ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc14:	b900      	cbnz	r0, 800dc18 <_dtoa_r+0x168>
 800dc16:	3f01      	subs	r7, #1
 800dc18:	2f16      	cmp	r7, #22
 800dc1a:	d851      	bhi.n	800dcc0 <_dtoa_r+0x210>
 800dc1c:	4b5b      	ldr	r3, [pc, #364]	@ (800dd8c <_dtoa_r+0x2dc>)
 800dc1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc2a:	f7f2 ff57 	bl	8000adc <__aeabi_dcmplt>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d048      	beq.n	800dcc4 <_dtoa_r+0x214>
 800dc32:	3f01      	subs	r7, #1
 800dc34:	2300      	movs	r3, #0
 800dc36:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc3a:	1b9b      	subs	r3, r3, r6
 800dc3c:	1e5a      	subs	r2, r3, #1
 800dc3e:	bf44      	itt	mi
 800dc40:	f1c3 0801 	rsbmi	r8, r3, #1
 800dc44:	2300      	movmi	r3, #0
 800dc46:	9208      	str	r2, [sp, #32]
 800dc48:	bf54      	ite	pl
 800dc4a:	f04f 0800 	movpl.w	r8, #0
 800dc4e:	9308      	strmi	r3, [sp, #32]
 800dc50:	2f00      	cmp	r7, #0
 800dc52:	db39      	blt.n	800dcc8 <_dtoa_r+0x218>
 800dc54:	9b08      	ldr	r3, [sp, #32]
 800dc56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dc58:	443b      	add	r3, r7
 800dc5a:	9308      	str	r3, [sp, #32]
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc62:	2b09      	cmp	r3, #9
 800dc64:	d864      	bhi.n	800dd30 <_dtoa_r+0x280>
 800dc66:	2b05      	cmp	r3, #5
 800dc68:	bfc4      	itt	gt
 800dc6a:	3b04      	subgt	r3, #4
 800dc6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc70:	f1a3 0302 	sub.w	r3, r3, #2
 800dc74:	bfcc      	ite	gt
 800dc76:	2400      	movgt	r4, #0
 800dc78:	2401      	movle	r4, #1
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d863      	bhi.n	800dd46 <_dtoa_r+0x296>
 800dc7e:	e8df f003 	tbb	[pc, r3]
 800dc82:	372a      	.short	0x372a
 800dc84:	5535      	.short	0x5535
 800dc86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dc8a:	441e      	add	r6, r3
 800dc8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dc90:	2b20      	cmp	r3, #32
 800dc92:	bfc1      	itttt	gt
 800dc94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dc98:	409f      	lslgt	r7, r3
 800dc9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dc9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dca2:	bfd6      	itet	le
 800dca4:	f1c3 0320 	rsble	r3, r3, #32
 800dca8:	ea47 0003 	orrgt.w	r0, r7, r3
 800dcac:	fa04 f003 	lslle.w	r0, r4, r3
 800dcb0:	f7f2 fc28 	bl	8000504 <__aeabi_ui2d>
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dcba:	3e01      	subs	r6, #1
 800dcbc:	9214      	str	r2, [sp, #80]	@ 0x50
 800dcbe:	e777      	b.n	800dbb0 <_dtoa_r+0x100>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e7b8      	b.n	800dc36 <_dtoa_r+0x186>
 800dcc4:	9012      	str	r0, [sp, #72]	@ 0x48
 800dcc6:	e7b7      	b.n	800dc38 <_dtoa_r+0x188>
 800dcc8:	427b      	negs	r3, r7
 800dcca:	930a      	str	r3, [sp, #40]	@ 0x28
 800dccc:	2300      	movs	r3, #0
 800dcce:	eba8 0807 	sub.w	r8, r8, r7
 800dcd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dcd4:	e7c4      	b.n	800dc60 <_dtoa_r+0x1b0>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dc35      	bgt.n	800dd4c <_dtoa_r+0x29c>
 800dce0:	2301      	movs	r3, #1
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	9307      	str	r3, [sp, #28]
 800dce6:	461a      	mov	r2, r3
 800dce8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dcea:	e00b      	b.n	800dd04 <_dtoa_r+0x254>
 800dcec:	2301      	movs	r3, #1
 800dcee:	e7f3      	b.n	800dcd8 <_dtoa_r+0x228>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcf6:	18fb      	adds	r3, r7, r3
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	9307      	str	r3, [sp, #28]
 800dd00:	bfb8      	it	lt
 800dd02:	2301      	movlt	r3, #1
 800dd04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dd08:	2100      	movs	r1, #0
 800dd0a:	2204      	movs	r2, #4
 800dd0c:	f102 0514 	add.w	r5, r2, #20
 800dd10:	429d      	cmp	r5, r3
 800dd12:	d91f      	bls.n	800dd54 <_dtoa_r+0x2a4>
 800dd14:	6041      	str	r1, [r0, #4]
 800dd16:	4658      	mov	r0, fp
 800dd18:	f000 fd8e 	bl	800e838 <_Balloc>
 800dd1c:	4682      	mov	sl, r0
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d13c      	bne.n	800dd9c <_dtoa_r+0x2ec>
 800dd22:	4b1b      	ldr	r3, [pc, #108]	@ (800dd90 <_dtoa_r+0x2e0>)
 800dd24:	4602      	mov	r2, r0
 800dd26:	f240 11af 	movw	r1, #431	@ 0x1af
 800dd2a:	e6d8      	b.n	800dade <_dtoa_r+0x2e>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e7e0      	b.n	800dcf2 <_dtoa_r+0x242>
 800dd30:	2401      	movs	r4, #1
 800dd32:	2300      	movs	r3, #0
 800dd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dd38:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	9307      	str	r3, [sp, #28]
 800dd40:	2200      	movs	r2, #0
 800dd42:	2312      	movs	r3, #18
 800dd44:	e7d0      	b.n	800dce8 <_dtoa_r+0x238>
 800dd46:	2301      	movs	r3, #1
 800dd48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd4a:	e7f5      	b.n	800dd38 <_dtoa_r+0x288>
 800dd4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	9307      	str	r3, [sp, #28]
 800dd52:	e7d7      	b.n	800dd04 <_dtoa_r+0x254>
 800dd54:	3101      	adds	r1, #1
 800dd56:	0052      	lsls	r2, r2, #1
 800dd58:	e7d8      	b.n	800dd0c <_dtoa_r+0x25c>
 800dd5a:	bf00      	nop
 800dd5c:	f3af 8000 	nop.w
 800dd60:	636f4361 	.word	0x636f4361
 800dd64:	3fd287a7 	.word	0x3fd287a7
 800dd68:	8b60c8b3 	.word	0x8b60c8b3
 800dd6c:	3fc68a28 	.word	0x3fc68a28
 800dd70:	509f79fb 	.word	0x509f79fb
 800dd74:	3fd34413 	.word	0x3fd34413
 800dd78:	0800f71c 	.word	0x0800f71c
 800dd7c:	0800f808 	.word	0x0800f808
 800dd80:	7ff00000 	.word	0x7ff00000
 800dd84:	0800f79c 	.word	0x0800f79c
 800dd88:	3ff80000 	.word	0x3ff80000
 800dd8c:	0800f900 	.word	0x0800f900
 800dd90:	0800f860 	.word	0x0800f860
 800dd94:	0800f804 	.word	0x0800f804
 800dd98:	0800f79b 	.word	0x0800f79b
 800dd9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dda0:	6018      	str	r0, [r3, #0]
 800dda2:	9b07      	ldr	r3, [sp, #28]
 800dda4:	2b0e      	cmp	r3, #14
 800dda6:	f200 80a4 	bhi.w	800def2 <_dtoa_r+0x442>
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	f000 80a1 	beq.w	800def2 <_dtoa_r+0x442>
 800ddb0:	2f00      	cmp	r7, #0
 800ddb2:	dd33      	ble.n	800de1c <_dtoa_r+0x36c>
 800ddb4:	4bad      	ldr	r3, [pc, #692]	@ (800e06c <_dtoa_r+0x5bc>)
 800ddb6:	f007 020f 	and.w	r2, r7, #15
 800ddba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddbe:	ed93 7b00 	vldr	d7, [r3]
 800ddc2:	05f8      	lsls	r0, r7, #23
 800ddc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ddc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ddcc:	d516      	bpl.n	800ddfc <_dtoa_r+0x34c>
 800ddce:	4ba8      	ldr	r3, [pc, #672]	@ (800e070 <_dtoa_r+0x5c0>)
 800ddd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddd8:	f7f2 fd38 	bl	800084c <__aeabi_ddiv>
 800dddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dde0:	f004 040f 	and.w	r4, r4, #15
 800dde4:	2603      	movs	r6, #3
 800dde6:	4da2      	ldr	r5, [pc, #648]	@ (800e070 <_dtoa_r+0x5c0>)
 800dde8:	b954      	cbnz	r4, 800de00 <_dtoa_r+0x350>
 800ddea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddf2:	f7f2 fd2b 	bl	800084c <__aeabi_ddiv>
 800ddf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddfa:	e028      	b.n	800de4e <_dtoa_r+0x39e>
 800ddfc:	2602      	movs	r6, #2
 800ddfe:	e7f2      	b.n	800dde6 <_dtoa_r+0x336>
 800de00:	07e1      	lsls	r1, r4, #31
 800de02:	d508      	bpl.n	800de16 <_dtoa_r+0x366>
 800de04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de0c:	f7f2 fbf4 	bl	80005f8 <__aeabi_dmul>
 800de10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de14:	3601      	adds	r6, #1
 800de16:	1064      	asrs	r4, r4, #1
 800de18:	3508      	adds	r5, #8
 800de1a:	e7e5      	b.n	800dde8 <_dtoa_r+0x338>
 800de1c:	f000 80d2 	beq.w	800dfc4 <_dtoa_r+0x514>
 800de20:	427c      	negs	r4, r7
 800de22:	4b92      	ldr	r3, [pc, #584]	@ (800e06c <_dtoa_r+0x5bc>)
 800de24:	4d92      	ldr	r5, [pc, #584]	@ (800e070 <_dtoa_r+0x5c0>)
 800de26:	f004 020f 	and.w	r2, r4, #15
 800de2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de36:	f7f2 fbdf 	bl	80005f8 <__aeabi_dmul>
 800de3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de3e:	1124      	asrs	r4, r4, #4
 800de40:	2300      	movs	r3, #0
 800de42:	2602      	movs	r6, #2
 800de44:	2c00      	cmp	r4, #0
 800de46:	f040 80b2 	bne.w	800dfae <_dtoa_r+0x4fe>
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1d3      	bne.n	800ddf6 <_dtoa_r+0x346>
 800de4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 80b7 	beq.w	800dfc8 <_dtoa_r+0x518>
 800de5a:	4b86      	ldr	r3, [pc, #536]	@ (800e074 <_dtoa_r+0x5c4>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	4620      	mov	r0, r4
 800de60:	4629      	mov	r1, r5
 800de62:	f7f2 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800de66:	2800      	cmp	r0, #0
 800de68:	f000 80ae 	beq.w	800dfc8 <_dtoa_r+0x518>
 800de6c:	9b07      	ldr	r3, [sp, #28]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 80aa 	beq.w	800dfc8 <_dtoa_r+0x518>
 800de74:	9b00      	ldr	r3, [sp, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	dd37      	ble.n	800deea <_dtoa_r+0x43a>
 800de7a:	1e7b      	subs	r3, r7, #1
 800de7c:	9304      	str	r3, [sp, #16]
 800de7e:	4620      	mov	r0, r4
 800de80:	4b7d      	ldr	r3, [pc, #500]	@ (800e078 <_dtoa_r+0x5c8>)
 800de82:	2200      	movs	r2, #0
 800de84:	4629      	mov	r1, r5
 800de86:	f7f2 fbb7 	bl	80005f8 <__aeabi_dmul>
 800de8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de8e:	9c00      	ldr	r4, [sp, #0]
 800de90:	3601      	adds	r6, #1
 800de92:	4630      	mov	r0, r6
 800de94:	f7f2 fb46 	bl	8000524 <__aeabi_i2d>
 800de98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de9c:	f7f2 fbac 	bl	80005f8 <__aeabi_dmul>
 800dea0:	4b76      	ldr	r3, [pc, #472]	@ (800e07c <_dtoa_r+0x5cc>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	f7f2 f9f2 	bl	800028c <__adddf3>
 800dea8:	4605      	mov	r5, r0
 800deaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800deae:	2c00      	cmp	r4, #0
 800deb0:	f040 808d 	bne.w	800dfce <_dtoa_r+0x51e>
 800deb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deb8:	4b71      	ldr	r3, [pc, #452]	@ (800e080 <_dtoa_r+0x5d0>)
 800deba:	2200      	movs	r2, #0
 800debc:	f7f2 f9e4 	bl	8000288 <__aeabi_dsub>
 800dec0:	4602      	mov	r2, r0
 800dec2:	460b      	mov	r3, r1
 800dec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dec8:	462a      	mov	r2, r5
 800deca:	4633      	mov	r3, r6
 800decc:	f7f2 fe24 	bl	8000b18 <__aeabi_dcmpgt>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	f040 828b 	bne.w	800e3ec <_dtoa_r+0x93c>
 800ded6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deda:	462a      	mov	r2, r5
 800dedc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dee0:	f7f2 fdfc 	bl	8000adc <__aeabi_dcmplt>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	f040 8128 	bne.w	800e13a <_dtoa_r+0x68a>
 800deea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800deee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800def2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800def4:	2b00      	cmp	r3, #0
 800def6:	f2c0 815a 	blt.w	800e1ae <_dtoa_r+0x6fe>
 800defa:	2f0e      	cmp	r7, #14
 800defc:	f300 8157 	bgt.w	800e1ae <_dtoa_r+0x6fe>
 800df00:	4b5a      	ldr	r3, [pc, #360]	@ (800e06c <_dtoa_r+0x5bc>)
 800df02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800df06:	ed93 7b00 	vldr	d7, [r3]
 800df0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	ed8d 7b00 	vstr	d7, [sp]
 800df12:	da03      	bge.n	800df1c <_dtoa_r+0x46c>
 800df14:	9b07      	ldr	r3, [sp, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	f340 8101 	ble.w	800e11e <_dtoa_r+0x66e>
 800df1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df20:	4656      	mov	r6, sl
 800df22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df26:	4620      	mov	r0, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	f7f2 fc8f 	bl	800084c <__aeabi_ddiv>
 800df2e:	f7f2 fe13 	bl	8000b58 <__aeabi_d2iz>
 800df32:	4680      	mov	r8, r0
 800df34:	f7f2 faf6 	bl	8000524 <__aeabi_i2d>
 800df38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df3c:	f7f2 fb5c 	bl	80005f8 <__aeabi_dmul>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4620      	mov	r0, r4
 800df46:	4629      	mov	r1, r5
 800df48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df4c:	f7f2 f99c 	bl	8000288 <__aeabi_dsub>
 800df50:	f806 4b01 	strb.w	r4, [r6], #1
 800df54:	9d07      	ldr	r5, [sp, #28]
 800df56:	eba6 040a 	sub.w	r4, r6, sl
 800df5a:	42a5      	cmp	r5, r4
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	f040 8117 	bne.w	800e192 <_dtoa_r+0x6e2>
 800df64:	f7f2 f992 	bl	800028c <__adddf3>
 800df68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df6c:	4604      	mov	r4, r0
 800df6e:	460d      	mov	r5, r1
 800df70:	f7f2 fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 800df74:	2800      	cmp	r0, #0
 800df76:	f040 80f9 	bne.w	800e16c <_dtoa_r+0x6bc>
 800df7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df7e:	4620      	mov	r0, r4
 800df80:	4629      	mov	r1, r5
 800df82:	f7f2 fda1 	bl	8000ac8 <__aeabi_dcmpeq>
 800df86:	b118      	cbz	r0, 800df90 <_dtoa_r+0x4e0>
 800df88:	f018 0f01 	tst.w	r8, #1
 800df8c:	f040 80ee 	bne.w	800e16c <_dtoa_r+0x6bc>
 800df90:	4649      	mov	r1, r9
 800df92:	4658      	mov	r0, fp
 800df94:	f000 fc90 	bl	800e8b8 <_Bfree>
 800df98:	2300      	movs	r3, #0
 800df9a:	7033      	strb	r3, [r6, #0]
 800df9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df9e:	3701      	adds	r7, #1
 800dfa0:	601f      	str	r7, [r3, #0]
 800dfa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 831d 	beq.w	800e5e4 <_dtoa_r+0xb34>
 800dfaa:	601e      	str	r6, [r3, #0]
 800dfac:	e31a      	b.n	800e5e4 <_dtoa_r+0xb34>
 800dfae:	07e2      	lsls	r2, r4, #31
 800dfb0:	d505      	bpl.n	800dfbe <_dtoa_r+0x50e>
 800dfb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfb6:	f7f2 fb1f 	bl	80005f8 <__aeabi_dmul>
 800dfba:	3601      	adds	r6, #1
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	1064      	asrs	r4, r4, #1
 800dfc0:	3508      	adds	r5, #8
 800dfc2:	e73f      	b.n	800de44 <_dtoa_r+0x394>
 800dfc4:	2602      	movs	r6, #2
 800dfc6:	e742      	b.n	800de4e <_dtoa_r+0x39e>
 800dfc8:	9c07      	ldr	r4, [sp, #28]
 800dfca:	9704      	str	r7, [sp, #16]
 800dfcc:	e761      	b.n	800de92 <_dtoa_r+0x3e2>
 800dfce:	4b27      	ldr	r3, [pc, #156]	@ (800e06c <_dtoa_r+0x5bc>)
 800dfd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfda:	4454      	add	r4, sl
 800dfdc:	2900      	cmp	r1, #0
 800dfde:	d053      	beq.n	800e088 <_dtoa_r+0x5d8>
 800dfe0:	4928      	ldr	r1, [pc, #160]	@ (800e084 <_dtoa_r+0x5d4>)
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	f7f2 fc32 	bl	800084c <__aeabi_ddiv>
 800dfe8:	4633      	mov	r3, r6
 800dfea:	462a      	mov	r2, r5
 800dfec:	f7f2 f94c 	bl	8000288 <__aeabi_dsub>
 800dff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dff4:	4656      	mov	r6, sl
 800dff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dffa:	f7f2 fdad 	bl	8000b58 <__aeabi_d2iz>
 800dffe:	4605      	mov	r5, r0
 800e000:	f7f2 fa90 	bl	8000524 <__aeabi_i2d>
 800e004:	4602      	mov	r2, r0
 800e006:	460b      	mov	r3, r1
 800e008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e00c:	f7f2 f93c 	bl	8000288 <__aeabi_dsub>
 800e010:	3530      	adds	r5, #48	@ 0x30
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e01a:	f806 5b01 	strb.w	r5, [r6], #1
 800e01e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e022:	f7f2 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800e026:	2800      	cmp	r0, #0
 800e028:	d171      	bne.n	800e10e <_dtoa_r+0x65e>
 800e02a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e02e:	4911      	ldr	r1, [pc, #68]	@ (800e074 <_dtoa_r+0x5c4>)
 800e030:	2000      	movs	r0, #0
 800e032:	f7f2 f929 	bl	8000288 <__aeabi_dsub>
 800e036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e03a:	f7f2 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800e03e:	2800      	cmp	r0, #0
 800e040:	f040 8095 	bne.w	800e16e <_dtoa_r+0x6be>
 800e044:	42a6      	cmp	r6, r4
 800e046:	f43f af50 	beq.w	800deea <_dtoa_r+0x43a>
 800e04a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e04e:	4b0a      	ldr	r3, [pc, #40]	@ (800e078 <_dtoa_r+0x5c8>)
 800e050:	2200      	movs	r2, #0
 800e052:	f7f2 fad1 	bl	80005f8 <__aeabi_dmul>
 800e056:	4b08      	ldr	r3, [pc, #32]	@ (800e078 <_dtoa_r+0x5c8>)
 800e058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e05c:	2200      	movs	r2, #0
 800e05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e062:	f7f2 fac9 	bl	80005f8 <__aeabi_dmul>
 800e066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e06a:	e7c4      	b.n	800dff6 <_dtoa_r+0x546>
 800e06c:	0800f900 	.word	0x0800f900
 800e070:	0800f8d8 	.word	0x0800f8d8
 800e074:	3ff00000 	.word	0x3ff00000
 800e078:	40240000 	.word	0x40240000
 800e07c:	401c0000 	.word	0x401c0000
 800e080:	40140000 	.word	0x40140000
 800e084:	3fe00000 	.word	0x3fe00000
 800e088:	4631      	mov	r1, r6
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7f2 fab4 	bl	80005f8 <__aeabi_dmul>
 800e090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e094:	9415      	str	r4, [sp, #84]	@ 0x54
 800e096:	4656      	mov	r6, sl
 800e098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e09c:	f7f2 fd5c 	bl	8000b58 <__aeabi_d2iz>
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	f7f2 fa3f 	bl	8000524 <__aeabi_i2d>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ae:	f7f2 f8eb 	bl	8000288 <__aeabi_dsub>
 800e0b2:	3530      	adds	r5, #48	@ 0x30
 800e0b4:	f806 5b01 	strb.w	r5, [r6], #1
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	42a6      	cmp	r6, r4
 800e0be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0c2:	f04f 0200 	mov.w	r2, #0
 800e0c6:	d124      	bne.n	800e112 <_dtoa_r+0x662>
 800e0c8:	4bac      	ldr	r3, [pc, #688]	@ (800e37c <_dtoa_r+0x8cc>)
 800e0ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e0ce:	f7f2 f8dd 	bl	800028c <__adddf3>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0da:	f7f2 fd1d 	bl	8000b18 <__aeabi_dcmpgt>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d145      	bne.n	800e16e <_dtoa_r+0x6be>
 800e0e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e0e6:	49a5      	ldr	r1, [pc, #660]	@ (800e37c <_dtoa_r+0x8cc>)
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	f7f2 f8cd 	bl	8000288 <__aeabi_dsub>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0f6:	f7f2 fcf1 	bl	8000adc <__aeabi_dcmplt>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	f43f aef5 	beq.w	800deea <_dtoa_r+0x43a>
 800e100:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e102:	1e73      	subs	r3, r6, #1
 800e104:	9315      	str	r3, [sp, #84]	@ 0x54
 800e106:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e10a:	2b30      	cmp	r3, #48	@ 0x30
 800e10c:	d0f8      	beq.n	800e100 <_dtoa_r+0x650>
 800e10e:	9f04      	ldr	r7, [sp, #16]
 800e110:	e73e      	b.n	800df90 <_dtoa_r+0x4e0>
 800e112:	4b9b      	ldr	r3, [pc, #620]	@ (800e380 <_dtoa_r+0x8d0>)
 800e114:	f7f2 fa70 	bl	80005f8 <__aeabi_dmul>
 800e118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e11c:	e7bc      	b.n	800e098 <_dtoa_r+0x5e8>
 800e11e:	d10c      	bne.n	800e13a <_dtoa_r+0x68a>
 800e120:	4b98      	ldr	r3, [pc, #608]	@ (800e384 <_dtoa_r+0x8d4>)
 800e122:	2200      	movs	r2, #0
 800e124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e128:	f7f2 fa66 	bl	80005f8 <__aeabi_dmul>
 800e12c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e130:	f7f2 fce8 	bl	8000b04 <__aeabi_dcmpge>
 800e134:	2800      	cmp	r0, #0
 800e136:	f000 8157 	beq.w	800e3e8 <_dtoa_r+0x938>
 800e13a:	2400      	movs	r4, #0
 800e13c:	4625      	mov	r5, r4
 800e13e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e140:	43db      	mvns	r3, r3
 800e142:	9304      	str	r3, [sp, #16]
 800e144:	4656      	mov	r6, sl
 800e146:	2700      	movs	r7, #0
 800e148:	4621      	mov	r1, r4
 800e14a:	4658      	mov	r0, fp
 800e14c:	f000 fbb4 	bl	800e8b8 <_Bfree>
 800e150:	2d00      	cmp	r5, #0
 800e152:	d0dc      	beq.n	800e10e <_dtoa_r+0x65e>
 800e154:	b12f      	cbz	r7, 800e162 <_dtoa_r+0x6b2>
 800e156:	42af      	cmp	r7, r5
 800e158:	d003      	beq.n	800e162 <_dtoa_r+0x6b2>
 800e15a:	4639      	mov	r1, r7
 800e15c:	4658      	mov	r0, fp
 800e15e:	f000 fbab 	bl	800e8b8 <_Bfree>
 800e162:	4629      	mov	r1, r5
 800e164:	4658      	mov	r0, fp
 800e166:	f000 fba7 	bl	800e8b8 <_Bfree>
 800e16a:	e7d0      	b.n	800e10e <_dtoa_r+0x65e>
 800e16c:	9704      	str	r7, [sp, #16]
 800e16e:	4633      	mov	r3, r6
 800e170:	461e      	mov	r6, r3
 800e172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e176:	2a39      	cmp	r2, #57	@ 0x39
 800e178:	d107      	bne.n	800e18a <_dtoa_r+0x6da>
 800e17a:	459a      	cmp	sl, r3
 800e17c:	d1f8      	bne.n	800e170 <_dtoa_r+0x6c0>
 800e17e:	9a04      	ldr	r2, [sp, #16]
 800e180:	3201      	adds	r2, #1
 800e182:	9204      	str	r2, [sp, #16]
 800e184:	2230      	movs	r2, #48	@ 0x30
 800e186:	f88a 2000 	strb.w	r2, [sl]
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	3201      	adds	r2, #1
 800e18e:	701a      	strb	r2, [r3, #0]
 800e190:	e7bd      	b.n	800e10e <_dtoa_r+0x65e>
 800e192:	4b7b      	ldr	r3, [pc, #492]	@ (800e380 <_dtoa_r+0x8d0>)
 800e194:	2200      	movs	r2, #0
 800e196:	f7f2 fa2f 	bl	80005f8 <__aeabi_dmul>
 800e19a:	2200      	movs	r2, #0
 800e19c:	2300      	movs	r3, #0
 800e19e:	4604      	mov	r4, r0
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	f7f2 fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	f43f aebb 	beq.w	800df22 <_dtoa_r+0x472>
 800e1ac:	e6f0      	b.n	800df90 <_dtoa_r+0x4e0>
 800e1ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	f000 80db 	beq.w	800e36c <_dtoa_r+0x8bc>
 800e1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1b8:	2a01      	cmp	r2, #1
 800e1ba:	f300 80bf 	bgt.w	800e33c <_dtoa_r+0x88c>
 800e1be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	f000 80b7 	beq.w	800e334 <_dtoa_r+0x884>
 800e1c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e1ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e1cc:	4646      	mov	r6, r8
 800e1ce:	9a08      	ldr	r2, [sp, #32]
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	441a      	add	r2, r3
 800e1d4:	4658      	mov	r0, fp
 800e1d6:	4498      	add	r8, r3
 800e1d8:	9208      	str	r2, [sp, #32]
 800e1da:	f000 fc21 	bl	800ea20 <__i2b>
 800e1de:	4605      	mov	r5, r0
 800e1e0:	b15e      	cbz	r6, 800e1fa <_dtoa_r+0x74a>
 800e1e2:	9b08      	ldr	r3, [sp, #32]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dd08      	ble.n	800e1fa <_dtoa_r+0x74a>
 800e1e8:	42b3      	cmp	r3, r6
 800e1ea:	9a08      	ldr	r2, [sp, #32]
 800e1ec:	bfa8      	it	ge
 800e1ee:	4633      	movge	r3, r6
 800e1f0:	eba8 0803 	sub.w	r8, r8, r3
 800e1f4:	1af6      	subs	r6, r6, r3
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	9308      	str	r3, [sp, #32]
 800e1fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1fc:	b1f3      	cbz	r3, 800e23c <_dtoa_r+0x78c>
 800e1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 80b7 	beq.w	800e374 <_dtoa_r+0x8c4>
 800e206:	b18c      	cbz	r4, 800e22c <_dtoa_r+0x77c>
 800e208:	4629      	mov	r1, r5
 800e20a:	4622      	mov	r2, r4
 800e20c:	4658      	mov	r0, fp
 800e20e:	f000 fcc7 	bl	800eba0 <__pow5mult>
 800e212:	464a      	mov	r2, r9
 800e214:	4601      	mov	r1, r0
 800e216:	4605      	mov	r5, r0
 800e218:	4658      	mov	r0, fp
 800e21a:	f000 fc17 	bl	800ea4c <__multiply>
 800e21e:	4649      	mov	r1, r9
 800e220:	9004      	str	r0, [sp, #16]
 800e222:	4658      	mov	r0, fp
 800e224:	f000 fb48 	bl	800e8b8 <_Bfree>
 800e228:	9b04      	ldr	r3, [sp, #16]
 800e22a:	4699      	mov	r9, r3
 800e22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e22e:	1b1a      	subs	r2, r3, r4
 800e230:	d004      	beq.n	800e23c <_dtoa_r+0x78c>
 800e232:	4649      	mov	r1, r9
 800e234:	4658      	mov	r0, fp
 800e236:	f000 fcb3 	bl	800eba0 <__pow5mult>
 800e23a:	4681      	mov	r9, r0
 800e23c:	2101      	movs	r1, #1
 800e23e:	4658      	mov	r0, fp
 800e240:	f000 fbee 	bl	800ea20 <__i2b>
 800e244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e246:	4604      	mov	r4, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 81cf 	beq.w	800e5ec <_dtoa_r+0xb3c>
 800e24e:	461a      	mov	r2, r3
 800e250:	4601      	mov	r1, r0
 800e252:	4658      	mov	r0, fp
 800e254:	f000 fca4 	bl	800eba0 <__pow5mult>
 800e258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	4604      	mov	r4, r0
 800e25e:	f300 8095 	bgt.w	800e38c <_dtoa_r+0x8dc>
 800e262:	9b02      	ldr	r3, [sp, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	f040 8087 	bne.w	800e378 <_dtoa_r+0x8c8>
 800e26a:	9b03      	ldr	r3, [sp, #12]
 800e26c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e270:	2b00      	cmp	r3, #0
 800e272:	f040 8089 	bne.w	800e388 <_dtoa_r+0x8d8>
 800e276:	9b03      	ldr	r3, [sp, #12]
 800e278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e27c:	0d1b      	lsrs	r3, r3, #20
 800e27e:	051b      	lsls	r3, r3, #20
 800e280:	b12b      	cbz	r3, 800e28e <_dtoa_r+0x7de>
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	3301      	adds	r3, #1
 800e286:	9308      	str	r3, [sp, #32]
 800e288:	f108 0801 	add.w	r8, r8, #1
 800e28c:	2301      	movs	r3, #1
 800e28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e292:	2b00      	cmp	r3, #0
 800e294:	f000 81b0 	beq.w	800e5f8 <_dtoa_r+0xb48>
 800e298:	6923      	ldr	r3, [r4, #16]
 800e29a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e29e:	6918      	ldr	r0, [r3, #16]
 800e2a0:	f000 fb72 	bl	800e988 <__hi0bits>
 800e2a4:	f1c0 0020 	rsb	r0, r0, #32
 800e2a8:	9b08      	ldr	r3, [sp, #32]
 800e2aa:	4418      	add	r0, r3
 800e2ac:	f010 001f 	ands.w	r0, r0, #31
 800e2b0:	d077      	beq.n	800e3a2 <_dtoa_r+0x8f2>
 800e2b2:	f1c0 0320 	rsb	r3, r0, #32
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	dd6b      	ble.n	800e392 <_dtoa_r+0x8e2>
 800e2ba:	9b08      	ldr	r3, [sp, #32]
 800e2bc:	f1c0 001c 	rsb	r0, r0, #28
 800e2c0:	4403      	add	r3, r0
 800e2c2:	4480      	add	r8, r0
 800e2c4:	4406      	add	r6, r0
 800e2c6:	9308      	str	r3, [sp, #32]
 800e2c8:	f1b8 0f00 	cmp.w	r8, #0
 800e2cc:	dd05      	ble.n	800e2da <_dtoa_r+0x82a>
 800e2ce:	4649      	mov	r1, r9
 800e2d0:	4642      	mov	r2, r8
 800e2d2:	4658      	mov	r0, fp
 800e2d4:	f000 fcbe 	bl	800ec54 <__lshift>
 800e2d8:	4681      	mov	r9, r0
 800e2da:	9b08      	ldr	r3, [sp, #32]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	dd05      	ble.n	800e2ec <_dtoa_r+0x83c>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	4658      	mov	r0, fp
 800e2e6:	f000 fcb5 	bl	800ec54 <__lshift>
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d059      	beq.n	800e3a6 <_dtoa_r+0x8f6>
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4648      	mov	r0, r9
 800e2f6:	f000 fd19 	bl	800ed2c <__mcmp>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	da53      	bge.n	800e3a6 <_dtoa_r+0x8f6>
 800e2fe:	1e7b      	subs	r3, r7, #1
 800e300:	9304      	str	r3, [sp, #16]
 800e302:	4649      	mov	r1, r9
 800e304:	2300      	movs	r3, #0
 800e306:	220a      	movs	r2, #10
 800e308:	4658      	mov	r0, fp
 800e30a:	f000 faf7 	bl	800e8fc <__multadd>
 800e30e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e310:	4681      	mov	r9, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 8172 	beq.w	800e5fc <_dtoa_r+0xb4c>
 800e318:	2300      	movs	r3, #0
 800e31a:	4629      	mov	r1, r5
 800e31c:	220a      	movs	r2, #10
 800e31e:	4658      	mov	r0, fp
 800e320:	f000 faec 	bl	800e8fc <__multadd>
 800e324:	9b00      	ldr	r3, [sp, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	4605      	mov	r5, r0
 800e32a:	dc67      	bgt.n	800e3fc <_dtoa_r+0x94c>
 800e32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e32e:	2b02      	cmp	r3, #2
 800e330:	dc41      	bgt.n	800e3b6 <_dtoa_r+0x906>
 800e332:	e063      	b.n	800e3fc <_dtoa_r+0x94c>
 800e334:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e336:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e33a:	e746      	b.n	800e1ca <_dtoa_r+0x71a>
 800e33c:	9b07      	ldr	r3, [sp, #28]
 800e33e:	1e5c      	subs	r4, r3, #1
 800e340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e342:	42a3      	cmp	r3, r4
 800e344:	bfbf      	itttt	lt
 800e346:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e348:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e34a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e34c:	1ae3      	sublt	r3, r4, r3
 800e34e:	bfb4      	ite	lt
 800e350:	18d2      	addlt	r2, r2, r3
 800e352:	1b1c      	subge	r4, r3, r4
 800e354:	9b07      	ldr	r3, [sp, #28]
 800e356:	bfbc      	itt	lt
 800e358:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e35a:	2400      	movlt	r4, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bfb5      	itete	lt
 800e360:	eba8 0603 	sublt.w	r6, r8, r3
 800e364:	9b07      	ldrge	r3, [sp, #28]
 800e366:	2300      	movlt	r3, #0
 800e368:	4646      	movge	r6, r8
 800e36a:	e730      	b.n	800e1ce <_dtoa_r+0x71e>
 800e36c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e36e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e370:	4646      	mov	r6, r8
 800e372:	e735      	b.n	800e1e0 <_dtoa_r+0x730>
 800e374:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e376:	e75c      	b.n	800e232 <_dtoa_r+0x782>
 800e378:	2300      	movs	r3, #0
 800e37a:	e788      	b.n	800e28e <_dtoa_r+0x7de>
 800e37c:	3fe00000 	.word	0x3fe00000
 800e380:	40240000 	.word	0x40240000
 800e384:	40140000 	.word	0x40140000
 800e388:	9b02      	ldr	r3, [sp, #8]
 800e38a:	e780      	b.n	800e28e <_dtoa_r+0x7de>
 800e38c:	2300      	movs	r3, #0
 800e38e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e390:	e782      	b.n	800e298 <_dtoa_r+0x7e8>
 800e392:	d099      	beq.n	800e2c8 <_dtoa_r+0x818>
 800e394:	9a08      	ldr	r2, [sp, #32]
 800e396:	331c      	adds	r3, #28
 800e398:	441a      	add	r2, r3
 800e39a:	4498      	add	r8, r3
 800e39c:	441e      	add	r6, r3
 800e39e:	9208      	str	r2, [sp, #32]
 800e3a0:	e792      	b.n	800e2c8 <_dtoa_r+0x818>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	e7f6      	b.n	800e394 <_dtoa_r+0x8e4>
 800e3a6:	9b07      	ldr	r3, [sp, #28]
 800e3a8:	9704      	str	r7, [sp, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dc20      	bgt.n	800e3f0 <_dtoa_r+0x940>
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	dd1e      	ble.n	800e3f4 <_dtoa_r+0x944>
 800e3b6:	9b00      	ldr	r3, [sp, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f47f aec0 	bne.w	800e13e <_dtoa_r+0x68e>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	2205      	movs	r2, #5
 800e3c2:	4658      	mov	r0, fp
 800e3c4:	f000 fa9a 	bl	800e8fc <__multadd>
 800e3c8:	4601      	mov	r1, r0
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	4648      	mov	r0, r9
 800e3ce:	f000 fcad 	bl	800ed2c <__mcmp>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	f77f aeb3 	ble.w	800e13e <_dtoa_r+0x68e>
 800e3d8:	4656      	mov	r6, sl
 800e3da:	2331      	movs	r3, #49	@ 0x31
 800e3dc:	f806 3b01 	strb.w	r3, [r6], #1
 800e3e0:	9b04      	ldr	r3, [sp, #16]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	9304      	str	r3, [sp, #16]
 800e3e6:	e6ae      	b.n	800e146 <_dtoa_r+0x696>
 800e3e8:	9c07      	ldr	r4, [sp, #28]
 800e3ea:	9704      	str	r7, [sp, #16]
 800e3ec:	4625      	mov	r5, r4
 800e3ee:	e7f3      	b.n	800e3d8 <_dtoa_r+0x928>
 800e3f0:	9b07      	ldr	r3, [sp, #28]
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f000 8104 	beq.w	800e604 <_dtoa_r+0xb54>
 800e3fc:	2e00      	cmp	r6, #0
 800e3fe:	dd05      	ble.n	800e40c <_dtoa_r+0x95c>
 800e400:	4629      	mov	r1, r5
 800e402:	4632      	mov	r2, r6
 800e404:	4658      	mov	r0, fp
 800e406:	f000 fc25 	bl	800ec54 <__lshift>
 800e40a:	4605      	mov	r5, r0
 800e40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d05a      	beq.n	800e4c8 <_dtoa_r+0xa18>
 800e412:	6869      	ldr	r1, [r5, #4]
 800e414:	4658      	mov	r0, fp
 800e416:	f000 fa0f 	bl	800e838 <_Balloc>
 800e41a:	4606      	mov	r6, r0
 800e41c:	b928      	cbnz	r0, 800e42a <_dtoa_r+0x97a>
 800e41e:	4b84      	ldr	r3, [pc, #528]	@ (800e630 <_dtoa_r+0xb80>)
 800e420:	4602      	mov	r2, r0
 800e422:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e426:	f7ff bb5a 	b.w	800dade <_dtoa_r+0x2e>
 800e42a:	692a      	ldr	r2, [r5, #16]
 800e42c:	3202      	adds	r2, #2
 800e42e:	0092      	lsls	r2, r2, #2
 800e430:	f105 010c 	add.w	r1, r5, #12
 800e434:	300c      	adds	r0, #12
 800e436:	f7ff fa86 	bl	800d946 <memcpy>
 800e43a:	2201      	movs	r2, #1
 800e43c:	4631      	mov	r1, r6
 800e43e:	4658      	mov	r0, fp
 800e440:	f000 fc08 	bl	800ec54 <__lshift>
 800e444:	f10a 0301 	add.w	r3, sl, #1
 800e448:	9307      	str	r3, [sp, #28]
 800e44a:	9b00      	ldr	r3, [sp, #0]
 800e44c:	4453      	add	r3, sl
 800e44e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e450:	9b02      	ldr	r3, [sp, #8]
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	462f      	mov	r7, r5
 800e458:	930a      	str	r3, [sp, #40]	@ 0x28
 800e45a:	4605      	mov	r5, r0
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	4621      	mov	r1, r4
 800e460:	3b01      	subs	r3, #1
 800e462:	4648      	mov	r0, r9
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	f7ff fa9b 	bl	800d9a0 <quorem>
 800e46a:	4639      	mov	r1, r7
 800e46c:	9002      	str	r0, [sp, #8]
 800e46e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e472:	4648      	mov	r0, r9
 800e474:	f000 fc5a 	bl	800ed2c <__mcmp>
 800e478:	462a      	mov	r2, r5
 800e47a:	9008      	str	r0, [sp, #32]
 800e47c:	4621      	mov	r1, r4
 800e47e:	4658      	mov	r0, fp
 800e480:	f000 fc70 	bl	800ed64 <__mdiff>
 800e484:	68c2      	ldr	r2, [r0, #12]
 800e486:	4606      	mov	r6, r0
 800e488:	bb02      	cbnz	r2, 800e4cc <_dtoa_r+0xa1c>
 800e48a:	4601      	mov	r1, r0
 800e48c:	4648      	mov	r0, r9
 800e48e:	f000 fc4d 	bl	800ed2c <__mcmp>
 800e492:	4602      	mov	r2, r0
 800e494:	4631      	mov	r1, r6
 800e496:	4658      	mov	r0, fp
 800e498:	920e      	str	r2, [sp, #56]	@ 0x38
 800e49a:	f000 fa0d 	bl	800e8b8 <_Bfree>
 800e49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4a2:	9e07      	ldr	r6, [sp, #28]
 800e4a4:	ea43 0102 	orr.w	r1, r3, r2
 800e4a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4aa:	4319      	orrs	r1, r3
 800e4ac:	d110      	bne.n	800e4d0 <_dtoa_r+0xa20>
 800e4ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e4b2:	d029      	beq.n	800e508 <_dtoa_r+0xa58>
 800e4b4:	9b08      	ldr	r3, [sp, #32]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	dd02      	ble.n	800e4c0 <_dtoa_r+0xa10>
 800e4ba:	9b02      	ldr	r3, [sp, #8]
 800e4bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e4c0:	9b00      	ldr	r3, [sp, #0]
 800e4c2:	f883 8000 	strb.w	r8, [r3]
 800e4c6:	e63f      	b.n	800e148 <_dtoa_r+0x698>
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	e7bb      	b.n	800e444 <_dtoa_r+0x994>
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	e7e1      	b.n	800e494 <_dtoa_r+0x9e4>
 800e4d0:	9b08      	ldr	r3, [sp, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	db04      	blt.n	800e4e0 <_dtoa_r+0xa30>
 800e4d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4d8:	430b      	orrs	r3, r1
 800e4da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4dc:	430b      	orrs	r3, r1
 800e4de:	d120      	bne.n	800e522 <_dtoa_r+0xa72>
 800e4e0:	2a00      	cmp	r2, #0
 800e4e2:	dded      	ble.n	800e4c0 <_dtoa_r+0xa10>
 800e4e4:	4649      	mov	r1, r9
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	4658      	mov	r0, fp
 800e4ea:	f000 fbb3 	bl	800ec54 <__lshift>
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4681      	mov	r9, r0
 800e4f2:	f000 fc1b 	bl	800ed2c <__mcmp>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	dc03      	bgt.n	800e502 <_dtoa_r+0xa52>
 800e4fa:	d1e1      	bne.n	800e4c0 <_dtoa_r+0xa10>
 800e4fc:	f018 0f01 	tst.w	r8, #1
 800e500:	d0de      	beq.n	800e4c0 <_dtoa_r+0xa10>
 800e502:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e506:	d1d8      	bne.n	800e4ba <_dtoa_r+0xa0a>
 800e508:	9a00      	ldr	r2, [sp, #0]
 800e50a:	2339      	movs	r3, #57	@ 0x39
 800e50c:	7013      	strb	r3, [r2, #0]
 800e50e:	4633      	mov	r3, r6
 800e510:	461e      	mov	r6, r3
 800e512:	3b01      	subs	r3, #1
 800e514:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e518:	2a39      	cmp	r2, #57	@ 0x39
 800e51a:	d052      	beq.n	800e5c2 <_dtoa_r+0xb12>
 800e51c:	3201      	adds	r2, #1
 800e51e:	701a      	strb	r2, [r3, #0]
 800e520:	e612      	b.n	800e148 <_dtoa_r+0x698>
 800e522:	2a00      	cmp	r2, #0
 800e524:	dd07      	ble.n	800e536 <_dtoa_r+0xa86>
 800e526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e52a:	d0ed      	beq.n	800e508 <_dtoa_r+0xa58>
 800e52c:	9a00      	ldr	r2, [sp, #0]
 800e52e:	f108 0301 	add.w	r3, r8, #1
 800e532:	7013      	strb	r3, [r2, #0]
 800e534:	e608      	b.n	800e148 <_dtoa_r+0x698>
 800e536:	9b07      	ldr	r3, [sp, #28]
 800e538:	9a07      	ldr	r2, [sp, #28]
 800e53a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e540:	4293      	cmp	r3, r2
 800e542:	d028      	beq.n	800e596 <_dtoa_r+0xae6>
 800e544:	4649      	mov	r1, r9
 800e546:	2300      	movs	r3, #0
 800e548:	220a      	movs	r2, #10
 800e54a:	4658      	mov	r0, fp
 800e54c:	f000 f9d6 	bl	800e8fc <__multadd>
 800e550:	42af      	cmp	r7, r5
 800e552:	4681      	mov	r9, r0
 800e554:	f04f 0300 	mov.w	r3, #0
 800e558:	f04f 020a 	mov.w	r2, #10
 800e55c:	4639      	mov	r1, r7
 800e55e:	4658      	mov	r0, fp
 800e560:	d107      	bne.n	800e572 <_dtoa_r+0xac2>
 800e562:	f000 f9cb 	bl	800e8fc <__multadd>
 800e566:	4607      	mov	r7, r0
 800e568:	4605      	mov	r5, r0
 800e56a:	9b07      	ldr	r3, [sp, #28]
 800e56c:	3301      	adds	r3, #1
 800e56e:	9307      	str	r3, [sp, #28]
 800e570:	e774      	b.n	800e45c <_dtoa_r+0x9ac>
 800e572:	f000 f9c3 	bl	800e8fc <__multadd>
 800e576:	4629      	mov	r1, r5
 800e578:	4607      	mov	r7, r0
 800e57a:	2300      	movs	r3, #0
 800e57c:	220a      	movs	r2, #10
 800e57e:	4658      	mov	r0, fp
 800e580:	f000 f9bc 	bl	800e8fc <__multadd>
 800e584:	4605      	mov	r5, r0
 800e586:	e7f0      	b.n	800e56a <_dtoa_r+0xaba>
 800e588:	9b00      	ldr	r3, [sp, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	bfcc      	ite	gt
 800e58e:	461e      	movgt	r6, r3
 800e590:	2601      	movle	r6, #1
 800e592:	4456      	add	r6, sl
 800e594:	2700      	movs	r7, #0
 800e596:	4649      	mov	r1, r9
 800e598:	2201      	movs	r2, #1
 800e59a:	4658      	mov	r0, fp
 800e59c:	f000 fb5a 	bl	800ec54 <__lshift>
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4681      	mov	r9, r0
 800e5a4:	f000 fbc2 	bl	800ed2c <__mcmp>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	dcb0      	bgt.n	800e50e <_dtoa_r+0xa5e>
 800e5ac:	d102      	bne.n	800e5b4 <_dtoa_r+0xb04>
 800e5ae:	f018 0f01 	tst.w	r8, #1
 800e5b2:	d1ac      	bne.n	800e50e <_dtoa_r+0xa5e>
 800e5b4:	4633      	mov	r3, r6
 800e5b6:	461e      	mov	r6, r3
 800e5b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5bc:	2a30      	cmp	r2, #48	@ 0x30
 800e5be:	d0fa      	beq.n	800e5b6 <_dtoa_r+0xb06>
 800e5c0:	e5c2      	b.n	800e148 <_dtoa_r+0x698>
 800e5c2:	459a      	cmp	sl, r3
 800e5c4:	d1a4      	bne.n	800e510 <_dtoa_r+0xa60>
 800e5c6:	9b04      	ldr	r3, [sp, #16]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	9304      	str	r3, [sp, #16]
 800e5cc:	2331      	movs	r3, #49	@ 0x31
 800e5ce:	f88a 3000 	strb.w	r3, [sl]
 800e5d2:	e5b9      	b.n	800e148 <_dtoa_r+0x698>
 800e5d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e634 <_dtoa_r+0xb84>
 800e5da:	b11b      	cbz	r3, 800e5e4 <_dtoa_r+0xb34>
 800e5dc:	f10a 0308 	add.w	r3, sl, #8
 800e5e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	4650      	mov	r0, sl
 800e5e6:	b019      	add	sp, #100	@ 0x64
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	f77f ae37 	ble.w	800e262 <_dtoa_r+0x7b2>
 800e5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5f8:	2001      	movs	r0, #1
 800e5fa:	e655      	b.n	800e2a8 <_dtoa_r+0x7f8>
 800e5fc:	9b00      	ldr	r3, [sp, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f77f aed6 	ble.w	800e3b0 <_dtoa_r+0x900>
 800e604:	4656      	mov	r6, sl
 800e606:	4621      	mov	r1, r4
 800e608:	4648      	mov	r0, r9
 800e60a:	f7ff f9c9 	bl	800d9a0 <quorem>
 800e60e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e612:	f806 8b01 	strb.w	r8, [r6], #1
 800e616:	9b00      	ldr	r3, [sp, #0]
 800e618:	eba6 020a 	sub.w	r2, r6, sl
 800e61c:	4293      	cmp	r3, r2
 800e61e:	ddb3      	ble.n	800e588 <_dtoa_r+0xad8>
 800e620:	4649      	mov	r1, r9
 800e622:	2300      	movs	r3, #0
 800e624:	220a      	movs	r2, #10
 800e626:	4658      	mov	r0, fp
 800e628:	f000 f968 	bl	800e8fc <__multadd>
 800e62c:	4681      	mov	r9, r0
 800e62e:	e7ea      	b.n	800e606 <_dtoa_r+0xb56>
 800e630:	0800f860 	.word	0x0800f860
 800e634:	0800f7fb 	.word	0x0800f7fb

0800e638 <_free_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	4605      	mov	r5, r0
 800e63c:	2900      	cmp	r1, #0
 800e63e:	d041      	beq.n	800e6c4 <_free_r+0x8c>
 800e640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e644:	1f0c      	subs	r4, r1, #4
 800e646:	2b00      	cmp	r3, #0
 800e648:	bfb8      	it	lt
 800e64a:	18e4      	addlt	r4, r4, r3
 800e64c:	f000 f8e8 	bl	800e820 <__malloc_lock>
 800e650:	4a1d      	ldr	r2, [pc, #116]	@ (800e6c8 <_free_r+0x90>)
 800e652:	6813      	ldr	r3, [r2, #0]
 800e654:	b933      	cbnz	r3, 800e664 <_free_r+0x2c>
 800e656:	6063      	str	r3, [r4, #4]
 800e658:	6014      	str	r4, [r2, #0]
 800e65a:	4628      	mov	r0, r5
 800e65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e660:	f000 b8e4 	b.w	800e82c <__malloc_unlock>
 800e664:	42a3      	cmp	r3, r4
 800e666:	d908      	bls.n	800e67a <_free_r+0x42>
 800e668:	6820      	ldr	r0, [r4, #0]
 800e66a:	1821      	adds	r1, r4, r0
 800e66c:	428b      	cmp	r3, r1
 800e66e:	bf01      	itttt	eq
 800e670:	6819      	ldreq	r1, [r3, #0]
 800e672:	685b      	ldreq	r3, [r3, #4]
 800e674:	1809      	addeq	r1, r1, r0
 800e676:	6021      	streq	r1, [r4, #0]
 800e678:	e7ed      	b.n	800e656 <_free_r+0x1e>
 800e67a:	461a      	mov	r2, r3
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	b10b      	cbz	r3, 800e684 <_free_r+0x4c>
 800e680:	42a3      	cmp	r3, r4
 800e682:	d9fa      	bls.n	800e67a <_free_r+0x42>
 800e684:	6811      	ldr	r1, [r2, #0]
 800e686:	1850      	adds	r0, r2, r1
 800e688:	42a0      	cmp	r0, r4
 800e68a:	d10b      	bne.n	800e6a4 <_free_r+0x6c>
 800e68c:	6820      	ldr	r0, [r4, #0]
 800e68e:	4401      	add	r1, r0
 800e690:	1850      	adds	r0, r2, r1
 800e692:	4283      	cmp	r3, r0
 800e694:	6011      	str	r1, [r2, #0]
 800e696:	d1e0      	bne.n	800e65a <_free_r+0x22>
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	6053      	str	r3, [r2, #4]
 800e69e:	4408      	add	r0, r1
 800e6a0:	6010      	str	r0, [r2, #0]
 800e6a2:	e7da      	b.n	800e65a <_free_r+0x22>
 800e6a4:	d902      	bls.n	800e6ac <_free_r+0x74>
 800e6a6:	230c      	movs	r3, #12
 800e6a8:	602b      	str	r3, [r5, #0]
 800e6aa:	e7d6      	b.n	800e65a <_free_r+0x22>
 800e6ac:	6820      	ldr	r0, [r4, #0]
 800e6ae:	1821      	adds	r1, r4, r0
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	bf04      	itt	eq
 800e6b4:	6819      	ldreq	r1, [r3, #0]
 800e6b6:	685b      	ldreq	r3, [r3, #4]
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	bf04      	itt	eq
 800e6bc:	1809      	addeq	r1, r1, r0
 800e6be:	6021      	streq	r1, [r4, #0]
 800e6c0:	6054      	str	r4, [r2, #4]
 800e6c2:	e7ca      	b.n	800e65a <_free_r+0x22>
 800e6c4:	bd38      	pop	{r3, r4, r5, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20003140 	.word	0x20003140

0800e6cc <malloc>:
 800e6cc:	4b02      	ldr	r3, [pc, #8]	@ (800e6d8 <malloc+0xc>)
 800e6ce:	4601      	mov	r1, r0
 800e6d0:	6818      	ldr	r0, [r3, #0]
 800e6d2:	f000 b825 	b.w	800e720 <_malloc_r>
 800e6d6:	bf00      	nop
 800e6d8:	20000068 	.word	0x20000068

0800e6dc <sbrk_aligned>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	4e0f      	ldr	r6, [pc, #60]	@ (800e71c <sbrk_aligned+0x40>)
 800e6e0:	460c      	mov	r4, r1
 800e6e2:	6831      	ldr	r1, [r6, #0]
 800e6e4:	4605      	mov	r5, r0
 800e6e6:	b911      	cbnz	r1, 800e6ee <sbrk_aligned+0x12>
 800e6e8:	f000 feac 	bl	800f444 <_sbrk_r>
 800e6ec:	6030      	str	r0, [r6, #0]
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	f000 fea7 	bl	800f444 <_sbrk_r>
 800e6f6:	1c43      	adds	r3, r0, #1
 800e6f8:	d103      	bne.n	800e702 <sbrk_aligned+0x26>
 800e6fa:	f04f 34ff 	mov.w	r4, #4294967295
 800e6fe:	4620      	mov	r0, r4
 800e700:	bd70      	pop	{r4, r5, r6, pc}
 800e702:	1cc4      	adds	r4, r0, #3
 800e704:	f024 0403 	bic.w	r4, r4, #3
 800e708:	42a0      	cmp	r0, r4
 800e70a:	d0f8      	beq.n	800e6fe <sbrk_aligned+0x22>
 800e70c:	1a21      	subs	r1, r4, r0
 800e70e:	4628      	mov	r0, r5
 800e710:	f000 fe98 	bl	800f444 <_sbrk_r>
 800e714:	3001      	adds	r0, #1
 800e716:	d1f2      	bne.n	800e6fe <sbrk_aligned+0x22>
 800e718:	e7ef      	b.n	800e6fa <sbrk_aligned+0x1e>
 800e71a:	bf00      	nop
 800e71c:	2000313c 	.word	0x2000313c

0800e720 <_malloc_r>:
 800e720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e724:	1ccd      	adds	r5, r1, #3
 800e726:	f025 0503 	bic.w	r5, r5, #3
 800e72a:	3508      	adds	r5, #8
 800e72c:	2d0c      	cmp	r5, #12
 800e72e:	bf38      	it	cc
 800e730:	250c      	movcc	r5, #12
 800e732:	2d00      	cmp	r5, #0
 800e734:	4606      	mov	r6, r0
 800e736:	db01      	blt.n	800e73c <_malloc_r+0x1c>
 800e738:	42a9      	cmp	r1, r5
 800e73a:	d904      	bls.n	800e746 <_malloc_r+0x26>
 800e73c:	230c      	movs	r3, #12
 800e73e:	6033      	str	r3, [r6, #0]
 800e740:	2000      	movs	r0, #0
 800e742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e81c <_malloc_r+0xfc>
 800e74a:	f000 f869 	bl	800e820 <__malloc_lock>
 800e74e:	f8d8 3000 	ldr.w	r3, [r8]
 800e752:	461c      	mov	r4, r3
 800e754:	bb44      	cbnz	r4, 800e7a8 <_malloc_r+0x88>
 800e756:	4629      	mov	r1, r5
 800e758:	4630      	mov	r0, r6
 800e75a:	f7ff ffbf 	bl	800e6dc <sbrk_aligned>
 800e75e:	1c43      	adds	r3, r0, #1
 800e760:	4604      	mov	r4, r0
 800e762:	d158      	bne.n	800e816 <_malloc_r+0xf6>
 800e764:	f8d8 4000 	ldr.w	r4, [r8]
 800e768:	4627      	mov	r7, r4
 800e76a:	2f00      	cmp	r7, #0
 800e76c:	d143      	bne.n	800e7f6 <_malloc_r+0xd6>
 800e76e:	2c00      	cmp	r4, #0
 800e770:	d04b      	beq.n	800e80a <_malloc_r+0xea>
 800e772:	6823      	ldr	r3, [r4, #0]
 800e774:	4639      	mov	r1, r7
 800e776:	4630      	mov	r0, r6
 800e778:	eb04 0903 	add.w	r9, r4, r3
 800e77c:	f000 fe62 	bl	800f444 <_sbrk_r>
 800e780:	4581      	cmp	r9, r0
 800e782:	d142      	bne.n	800e80a <_malloc_r+0xea>
 800e784:	6821      	ldr	r1, [r4, #0]
 800e786:	1a6d      	subs	r5, r5, r1
 800e788:	4629      	mov	r1, r5
 800e78a:	4630      	mov	r0, r6
 800e78c:	f7ff ffa6 	bl	800e6dc <sbrk_aligned>
 800e790:	3001      	adds	r0, #1
 800e792:	d03a      	beq.n	800e80a <_malloc_r+0xea>
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	442b      	add	r3, r5
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	f8d8 3000 	ldr.w	r3, [r8]
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	bb62      	cbnz	r2, 800e7fc <_malloc_r+0xdc>
 800e7a2:	f8c8 7000 	str.w	r7, [r8]
 800e7a6:	e00f      	b.n	800e7c8 <_malloc_r+0xa8>
 800e7a8:	6822      	ldr	r2, [r4, #0]
 800e7aa:	1b52      	subs	r2, r2, r5
 800e7ac:	d420      	bmi.n	800e7f0 <_malloc_r+0xd0>
 800e7ae:	2a0b      	cmp	r2, #11
 800e7b0:	d917      	bls.n	800e7e2 <_malloc_r+0xc2>
 800e7b2:	1961      	adds	r1, r4, r5
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	6025      	str	r5, [r4, #0]
 800e7b8:	bf18      	it	ne
 800e7ba:	6059      	strne	r1, [r3, #4]
 800e7bc:	6863      	ldr	r3, [r4, #4]
 800e7be:	bf08      	it	eq
 800e7c0:	f8c8 1000 	streq.w	r1, [r8]
 800e7c4:	5162      	str	r2, [r4, r5]
 800e7c6:	604b      	str	r3, [r1, #4]
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	f000 f82f 	bl	800e82c <__malloc_unlock>
 800e7ce:	f104 000b 	add.w	r0, r4, #11
 800e7d2:	1d23      	adds	r3, r4, #4
 800e7d4:	f020 0007 	bic.w	r0, r0, #7
 800e7d8:	1ac2      	subs	r2, r0, r3
 800e7da:	bf1c      	itt	ne
 800e7dc:	1a1b      	subne	r3, r3, r0
 800e7de:	50a3      	strne	r3, [r4, r2]
 800e7e0:	e7af      	b.n	800e742 <_malloc_r+0x22>
 800e7e2:	6862      	ldr	r2, [r4, #4]
 800e7e4:	42a3      	cmp	r3, r4
 800e7e6:	bf0c      	ite	eq
 800e7e8:	f8c8 2000 	streq.w	r2, [r8]
 800e7ec:	605a      	strne	r2, [r3, #4]
 800e7ee:	e7eb      	b.n	800e7c8 <_malloc_r+0xa8>
 800e7f0:	4623      	mov	r3, r4
 800e7f2:	6864      	ldr	r4, [r4, #4]
 800e7f4:	e7ae      	b.n	800e754 <_malloc_r+0x34>
 800e7f6:	463c      	mov	r4, r7
 800e7f8:	687f      	ldr	r7, [r7, #4]
 800e7fa:	e7b6      	b.n	800e76a <_malloc_r+0x4a>
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	42a3      	cmp	r3, r4
 800e802:	d1fb      	bne.n	800e7fc <_malloc_r+0xdc>
 800e804:	2300      	movs	r3, #0
 800e806:	6053      	str	r3, [r2, #4]
 800e808:	e7de      	b.n	800e7c8 <_malloc_r+0xa8>
 800e80a:	230c      	movs	r3, #12
 800e80c:	6033      	str	r3, [r6, #0]
 800e80e:	4630      	mov	r0, r6
 800e810:	f000 f80c 	bl	800e82c <__malloc_unlock>
 800e814:	e794      	b.n	800e740 <_malloc_r+0x20>
 800e816:	6005      	str	r5, [r0, #0]
 800e818:	e7d6      	b.n	800e7c8 <_malloc_r+0xa8>
 800e81a:	bf00      	nop
 800e81c:	20003140 	.word	0x20003140

0800e820 <__malloc_lock>:
 800e820:	4801      	ldr	r0, [pc, #4]	@ (800e828 <__malloc_lock+0x8>)
 800e822:	f7ff b88e 	b.w	800d942 <__retarget_lock_acquire_recursive>
 800e826:	bf00      	nop
 800e828:	20003138 	.word	0x20003138

0800e82c <__malloc_unlock>:
 800e82c:	4801      	ldr	r0, [pc, #4]	@ (800e834 <__malloc_unlock+0x8>)
 800e82e:	f7ff b889 	b.w	800d944 <__retarget_lock_release_recursive>
 800e832:	bf00      	nop
 800e834:	20003138 	.word	0x20003138

0800e838 <_Balloc>:
 800e838:	b570      	push	{r4, r5, r6, lr}
 800e83a:	69c6      	ldr	r6, [r0, #28]
 800e83c:	4604      	mov	r4, r0
 800e83e:	460d      	mov	r5, r1
 800e840:	b976      	cbnz	r6, 800e860 <_Balloc+0x28>
 800e842:	2010      	movs	r0, #16
 800e844:	f7ff ff42 	bl	800e6cc <malloc>
 800e848:	4602      	mov	r2, r0
 800e84a:	61e0      	str	r0, [r4, #28]
 800e84c:	b920      	cbnz	r0, 800e858 <_Balloc+0x20>
 800e84e:	4b18      	ldr	r3, [pc, #96]	@ (800e8b0 <_Balloc+0x78>)
 800e850:	4818      	ldr	r0, [pc, #96]	@ (800e8b4 <_Balloc+0x7c>)
 800e852:	216b      	movs	r1, #107	@ 0x6b
 800e854:	f7ff f886 	bl	800d964 <__assert_func>
 800e858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e85c:	6006      	str	r6, [r0, #0]
 800e85e:	60c6      	str	r6, [r0, #12]
 800e860:	69e6      	ldr	r6, [r4, #28]
 800e862:	68f3      	ldr	r3, [r6, #12]
 800e864:	b183      	cbz	r3, 800e888 <_Balloc+0x50>
 800e866:	69e3      	ldr	r3, [r4, #28]
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e86e:	b9b8      	cbnz	r0, 800e8a0 <_Balloc+0x68>
 800e870:	2101      	movs	r1, #1
 800e872:	fa01 f605 	lsl.w	r6, r1, r5
 800e876:	1d72      	adds	r2, r6, #5
 800e878:	0092      	lsls	r2, r2, #2
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 fdf9 	bl	800f472 <_calloc_r>
 800e880:	b160      	cbz	r0, 800e89c <_Balloc+0x64>
 800e882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e886:	e00e      	b.n	800e8a6 <_Balloc+0x6e>
 800e888:	2221      	movs	r2, #33	@ 0x21
 800e88a:	2104      	movs	r1, #4
 800e88c:	4620      	mov	r0, r4
 800e88e:	f000 fdf0 	bl	800f472 <_calloc_r>
 800e892:	69e3      	ldr	r3, [r4, #28]
 800e894:	60f0      	str	r0, [r6, #12]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1e4      	bne.n	800e866 <_Balloc+0x2e>
 800e89c:	2000      	movs	r0, #0
 800e89e:	bd70      	pop	{r4, r5, r6, pc}
 800e8a0:	6802      	ldr	r2, [r0, #0]
 800e8a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8ac:	e7f7      	b.n	800e89e <_Balloc+0x66>
 800e8ae:	bf00      	nop
 800e8b0:	0800f71c 	.word	0x0800f71c
 800e8b4:	0800f871 	.word	0x0800f871

0800e8b8 <_Bfree>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	69c6      	ldr	r6, [r0, #28]
 800e8bc:	4605      	mov	r5, r0
 800e8be:	460c      	mov	r4, r1
 800e8c0:	b976      	cbnz	r6, 800e8e0 <_Bfree+0x28>
 800e8c2:	2010      	movs	r0, #16
 800e8c4:	f7ff ff02 	bl	800e6cc <malloc>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	61e8      	str	r0, [r5, #28]
 800e8cc:	b920      	cbnz	r0, 800e8d8 <_Bfree+0x20>
 800e8ce:	4b09      	ldr	r3, [pc, #36]	@ (800e8f4 <_Bfree+0x3c>)
 800e8d0:	4809      	ldr	r0, [pc, #36]	@ (800e8f8 <_Bfree+0x40>)
 800e8d2:	218f      	movs	r1, #143	@ 0x8f
 800e8d4:	f7ff f846 	bl	800d964 <__assert_func>
 800e8d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8dc:	6006      	str	r6, [r0, #0]
 800e8de:	60c6      	str	r6, [r0, #12]
 800e8e0:	b13c      	cbz	r4, 800e8f2 <_Bfree+0x3a>
 800e8e2:	69eb      	ldr	r3, [r5, #28]
 800e8e4:	6862      	ldr	r2, [r4, #4]
 800e8e6:	68db      	ldr	r3, [r3, #12]
 800e8e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8ec:	6021      	str	r1, [r4, #0]
 800e8ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8f2:	bd70      	pop	{r4, r5, r6, pc}
 800e8f4:	0800f71c 	.word	0x0800f71c
 800e8f8:	0800f871 	.word	0x0800f871

0800e8fc <__multadd>:
 800e8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e900:	690d      	ldr	r5, [r1, #16]
 800e902:	4607      	mov	r7, r0
 800e904:	460c      	mov	r4, r1
 800e906:	461e      	mov	r6, r3
 800e908:	f101 0c14 	add.w	ip, r1, #20
 800e90c:	2000      	movs	r0, #0
 800e90e:	f8dc 3000 	ldr.w	r3, [ip]
 800e912:	b299      	uxth	r1, r3
 800e914:	fb02 6101 	mla	r1, r2, r1, r6
 800e918:	0c1e      	lsrs	r6, r3, #16
 800e91a:	0c0b      	lsrs	r3, r1, #16
 800e91c:	fb02 3306 	mla	r3, r2, r6, r3
 800e920:	b289      	uxth	r1, r1
 800e922:	3001      	adds	r0, #1
 800e924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e928:	4285      	cmp	r5, r0
 800e92a:	f84c 1b04 	str.w	r1, [ip], #4
 800e92e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e932:	dcec      	bgt.n	800e90e <__multadd+0x12>
 800e934:	b30e      	cbz	r6, 800e97a <__multadd+0x7e>
 800e936:	68a3      	ldr	r3, [r4, #8]
 800e938:	42ab      	cmp	r3, r5
 800e93a:	dc19      	bgt.n	800e970 <__multadd+0x74>
 800e93c:	6861      	ldr	r1, [r4, #4]
 800e93e:	4638      	mov	r0, r7
 800e940:	3101      	adds	r1, #1
 800e942:	f7ff ff79 	bl	800e838 <_Balloc>
 800e946:	4680      	mov	r8, r0
 800e948:	b928      	cbnz	r0, 800e956 <__multadd+0x5a>
 800e94a:	4602      	mov	r2, r0
 800e94c:	4b0c      	ldr	r3, [pc, #48]	@ (800e980 <__multadd+0x84>)
 800e94e:	480d      	ldr	r0, [pc, #52]	@ (800e984 <__multadd+0x88>)
 800e950:	21ba      	movs	r1, #186	@ 0xba
 800e952:	f7ff f807 	bl	800d964 <__assert_func>
 800e956:	6922      	ldr	r2, [r4, #16]
 800e958:	3202      	adds	r2, #2
 800e95a:	f104 010c 	add.w	r1, r4, #12
 800e95e:	0092      	lsls	r2, r2, #2
 800e960:	300c      	adds	r0, #12
 800e962:	f7fe fff0 	bl	800d946 <memcpy>
 800e966:	4621      	mov	r1, r4
 800e968:	4638      	mov	r0, r7
 800e96a:	f7ff ffa5 	bl	800e8b8 <_Bfree>
 800e96e:	4644      	mov	r4, r8
 800e970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e974:	3501      	adds	r5, #1
 800e976:	615e      	str	r6, [r3, #20]
 800e978:	6125      	str	r5, [r4, #16]
 800e97a:	4620      	mov	r0, r4
 800e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e980:	0800f860 	.word	0x0800f860
 800e984:	0800f871 	.word	0x0800f871

0800e988 <__hi0bits>:
 800e988:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e98c:	4603      	mov	r3, r0
 800e98e:	bf36      	itet	cc
 800e990:	0403      	lslcc	r3, r0, #16
 800e992:	2000      	movcs	r0, #0
 800e994:	2010      	movcc	r0, #16
 800e996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e99a:	bf3c      	itt	cc
 800e99c:	021b      	lslcc	r3, r3, #8
 800e99e:	3008      	addcc	r0, #8
 800e9a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9a4:	bf3c      	itt	cc
 800e9a6:	011b      	lslcc	r3, r3, #4
 800e9a8:	3004      	addcc	r0, #4
 800e9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9ae:	bf3c      	itt	cc
 800e9b0:	009b      	lslcc	r3, r3, #2
 800e9b2:	3002      	addcc	r0, #2
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	db05      	blt.n	800e9c4 <__hi0bits+0x3c>
 800e9b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e9bc:	f100 0001 	add.w	r0, r0, #1
 800e9c0:	bf08      	it	eq
 800e9c2:	2020      	moveq	r0, #32
 800e9c4:	4770      	bx	lr

0800e9c6 <__lo0bits>:
 800e9c6:	6803      	ldr	r3, [r0, #0]
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	f013 0007 	ands.w	r0, r3, #7
 800e9ce:	d00b      	beq.n	800e9e8 <__lo0bits+0x22>
 800e9d0:	07d9      	lsls	r1, r3, #31
 800e9d2:	d421      	bmi.n	800ea18 <__lo0bits+0x52>
 800e9d4:	0798      	lsls	r0, r3, #30
 800e9d6:	bf49      	itett	mi
 800e9d8:	085b      	lsrmi	r3, r3, #1
 800e9da:	089b      	lsrpl	r3, r3, #2
 800e9dc:	2001      	movmi	r0, #1
 800e9de:	6013      	strmi	r3, [r2, #0]
 800e9e0:	bf5c      	itt	pl
 800e9e2:	6013      	strpl	r3, [r2, #0]
 800e9e4:	2002      	movpl	r0, #2
 800e9e6:	4770      	bx	lr
 800e9e8:	b299      	uxth	r1, r3
 800e9ea:	b909      	cbnz	r1, 800e9f0 <__lo0bits+0x2a>
 800e9ec:	0c1b      	lsrs	r3, r3, #16
 800e9ee:	2010      	movs	r0, #16
 800e9f0:	b2d9      	uxtb	r1, r3
 800e9f2:	b909      	cbnz	r1, 800e9f8 <__lo0bits+0x32>
 800e9f4:	3008      	adds	r0, #8
 800e9f6:	0a1b      	lsrs	r3, r3, #8
 800e9f8:	0719      	lsls	r1, r3, #28
 800e9fa:	bf04      	itt	eq
 800e9fc:	091b      	lsreq	r3, r3, #4
 800e9fe:	3004      	addeq	r0, #4
 800ea00:	0799      	lsls	r1, r3, #30
 800ea02:	bf04      	itt	eq
 800ea04:	089b      	lsreq	r3, r3, #2
 800ea06:	3002      	addeq	r0, #2
 800ea08:	07d9      	lsls	r1, r3, #31
 800ea0a:	d403      	bmi.n	800ea14 <__lo0bits+0x4e>
 800ea0c:	085b      	lsrs	r3, r3, #1
 800ea0e:	f100 0001 	add.w	r0, r0, #1
 800ea12:	d003      	beq.n	800ea1c <__lo0bits+0x56>
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	4770      	bx	lr
 800ea18:	2000      	movs	r0, #0
 800ea1a:	4770      	bx	lr
 800ea1c:	2020      	movs	r0, #32
 800ea1e:	4770      	bx	lr

0800ea20 <__i2b>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	460c      	mov	r4, r1
 800ea24:	2101      	movs	r1, #1
 800ea26:	f7ff ff07 	bl	800e838 <_Balloc>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	b928      	cbnz	r0, 800ea3a <__i2b+0x1a>
 800ea2e:	4b05      	ldr	r3, [pc, #20]	@ (800ea44 <__i2b+0x24>)
 800ea30:	4805      	ldr	r0, [pc, #20]	@ (800ea48 <__i2b+0x28>)
 800ea32:	f240 1145 	movw	r1, #325	@ 0x145
 800ea36:	f7fe ff95 	bl	800d964 <__assert_func>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	6144      	str	r4, [r0, #20]
 800ea3e:	6103      	str	r3, [r0, #16]
 800ea40:	bd10      	pop	{r4, pc}
 800ea42:	bf00      	nop
 800ea44:	0800f860 	.word	0x0800f860
 800ea48:	0800f871 	.word	0x0800f871

0800ea4c <__multiply>:
 800ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea50:	4614      	mov	r4, r2
 800ea52:	690a      	ldr	r2, [r1, #16]
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	bfa8      	it	ge
 800ea5a:	4623      	movge	r3, r4
 800ea5c:	460f      	mov	r7, r1
 800ea5e:	bfa4      	itt	ge
 800ea60:	460c      	movge	r4, r1
 800ea62:	461f      	movge	r7, r3
 800ea64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ea68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ea6c:	68a3      	ldr	r3, [r4, #8]
 800ea6e:	6861      	ldr	r1, [r4, #4]
 800ea70:	eb0a 0609 	add.w	r6, sl, r9
 800ea74:	42b3      	cmp	r3, r6
 800ea76:	b085      	sub	sp, #20
 800ea78:	bfb8      	it	lt
 800ea7a:	3101      	addlt	r1, #1
 800ea7c:	f7ff fedc 	bl	800e838 <_Balloc>
 800ea80:	b930      	cbnz	r0, 800ea90 <__multiply+0x44>
 800ea82:	4602      	mov	r2, r0
 800ea84:	4b44      	ldr	r3, [pc, #272]	@ (800eb98 <__multiply+0x14c>)
 800ea86:	4845      	ldr	r0, [pc, #276]	@ (800eb9c <__multiply+0x150>)
 800ea88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ea8c:	f7fe ff6a 	bl	800d964 <__assert_func>
 800ea90:	f100 0514 	add.w	r5, r0, #20
 800ea94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea98:	462b      	mov	r3, r5
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	4543      	cmp	r3, r8
 800ea9e:	d321      	bcc.n	800eae4 <__multiply+0x98>
 800eaa0:	f107 0114 	add.w	r1, r7, #20
 800eaa4:	f104 0214 	add.w	r2, r4, #20
 800eaa8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eaac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eab0:	9302      	str	r3, [sp, #8]
 800eab2:	1b13      	subs	r3, r2, r4
 800eab4:	3b15      	subs	r3, #21
 800eab6:	f023 0303 	bic.w	r3, r3, #3
 800eaba:	3304      	adds	r3, #4
 800eabc:	f104 0715 	add.w	r7, r4, #21
 800eac0:	42ba      	cmp	r2, r7
 800eac2:	bf38      	it	cc
 800eac4:	2304      	movcc	r3, #4
 800eac6:	9301      	str	r3, [sp, #4]
 800eac8:	9b02      	ldr	r3, [sp, #8]
 800eaca:	9103      	str	r1, [sp, #12]
 800eacc:	428b      	cmp	r3, r1
 800eace:	d80c      	bhi.n	800eaea <__multiply+0x9e>
 800ead0:	2e00      	cmp	r6, #0
 800ead2:	dd03      	ble.n	800eadc <__multiply+0x90>
 800ead4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d05b      	beq.n	800eb94 <__multiply+0x148>
 800eadc:	6106      	str	r6, [r0, #16]
 800eade:	b005      	add	sp, #20
 800eae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae4:	f843 2b04 	str.w	r2, [r3], #4
 800eae8:	e7d8      	b.n	800ea9c <__multiply+0x50>
 800eaea:	f8b1 a000 	ldrh.w	sl, [r1]
 800eaee:	f1ba 0f00 	cmp.w	sl, #0
 800eaf2:	d024      	beq.n	800eb3e <__multiply+0xf2>
 800eaf4:	f104 0e14 	add.w	lr, r4, #20
 800eaf8:	46a9      	mov	r9, r5
 800eafa:	f04f 0c00 	mov.w	ip, #0
 800eafe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb02:	f8d9 3000 	ldr.w	r3, [r9]
 800eb06:	fa1f fb87 	uxth.w	fp, r7
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eb14:	f8d9 7000 	ldr.w	r7, [r9]
 800eb18:	4463      	add	r3, ip
 800eb1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb1e:	fb0a c70b 	mla	r7, sl, fp, ip
 800eb22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb2c:	4572      	cmp	r2, lr
 800eb2e:	f849 3b04 	str.w	r3, [r9], #4
 800eb32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb36:	d8e2      	bhi.n	800eafe <__multiply+0xb2>
 800eb38:	9b01      	ldr	r3, [sp, #4]
 800eb3a:	f845 c003 	str.w	ip, [r5, r3]
 800eb3e:	9b03      	ldr	r3, [sp, #12]
 800eb40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eb44:	3104      	adds	r1, #4
 800eb46:	f1b9 0f00 	cmp.w	r9, #0
 800eb4a:	d021      	beq.n	800eb90 <__multiply+0x144>
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	f104 0c14 	add.w	ip, r4, #20
 800eb52:	46ae      	mov	lr, r5
 800eb54:	f04f 0a00 	mov.w	sl, #0
 800eb58:	f8bc b000 	ldrh.w	fp, [ip]
 800eb5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eb60:	fb09 770b 	mla	r7, r9, fp, r7
 800eb64:	4457      	add	r7, sl
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb6c:	f84e 3b04 	str.w	r3, [lr], #4
 800eb70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb78:	f8be 3000 	ldrh.w	r3, [lr]
 800eb7c:	fb09 330a 	mla	r3, r9, sl, r3
 800eb80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800eb84:	4562      	cmp	r2, ip
 800eb86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb8a:	d8e5      	bhi.n	800eb58 <__multiply+0x10c>
 800eb8c:	9f01      	ldr	r7, [sp, #4]
 800eb8e:	51eb      	str	r3, [r5, r7]
 800eb90:	3504      	adds	r5, #4
 800eb92:	e799      	b.n	800eac8 <__multiply+0x7c>
 800eb94:	3e01      	subs	r6, #1
 800eb96:	e79b      	b.n	800ead0 <__multiply+0x84>
 800eb98:	0800f860 	.word	0x0800f860
 800eb9c:	0800f871 	.word	0x0800f871

0800eba0 <__pow5mult>:
 800eba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eba4:	4615      	mov	r5, r2
 800eba6:	f012 0203 	ands.w	r2, r2, #3
 800ebaa:	4607      	mov	r7, r0
 800ebac:	460e      	mov	r6, r1
 800ebae:	d007      	beq.n	800ebc0 <__pow5mult+0x20>
 800ebb0:	4c25      	ldr	r4, [pc, #148]	@ (800ec48 <__pow5mult+0xa8>)
 800ebb2:	3a01      	subs	r2, #1
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebba:	f7ff fe9f 	bl	800e8fc <__multadd>
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	10ad      	asrs	r5, r5, #2
 800ebc2:	d03d      	beq.n	800ec40 <__pow5mult+0xa0>
 800ebc4:	69fc      	ldr	r4, [r7, #28]
 800ebc6:	b97c      	cbnz	r4, 800ebe8 <__pow5mult+0x48>
 800ebc8:	2010      	movs	r0, #16
 800ebca:	f7ff fd7f 	bl	800e6cc <malloc>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	61f8      	str	r0, [r7, #28]
 800ebd2:	b928      	cbnz	r0, 800ebe0 <__pow5mult+0x40>
 800ebd4:	4b1d      	ldr	r3, [pc, #116]	@ (800ec4c <__pow5mult+0xac>)
 800ebd6:	481e      	ldr	r0, [pc, #120]	@ (800ec50 <__pow5mult+0xb0>)
 800ebd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ebdc:	f7fe fec2 	bl	800d964 <__assert_func>
 800ebe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebe4:	6004      	str	r4, [r0, #0]
 800ebe6:	60c4      	str	r4, [r0, #12]
 800ebe8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ebec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebf0:	b94c      	cbnz	r4, 800ec06 <__pow5mult+0x66>
 800ebf2:	f240 2171 	movw	r1, #625	@ 0x271
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	f7ff ff12 	bl	800ea20 <__i2b>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec02:	4604      	mov	r4, r0
 800ec04:	6003      	str	r3, [r0, #0]
 800ec06:	f04f 0900 	mov.w	r9, #0
 800ec0a:	07eb      	lsls	r3, r5, #31
 800ec0c:	d50a      	bpl.n	800ec24 <__pow5mult+0x84>
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4622      	mov	r2, r4
 800ec12:	4638      	mov	r0, r7
 800ec14:	f7ff ff1a 	bl	800ea4c <__multiply>
 800ec18:	4631      	mov	r1, r6
 800ec1a:	4680      	mov	r8, r0
 800ec1c:	4638      	mov	r0, r7
 800ec1e:	f7ff fe4b 	bl	800e8b8 <_Bfree>
 800ec22:	4646      	mov	r6, r8
 800ec24:	106d      	asrs	r5, r5, #1
 800ec26:	d00b      	beq.n	800ec40 <__pow5mult+0xa0>
 800ec28:	6820      	ldr	r0, [r4, #0]
 800ec2a:	b938      	cbnz	r0, 800ec3c <__pow5mult+0x9c>
 800ec2c:	4622      	mov	r2, r4
 800ec2e:	4621      	mov	r1, r4
 800ec30:	4638      	mov	r0, r7
 800ec32:	f7ff ff0b 	bl	800ea4c <__multiply>
 800ec36:	6020      	str	r0, [r4, #0]
 800ec38:	f8c0 9000 	str.w	r9, [r0]
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	e7e4      	b.n	800ec0a <__pow5mult+0x6a>
 800ec40:	4630      	mov	r0, r6
 800ec42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec46:	bf00      	nop
 800ec48:	0800f8cc 	.word	0x0800f8cc
 800ec4c:	0800f71c 	.word	0x0800f71c
 800ec50:	0800f871 	.word	0x0800f871

0800ec54 <__lshift>:
 800ec54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec58:	460c      	mov	r4, r1
 800ec5a:	6849      	ldr	r1, [r1, #4]
 800ec5c:	6923      	ldr	r3, [r4, #16]
 800ec5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec62:	68a3      	ldr	r3, [r4, #8]
 800ec64:	4607      	mov	r7, r0
 800ec66:	4691      	mov	r9, r2
 800ec68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec6c:	f108 0601 	add.w	r6, r8, #1
 800ec70:	42b3      	cmp	r3, r6
 800ec72:	db0b      	blt.n	800ec8c <__lshift+0x38>
 800ec74:	4638      	mov	r0, r7
 800ec76:	f7ff fddf 	bl	800e838 <_Balloc>
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	b948      	cbnz	r0, 800ec92 <__lshift+0x3e>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	4b28      	ldr	r3, [pc, #160]	@ (800ed24 <__lshift+0xd0>)
 800ec82:	4829      	ldr	r0, [pc, #164]	@ (800ed28 <__lshift+0xd4>)
 800ec84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ec88:	f7fe fe6c 	bl	800d964 <__assert_func>
 800ec8c:	3101      	adds	r1, #1
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	e7ee      	b.n	800ec70 <__lshift+0x1c>
 800ec92:	2300      	movs	r3, #0
 800ec94:	f100 0114 	add.w	r1, r0, #20
 800ec98:	f100 0210 	add.w	r2, r0, #16
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	4553      	cmp	r3, sl
 800eca0:	db33      	blt.n	800ed0a <__lshift+0xb6>
 800eca2:	6920      	ldr	r0, [r4, #16]
 800eca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eca8:	f104 0314 	add.w	r3, r4, #20
 800ecac:	f019 091f 	ands.w	r9, r9, #31
 800ecb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ecb8:	d02b      	beq.n	800ed12 <__lshift+0xbe>
 800ecba:	f1c9 0e20 	rsb	lr, r9, #32
 800ecbe:	468a      	mov	sl, r1
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	6818      	ldr	r0, [r3, #0]
 800ecc4:	fa00 f009 	lsl.w	r0, r0, r9
 800ecc8:	4310      	orrs	r0, r2
 800ecca:	f84a 0b04 	str.w	r0, [sl], #4
 800ecce:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecd2:	459c      	cmp	ip, r3
 800ecd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecd8:	d8f3      	bhi.n	800ecc2 <__lshift+0x6e>
 800ecda:	ebac 0304 	sub.w	r3, ip, r4
 800ecde:	3b15      	subs	r3, #21
 800ece0:	f023 0303 	bic.w	r3, r3, #3
 800ece4:	3304      	adds	r3, #4
 800ece6:	f104 0015 	add.w	r0, r4, #21
 800ecea:	4584      	cmp	ip, r0
 800ecec:	bf38      	it	cc
 800ecee:	2304      	movcc	r3, #4
 800ecf0:	50ca      	str	r2, [r1, r3]
 800ecf2:	b10a      	cbz	r2, 800ecf8 <__lshift+0xa4>
 800ecf4:	f108 0602 	add.w	r6, r8, #2
 800ecf8:	3e01      	subs	r6, #1
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	612e      	str	r6, [r5, #16]
 800ecfe:	4621      	mov	r1, r4
 800ed00:	f7ff fdda 	bl	800e8b8 <_Bfree>
 800ed04:	4628      	mov	r0, r5
 800ed06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed0e:	3301      	adds	r3, #1
 800ed10:	e7c5      	b.n	800ec9e <__lshift+0x4a>
 800ed12:	3904      	subs	r1, #4
 800ed14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed1c:	459c      	cmp	ip, r3
 800ed1e:	d8f9      	bhi.n	800ed14 <__lshift+0xc0>
 800ed20:	e7ea      	b.n	800ecf8 <__lshift+0xa4>
 800ed22:	bf00      	nop
 800ed24:	0800f860 	.word	0x0800f860
 800ed28:	0800f871 	.word	0x0800f871

0800ed2c <__mcmp>:
 800ed2c:	690a      	ldr	r2, [r1, #16]
 800ed2e:	4603      	mov	r3, r0
 800ed30:	6900      	ldr	r0, [r0, #16]
 800ed32:	1a80      	subs	r0, r0, r2
 800ed34:	b530      	push	{r4, r5, lr}
 800ed36:	d10e      	bne.n	800ed56 <__mcmp+0x2a>
 800ed38:	3314      	adds	r3, #20
 800ed3a:	3114      	adds	r1, #20
 800ed3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed4c:	4295      	cmp	r5, r2
 800ed4e:	d003      	beq.n	800ed58 <__mcmp+0x2c>
 800ed50:	d205      	bcs.n	800ed5e <__mcmp+0x32>
 800ed52:	f04f 30ff 	mov.w	r0, #4294967295
 800ed56:	bd30      	pop	{r4, r5, pc}
 800ed58:	42a3      	cmp	r3, r4
 800ed5a:	d3f3      	bcc.n	800ed44 <__mcmp+0x18>
 800ed5c:	e7fb      	b.n	800ed56 <__mcmp+0x2a>
 800ed5e:	2001      	movs	r0, #1
 800ed60:	e7f9      	b.n	800ed56 <__mcmp+0x2a>
	...

0800ed64 <__mdiff>:
 800ed64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed68:	4689      	mov	r9, r1
 800ed6a:	4606      	mov	r6, r0
 800ed6c:	4611      	mov	r1, r2
 800ed6e:	4648      	mov	r0, r9
 800ed70:	4614      	mov	r4, r2
 800ed72:	f7ff ffdb 	bl	800ed2c <__mcmp>
 800ed76:	1e05      	subs	r5, r0, #0
 800ed78:	d112      	bne.n	800eda0 <__mdiff+0x3c>
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f7ff fd5b 	bl	800e838 <_Balloc>
 800ed82:	4602      	mov	r2, r0
 800ed84:	b928      	cbnz	r0, 800ed92 <__mdiff+0x2e>
 800ed86:	4b3f      	ldr	r3, [pc, #252]	@ (800ee84 <__mdiff+0x120>)
 800ed88:	f240 2137 	movw	r1, #567	@ 0x237
 800ed8c:	483e      	ldr	r0, [pc, #248]	@ (800ee88 <__mdiff+0x124>)
 800ed8e:	f7fe fde9 	bl	800d964 <__assert_func>
 800ed92:	2301      	movs	r3, #1
 800ed94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed98:	4610      	mov	r0, r2
 800ed9a:	b003      	add	sp, #12
 800ed9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda0:	bfbc      	itt	lt
 800eda2:	464b      	movlt	r3, r9
 800eda4:	46a1      	movlt	r9, r4
 800eda6:	4630      	mov	r0, r6
 800eda8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800edac:	bfba      	itte	lt
 800edae:	461c      	movlt	r4, r3
 800edb0:	2501      	movlt	r5, #1
 800edb2:	2500      	movge	r5, #0
 800edb4:	f7ff fd40 	bl	800e838 <_Balloc>
 800edb8:	4602      	mov	r2, r0
 800edba:	b918      	cbnz	r0, 800edc4 <__mdiff+0x60>
 800edbc:	4b31      	ldr	r3, [pc, #196]	@ (800ee84 <__mdiff+0x120>)
 800edbe:	f240 2145 	movw	r1, #581	@ 0x245
 800edc2:	e7e3      	b.n	800ed8c <__mdiff+0x28>
 800edc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800edc8:	6926      	ldr	r6, [r4, #16]
 800edca:	60c5      	str	r5, [r0, #12]
 800edcc:	f109 0310 	add.w	r3, r9, #16
 800edd0:	f109 0514 	add.w	r5, r9, #20
 800edd4:	f104 0e14 	add.w	lr, r4, #20
 800edd8:	f100 0b14 	add.w	fp, r0, #20
 800eddc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ede0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ede4:	9301      	str	r3, [sp, #4]
 800ede6:	46d9      	mov	r9, fp
 800ede8:	f04f 0c00 	mov.w	ip, #0
 800edec:	9b01      	ldr	r3, [sp, #4]
 800edee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800edf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800edf6:	9301      	str	r3, [sp, #4]
 800edf8:	fa1f f38a 	uxth.w	r3, sl
 800edfc:	4619      	mov	r1, r3
 800edfe:	b283      	uxth	r3, r0
 800ee00:	1acb      	subs	r3, r1, r3
 800ee02:	0c00      	lsrs	r0, r0, #16
 800ee04:	4463      	add	r3, ip
 800ee06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ee14:	4576      	cmp	r6, lr
 800ee16:	f849 3b04 	str.w	r3, [r9], #4
 800ee1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee1e:	d8e5      	bhi.n	800edec <__mdiff+0x88>
 800ee20:	1b33      	subs	r3, r6, r4
 800ee22:	3b15      	subs	r3, #21
 800ee24:	f023 0303 	bic.w	r3, r3, #3
 800ee28:	3415      	adds	r4, #21
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	42a6      	cmp	r6, r4
 800ee2e:	bf38      	it	cc
 800ee30:	2304      	movcc	r3, #4
 800ee32:	441d      	add	r5, r3
 800ee34:	445b      	add	r3, fp
 800ee36:	461e      	mov	r6, r3
 800ee38:	462c      	mov	r4, r5
 800ee3a:	4544      	cmp	r4, r8
 800ee3c:	d30e      	bcc.n	800ee5c <__mdiff+0xf8>
 800ee3e:	f108 0103 	add.w	r1, r8, #3
 800ee42:	1b49      	subs	r1, r1, r5
 800ee44:	f021 0103 	bic.w	r1, r1, #3
 800ee48:	3d03      	subs	r5, #3
 800ee4a:	45a8      	cmp	r8, r5
 800ee4c:	bf38      	it	cc
 800ee4e:	2100      	movcc	r1, #0
 800ee50:	440b      	add	r3, r1
 800ee52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee56:	b191      	cbz	r1, 800ee7e <__mdiff+0x11a>
 800ee58:	6117      	str	r7, [r2, #16]
 800ee5a:	e79d      	b.n	800ed98 <__mdiff+0x34>
 800ee5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ee60:	46e6      	mov	lr, ip
 800ee62:	0c08      	lsrs	r0, r1, #16
 800ee64:	fa1c fc81 	uxtah	ip, ip, r1
 800ee68:	4471      	add	r1, lr
 800ee6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ee6e:	b289      	uxth	r1, r1
 800ee70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ee74:	f846 1b04 	str.w	r1, [r6], #4
 800ee78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee7c:	e7dd      	b.n	800ee3a <__mdiff+0xd6>
 800ee7e:	3f01      	subs	r7, #1
 800ee80:	e7e7      	b.n	800ee52 <__mdiff+0xee>
 800ee82:	bf00      	nop
 800ee84:	0800f860 	.word	0x0800f860
 800ee88:	0800f871 	.word	0x0800f871

0800ee8c <__d2b>:
 800ee8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee90:	460f      	mov	r7, r1
 800ee92:	2101      	movs	r1, #1
 800ee94:	ec59 8b10 	vmov	r8, r9, d0
 800ee98:	4616      	mov	r6, r2
 800ee9a:	f7ff fccd 	bl	800e838 <_Balloc>
 800ee9e:	4604      	mov	r4, r0
 800eea0:	b930      	cbnz	r0, 800eeb0 <__d2b+0x24>
 800eea2:	4602      	mov	r2, r0
 800eea4:	4b23      	ldr	r3, [pc, #140]	@ (800ef34 <__d2b+0xa8>)
 800eea6:	4824      	ldr	r0, [pc, #144]	@ (800ef38 <__d2b+0xac>)
 800eea8:	f240 310f 	movw	r1, #783	@ 0x30f
 800eeac:	f7fe fd5a 	bl	800d964 <__assert_func>
 800eeb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eeb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eeb8:	b10d      	cbz	r5, 800eebe <__d2b+0x32>
 800eeba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eebe:	9301      	str	r3, [sp, #4]
 800eec0:	f1b8 0300 	subs.w	r3, r8, #0
 800eec4:	d023      	beq.n	800ef0e <__d2b+0x82>
 800eec6:	4668      	mov	r0, sp
 800eec8:	9300      	str	r3, [sp, #0]
 800eeca:	f7ff fd7c 	bl	800e9c6 <__lo0bits>
 800eece:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eed2:	b1d0      	cbz	r0, 800ef0a <__d2b+0x7e>
 800eed4:	f1c0 0320 	rsb	r3, r0, #32
 800eed8:	fa02 f303 	lsl.w	r3, r2, r3
 800eedc:	430b      	orrs	r3, r1
 800eede:	40c2      	lsrs	r2, r0
 800eee0:	6163      	str	r3, [r4, #20]
 800eee2:	9201      	str	r2, [sp, #4]
 800eee4:	9b01      	ldr	r3, [sp, #4]
 800eee6:	61a3      	str	r3, [r4, #24]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	bf0c      	ite	eq
 800eeec:	2201      	moveq	r2, #1
 800eeee:	2202      	movne	r2, #2
 800eef0:	6122      	str	r2, [r4, #16]
 800eef2:	b1a5      	cbz	r5, 800ef1e <__d2b+0x92>
 800eef4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eef8:	4405      	add	r5, r0
 800eefa:	603d      	str	r5, [r7, #0]
 800eefc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ef00:	6030      	str	r0, [r6, #0]
 800ef02:	4620      	mov	r0, r4
 800ef04:	b003      	add	sp, #12
 800ef06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef0a:	6161      	str	r1, [r4, #20]
 800ef0c:	e7ea      	b.n	800eee4 <__d2b+0x58>
 800ef0e:	a801      	add	r0, sp, #4
 800ef10:	f7ff fd59 	bl	800e9c6 <__lo0bits>
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	6163      	str	r3, [r4, #20]
 800ef18:	3020      	adds	r0, #32
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	e7e8      	b.n	800eef0 <__d2b+0x64>
 800ef1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ef22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ef26:	6038      	str	r0, [r7, #0]
 800ef28:	6918      	ldr	r0, [r3, #16]
 800ef2a:	f7ff fd2d 	bl	800e988 <__hi0bits>
 800ef2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef32:	e7e5      	b.n	800ef00 <__d2b+0x74>
 800ef34:	0800f860 	.word	0x0800f860
 800ef38:	0800f871 	.word	0x0800f871

0800ef3c <__sfputc_r>:
 800ef3c:	6893      	ldr	r3, [r2, #8]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	b410      	push	{r4}
 800ef44:	6093      	str	r3, [r2, #8]
 800ef46:	da08      	bge.n	800ef5a <__sfputc_r+0x1e>
 800ef48:	6994      	ldr	r4, [r2, #24]
 800ef4a:	42a3      	cmp	r3, r4
 800ef4c:	db01      	blt.n	800ef52 <__sfputc_r+0x16>
 800ef4e:	290a      	cmp	r1, #10
 800ef50:	d103      	bne.n	800ef5a <__sfputc_r+0x1e>
 800ef52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef56:	f7fe bbe2 	b.w	800d71e <__swbuf_r>
 800ef5a:	6813      	ldr	r3, [r2, #0]
 800ef5c:	1c58      	adds	r0, r3, #1
 800ef5e:	6010      	str	r0, [r2, #0]
 800ef60:	7019      	strb	r1, [r3, #0]
 800ef62:	4608      	mov	r0, r1
 800ef64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <__sfputs_r>:
 800ef6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6c:	4606      	mov	r6, r0
 800ef6e:	460f      	mov	r7, r1
 800ef70:	4614      	mov	r4, r2
 800ef72:	18d5      	adds	r5, r2, r3
 800ef74:	42ac      	cmp	r4, r5
 800ef76:	d101      	bne.n	800ef7c <__sfputs_r+0x12>
 800ef78:	2000      	movs	r0, #0
 800ef7a:	e007      	b.n	800ef8c <__sfputs_r+0x22>
 800ef7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef80:	463a      	mov	r2, r7
 800ef82:	4630      	mov	r0, r6
 800ef84:	f7ff ffda 	bl	800ef3c <__sfputc_r>
 800ef88:	1c43      	adds	r3, r0, #1
 800ef8a:	d1f3      	bne.n	800ef74 <__sfputs_r+0xa>
 800ef8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef90 <_vfiprintf_r>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	460d      	mov	r5, r1
 800ef96:	b09d      	sub	sp, #116	@ 0x74
 800ef98:	4614      	mov	r4, r2
 800ef9a:	4698      	mov	r8, r3
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	b118      	cbz	r0, 800efa8 <_vfiprintf_r+0x18>
 800efa0:	6a03      	ldr	r3, [r0, #32]
 800efa2:	b90b      	cbnz	r3, 800efa8 <_vfiprintf_r+0x18>
 800efa4:	f7fe fad2 	bl	800d54c <__sinit>
 800efa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efaa:	07d9      	lsls	r1, r3, #31
 800efac:	d405      	bmi.n	800efba <_vfiprintf_r+0x2a>
 800efae:	89ab      	ldrh	r3, [r5, #12]
 800efb0:	059a      	lsls	r2, r3, #22
 800efb2:	d402      	bmi.n	800efba <_vfiprintf_r+0x2a>
 800efb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efb6:	f7fe fcc4 	bl	800d942 <__retarget_lock_acquire_recursive>
 800efba:	89ab      	ldrh	r3, [r5, #12]
 800efbc:	071b      	lsls	r3, r3, #28
 800efbe:	d501      	bpl.n	800efc4 <_vfiprintf_r+0x34>
 800efc0:	692b      	ldr	r3, [r5, #16]
 800efc2:	b99b      	cbnz	r3, 800efec <_vfiprintf_r+0x5c>
 800efc4:	4629      	mov	r1, r5
 800efc6:	4630      	mov	r0, r6
 800efc8:	f7fe fbe8 	bl	800d79c <__swsetup_r>
 800efcc:	b170      	cbz	r0, 800efec <_vfiprintf_r+0x5c>
 800efce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efd0:	07dc      	lsls	r4, r3, #31
 800efd2:	d504      	bpl.n	800efde <_vfiprintf_r+0x4e>
 800efd4:	f04f 30ff 	mov.w	r0, #4294967295
 800efd8:	b01d      	add	sp, #116	@ 0x74
 800efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efde:	89ab      	ldrh	r3, [r5, #12]
 800efe0:	0598      	lsls	r0, r3, #22
 800efe2:	d4f7      	bmi.n	800efd4 <_vfiprintf_r+0x44>
 800efe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efe6:	f7fe fcad 	bl	800d944 <__retarget_lock_release_recursive>
 800efea:	e7f3      	b.n	800efd4 <_vfiprintf_r+0x44>
 800efec:	2300      	movs	r3, #0
 800efee:	9309      	str	r3, [sp, #36]	@ 0x24
 800eff0:	2320      	movs	r3, #32
 800eff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eff6:	f8cd 800c 	str.w	r8, [sp, #12]
 800effa:	2330      	movs	r3, #48	@ 0x30
 800effc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f1ac <_vfiprintf_r+0x21c>
 800f000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f004:	f04f 0901 	mov.w	r9, #1
 800f008:	4623      	mov	r3, r4
 800f00a:	469a      	mov	sl, r3
 800f00c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f010:	b10a      	cbz	r2, 800f016 <_vfiprintf_r+0x86>
 800f012:	2a25      	cmp	r2, #37	@ 0x25
 800f014:	d1f9      	bne.n	800f00a <_vfiprintf_r+0x7a>
 800f016:	ebba 0b04 	subs.w	fp, sl, r4
 800f01a:	d00b      	beq.n	800f034 <_vfiprintf_r+0xa4>
 800f01c:	465b      	mov	r3, fp
 800f01e:	4622      	mov	r2, r4
 800f020:	4629      	mov	r1, r5
 800f022:	4630      	mov	r0, r6
 800f024:	f7ff ffa1 	bl	800ef6a <__sfputs_r>
 800f028:	3001      	adds	r0, #1
 800f02a:	f000 80a7 	beq.w	800f17c <_vfiprintf_r+0x1ec>
 800f02e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f030:	445a      	add	r2, fp
 800f032:	9209      	str	r2, [sp, #36]	@ 0x24
 800f034:	f89a 3000 	ldrb.w	r3, [sl]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f000 809f 	beq.w	800f17c <_vfiprintf_r+0x1ec>
 800f03e:	2300      	movs	r3, #0
 800f040:	f04f 32ff 	mov.w	r2, #4294967295
 800f044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f048:	f10a 0a01 	add.w	sl, sl, #1
 800f04c:	9304      	str	r3, [sp, #16]
 800f04e:	9307      	str	r3, [sp, #28]
 800f050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f054:	931a      	str	r3, [sp, #104]	@ 0x68
 800f056:	4654      	mov	r4, sl
 800f058:	2205      	movs	r2, #5
 800f05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f05e:	4853      	ldr	r0, [pc, #332]	@ (800f1ac <_vfiprintf_r+0x21c>)
 800f060:	f7f1 f8b6 	bl	80001d0 <memchr>
 800f064:	9a04      	ldr	r2, [sp, #16]
 800f066:	b9d8      	cbnz	r0, 800f0a0 <_vfiprintf_r+0x110>
 800f068:	06d1      	lsls	r1, r2, #27
 800f06a:	bf44      	itt	mi
 800f06c:	2320      	movmi	r3, #32
 800f06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f072:	0713      	lsls	r3, r2, #28
 800f074:	bf44      	itt	mi
 800f076:	232b      	movmi	r3, #43	@ 0x2b
 800f078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f07c:	f89a 3000 	ldrb.w	r3, [sl]
 800f080:	2b2a      	cmp	r3, #42	@ 0x2a
 800f082:	d015      	beq.n	800f0b0 <_vfiprintf_r+0x120>
 800f084:	9a07      	ldr	r2, [sp, #28]
 800f086:	4654      	mov	r4, sl
 800f088:	2000      	movs	r0, #0
 800f08a:	f04f 0c0a 	mov.w	ip, #10
 800f08e:	4621      	mov	r1, r4
 800f090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f094:	3b30      	subs	r3, #48	@ 0x30
 800f096:	2b09      	cmp	r3, #9
 800f098:	d94b      	bls.n	800f132 <_vfiprintf_r+0x1a2>
 800f09a:	b1b0      	cbz	r0, 800f0ca <_vfiprintf_r+0x13a>
 800f09c:	9207      	str	r2, [sp, #28]
 800f09e:	e014      	b.n	800f0ca <_vfiprintf_r+0x13a>
 800f0a0:	eba0 0308 	sub.w	r3, r0, r8
 800f0a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	9304      	str	r3, [sp, #16]
 800f0ac:	46a2      	mov	sl, r4
 800f0ae:	e7d2      	b.n	800f056 <_vfiprintf_r+0xc6>
 800f0b0:	9b03      	ldr	r3, [sp, #12]
 800f0b2:	1d19      	adds	r1, r3, #4
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	9103      	str	r1, [sp, #12]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bfbb      	ittet	lt
 800f0bc:	425b      	neglt	r3, r3
 800f0be:	f042 0202 	orrlt.w	r2, r2, #2
 800f0c2:	9307      	strge	r3, [sp, #28]
 800f0c4:	9307      	strlt	r3, [sp, #28]
 800f0c6:	bfb8      	it	lt
 800f0c8:	9204      	strlt	r2, [sp, #16]
 800f0ca:	7823      	ldrb	r3, [r4, #0]
 800f0cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0ce:	d10a      	bne.n	800f0e6 <_vfiprintf_r+0x156>
 800f0d0:	7863      	ldrb	r3, [r4, #1]
 800f0d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0d4:	d132      	bne.n	800f13c <_vfiprintf_r+0x1ac>
 800f0d6:	9b03      	ldr	r3, [sp, #12]
 800f0d8:	1d1a      	adds	r2, r3, #4
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	9203      	str	r2, [sp, #12]
 800f0de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0e2:	3402      	adds	r4, #2
 800f0e4:	9305      	str	r3, [sp, #20]
 800f0e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f1bc <_vfiprintf_r+0x22c>
 800f0ea:	7821      	ldrb	r1, [r4, #0]
 800f0ec:	2203      	movs	r2, #3
 800f0ee:	4650      	mov	r0, sl
 800f0f0:	f7f1 f86e 	bl	80001d0 <memchr>
 800f0f4:	b138      	cbz	r0, 800f106 <_vfiprintf_r+0x176>
 800f0f6:	9b04      	ldr	r3, [sp, #16]
 800f0f8:	eba0 000a 	sub.w	r0, r0, sl
 800f0fc:	2240      	movs	r2, #64	@ 0x40
 800f0fe:	4082      	lsls	r2, r0
 800f100:	4313      	orrs	r3, r2
 800f102:	3401      	adds	r4, #1
 800f104:	9304      	str	r3, [sp, #16]
 800f106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f10a:	4829      	ldr	r0, [pc, #164]	@ (800f1b0 <_vfiprintf_r+0x220>)
 800f10c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f110:	2206      	movs	r2, #6
 800f112:	f7f1 f85d 	bl	80001d0 <memchr>
 800f116:	2800      	cmp	r0, #0
 800f118:	d03f      	beq.n	800f19a <_vfiprintf_r+0x20a>
 800f11a:	4b26      	ldr	r3, [pc, #152]	@ (800f1b4 <_vfiprintf_r+0x224>)
 800f11c:	bb1b      	cbnz	r3, 800f166 <_vfiprintf_r+0x1d6>
 800f11e:	9b03      	ldr	r3, [sp, #12]
 800f120:	3307      	adds	r3, #7
 800f122:	f023 0307 	bic.w	r3, r3, #7
 800f126:	3308      	adds	r3, #8
 800f128:	9303      	str	r3, [sp, #12]
 800f12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f12c:	443b      	add	r3, r7
 800f12e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f130:	e76a      	b.n	800f008 <_vfiprintf_r+0x78>
 800f132:	fb0c 3202 	mla	r2, ip, r2, r3
 800f136:	460c      	mov	r4, r1
 800f138:	2001      	movs	r0, #1
 800f13a:	e7a8      	b.n	800f08e <_vfiprintf_r+0xfe>
 800f13c:	2300      	movs	r3, #0
 800f13e:	3401      	adds	r4, #1
 800f140:	9305      	str	r3, [sp, #20]
 800f142:	4619      	mov	r1, r3
 800f144:	f04f 0c0a 	mov.w	ip, #10
 800f148:	4620      	mov	r0, r4
 800f14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f14e:	3a30      	subs	r2, #48	@ 0x30
 800f150:	2a09      	cmp	r2, #9
 800f152:	d903      	bls.n	800f15c <_vfiprintf_r+0x1cc>
 800f154:	2b00      	cmp	r3, #0
 800f156:	d0c6      	beq.n	800f0e6 <_vfiprintf_r+0x156>
 800f158:	9105      	str	r1, [sp, #20]
 800f15a:	e7c4      	b.n	800f0e6 <_vfiprintf_r+0x156>
 800f15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f160:	4604      	mov	r4, r0
 800f162:	2301      	movs	r3, #1
 800f164:	e7f0      	b.n	800f148 <_vfiprintf_r+0x1b8>
 800f166:	ab03      	add	r3, sp, #12
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	462a      	mov	r2, r5
 800f16c:	4b12      	ldr	r3, [pc, #72]	@ (800f1b8 <_vfiprintf_r+0x228>)
 800f16e:	a904      	add	r1, sp, #16
 800f170:	4630      	mov	r0, r6
 800f172:	f7fd fda7 	bl	800ccc4 <_printf_float>
 800f176:	4607      	mov	r7, r0
 800f178:	1c78      	adds	r0, r7, #1
 800f17a:	d1d6      	bne.n	800f12a <_vfiprintf_r+0x19a>
 800f17c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f17e:	07d9      	lsls	r1, r3, #31
 800f180:	d405      	bmi.n	800f18e <_vfiprintf_r+0x1fe>
 800f182:	89ab      	ldrh	r3, [r5, #12]
 800f184:	059a      	lsls	r2, r3, #22
 800f186:	d402      	bmi.n	800f18e <_vfiprintf_r+0x1fe>
 800f188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f18a:	f7fe fbdb 	bl	800d944 <__retarget_lock_release_recursive>
 800f18e:	89ab      	ldrh	r3, [r5, #12]
 800f190:	065b      	lsls	r3, r3, #25
 800f192:	f53f af1f 	bmi.w	800efd4 <_vfiprintf_r+0x44>
 800f196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f198:	e71e      	b.n	800efd8 <_vfiprintf_r+0x48>
 800f19a:	ab03      	add	r3, sp, #12
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	462a      	mov	r2, r5
 800f1a0:	4b05      	ldr	r3, [pc, #20]	@ (800f1b8 <_vfiprintf_r+0x228>)
 800f1a2:	a904      	add	r1, sp, #16
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	f7fe f825 	bl	800d1f4 <_printf_i>
 800f1aa:	e7e4      	b.n	800f176 <_vfiprintf_r+0x1e6>
 800f1ac:	0800f9c8 	.word	0x0800f9c8
 800f1b0:	0800f9d2 	.word	0x0800f9d2
 800f1b4:	0800ccc5 	.word	0x0800ccc5
 800f1b8:	0800ef6b 	.word	0x0800ef6b
 800f1bc:	0800f9ce 	.word	0x0800f9ce

0800f1c0 <__sflush_r>:
 800f1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c8:	0716      	lsls	r6, r2, #28
 800f1ca:	4605      	mov	r5, r0
 800f1cc:	460c      	mov	r4, r1
 800f1ce:	d454      	bmi.n	800f27a <__sflush_r+0xba>
 800f1d0:	684b      	ldr	r3, [r1, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	dc02      	bgt.n	800f1dc <__sflush_r+0x1c>
 800f1d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	dd48      	ble.n	800f26e <__sflush_r+0xae>
 800f1dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1de:	2e00      	cmp	r6, #0
 800f1e0:	d045      	beq.n	800f26e <__sflush_r+0xae>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f1e8:	682f      	ldr	r7, [r5, #0]
 800f1ea:	6a21      	ldr	r1, [r4, #32]
 800f1ec:	602b      	str	r3, [r5, #0]
 800f1ee:	d030      	beq.n	800f252 <__sflush_r+0x92>
 800f1f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	0759      	lsls	r1, r3, #29
 800f1f6:	d505      	bpl.n	800f204 <__sflush_r+0x44>
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	1ad2      	subs	r2, r2, r3
 800f1fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1fe:	b10b      	cbz	r3, 800f204 <__sflush_r+0x44>
 800f200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f202:	1ad2      	subs	r2, r2, r3
 800f204:	2300      	movs	r3, #0
 800f206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f208:	6a21      	ldr	r1, [r4, #32]
 800f20a:	4628      	mov	r0, r5
 800f20c:	47b0      	blx	r6
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	d106      	bne.n	800f222 <__sflush_r+0x62>
 800f214:	6829      	ldr	r1, [r5, #0]
 800f216:	291d      	cmp	r1, #29
 800f218:	d82b      	bhi.n	800f272 <__sflush_r+0xb2>
 800f21a:	4a2a      	ldr	r2, [pc, #168]	@ (800f2c4 <__sflush_r+0x104>)
 800f21c:	410a      	asrs	r2, r1
 800f21e:	07d6      	lsls	r6, r2, #31
 800f220:	d427      	bmi.n	800f272 <__sflush_r+0xb2>
 800f222:	2200      	movs	r2, #0
 800f224:	6062      	str	r2, [r4, #4]
 800f226:	04d9      	lsls	r1, r3, #19
 800f228:	6922      	ldr	r2, [r4, #16]
 800f22a:	6022      	str	r2, [r4, #0]
 800f22c:	d504      	bpl.n	800f238 <__sflush_r+0x78>
 800f22e:	1c42      	adds	r2, r0, #1
 800f230:	d101      	bne.n	800f236 <__sflush_r+0x76>
 800f232:	682b      	ldr	r3, [r5, #0]
 800f234:	b903      	cbnz	r3, 800f238 <__sflush_r+0x78>
 800f236:	6560      	str	r0, [r4, #84]	@ 0x54
 800f238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f23a:	602f      	str	r7, [r5, #0]
 800f23c:	b1b9      	cbz	r1, 800f26e <__sflush_r+0xae>
 800f23e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f242:	4299      	cmp	r1, r3
 800f244:	d002      	beq.n	800f24c <__sflush_r+0x8c>
 800f246:	4628      	mov	r0, r5
 800f248:	f7ff f9f6 	bl	800e638 <_free_r>
 800f24c:	2300      	movs	r3, #0
 800f24e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f250:	e00d      	b.n	800f26e <__sflush_r+0xae>
 800f252:	2301      	movs	r3, #1
 800f254:	4628      	mov	r0, r5
 800f256:	47b0      	blx	r6
 800f258:	4602      	mov	r2, r0
 800f25a:	1c50      	adds	r0, r2, #1
 800f25c:	d1c9      	bne.n	800f1f2 <__sflush_r+0x32>
 800f25e:	682b      	ldr	r3, [r5, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d0c6      	beq.n	800f1f2 <__sflush_r+0x32>
 800f264:	2b1d      	cmp	r3, #29
 800f266:	d001      	beq.n	800f26c <__sflush_r+0xac>
 800f268:	2b16      	cmp	r3, #22
 800f26a:	d11e      	bne.n	800f2aa <__sflush_r+0xea>
 800f26c:	602f      	str	r7, [r5, #0]
 800f26e:	2000      	movs	r0, #0
 800f270:	e022      	b.n	800f2b8 <__sflush_r+0xf8>
 800f272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f276:	b21b      	sxth	r3, r3
 800f278:	e01b      	b.n	800f2b2 <__sflush_r+0xf2>
 800f27a:	690f      	ldr	r7, [r1, #16]
 800f27c:	2f00      	cmp	r7, #0
 800f27e:	d0f6      	beq.n	800f26e <__sflush_r+0xae>
 800f280:	0793      	lsls	r3, r2, #30
 800f282:	680e      	ldr	r6, [r1, #0]
 800f284:	bf08      	it	eq
 800f286:	694b      	ldreq	r3, [r1, #20]
 800f288:	600f      	str	r7, [r1, #0]
 800f28a:	bf18      	it	ne
 800f28c:	2300      	movne	r3, #0
 800f28e:	eba6 0807 	sub.w	r8, r6, r7
 800f292:	608b      	str	r3, [r1, #8]
 800f294:	f1b8 0f00 	cmp.w	r8, #0
 800f298:	dde9      	ble.n	800f26e <__sflush_r+0xae>
 800f29a:	6a21      	ldr	r1, [r4, #32]
 800f29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f29e:	4643      	mov	r3, r8
 800f2a0:	463a      	mov	r2, r7
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b0      	blx	r6
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	dc08      	bgt.n	800f2bc <__sflush_r+0xfc>
 800f2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2b2:	81a3      	strh	r3, [r4, #12]
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2bc:	4407      	add	r7, r0
 800f2be:	eba8 0800 	sub.w	r8, r8, r0
 800f2c2:	e7e7      	b.n	800f294 <__sflush_r+0xd4>
 800f2c4:	dfbffffe 	.word	0xdfbffffe

0800f2c8 <_fflush_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	690b      	ldr	r3, [r1, #16]
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	460c      	mov	r4, r1
 800f2d0:	b913      	cbnz	r3, 800f2d8 <_fflush_r+0x10>
 800f2d2:	2500      	movs	r5, #0
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	b118      	cbz	r0, 800f2e2 <_fflush_r+0x1a>
 800f2da:	6a03      	ldr	r3, [r0, #32]
 800f2dc:	b90b      	cbnz	r3, 800f2e2 <_fflush_r+0x1a>
 800f2de:	f7fe f935 	bl	800d54c <__sinit>
 800f2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0f3      	beq.n	800f2d2 <_fflush_r+0xa>
 800f2ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f2ec:	07d0      	lsls	r0, r2, #31
 800f2ee:	d404      	bmi.n	800f2fa <_fflush_r+0x32>
 800f2f0:	0599      	lsls	r1, r3, #22
 800f2f2:	d402      	bmi.n	800f2fa <_fflush_r+0x32>
 800f2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2f6:	f7fe fb24 	bl	800d942 <__retarget_lock_acquire_recursive>
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f7ff ff5f 	bl	800f1c0 <__sflush_r>
 800f302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f304:	07da      	lsls	r2, r3, #31
 800f306:	4605      	mov	r5, r0
 800f308:	d4e4      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	059b      	lsls	r3, r3, #22
 800f30e:	d4e1      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f312:	f7fe fb17 	bl	800d944 <__retarget_lock_release_recursive>
 800f316:	e7dd      	b.n	800f2d4 <_fflush_r+0xc>

0800f318 <fiprintf>:
 800f318:	b40e      	push	{r1, r2, r3}
 800f31a:	b503      	push	{r0, r1, lr}
 800f31c:	4601      	mov	r1, r0
 800f31e:	ab03      	add	r3, sp, #12
 800f320:	4805      	ldr	r0, [pc, #20]	@ (800f338 <fiprintf+0x20>)
 800f322:	f853 2b04 	ldr.w	r2, [r3], #4
 800f326:	6800      	ldr	r0, [r0, #0]
 800f328:	9301      	str	r3, [sp, #4]
 800f32a:	f7ff fe31 	bl	800ef90 <_vfiprintf_r>
 800f32e:	b002      	add	sp, #8
 800f330:	f85d eb04 	ldr.w	lr, [sp], #4
 800f334:	b003      	add	sp, #12
 800f336:	4770      	bx	lr
 800f338:	20000068 	.word	0x20000068

0800f33c <__swhatbuf_r>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	460c      	mov	r4, r1
 800f340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f344:	2900      	cmp	r1, #0
 800f346:	b096      	sub	sp, #88	@ 0x58
 800f348:	4615      	mov	r5, r2
 800f34a:	461e      	mov	r6, r3
 800f34c:	da0d      	bge.n	800f36a <__swhatbuf_r+0x2e>
 800f34e:	89a3      	ldrh	r3, [r4, #12]
 800f350:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f354:	f04f 0100 	mov.w	r1, #0
 800f358:	bf14      	ite	ne
 800f35a:	2340      	movne	r3, #64	@ 0x40
 800f35c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f360:	2000      	movs	r0, #0
 800f362:	6031      	str	r1, [r6, #0]
 800f364:	602b      	str	r3, [r5, #0]
 800f366:	b016      	add	sp, #88	@ 0x58
 800f368:	bd70      	pop	{r4, r5, r6, pc}
 800f36a:	466a      	mov	r2, sp
 800f36c:	f000 f848 	bl	800f400 <_fstat_r>
 800f370:	2800      	cmp	r0, #0
 800f372:	dbec      	blt.n	800f34e <__swhatbuf_r+0x12>
 800f374:	9901      	ldr	r1, [sp, #4]
 800f376:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f37a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f37e:	4259      	negs	r1, r3
 800f380:	4159      	adcs	r1, r3
 800f382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f386:	e7eb      	b.n	800f360 <__swhatbuf_r+0x24>

0800f388 <__smakebuf_r>:
 800f388:	898b      	ldrh	r3, [r1, #12]
 800f38a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f38c:	079d      	lsls	r5, r3, #30
 800f38e:	4606      	mov	r6, r0
 800f390:	460c      	mov	r4, r1
 800f392:	d507      	bpl.n	800f3a4 <__smakebuf_r+0x1c>
 800f394:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f398:	6023      	str	r3, [r4, #0]
 800f39a:	6123      	str	r3, [r4, #16]
 800f39c:	2301      	movs	r3, #1
 800f39e:	6163      	str	r3, [r4, #20]
 800f3a0:	b003      	add	sp, #12
 800f3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3a4:	ab01      	add	r3, sp, #4
 800f3a6:	466a      	mov	r2, sp
 800f3a8:	f7ff ffc8 	bl	800f33c <__swhatbuf_r>
 800f3ac:	9f00      	ldr	r7, [sp, #0]
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	4639      	mov	r1, r7
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f7ff f9b4 	bl	800e720 <_malloc_r>
 800f3b8:	b948      	cbnz	r0, 800f3ce <__smakebuf_r+0x46>
 800f3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3be:	059a      	lsls	r2, r3, #22
 800f3c0:	d4ee      	bmi.n	800f3a0 <__smakebuf_r+0x18>
 800f3c2:	f023 0303 	bic.w	r3, r3, #3
 800f3c6:	f043 0302 	orr.w	r3, r3, #2
 800f3ca:	81a3      	strh	r3, [r4, #12]
 800f3cc:	e7e2      	b.n	800f394 <__smakebuf_r+0xc>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	6020      	str	r0, [r4, #0]
 800f3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3d6:	81a3      	strh	r3, [r4, #12]
 800f3d8:	9b01      	ldr	r3, [sp, #4]
 800f3da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f3de:	b15b      	cbz	r3, 800f3f8 <__smakebuf_r+0x70>
 800f3e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f000 f81d 	bl	800f424 <_isatty_r>
 800f3ea:	b128      	cbz	r0, 800f3f8 <__smakebuf_r+0x70>
 800f3ec:	89a3      	ldrh	r3, [r4, #12]
 800f3ee:	f023 0303 	bic.w	r3, r3, #3
 800f3f2:	f043 0301 	orr.w	r3, r3, #1
 800f3f6:	81a3      	strh	r3, [r4, #12]
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	431d      	orrs	r5, r3
 800f3fc:	81a5      	strh	r5, [r4, #12]
 800f3fe:	e7cf      	b.n	800f3a0 <__smakebuf_r+0x18>

0800f400 <_fstat_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4d07      	ldr	r5, [pc, #28]	@ (800f420 <_fstat_r+0x20>)
 800f404:	2300      	movs	r3, #0
 800f406:	4604      	mov	r4, r0
 800f408:	4608      	mov	r0, r1
 800f40a:	4611      	mov	r1, r2
 800f40c:	602b      	str	r3, [r5, #0]
 800f40e:	f7f3 fa69 	bl	80028e4 <_fstat>
 800f412:	1c43      	adds	r3, r0, #1
 800f414:	d102      	bne.n	800f41c <_fstat_r+0x1c>
 800f416:	682b      	ldr	r3, [r5, #0]
 800f418:	b103      	cbz	r3, 800f41c <_fstat_r+0x1c>
 800f41a:	6023      	str	r3, [r4, #0]
 800f41c:	bd38      	pop	{r3, r4, r5, pc}
 800f41e:	bf00      	nop
 800f420:	20003134 	.word	0x20003134

0800f424 <_isatty_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4d06      	ldr	r5, [pc, #24]	@ (800f440 <_isatty_r+0x1c>)
 800f428:	2300      	movs	r3, #0
 800f42a:	4604      	mov	r4, r0
 800f42c:	4608      	mov	r0, r1
 800f42e:	602b      	str	r3, [r5, #0]
 800f430:	f7f3 fa68 	bl	8002904 <_isatty>
 800f434:	1c43      	adds	r3, r0, #1
 800f436:	d102      	bne.n	800f43e <_isatty_r+0x1a>
 800f438:	682b      	ldr	r3, [r5, #0]
 800f43a:	b103      	cbz	r3, 800f43e <_isatty_r+0x1a>
 800f43c:	6023      	str	r3, [r4, #0]
 800f43e:	bd38      	pop	{r3, r4, r5, pc}
 800f440:	20003134 	.word	0x20003134

0800f444 <_sbrk_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4d06      	ldr	r5, [pc, #24]	@ (800f460 <_sbrk_r+0x1c>)
 800f448:	2300      	movs	r3, #0
 800f44a:	4604      	mov	r4, r0
 800f44c:	4608      	mov	r0, r1
 800f44e:	602b      	str	r3, [r5, #0]
 800f450:	f7f3 fa70 	bl	8002934 <_sbrk>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <_sbrk_r+0x1a>
 800f458:	682b      	ldr	r3, [r5, #0]
 800f45a:	b103      	cbz	r3, 800f45e <_sbrk_r+0x1a>
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	20003134 	.word	0x20003134

0800f464 <abort>:
 800f464:	b508      	push	{r3, lr}
 800f466:	2006      	movs	r0, #6
 800f468:	f000 f85e 	bl	800f528 <raise>
 800f46c:	2001      	movs	r0, #1
 800f46e:	f7f3 f9e9 	bl	8002844 <_exit>

0800f472 <_calloc_r>:
 800f472:	b570      	push	{r4, r5, r6, lr}
 800f474:	fba1 5402 	umull	r5, r4, r1, r2
 800f478:	b93c      	cbnz	r4, 800f48a <_calloc_r+0x18>
 800f47a:	4629      	mov	r1, r5
 800f47c:	f7ff f950 	bl	800e720 <_malloc_r>
 800f480:	4606      	mov	r6, r0
 800f482:	b928      	cbnz	r0, 800f490 <_calloc_r+0x1e>
 800f484:	2600      	movs	r6, #0
 800f486:	4630      	mov	r0, r6
 800f488:	bd70      	pop	{r4, r5, r6, pc}
 800f48a:	220c      	movs	r2, #12
 800f48c:	6002      	str	r2, [r0, #0]
 800f48e:	e7f9      	b.n	800f484 <_calloc_r+0x12>
 800f490:	462a      	mov	r2, r5
 800f492:	4621      	mov	r1, r4
 800f494:	f7fe f9d8 	bl	800d848 <memset>
 800f498:	e7f5      	b.n	800f486 <_calloc_r+0x14>

0800f49a <__ascii_mbtowc>:
 800f49a:	b082      	sub	sp, #8
 800f49c:	b901      	cbnz	r1, 800f4a0 <__ascii_mbtowc+0x6>
 800f49e:	a901      	add	r1, sp, #4
 800f4a0:	b142      	cbz	r2, 800f4b4 <__ascii_mbtowc+0x1a>
 800f4a2:	b14b      	cbz	r3, 800f4b8 <__ascii_mbtowc+0x1e>
 800f4a4:	7813      	ldrb	r3, [r2, #0]
 800f4a6:	600b      	str	r3, [r1, #0]
 800f4a8:	7812      	ldrb	r2, [r2, #0]
 800f4aa:	1e10      	subs	r0, r2, #0
 800f4ac:	bf18      	it	ne
 800f4ae:	2001      	movne	r0, #1
 800f4b0:	b002      	add	sp, #8
 800f4b2:	4770      	bx	lr
 800f4b4:	4610      	mov	r0, r2
 800f4b6:	e7fb      	b.n	800f4b0 <__ascii_mbtowc+0x16>
 800f4b8:	f06f 0001 	mvn.w	r0, #1
 800f4bc:	e7f8      	b.n	800f4b0 <__ascii_mbtowc+0x16>

0800f4be <__ascii_wctomb>:
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	b141      	cbz	r1, 800f4d6 <__ascii_wctomb+0x18>
 800f4c4:	2aff      	cmp	r2, #255	@ 0xff
 800f4c6:	d904      	bls.n	800f4d2 <__ascii_wctomb+0x14>
 800f4c8:	228a      	movs	r2, #138	@ 0x8a
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d0:	4770      	bx	lr
 800f4d2:	700a      	strb	r2, [r1, #0]
 800f4d4:	2001      	movs	r0, #1
 800f4d6:	4770      	bx	lr

0800f4d8 <_raise_r>:
 800f4d8:	291f      	cmp	r1, #31
 800f4da:	b538      	push	{r3, r4, r5, lr}
 800f4dc:	4605      	mov	r5, r0
 800f4de:	460c      	mov	r4, r1
 800f4e0:	d904      	bls.n	800f4ec <_raise_r+0x14>
 800f4e2:	2316      	movs	r3, #22
 800f4e4:	6003      	str	r3, [r0, #0]
 800f4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ea:	bd38      	pop	{r3, r4, r5, pc}
 800f4ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4ee:	b112      	cbz	r2, 800f4f6 <_raise_r+0x1e>
 800f4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4f4:	b94b      	cbnz	r3, 800f50a <_raise_r+0x32>
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f000 f830 	bl	800f55c <_getpid_r>
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	4601      	mov	r1, r0
 800f500:	4628      	mov	r0, r5
 800f502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f506:	f000 b817 	b.w	800f538 <_kill_r>
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d00a      	beq.n	800f524 <_raise_r+0x4c>
 800f50e:	1c59      	adds	r1, r3, #1
 800f510:	d103      	bne.n	800f51a <_raise_r+0x42>
 800f512:	2316      	movs	r3, #22
 800f514:	6003      	str	r3, [r0, #0]
 800f516:	2001      	movs	r0, #1
 800f518:	e7e7      	b.n	800f4ea <_raise_r+0x12>
 800f51a:	2100      	movs	r1, #0
 800f51c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f520:	4620      	mov	r0, r4
 800f522:	4798      	blx	r3
 800f524:	2000      	movs	r0, #0
 800f526:	e7e0      	b.n	800f4ea <_raise_r+0x12>

0800f528 <raise>:
 800f528:	4b02      	ldr	r3, [pc, #8]	@ (800f534 <raise+0xc>)
 800f52a:	4601      	mov	r1, r0
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f7ff bfd3 	b.w	800f4d8 <_raise_r>
 800f532:	bf00      	nop
 800f534:	20000068 	.word	0x20000068

0800f538 <_kill_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d07      	ldr	r5, [pc, #28]	@ (800f558 <_kill_r+0x20>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	4611      	mov	r1, r2
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	f7f3 f96d 	bl	8002824 <_kill>
 800f54a:	1c43      	adds	r3, r0, #1
 800f54c:	d102      	bne.n	800f554 <_kill_r+0x1c>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	b103      	cbz	r3, 800f554 <_kill_r+0x1c>
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	bd38      	pop	{r3, r4, r5, pc}
 800f556:	bf00      	nop
 800f558:	20003134 	.word	0x20003134

0800f55c <_getpid_r>:
 800f55c:	f7f3 b95a 	b.w	8002814 <_getpid>

0800f560 <_init>:
 800f560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f562:	bf00      	nop
 800f564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f566:	bc08      	pop	{r3}
 800f568:	469e      	mov	lr, r3
 800f56a:	4770      	bx	lr

0800f56c <_fini>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	bf00      	nop
 800f570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f572:	bc08      	pop	{r3}
 800f574:	469e      	mov	lr, r3
 800f576:	4770      	bx	lr
