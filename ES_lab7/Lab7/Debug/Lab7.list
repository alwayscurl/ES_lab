
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800e78c  0800e78c  0000f78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eacc  0800eacc  000100c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eacc  0800eacc  0000facc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ead4  0800ead4  000100c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ead4  0800ead4  0000fad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ead8  0800ead8  0000fad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800eadc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c0  200000c0  0800eb9c  000100c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004380  0800eb9c  00010380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034e92  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070ed  00000000  00000000  00044f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d58  00000000  00000000  0004c070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022fc  00000000  00000000  0004edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a42  00000000  00000000  000510c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037e61  00000000  00000000  00082b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011937f  00000000  00000000  000ba967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001d3ce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb64  00000000  00000000  001d3da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001e0904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  001e0958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001e1662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e774 	.word	0x0800e774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	0800e774 	.word	0x0800e774

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b96a 	b.w	8000984 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	460c      	mov	r4, r1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d14e      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d4:	4694      	mov	ip, r2
 80006d6:	458c      	cmp	ip, r1
 80006d8:	4686      	mov	lr, r0
 80006da:	fab2 f282 	clz	r2, r2
 80006de:	d962      	bls.n	80007a6 <__udivmoddi4+0xde>
 80006e0:	b14a      	cbz	r2, 80006f6 <__udivmoddi4+0x2e>
 80006e2:	f1c2 0320 	rsb	r3, r2, #32
 80006e6:	4091      	lsls	r1, r2
 80006e8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f0:	4319      	orrs	r1, r3
 80006f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fa:	fa1f f68c 	uxth.w	r6, ip
 80006fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000702:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000706:	fb07 1114 	mls	r1, r7, r4, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb04 f106 	mul.w	r1, r4, r6
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f104 30ff 	add.w	r0, r4, #4294967295
 800071e:	f080 8112 	bcs.w	8000946 <__udivmoddi4+0x27e>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 810f 	bls.w	8000946 <__udivmoddi4+0x27e>
 8000728:	3c02      	subs	r4, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a59      	subs	r1, r3, r1
 800072e:	fa1f f38e 	uxth.w	r3, lr
 8000732:	fbb1 f0f7 	udiv	r0, r1, r7
 8000736:	fb07 1110 	mls	r1, r7, r0, r1
 800073a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073e:	fb00 f606 	mul.w	r6, r0, r6
 8000742:	429e      	cmp	r6, r3
 8000744:	d90a      	bls.n	800075c <__udivmoddi4+0x94>
 8000746:	eb1c 0303 	adds.w	r3, ip, r3
 800074a:	f100 31ff 	add.w	r1, r0, #4294967295
 800074e:	f080 80fc 	bcs.w	800094a <__udivmoddi4+0x282>
 8000752:	429e      	cmp	r6, r3
 8000754:	f240 80f9 	bls.w	800094a <__udivmoddi4+0x282>
 8000758:	4463      	add	r3, ip
 800075a:	3802      	subs	r0, #2
 800075c:	1b9b      	subs	r3, r3, r6
 800075e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000762:	2100      	movs	r1, #0
 8000764:	b11d      	cbz	r5, 800076e <__udivmoddi4+0xa6>
 8000766:	40d3      	lsrs	r3, r2
 8000768:	2200      	movs	r2, #0
 800076a:	e9c5 3200 	strd	r3, r2, [r5]
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d905      	bls.n	8000782 <__udivmoddi4+0xba>
 8000776:	b10d      	cbz	r5, 800077c <__udivmoddi4+0xb4>
 8000778:	e9c5 0100 	strd	r0, r1, [r5]
 800077c:	2100      	movs	r1, #0
 800077e:	4608      	mov	r0, r1
 8000780:	e7f5      	b.n	800076e <__udivmoddi4+0xa6>
 8000782:	fab3 f183 	clz	r1, r3
 8000786:	2900      	cmp	r1, #0
 8000788:	d146      	bne.n	8000818 <__udivmoddi4+0x150>
 800078a:	42a3      	cmp	r3, r4
 800078c:	d302      	bcc.n	8000794 <__udivmoddi4+0xcc>
 800078e:	4290      	cmp	r0, r2
 8000790:	f0c0 80f0 	bcc.w	8000974 <__udivmoddi4+0x2ac>
 8000794:	1a86      	subs	r6, r0, r2
 8000796:	eb64 0303 	sbc.w	r3, r4, r3
 800079a:	2001      	movs	r0, #1
 800079c:	2d00      	cmp	r5, #0
 800079e:	d0e6      	beq.n	800076e <__udivmoddi4+0xa6>
 80007a0:	e9c5 6300 	strd	r6, r3, [r5]
 80007a4:	e7e3      	b.n	800076e <__udivmoddi4+0xa6>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	f040 8090 	bne.w	80008cc <__udivmoddi4+0x204>
 80007ac:	eba1 040c 	sub.w	r4, r1, ip
 80007b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007b4:	fa1f f78c 	uxth.w	r7, ip
 80007b8:	2101      	movs	r1, #1
 80007ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80007be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007c2:	fb08 4416 	mls	r4, r8, r6, r4
 80007c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ca:	fb07 f006 	mul.w	r0, r7, r6
 80007ce:	4298      	cmp	r0, r3
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0x11c>
 80007d2:	eb1c 0303 	adds.w	r3, ip, r3
 80007d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x11a>
 80007dc:	4298      	cmp	r0, r3
 80007de:	f200 80cd 	bhi.w	800097c <__udivmoddi4+0x2b4>
 80007e2:	4626      	mov	r6, r4
 80007e4:	1a1c      	subs	r4, r3, r0
 80007e6:	fa1f f38e 	uxth.w	r3, lr
 80007ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ee:	fb08 4410 	mls	r4, r8, r0, r4
 80007f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007f6:	fb00 f707 	mul.w	r7, r0, r7
 80007fa:	429f      	cmp	r7, r3
 80007fc:	d908      	bls.n	8000810 <__udivmoddi4+0x148>
 80007fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000802:	f100 34ff 	add.w	r4, r0, #4294967295
 8000806:	d202      	bcs.n	800080e <__udivmoddi4+0x146>
 8000808:	429f      	cmp	r7, r3
 800080a:	f200 80b0 	bhi.w	800096e <__udivmoddi4+0x2a6>
 800080e:	4620      	mov	r0, r4
 8000810:	1bdb      	subs	r3, r3, r7
 8000812:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000816:	e7a5      	b.n	8000764 <__udivmoddi4+0x9c>
 8000818:	f1c1 0620 	rsb	r6, r1, #32
 800081c:	408b      	lsls	r3, r1
 800081e:	fa22 f706 	lsr.w	r7, r2, r6
 8000822:	431f      	orrs	r7, r3
 8000824:	fa20 fc06 	lsr.w	ip, r0, r6
 8000828:	fa04 f301 	lsl.w	r3, r4, r1
 800082c:	ea43 030c 	orr.w	r3, r3, ip
 8000830:	40f4      	lsrs	r4, r6
 8000832:	fa00 f801 	lsl.w	r8, r0, r1
 8000836:	0c38      	lsrs	r0, r7, #16
 8000838:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800083c:	fbb4 fef0 	udiv	lr, r4, r0
 8000840:	fa1f fc87 	uxth.w	ip, r7
 8000844:	fb00 441e 	mls	r4, r0, lr, r4
 8000848:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800084c:	fb0e f90c 	mul.w	r9, lr, ip
 8000850:	45a1      	cmp	r9, r4
 8000852:	fa02 f201 	lsl.w	r2, r2, r1
 8000856:	d90a      	bls.n	800086e <__udivmoddi4+0x1a6>
 8000858:	193c      	adds	r4, r7, r4
 800085a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800085e:	f080 8084 	bcs.w	800096a <__udivmoddi4+0x2a2>
 8000862:	45a1      	cmp	r9, r4
 8000864:	f240 8081 	bls.w	800096a <__udivmoddi4+0x2a2>
 8000868:	f1ae 0e02 	sub.w	lr, lr, #2
 800086c:	443c      	add	r4, r7
 800086e:	eba4 0409 	sub.w	r4, r4, r9
 8000872:	fa1f f983 	uxth.w	r9, r3
 8000876:	fbb4 f3f0 	udiv	r3, r4, r0
 800087a:	fb00 4413 	mls	r4, r0, r3, r4
 800087e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000882:	fb03 fc0c 	mul.w	ip, r3, ip
 8000886:	45a4      	cmp	ip, r4
 8000888:	d907      	bls.n	800089a <__udivmoddi4+0x1d2>
 800088a:	193c      	adds	r4, r7, r4
 800088c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000890:	d267      	bcs.n	8000962 <__udivmoddi4+0x29a>
 8000892:	45a4      	cmp	ip, r4
 8000894:	d965      	bls.n	8000962 <__udivmoddi4+0x29a>
 8000896:	3b02      	subs	r3, #2
 8000898:	443c      	add	r4, r7
 800089a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800089e:	fba0 9302 	umull	r9, r3, r0, r2
 80008a2:	eba4 040c 	sub.w	r4, r4, ip
 80008a6:	429c      	cmp	r4, r3
 80008a8:	46ce      	mov	lr, r9
 80008aa:	469c      	mov	ip, r3
 80008ac:	d351      	bcc.n	8000952 <__udivmoddi4+0x28a>
 80008ae:	d04e      	beq.n	800094e <__udivmoddi4+0x286>
 80008b0:	b155      	cbz	r5, 80008c8 <__udivmoddi4+0x200>
 80008b2:	ebb8 030e 	subs.w	r3, r8, lr
 80008b6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ba:	fa04 f606 	lsl.w	r6, r4, r6
 80008be:	40cb      	lsrs	r3, r1
 80008c0:	431e      	orrs	r6, r3
 80008c2:	40cc      	lsrs	r4, r1
 80008c4:	e9c5 6400 	strd	r6, r4, [r5]
 80008c8:	2100      	movs	r1, #0
 80008ca:	e750      	b.n	800076e <__udivmoddi4+0xa6>
 80008cc:	f1c2 0320 	rsb	r3, r2, #32
 80008d0:	fa20 f103 	lsr.w	r1, r0, r3
 80008d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d8:	fa24 f303 	lsr.w	r3, r4, r3
 80008dc:	4094      	lsls	r4, r2
 80008de:	430c      	orrs	r4, r1
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e8:	fa1f f78c 	uxth.w	r7, ip
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3110 	mls	r1, r8, r0, r3
 80008f4:	0c23      	lsrs	r3, r4, #16
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb00 f107 	mul.w	r1, r0, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x24c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f100 36ff 	add.w	r6, r0, #4294967295
 800090a:	d22c      	bcs.n	8000966 <__udivmoddi4+0x29e>
 800090c:	4299      	cmp	r1, r3
 800090e:	d92a      	bls.n	8000966 <__udivmoddi4+0x29e>
 8000910:	3802      	subs	r0, #2
 8000912:	4463      	add	r3, ip
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f1f8 	udiv	r1, r3, r8
 800091c:	fb08 3311 	mls	r3, r8, r1, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb01 f307 	mul.w	r3, r1, r7
 8000928:	42a3      	cmp	r3, r4
 800092a:	d908      	bls.n	800093e <__udivmoddi4+0x276>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f101 36ff 	add.w	r6, r1, #4294967295
 8000934:	d213      	bcs.n	800095e <__udivmoddi4+0x296>
 8000936:	42a3      	cmp	r3, r4
 8000938:	d911      	bls.n	800095e <__udivmoddi4+0x296>
 800093a:	3902      	subs	r1, #2
 800093c:	4464      	add	r4, ip
 800093e:	1ae4      	subs	r4, r4, r3
 8000940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000944:	e739      	b.n	80007ba <__udivmoddi4+0xf2>
 8000946:	4604      	mov	r4, r0
 8000948:	e6f0      	b.n	800072c <__udivmoddi4+0x64>
 800094a:	4608      	mov	r0, r1
 800094c:	e706      	b.n	800075c <__udivmoddi4+0x94>
 800094e:	45c8      	cmp	r8, r9
 8000950:	d2ae      	bcs.n	80008b0 <__udivmoddi4+0x1e8>
 8000952:	ebb9 0e02 	subs.w	lr, r9, r2
 8000956:	eb63 0c07 	sbc.w	ip, r3, r7
 800095a:	3801      	subs	r0, #1
 800095c:	e7a8      	b.n	80008b0 <__udivmoddi4+0x1e8>
 800095e:	4631      	mov	r1, r6
 8000960:	e7ed      	b.n	800093e <__udivmoddi4+0x276>
 8000962:	4603      	mov	r3, r0
 8000964:	e799      	b.n	800089a <__udivmoddi4+0x1d2>
 8000966:	4630      	mov	r0, r6
 8000968:	e7d4      	b.n	8000914 <__udivmoddi4+0x24c>
 800096a:	46d6      	mov	lr, sl
 800096c:	e77f      	b.n	800086e <__udivmoddi4+0x1a6>
 800096e:	4463      	add	r3, ip
 8000970:	3802      	subs	r0, #2
 8000972:	e74d      	b.n	8000810 <__udivmoddi4+0x148>
 8000974:	4606      	mov	r6, r0
 8000976:	4623      	mov	r3, r4
 8000978:	4608      	mov	r0, r1
 800097a:	e70f      	b.n	800079c <__udivmoddi4+0xd4>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	e730      	b.n	80007e4 <__udivmoddi4+0x11c>
 8000982:	bf00      	nop

08000984 <__aeabi_idiv0>:
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 800098e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ac8 <MX_BlueNRG_MS_Init+0x140>)
 8000990:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000992:	f000 f8ad 	bl	8000af0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000996:	2000      	movs	r0, #0
 8000998:	f001 ff92 	bl	80028c0 <BSP_PB_GetState>
 800099c:	4603      	mov	r3, r0
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b4a      	ldr	r3, [pc, #296]	@ (8000acc <MX_BlueNRG_MS_Init+0x144>)
 80009a2:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009a4:	2100      	movs	r1, #0
 80009a6:	484a      	ldr	r0, [pc, #296]	@ (8000ad0 <MX_BlueNRG_MS_Init+0x148>)
 80009a8:	f008 fde4 	bl	8009574 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009ac:	1dba      	adds	r2, r7, #6
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f008 fc52 	bl	800925e <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009ba:	f008 fc94 	bl	80092e6 <hci_reset>
  HAL_Delay(100);
 80009be:	2064      	movs	r0, #100	@ 0x64
 80009c0:	f002 fcea 	bl	8003398 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80009c4:	7a3b      	ldrb	r3, [r7, #8]
 80009c6:	2b30      	cmp	r3, #48	@ 0x30
 80009c8:	d902      	bls.n	80009d0 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 80009ca:	4b42      	ldr	r3, [pc, #264]	@ (8000ad4 <MX_BlueNRG_MS_Init+0x14c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80009d0:	f107 0209 	add.w	r2, r7, #9
 80009d4:	4b40      	ldr	r3, [pc, #256]	@ (8000ad8 <MX_BlueNRG_MS_Init+0x150>)
 80009d6:	2106      	movs	r1, #6
 80009d8:	2080      	movs	r0, #128	@ 0x80
 80009da:	f008 fbba 	bl	8009152 <aci_hal_read_config_data>
 80009de:	4603      	mov	r3, r0
 80009e0:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80009e2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <MX_BlueNRG_MS_Init+0x150>)
 80009e4:	795b      	ldrb	r3, [r3, #5]
 80009e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80009ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80009ec:	d001      	beq.n	80009f2 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 80009ee:	bf00      	nop
 80009f0:	e7fd      	b.n	80009ee <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 80009f2:	f008 f974 	bl	8008cde <aci_gatt_init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 80009fa:	4b36      	ldr	r3, [pc, #216]	@ (8000ad4 <MX_BlueNRG_MS_Init+0x14c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d110      	bne.n	8000a24 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a02:	f107 020e 	add.w	r2, r7, #14
 8000a06:	f107 030a 	add.w	r3, r7, #10
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	4613      	mov	r3, r2
 8000a14:	2207      	movs	r2, #7
 8000a16:	2100      	movs	r1, #0
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f007 ff34 	bl	8008886 <aci_gap_init_IDB05A1>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	e00a      	b.n	8000a3a <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a24:	f107 030a 	add.w	r3, r7, #10
 8000a28:	f107 020c 	add.w	r2, r7, #12
 8000a2c:	f107 010e 	add.w	r1, r7, #14
 8000a30:	2001      	movs	r0, #1
 8000a32:	f007 ff78 	bl	8008926 <aci_gap_init_IDB04A1>
 8000a36:	4603      	mov	r3, r0
 8000a38:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a3a:	89fc      	ldrh	r4, [r7, #14]
 8000a3c:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff fbc6 	bl	80001d0 <strlen>
 8000a44:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4629      	mov	r1, r5
 8000a52:	4620      	mov	r0, r4
 8000a54:	f008 faba 	bl	8008fcc <aci_gatt_update_char_value>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000a62:	bf00      	nop
 8000a64:	e7fd      	b.n	8000a62 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000a66:	2301      	movs	r3, #1
 8000a68:	9303      	str	r3, [sp, #12]
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_BlueNRG_MS_Init+0x154>)
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	2310      	movs	r3, #16
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2307      	movs	r3, #7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f008 f886 	bl	8008b8e <aci_gap_set_auth_requirement>
 8000a82:	4603      	mov	r3, r0
 8000a84:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000a90:	f000 f860 	bl	8000b54 <Add_HWServW2ST_Service>
 8000a94:	4603      	mov	r3, r0
 8000a96:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000a9e:	bf00      	nop
 8000aa0:	e7fd      	b.n	8000a9e <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8000aa2:	f000 f8d7 	bl	8000c54 <Add_SWServW2ST_Service>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f008 fba0 	bl	80091fc <aci_hal_set_tx_power_level>
 8000abc:	4603      	mov	r3, r0
 8000abe:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac8:	0800e78c 	.word	0x0800e78c
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	08001121 	.word	0x08001121
 8000ad4:	200000dc 	.word	0x200000dc
 8000ad8:	200000e0 	.word	0x200000e0
 8000adc:	0001e240 	.word	0x0001e240

08000ae0 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000ae4:	f000 f812 	bl	8000b0c <User_Process>
  hci_user_evt_proc();
 8000ae8:	f008 febe 	bl	8009868 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000af4:	2101      	movs	r1, #1
 8000af6:	2000      	movs	r0, #0
 8000af8:	f001 fe8e 	bl	8002818 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f001 fe23 	bl	8002748 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f001 ff3a 	bl	800297c <BSP_COM_Init>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <User_Process+0x24>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <User_Process+0x1e>
  {
    Set_DeviceConnectable();
 8000b1a:	f000 fa8d 	bl	8001038 <Set_DeviceConnectable>
	BSP_LED_Toggle(LED2);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f001 fe24 	bl	800276c <BSP_LED_Toggle>

    set_connectable = FALSE;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <User_Process+0x24>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000001 	.word	0x20000001

08000b34 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8000b3e:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <BSP_PB_Callback+0x1c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	200000e6 	.word	0x200000e6

08000b54 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08d      	sub	sp, #52	@ 0x34
 8000b58:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8000b5a:	231b      	movs	r3, #27
 8000b5c:	713b      	strb	r3, [r7, #4]
 8000b5e:	23c5      	movs	r3, #197	@ 0xc5
 8000b60:	717b      	strb	r3, [r7, #5]
 8000b62:	23d5      	movs	r3, #213	@ 0xd5
 8000b64:	71bb      	strb	r3, [r7, #6]
 8000b66:	23a5      	movs	r3, #165	@ 0xa5
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	723b      	strb	r3, [r7, #8]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	727b      	strb	r3, [r7, #9]
 8000b72:	23b4      	movs	r3, #180	@ 0xb4
 8000b74:	72bb      	strb	r3, [r7, #10]
 8000b76:	239a      	movs	r3, #154	@ 0x9a
 8000b78:	72fb      	strb	r3, [r7, #11]
 8000b7a:	23e1      	movs	r3, #225	@ 0xe1
 8000b7c:	733b      	strb	r3, [r7, #12]
 8000b7e:	2311      	movs	r3, #17
 8000b80:	737b      	strb	r3, [r7, #13]
 8000b82:	2301      	movs	r3, #1
 8000b84:	73bb      	strb	r3, [r7, #14]
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	743b      	strb	r3, [r7, #16]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	747b      	strb	r3, [r7, #17]
 8000b92:	2300      	movs	r3, #0
 8000b94:	74bb      	strb	r3, [r7, #18]
 8000b96:	2300      	movs	r3, #0
 8000b98:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <Add_HWServW2ST_Service+0xf0>)
 8000b9c:	461c      	mov	r4, r3
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8000ba6:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <Add_HWServW2ST_Service+0xf4>)
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2310      	movs	r3, #16
 8000bac:	2201      	movs	r2, #1
 8000bae:	4925      	ldr	r1, [pc, #148]	@ (8000c44 <Add_HWServW2ST_Service+0xf0>)
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f008 f8b7 	bl	8008d24 <aci_gatt_add_serv>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8000bc0:	2347      	movs	r3, #71	@ 0x47
 8000bc2:	e03b      	b.n	8000c3c <Add_HWServW2ST_Service+0xe8>
//                           16, 0, &EnvironmentalCharHandle);
//  if (ret != BLE_STATUS_SUCCESS)
//    return BLE_STATUS_ERROR;

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8000bc4:	231b      	movs	r3, #27
 8000bc6:	713b      	strb	r3, [r7, #4]
 8000bc8:	23c5      	movs	r3, #197	@ 0xc5
 8000bca:	717b      	strb	r3, [r7, #5]
 8000bcc:	23d5      	movs	r3, #213	@ 0xd5
 8000bce:	71bb      	strb	r3, [r7, #6]
 8000bd0:	23a5      	movs	r3, #165	@ 0xa5
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	723b      	strb	r3, [r7, #8]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	727b      	strb	r3, [r7, #9]
 8000bdc:	2336      	movs	r3, #54	@ 0x36
 8000bde:	72bb      	strb	r3, [r7, #10]
 8000be0:	23ac      	movs	r3, #172	@ 0xac
 8000be2:	72fb      	strb	r3, [r7, #11]
 8000be4:	23e1      	movs	r3, #225	@ 0xe1
 8000be6:	733b      	strb	r3, [r7, #12]
 8000be8:	2311      	movs	r3, #17
 8000bea:	737b      	strb	r3, [r7, #13]
 8000bec:	2301      	movs	r3, #1
 8000bee:	73bb      	strb	r3, [r7, #14]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	743b      	strb	r3, [r7, #16]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	747b      	strb	r3, [r7, #17]
 8000bfc:	23e0      	movs	r3, #224	@ 0xe0
 8000bfe:	74bb      	strb	r3, [r7, #18]
 8000c00:	2300      	movs	r3, #0
 8000c02:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <Add_HWServW2ST_Service+0xf8>)
 8000c06:	461c      	mov	r4, r3
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <Add_HWServW2ST_Service+0xf4>)
 8000c12:	8818      	ldrh	r0, [r3, #0]
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <Add_HWServW2ST_Service+0xfc>)
 8000c16:	9305      	str	r3, [sp, #20]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9304      	str	r3, [sp, #16]
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	9303      	str	r3, [sp, #12]
 8000c20:	2304      	movs	r3, #4
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	2300      	movs	r3, #0
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	2312      	movs	r3, #18
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2312      	movs	r3, #18
 8000c2e:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <Add_HWServW2ST_Service+0xf8>)
 8000c30:	2102      	movs	r1, #2
 8000c32:	f008 f900 	bl	8008e36 <aci_gatt_add_char>
 8000c36:	4603      	mov	r3, r0
 8000c38:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);

  return BLE_STATUS_SUCCESS;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	200000f0 	.word	0x200000f0
 8000c48:	200000e8 	.word	0x200000e8
 8000c4c:	20000100 	.word	0x20000100
 8000c50:	200000ec 	.word	0x200000ec

08000c54 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af02      	add	r7, sp, #8
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8000c5e:	231b      	movs	r3, #27
 8000c60:	703b      	strb	r3, [r7, #0]
 8000c62:	23c5      	movs	r3, #197	@ 0xc5
 8000c64:	707b      	strb	r3, [r7, #1]
 8000c66:	23d5      	movs	r3, #213	@ 0xd5
 8000c68:	70bb      	strb	r3, [r7, #2]
 8000c6a:	23a5      	movs	r3, #165	@ 0xa5
 8000c6c:	70fb      	strb	r3, [r7, #3]
 8000c6e:	2302      	movs	r3, #2
 8000c70:	713b      	strb	r3, [r7, #4]
 8000c72:	2300      	movs	r3, #0
 8000c74:	717b      	strb	r3, [r7, #5]
 8000c76:	23b4      	movs	r3, #180	@ 0xb4
 8000c78:	71bb      	strb	r3, [r7, #6]
 8000c7a:	239a      	movs	r3, #154	@ 0x9a
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	23e1      	movs	r3, #225	@ 0xe1
 8000c80:	723b      	strb	r3, [r7, #8]
 8000c82:	2311      	movs	r3, #17
 8000c84:	727b      	strb	r3, [r7, #9]
 8000c86:	2302      	movs	r3, #2
 8000c88:	72bb      	strb	r3, [r7, #10]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	72fb      	strb	r3, [r7, #11]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	733b      	strb	r3, [r7, #12]
 8000c92:	2300      	movs	r3, #0
 8000c94:	737b      	strb	r3, [r7, #13]
 8000c96:	2300      	movs	r3, #0
 8000c98:	73bb      	strb	r3, [r7, #14]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <Add_SWServW2ST_Service+0x8c>)
 8000ca0:	461c      	mov	r4, r3
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	0052      	lsls	r2, r2, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <Add_SWServW2ST_Service+0x90>)
 8000cbc:	9200      	str	r2, [sp, #0]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4907      	ldr	r1, [pc, #28]	@ (8000ce0 <Add_SWServW2ST_Service+0x8c>)
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f008 f82e 	bl	8008d24 <aci_gatt_add_serv>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8000ccc:	7cfb      	ldrb	r3, [r7, #19]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <Add_SWServW2ST_Service+0x82>
	  return BLE_STATUS_ERROR;
 8000cd2:	2347      	movs	r3, #71	@ 0x47
 8000cd4:	e000      	b.n	8000cd8 <Add_SWServW2ST_Service+0x84>
//
//  if (ret != BLE_STATUS_SUCCESS) {
//	  return BLE_STATUS_ERROR;
//  }

  return BLE_STATUS_SUCCESS;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	200000f0 	.word	0x200000f0
 8000ce4:	200000ee 	.word	0x200000ee

08000ce8 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(int datatype, float *data)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2+2*8];
  tBleStatus ret;

//  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
  HOST_TO_LE_16(buff, (int16_t)datatype);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	723b      	strb	r3, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	121b      	asrs	r3, r3, #8
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	727b      	strb	r3, [r7, #9]
  int i = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  for (i=0; i<8; i++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	e02a      	b.n	8000d64 <Acc_Update+0x7c>
//	  printf("%d\r\n", (int)(*(before_filter_data+i)));
	  HOST_TO_LE_16(buff + (2*i+2), (int16_t)(*(data+i)));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4413      	add	r3, r2
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d1e:	ee17 3a90 	vmov	r3, s15
 8000d22:	b219      	sxth	r1, r3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f107 0208 	add.w	r2, r7, #8
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2ca      	uxtb	r2, r1
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	edd3 7a00 	vldr	s15, [r3]
 8000d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	121b      	asrs	r3, r3, #8
 8000d4c:	b219      	sxth	r1, r3
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	3303      	adds	r3, #3
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
  for (i=0; i<8; i++) {
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3301      	adds	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	ddd1      	ble.n	8000d0e <Acc_Update+0x26>
//  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
//  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
//  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
//  printf("%d\r\n", (buff[1]));
//  printf("%d\r\n", (buff[0]));
  printf("%d\r\n", ((buff[1] << 8) + buff[0]));
 8000d6a:	7a7b      	ldrb	r3, [r7, #9]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	7a3a      	ldrb	r2, [r7, #8]
 8000d70:	4413      	add	r3, r2
 8000d72:	4619      	mov	r1, r3
 8000d74:	481f      	ldr	r0, [pc, #124]	@ (8000df4 <Acc_Update+0x10c>)
 8000d76:	f00c fd9f 	bl	800d8b8 <iprintf>
  for(i=0; i<8; i++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e016      	b.n	8000dae <Acc_Update+0xc6>
	  printf("%d\r\n", (buff[2*i+3] << 8) + buff[2*i+2]);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	3303      	adds	r3, #3
 8000d86:	3320      	adds	r3, #32
 8000d88:	443b      	add	r3, r7
 8000d8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	3201      	adds	r2, #1
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	3220      	adds	r2, #32
 8000d98:	443a      	add	r2, r7
 8000d9a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	4814      	ldr	r0, [pc, #80]	@ (8000df4 <Acc_Update+0x10c>)
 8000da4:	f00c fd88 	bl	800d8b8 <iprintf>
  for(i=0; i<8; i++) {
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	3301      	adds	r3, #1
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	dde5      	ble.n	8000d80 <Acc_Update+0x98>
  }

  if (connected) {
 8000db4:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <Acc_Update+0x110>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d016      	beq.n	8000dea <Acc_Update+0x102>
//	  ret = aci_gatt_exchange_configuration(connection_handle);

	  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <Acc_Update+0x114>)
 8000dbe:	8818      	ldrh	r0, [r3, #0]
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <Acc_Update+0x118>)
 8000dc2:	8819      	ldrh	r1, [r3, #0]
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2312      	movs	r3, #18
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f008 f8fd 	bl	8008fcc <aci_gatt_update_char_value>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	76fb      	strb	r3, [r7, #27]
					   0, 2+2*8, buff);

	  if (ret != BLE_STATUS_SUCCESS){
 8000dd6:	7efb      	ldrb	r3, [r7, #27]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <Acc_Update+0x102>
		printf("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
 8000ddc:	7efb      	ldrb	r3, [r7, #27]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <Acc_Update+0x11c>)
 8000de2:	f00c fd69 	bl	800d8b8 <iprintf>
		return BLE_STATUS_ERROR ;
 8000de6:	2347      	movs	r3, #71	@ 0x47
 8000de8:	e000      	b.n	8000dec <Acc_Update+0x104>
	  }
  }

  return BLE_STATUS_SUCCESS;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	0800e794 	.word	0x0800e794
 8000df8:	20000114 	.word	0x20000114
 8000dfc:	200000e8 	.word	0x200000e8
 8000e00:	200000ec 	.word	0x200000ec
 8000e04:	0800e79c 	.word	0x0800e79c

08000e08 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8000e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e0c:	b08e      	sub	sp, #56	@ 0x38
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8000e14:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e16:	4b5c      	ldr	r3, [pc, #368]	@ (8000f88 <Read_Request_CB+0x180>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d10f      	bne.n	8000e40 <Read_Request_CB+0x38>
  {
	printf("in read request\r\n");
 8000e20:	485a      	ldr	r0, [pc, #360]	@ (8000f8c <Read_Request_CB+0x184>)
 8000e22:	f00c fdb1 	bl	800d988 <puts>
    Acc_Update(0, inputF32);
 8000e26:	4b5a      	ldr	r3, [pc, #360]	@ (8000f90 <Read_Request_CB+0x188>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff5b 	bl	8000ce8 <Acc_Update>
    Acc_Update(1, outputF32);
 8000e32:	4b58      	ldr	r3, [pc, #352]	@ (8000f94 <Read_Request_CB+0x18c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff ff55 	bl	8000ce8 <Acc_Update>
 8000e3e:	e091      	b.n	8000f64 <Read_Request_CB+0x15c>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8000e40:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e42:	4b55      	ldr	r3, [pc, #340]	@ (8000f98 <Read_Request_CB+0x190>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 808b 	bne.w	8000f64 <Read_Request_CB+0x15c>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8000e4e:	f00c fc33 	bl	800d6b8 <rand>
 8000e52:	4603      	mov	r3, r0
 8000e54:	17da      	asrs	r2, r3, #31
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	61fa      	str	r2, [r7, #28]
 8000e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e5e:	f04f 0000 	mov.w	r0, #0
 8000e62:	f04f 0100 	mov.w	r1, #0
 8000e66:	0099      	lsls	r1, r3, #2
 8000e68:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e6c:	0090      	lsls	r0, r2, #2
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	69b9      	ldr	r1, [r7, #24]
 8000e74:	1851      	adds	r1, r2, r1
 8000e76:	6139      	str	r1, [r7, #16]
 8000e78:	69f9      	ldr	r1, [r7, #28]
 8000e7a:	eb43 0101 	adc.w	r1, r3, r1
 8000e7e:	6179      	str	r1, [r7, #20]
 8000e80:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e8c:	f7ff fc04 	bl	8000698 <__aeabi_uldivmod>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fb78 	bl	800058c <__aeabi_ul2d>
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <Read_Request_CB+0x194>)
 8000ea2:	f7ff f9f3 	bl	800028c <__adddf3>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff fba3 	bl	80005f8 <__aeabi_d2f>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8000eb6:	f00c fbff 	bl	800d6b8 <rand>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	17da      	asrs	r2, r3, #31
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	1891      	adds	r1, r2, r2
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	415b      	adcs	r3, r3
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ed2:	eb12 0408 	adds.w	r4, r2, r8
 8000ed6:	eb43 0509 	adc.w	r5, r3, r9
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	016b      	lsls	r3, r5, #5
 8000ee4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ee8:	0162      	lsls	r2, r4, #5
 8000eea:	eb14 0a02 	adds.w	sl, r4, r2
 8000eee:	eb45 0b03 	adc.w	fp, r5, r3
 8000ef2:	eb1a 0308 	adds.w	r3, sl, r8
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	eb4b 0309 	adc.w	r3, fp, r9
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f0a:	f7ff fbc5 	bl	8000698 <__aeabi_uldivmod>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fb39 	bl	800058c <__aeabi_ul2d>
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <Read_Request_CB+0x198>)
 8000f20:	f7ff f9b4 	bl	800028c <__adddf3>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fb64 	bl	80005f8 <__aeabi_d2f>
 8000f30:	4603      	mov	r3, r0
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000f34:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000f38:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000fa4 <Read_Request_CB+0x19c>
 8000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f40:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000f44:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f48:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f54:	ee17 3a90 	vmov	r3, s15
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	ee16 0a90 	vmov	r0, s13
 8000f60:	f000 f824 	bl	8000fac <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <Read_Request_CB+0x1a0>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <Read_Request_CB+0x174>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <Read_Request_CB+0x1a0>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f008 f8c1 	bl	80090f8 <aci_gatt_allow_read>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3738      	adds	r7, #56	@ 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f86:	bf00      	nop
 8000f88:	200000ec 	.word	0x200000ec
 8000f8c:	0800e7d8 	.word	0x0800e7d8
 8000f90:	20000118 	.word	0x20000118
 8000f94:	2000011c 	.word	0x2000011c
 8000f98:	200000ea 	.word	0x200000ea
 8000f9c:	403b0000 	.word	0x403b0000
 8000fa0:	408f4000 	.word	0x408f4000
 8000fa4:	42c80000 	.word	0x42c80000
 8000fa8:	20000110 	.word	0x20000110

08000fac <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8000fb8:	f002 f9e2 	bl	8003380 <HAL_GetTick>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	08db      	lsrs	r3, r3, #3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	733b      	strb	r3, [r7, #12]
 8000fc4:	f002 f9dc 	bl	8003380 <HAL_GetTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	0adb      	lsrs	r3, r3, #11
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	73bb      	strb	r3, [r7, #14]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	121b      	asrs	r3, r3, #8
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	141b      	asrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	743b      	strb	r3, [r7, #16]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	161b      	asrs	r3, r3, #24
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	74bb      	strb	r3, [r7, #18]
 8000ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ff8:	121b      	asrs	r3, r3, #8
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <BlueMS_Environmental_Update+0x84>)
 8001002:	8818      	ldrh	r0, [r3, #0]
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <BlueMS_Environmental_Update+0x88>)
 8001006:	8819      	ldrh	r1, [r3, #0]
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2308      	movs	r3, #8
 8001010:	2200      	movs	r2, #0
 8001012:	f007 ffdb 	bl	8008fcc <aci_gatt_update_char_value>
 8001016:	4603      	mov	r3, r0
 8001018:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001020:	2347      	movs	r3, #71	@ 0x47
 8001022:	e000      	b.n	8001026 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000e8 	.word	0x200000e8
 8001034:	200000ea 	.word	0x200000ea

08001038 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b092      	sub	sp, #72	@ 0x48
 800103c:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800103e:	4a36      	ldr	r2, [pc, #216]	@ (8001118 <Set_DeviceConnectable+0xe0>)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001048:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 800104c:	2302      	movs	r3, #2
 800104e:	703b      	strb	r3, [r7, #0]
 8001050:	230a      	movs	r3, #10
 8001052:	707b      	strb	r3, [r7, #1]
 8001054:	2300      	movs	r3, #0
 8001056:	70bb      	strb	r3, [r7, #2]
 8001058:	2308      	movs	r3, #8
 800105a:	70fb      	strb	r3, [r7, #3]
 800105c:	2309      	movs	r3, #9
 800105e:	713b      	strb	r3, [r7, #4]
 8001060:	2342      	movs	r3, #66	@ 0x42
 8001062:	717b      	strb	r3, [r7, #5]
 8001064:	236c      	movs	r3, #108	@ 0x6c
 8001066:	71bb      	strb	r3, [r7, #6]
 8001068:	2375      	movs	r3, #117	@ 0x75
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	2365      	movs	r3, #101	@ 0x65
 800106e:	723b      	strb	r3, [r7, #8]
 8001070:	2347      	movs	r3, #71	@ 0x47
 8001072:	727b      	strb	r3, [r7, #9]
 8001074:	2347      	movs	r3, #71	@ 0x47
 8001076:	72bb      	strb	r3, [r7, #10]
 8001078:	2347      	movs	r3, #71	@ 0x47
 800107a:	72fb      	strb	r3, [r7, #11]
 800107c:	230d      	movs	r3, #13
 800107e:	733b      	strb	r3, [r7, #12]
 8001080:	23ff      	movs	r3, #255	@ 0xff
 8001082:	737b      	strb	r3, [r7, #13]
 8001084:	2301      	movs	r3, #1
 8001086:	73bb      	strb	r3, [r7, #14]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	2300      	movs	r3, #0
 800108e:	743b      	strb	r3, [r7, #16]
 8001090:	23f4      	movs	r3, #244	@ 0xf4
 8001092:	747b      	strb	r3, [r7, #17]
 8001094:	2300      	movs	r3, #0
 8001096:	74bb      	strb	r3, [r7, #18]
 8001098:	2300      	movs	r3, #0
 800109a:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <Set_DeviceConnectable+0xe4>)
 800109e:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80010a0:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <Set_DeviceConnectable+0xe4>)
 80010a4:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80010a6:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <Set_DeviceConnectable+0xe4>)
 80010aa:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80010ac:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <Set_DeviceConnectable+0xe4>)
 80010b0:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80010b2:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <Set_DeviceConnectable+0xe4>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80010b8:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <Set_DeviceConnectable+0xe4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80010be:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80010c0:	7cbb      	ldrb	r3, [r7, #18]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f008 f976 	bl	80093be <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80010d2:	2300      	movs	r3, #0
 80010d4:	9306      	str	r3, [sp, #24]
 80010d6:	2300      	movs	r3, #0
 80010d8:	9305      	str	r3, [sp, #20]
 80010da:	2300      	movs	r3, #0
 80010dc:	9304      	str	r3, [sp, #16]
 80010de:	2300      	movs	r3, #0
 80010e0:	9303      	str	r3, [sp, #12]
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2308      	movs	r3, #8
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	2300      	movs	r3, #0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 80010f6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80010fa:	2000      	movs	r0, #0
 80010fc:	f007 fc5d 	bl	80089ba <aci_gap_set_discoverable>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	201a      	movs	r0, #26
 800110c:	f007 fd96 	bl	8008c3c <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	@ 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800e7ec 	.word	0x0800e7ec
 800111c:	200000e0 	.word	0x200000e0

08001120 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	3301      	adds	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d139      	bne.n	80011ae <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2bff      	cmp	r3, #255	@ 0xff
 8001140:	d01f      	beq.n	8001182 <user_notify+0x62>
 8001142:	2bff      	cmp	r3, #255	@ 0xff
 8001144:	dc38      	bgt.n	80011b8 <user_notify+0x98>
 8001146:	2b05      	cmp	r3, #5
 8001148:	d002      	beq.n	8001150 <user_notify+0x30>
 800114a:	2b3e      	cmp	r3, #62	@ 0x3e
 800114c:	d003      	beq.n	8001156 <user_notify+0x36>
 800114e:	e033      	b.n	80011b8 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001150:	f000 f836 	bl	80011c0 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001154:	e030      	b.n	80011b8 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	3302      	adds	r3, #2
 800115a:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d126      	bne.n	80011b2 <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1d5a      	adds	r2, r3, #5
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f000 f837 	bl	80011ec <GAP_ConnectionComplete_CB>
        }
        break;
 800117e:	bf00      	nop
      }
    }
    break;
 8001180:	e017      	b.n	80011b2 <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	3302      	adds	r3, #2
 8001186:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	f640 4314 	movw	r3, #3092	@ 0xc14
 8001194:	429a      	cmp	r2, r3
 8001196:	d10e      	bne.n	80011b6 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3302      	adds	r3, #2
 800119c:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	885b      	ldrh	r3, [r3, #2]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fe2f 	bl	8000e08 <Read_Request_CB>
        }
        break;
 80011aa:	bf00      	nop
      }
    }
    break;
 80011ac:	e003      	b.n	80011b6 <user_notify+0x96>
    return;
 80011ae:	bf00      	nop
 80011b0:	e002      	b.n	80011b8 <user_notify+0x98>
    break;
 80011b2:	bf00      	nop
 80011b4:	e000      	b.n	80011b8 <user_notify+0x98>
    break;
 80011b6:	bf00      	nop
  }
}
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  connected = FALSE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <GAP_DisconnectionComplete_CB+0x20>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <GAP_DisconnectionComplete_CB+0x24>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <GAP_DisconnectionComplete_CB+0x28>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000114 	.word	0x20000114
 80011e4:	20000001 	.word	0x20000001
 80011e8:	20000112 	.word	0x20000112

080011ec <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <GAP_ConnectionComplete_CB+0x38>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80011fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <GAP_ConnectionComplete_CB+0x3c>)
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8001204:	2305      	movs	r3, #5
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	e002      	b.n	8001210 <GAP_ConnectionComplete_CB+0x24>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3b01      	subs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	20000114 	.word	0x20000114
 8001228:	20000110 	.word	0x20000110

0800122c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HCI_TL_SPI_Init+0x88>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <HCI_TL_SPI_Init+0x88>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001240:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <HCI_TL_SPI_Init+0x88>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800124c:	2340      	movs	r3, #64	@ 0x40
 800124e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001250:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	4815      	ldr	r0, [pc, #84]	@ (80012b8 <HCI_TL_SPI_Init+0x8c>)
 8001262:	f002 fb39 	bl	80038d8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001266:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001282:	f002 fb29 	bl	80038d8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <HCI_TL_SPI_Init+0x90>)
 80012a0:	f002 fb1a 	bl	80038d8 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80012a4:	f001 fda6 	bl	8002df4 <BSP_SPI3_Init>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48001000 	.word	0x48001000
 80012bc:	48000c00 	.word	0x48000c00

080012c0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80012c4:	2140      	movs	r1, #64	@ 0x40
 80012c6:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <HCI_TL_SPI_DeInit+0x28>)
 80012c8:	f002 fcb0 	bl	8003c2c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80012cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d0:	4806      	ldr	r0, [pc, #24]	@ (80012ec <HCI_TL_SPI_DeInit+0x2c>)
 80012d2:	f002 fcab 	bl	8003c2c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80012d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012de:	f002 fca5 	bl	8003c2c <HAL_GPIO_DeInit>
  return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	48001000 	.word	0x48001000
 80012ec:	48000c00 	.word	0x48000c00

080012f0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <HCI_TL_SPI_Reset+0x40>)
 80012fc:	f002 fda2 	bl	8003e44 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f002 fd9b 	bl	8003e44 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800130e:	2005      	movs	r0, #5
 8001310:	f002 f842 	bl	8003398 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800131a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131e:	f002 fd91 	bl	8003e44 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001322:	2005      	movs	r0, #5
 8001324:	f002 f838 	bl	8003398 <HAL_Delay>
  return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	48000c00 	.word	0x48000c00

08001334 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001344:	23ff      	movs	r3, #255	@ 0xff
 8001346:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001348:	4a26      	ldr	r2, [pc, #152]	@ (80013e4 <HCI_TL_SPI_Receive+0xb0>)
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001352:	6018      	str	r0, [r3, #0]
 8001354:	3304      	adds	r3, #4
 8001356:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800135e:	4822      	ldr	r0, [pc, #136]	@ (80013e8 <HCI_TL_SPI_Receive+0xb4>)
 8001360:	f002 fd70 	bl	8003e44 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001364:	f107 010c 	add.w	r1, r7, #12
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2205      	movs	r2, #5
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fd70 	bl	8002e54 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d129      	bne.n	80013ce <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800137a:	7c3b      	ldrb	r3, [r7, #16]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800138a:	8bfb      	ldrh	r3, [r7, #30]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01e      	beq.n	80013ce <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001390:	8bfa      	ldrh	r2, [r7, #30]
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	429a      	cmp	r2, r3
 8001396:	d901      	bls.n	800139c <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800139c:	2300      	movs	r3, #0
 800139e:	777b      	strb	r3, [r7, #29]
 80013a0:	e010      	b.n	80013c4 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80013a2:	f107 011b 	add.w	r1, r7, #27
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	2201      	movs	r2, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fd51 	bl	8002e54 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 80013b2:	7f7b      	ldrb	r3, [r7, #29]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	7efa      	ldrb	r2, [r7, #27]
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80013be:	7f7b      	ldrb	r3, [r7, #29]
 80013c0:	3301      	adds	r3, #1
 80013c2:	777b      	strb	r3, [r7, #29]
 80013c4:	7f7b      	ldrb	r3, [r7, #29]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	8bfa      	ldrh	r2, [r7, #30]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d8e9      	bhi.n	80013a2 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <HCI_TL_SPI_Receive+0xb4>)
 80013d6:	f002 fd35 	bl	8003e44 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80013da:	7f7b      	ldrb	r3, [r7, #29]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800e7f4 	.word	0x0800e7f4
 80013e8:	48000c00 	.word	0x48000c00

080013ec <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80013f8:	4a24      	ldr	r2, [pc, #144]	@ (800148c <HCI_TL_SPI_Send+0xa0>)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001402:	6018      	str	r0, [r3, #0]
 8001404:	3304      	adds	r3, #4
 8001406:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001408:	f001 ffba 	bl	8003380 <HAL_GetTick>
 800140c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001418:	481d      	ldr	r0, [pc, #116]	@ (8001490 <HCI_TL_SPI_Send+0xa4>)
 800141a:	f002 fd13 	bl	8003e44 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800141e:	f107 0108 	add.w	r1, r7, #8
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2205      	movs	r2, #5
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fd13 	bl	8002e54 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 800142e:	7a3b      	ldrb	r3, [r7, #8]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d10f      	bne.n	8001454 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001434:	7a7b      	ldrb	r3, [r7, #9]
 8001436:	461a      	mov	r2, r3
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	4293      	cmp	r3, r2
 800143c:	d806      	bhi.n	800144c <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	461a      	mov	r2, r3
 8001442:	4914      	ldr	r1, [pc, #80]	@ (8001494 <HCI_TL_SPI_Send+0xa8>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f001 fd05 	bl	8002e54 <BSP_SPI3_SendRecv>
 800144a:	e006      	b.n	800145a <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 800144c:	f06f 0301 	mvn.w	r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e002      	b.n	800145a <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001460:	480b      	ldr	r0, [pc, #44]	@ (8001490 <HCI_TL_SPI_Send+0xa4>)
 8001462:	f002 fcef 	bl	8003e44 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001466:	f001 ff8b 	bl	8003380 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d903      	bls.n	800147c <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001474:	f06f 0302 	mvn.w	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
      break;
 800147a:	e002      	b.n	8001482 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dbc5      	blt.n	800140e <HCI_TL_SPI_Send+0x22>

  return result;
 8001482:	69fb      	ldr	r3, [r7, #28]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	0800e7fc 	.word	0x0800e7fc
 8001490:	48000c00 	.word	0x48000c00
 8001494:	20000128 	.word	0x20000128

08001498 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800149c:	2140      	movs	r1, #64	@ 0x40
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <IsDataAvailable+0x1c>)
 80014a0:	f002 fcb8 	bl	8003e14 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48001000 	.word	0x48001000

080014b8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <hci_tl_lowlevel_init+0x50>)
 80014c0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <hci_tl_lowlevel_init+0x54>)
 80014c4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80014c6:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <hci_tl_lowlevel_init+0x58>)
 80014c8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <hci_tl_lowlevel_init+0x5c>)
 80014cc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <hci_tl_lowlevel_init+0x60>)
 80014d0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <hci_tl_lowlevel_init+0x64>)
 80014d4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 f88d 	bl	80095f8 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80014de:	4910      	ldr	r1, [pc, #64]	@ (8001520 <hci_tl_lowlevel_init+0x68>)
 80014e0:	4810      	ldr	r0, [pc, #64]	@ (8001524 <hci_tl_lowlevel_init+0x6c>)
 80014e2:	f002 f9b5 	bl	8003850 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80014e6:	4a10      	ldr	r2, [pc, #64]	@ (8001528 <hci_tl_lowlevel_init+0x70>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480e      	ldr	r0, [pc, #56]	@ (8001524 <hci_tl_lowlevel_init+0x6c>)
 80014ec:	f002 f996 	bl	800381c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2017      	movs	r0, #23
 80014f6:	f002 f84e 	bl	8003596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014fa:	2017      	movs	r0, #23
 80014fc:	f002 f867 	bl	80035ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	0800122d 	.word	0x0800122d
 800150c:	080012c1 	.word	0x080012c1
 8001510:	080013ed 	.word	0x080013ed
 8001514:	08001335 	.word	0x08001335
 8001518:	080012f1 	.word	0x080012f1
 800151c:	08002e95 	.word	0x08002e95
 8001520:	16000006 	.word	0x16000006
 8001524:	20000120 	.word	0x20000120
 8001528:	0800152d 	.word	0x0800152d

0800152c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001530:	e005      	b.n	800153e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001532:	2000      	movs	r0, #0
 8001534:	f008 f9c4 	bl	80098c0 <hci_notify_asynch_evt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800153e:	f7ff ffab 	bl	8001498 <IsDataAvailable>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f4      	bne.n	8001532 <hci_tl_lowlevel_isr+0x6>
 8001548:	e000      	b.n	800154c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800154a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001556:	f001 feab 	bl	80032b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 800155a:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <main+0xac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <main+0xb0>)
 8001562:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <main+0xb4>)
 8001564:	211d      	movs	r1, #29
 8001566:	4828      	ldr	r0, [pc, #160]	@ (8001608 <main+0xb8>)
 8001568:	f00b fe16 	bl	800d198 <arm_fir_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156c:	f000 f86a 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001570:	f000 fa68 	bl	8001a44 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001574:	f000 f8c8 	bl	8001708 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001578:	f000 f8fe 	bl	8001778 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800157c:	f000 f93c 	bl	80017f8 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8001580:	f000 fa02 	bl	8001988 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001584:	f000 fa30 	bl	80019e8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001588:	f000 f95c 	bl	8001844 <MX_TIM1_Init>
  MX_TIM2_Init();
 800158c:	f000 f9ae 	bl	80018ec <MX_TIM2_Init>
  MX_BlueNRG_MS_Init();
 8001590:	f7ff f9fa 	bl	8000988 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8001594:	f001 fd20 	bl	8002fd8 <BSP_ACCELERO_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001598:	481c      	ldr	r0, [pc, #112]	@ (800160c <main+0xbc>)
 800159a:	f005 fccf 	bl	8006f3c <HAL_TIM_Base_Start_IT>
//    while (1);
//  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800159e:	f008 fb27 	bl	8009bf0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemFilter */
  SemFilterHandle = osSemaphoreNew(1, 0, &SemFilter_attributes);
 80015a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001610 <main+0xc0>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2001      	movs	r0, #1
 80015a8:	f008 fc19 	bl	8009dde <osSemaphoreNew>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a19      	ldr	r2, [pc, #100]	@ (8001614 <main+0xc4>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* creation of SemVisual */
  SemVisualHandle = osSemaphoreNew(1, 0, &SemVisual_attributes);
 80015b2:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <main+0xc8>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	2001      	movs	r0, #1
 80015b8:	f008 fc11 	bl	8009dde <osSemaphoreNew>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a17      	ldr	r2, [pc, #92]	@ (800161c <main+0xcc>)
 80015c0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskAcc */
  TaskAccHandle = osThreadNew(StartTaskAcc, NULL, &TaskAcc_attributes);
 80015c2:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <main+0xd0>)
 80015c4:	2100      	movs	r1, #0
 80015c6:	4817      	ldr	r0, [pc, #92]	@ (8001624 <main+0xd4>)
 80015c8:	f008 fb5c 	bl	8009c84 <osThreadNew>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a16      	ldr	r2, [pc, #88]	@ (8001628 <main+0xd8>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* creation of TaskFilter */
  TaskFilterHandle = osThreadNew(StartTaskFilter, NULL, &TaskFilter_attributes);
 80015d2:	4a16      	ldr	r2, [pc, #88]	@ (800162c <main+0xdc>)
 80015d4:	2100      	movs	r1, #0
 80015d6:	4816      	ldr	r0, [pc, #88]	@ (8001630 <main+0xe0>)
 80015d8:	f008 fb54 	bl	8009c84 <osThreadNew>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <main+0xe4>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* creation of TaskVis */
  TaskVisHandle = osThreadNew(StartTaskVis, NULL, &TaskVis_attributes);
 80015e2:	4a15      	ldr	r2, [pc, #84]	@ (8001638 <main+0xe8>)
 80015e4:	2100      	movs	r1, #0
 80015e6:	4815      	ldr	r0, [pc, #84]	@ (800163c <main+0xec>)
 80015e8:	f008 fb4c 	bl	8009c84 <osThreadNew>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <main+0xf0>)
 80015f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015f2:	f008 fb21 	bl	8009c38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f6:	bf00      	nop
 80015f8:	e7fd      	b.n	80015f6 <main+0xa6>
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004
 8001600:	200022c4 	.word	0x200022c4
 8001604:	0800e91c 	.word	0x0800e91c
 8001608:	200024b8 	.word	0x200024b8
 800160c:	20000344 	.word	0x20000344
 8001610:	0800e8fc 	.word	0x0800e8fc
 8001614:	2000221c 	.word	0x2000221c
 8001618:	0800e90c 	.word	0x0800e90c
 800161c:	20002270 	.word	0x20002270
 8001620:	0800e890 	.word	0x0800e890
 8001624:	08001df5 	.word	0x08001df5
 8001628:	200008fc 	.word	0x200008fc
 800162c:	0800e8b4 	.word	0x0800e8b4
 8001630:	08001e05 	.word	0x08001e05
 8001634:	2000115c 	.word	0x2000115c
 8001638:	0800e8d8 	.word	0x0800e8d8
 800163c:	08001f11 	.word	0x08001f11
 8001640:	200019bc 	.word	0x200019bc

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b096      	sub	sp, #88	@ 0x58
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2244      	movs	r2, #68	@ 0x44
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00c fa78 	bl	800db48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001666:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800166a:	f003 fbe3 	bl	8004e34 <HAL_PWREx_ControlVoltageScaling>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001674:	f000 fc57 	bl	8001f26 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001678:	f003 fbbe 	bl	8004df8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <SystemClock_Config+0xc0>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001682:	4a20      	ldr	r2, [pc, #128]	@ (8001704 <SystemClock_Config+0xc0>)
 8001684:	f023 0318 	bic.w	r3, r3, #24
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800168c:	2314      	movs	r3, #20
 800168e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800169c:	2360      	movs	r3, #96	@ 0x60
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a0:	2302      	movs	r3, #2
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016a4:	2301      	movs	r3, #1
 80016a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016ac:	2328      	movs	r3, #40	@ 0x28
 80016ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016b0:	2307      	movs	r3, #7
 80016b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fcd9 	bl	8005078 <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016cc:	f000 fc2b 	bl	8001f26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d4:	2303      	movs	r3, #3
 80016d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	2104      	movs	r1, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 f8a1 	bl	8005830 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016f4:	f000 fc17 	bl	8001f26 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016f8:	f004 fda8 	bl	800624c <HAL_RCCEx_EnableMSIPLLMode>
}
 80016fc:	bf00      	nop
 80016fe:	3758      	adds	r7, #88	@ 0x58
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 800170e:	4a19      	ldr	r2, [pc, #100]	@ (8001774 <MX_DFSDM1_Init+0x6c>)
 8001710:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001714:	2201      	movs	r2, #1
 8001716:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001720:	2202      	movs	r2, #2
 8001722:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001736:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001740:	2204      	movs	r2, #4
 8001742:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001744:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 800174c:	2201      	movs	r2, #1
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001752:	2200      	movs	r2, #0
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 8001758:	2200      	movs	r2, #0
 800175a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	@ (8001770 <MX_DFSDM1_Init+0x68>)
 800175e:	f001 ff51 	bl	8003604 <HAL_DFSDM_ChannelInit>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001768:	f000 fbdd 	bl	8001f26 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000228 	.word	0x20000228
 8001774:	40016020 	.word	0x40016020

08001778 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_I2C2_Init+0x74>)
 800177e:	4a1c      	ldr	r2, [pc, #112]	@ (80017f0 <MX_I2C2_Init+0x78>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001782:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_I2C2_Init+0x74>)
 8001784:	4a1b      	ldr	r2, [pc, #108]	@ (80017f4 <MX_I2C2_Init+0x7c>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <MX_I2C2_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800178e:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <MX_I2C2_Init+0x74>)
 8001790:	2201      	movs	r2, #1
 8001792:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <MX_I2C2_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800179a:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_I2C2_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_I2C2_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_I2C2_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_I2C2_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b2:	480e      	ldr	r0, [pc, #56]	@ (80017ec <MX_I2C2_Init+0x74>)
 80017b4:	f002 fb9b 	bl	8003eee <HAL_I2C_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017be:	f000 fbb2 	bl	8001f26 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4809      	ldr	r0, [pc, #36]	@ (80017ec <MX_I2C2_Init+0x74>)
 80017c6:	f003 f94d 	bl	8004a64 <HAL_I2CEx_ConfigAnalogFilter>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017d0:	f000 fba9 	bl	8001f26 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4805      	ldr	r0, [pc, #20]	@ (80017ec <MX_I2C2_Init+0x74>)
 80017d8:	f003 f98f 	bl	8004afa <HAL_I2CEx_ConfigDigitalFilter>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017e2:	f000 fba0 	bl	8001f26 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000260 	.word	0x20000260
 80017f0:	40005800 	.word	0x40005800
 80017f4:	10d19ce4 	.word	0x10d19ce4

080017f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_QUADSPI_Init+0x44>)
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <MX_QUADSPI_Init+0x48>)
 8001800:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_QUADSPI_Init+0x44>)
 8001804:	2202      	movs	r2, #2
 8001806:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_QUADSPI_Init+0x44>)
 800180a:	2204      	movs	r2, #4
 800180c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <MX_QUADSPI_Init+0x44>)
 8001810:	2210      	movs	r2, #16
 8001812:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_QUADSPI_Init+0x44>)
 8001816:	2217      	movs	r2, #23
 8001818:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <MX_QUADSPI_Init+0x44>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_QUADSPI_Init+0x44>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_QUADSPI_Init+0x44>)
 8001828:	f003 fb6a 	bl	8004f00 <HAL_QSPI_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001832:	f000 fb78 	bl	8001f26 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200002b4 	.word	0x200002b4
 8001840:	a0001000 	.word	0xa0001000

08001844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 8001864:	4a20      	ldr	r2, [pc, #128]	@ (80018e8 <MX_TIM1_Init+0xa4>)
 8001866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 800186a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800186e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 8001878:	f242 720f 	movw	r2, #9999	@ 0x270f
 800187c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001890:	4814      	ldr	r0, [pc, #80]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 8001892:	f005 fafb 	bl	8006e8c <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800189c:	f000 fb43 	bl	8001f26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	4619      	mov	r1, r3
 80018ac:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 80018ae:	f005 fcbc 	bl	800722a <HAL_TIM_ConfigClockSource>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018b8:	f000 fb35 	bl	8001f26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018bc:	2320      	movs	r3, #32
 80018be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_TIM1_Init+0xa0>)
 80018ce:	f005 fedd 	bl	800768c <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018d8:	f000 fb25 	bl	8001f26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200002f8 	.word	0x200002f8
 80018e8:	40012c00 	.word	0x40012c00

080018ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <MX_TIM2_Init+0x98>)
 800190c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <MX_TIM2_Init+0x98>)
 8001914:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_TIM2_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <MX_TIM2_Init+0x98>)
 8001922:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_TIM2_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <MX_TIM2_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001934:	4813      	ldr	r0, [pc, #76]	@ (8001984 <MX_TIM2_Init+0x98>)
 8001936:	f005 faa9 	bl	8006e8c <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001940:	f000 faf1 	bl	8001f26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <MX_TIM2_Init+0x98>)
 8001952:	f005 fc6a 	bl	800722a <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800195c:	f000 fae3 	bl	8001f26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001960:	2320      	movs	r3, #32
 8001962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_TIM2_Init+0x98>)
 800196e:	f005 fe8d 	bl	800768c <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001978:	f000 fad5 	bl	8001f26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000344 	.word	0x20000344

08001988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 800198e:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <MX_USART3_UART_Init+0x5c>)
 8001990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <MX_USART3_UART_Init+0x58>)
 80019cc:	f005 ff04 	bl	80077d8 <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019d6:	f000 faa6 	bl	8001f26 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000390 	.word	0x20000390
 80019e4:	40004800 	.word	0x40004800

080019e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f6:	2206      	movs	r2, #6
 80019f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2c:	f003 f8b1 	bl	8004b92 <HAL_PCD_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a36:	f000 fa76 	bl	8001f26 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000418 	.word	0x20000418

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a5a:	4bbc      	ldr	r3, [pc, #752]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	4abb      	ldr	r2, [pc, #748]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a60:	f043 0310 	orr.w	r3, r3, #16
 8001a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a66:	4bb9      	ldr	r3, [pc, #740]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	4bb6      	ldr	r3, [pc, #728]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	4ab5      	ldr	r2, [pc, #724]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7e:	4bb3      	ldr	r3, [pc, #716]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4bb0      	ldr	r3, [pc, #704]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	4aaf      	ldr	r2, [pc, #700]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a96:	4bad      	ldr	r3, [pc, #692]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4baa      	ldr	r3, [pc, #680]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	4aa9      	ldr	r2, [pc, #676]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aae:	4ba7      	ldr	r3, [pc, #668]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	4ba4      	ldr	r3, [pc, #656]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4aa3      	ldr	r2, [pc, #652]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4ba1      	ldr	r3, [pc, #644]	@ (8001d4c <MX_GPIO_Init+0x308>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001ad8:	489d      	ldr	r0, [pc, #628]	@ (8001d50 <MX_GPIO_Init+0x30c>)
 8001ada:	f002 f9b3 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae8:	f002 f9ac 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001aec:	2200      	movs	r2, #0
 8001aee:	f24b 0114 	movw	r1, #45076	@ 0xb014
 8001af2:	4898      	ldr	r0, [pc, #608]	@ (8001d54 <MX_GPIO_Init+0x310>)
 8001af4:	f002 f9a6 	bl	8003e44 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001afe:	4896      	ldr	r0, [pc, #600]	@ (8001d58 <MX_GPIO_Init+0x314>)
 8001b00:	f002 f9a0 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b0a:	4893      	ldr	r0, [pc, #588]	@ (8001d58 <MX_GPIO_Init+0x314>)
 8001b0c:	f002 f99a 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001b16:	4891      	ldr	r0, [pc, #580]	@ (8001d5c <MX_GPIO_Init+0x318>)
 8001b18:	f002 f994 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2120      	movs	r1, #32
 8001b20:	488c      	ldr	r0, [pc, #560]	@ (8001d54 <MX_GPIO_Init+0x310>)
 8001b22:	f002 f98f 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4889      	ldr	r0, [pc, #548]	@ (8001d50 <MX_GPIO_Init+0x30c>)
 8001b2c:	f002 f98a 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001b30:	f240 1315 	movw	r3, #277	@ 0x115
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4881      	ldr	r0, [pc, #516]	@ (8001d50 <MX_GPIO_Init+0x30c>)
 8001b4a:	f001 fec5 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001b4e:	236a      	movs	r3, #106	@ 0x6a
 8001b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	487b      	ldr	r0, [pc, #492]	@ (8001d50 <MX_GPIO_Init+0x30c>)
 8001b64:	f001 feb8 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001b68:	233f      	movs	r3, #63	@ 0x3f
 8001b6a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4878      	ldr	r0, [pc, #480]	@ (8001d5c <MX_GPIO_Init+0x318>)
 8001b7c:	f001 feac 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001b80:	2303      	movs	r3, #3
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b90:	2308      	movs	r3, #8
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9e:	f001 fe9b 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001ba2:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bbe:	f001 fe8b 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bc6:	230b      	movs	r3, #11
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd8:	f001 fe7e 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001bdc:	23e0      	movs	r3, #224	@ 0xe0
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bec:	2305      	movs	r3, #5
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bfa:	f001 fe6d 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4850      	ldr	r0, [pc, #320]	@ (8001d54 <MX_GPIO_Init+0x310>)
 8001c14:	f001 fe60 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c1c:	230b      	movs	r3, #11
 8001c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	484a      	ldr	r0, [pc, #296]	@ (8001d54 <MX_GPIO_Init+0x310>)
 8001c2c:	f001 fe54 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001c30:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8001c34:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4842      	ldr	r0, [pc, #264]	@ (8001d54 <MX_GPIO_Init+0x310>)
 8001c4a:	f001 fe45 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001c4e:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001c52:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	483c      	ldr	r0, [pc, #240]	@ (8001d58 <MX_GPIO_Init+0x314>)
 8001c66:	f001 fe37 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001c6a:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4835      	ldr	r0, [pc, #212]	@ (8001d58 <MX_GPIO_Init+0x314>)
 8001c84:	f001 fe28 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001c88:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	482e      	ldr	r0, [pc, #184]	@ (8001d5c <MX_GPIO_Init+0x318>)
 8001ca2:	f001 fe19 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001ca6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4827      	ldr	r0, [pc, #156]	@ (8001d5c <MX_GPIO_Init+0x318>)
 8001cbe:	f001 fe0b 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481e      	ldr	r0, [pc, #120]	@ (8001d58 <MX_GPIO_Init+0x314>)
 8001cde:	f001 fdfb 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001ce2:	2378      	movs	r3, #120	@ 0x78
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4816      	ldr	r0, [pc, #88]	@ (8001d58 <MX_GPIO_Init+0x314>)
 8001cfe:	f001 fdeb 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001d02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d14:	2304      	movs	r3, #4
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <MX_GPIO_Init+0x310>)
 8001d20:	f001 fdda 	bl	80038d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2105      	movs	r1, #5
 8001d28:	2017      	movs	r0, #23
 8001d2a:	f001 fc34 	bl	8003596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d2e:	2017      	movs	r0, #23
 8001d30:	f001 fc4d 	bl	80035ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2105      	movs	r1, #5
 8001d38:	2028      	movs	r0, #40	@ 0x28
 8001d3a:	f001 fc2c 	bl	8003596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d3e:	2028      	movs	r0, #40	@ 0x28
 8001d40:	f001 fc45 	bl	80035ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d44:	bf00      	nop
 8001d46:	3728      	adds	r7, #40	@ 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	48001000 	.word	0x48001000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000c00 	.word	0x48000c00
 8001d5c:	48000800 	.word	0x48000800

08001d60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d130      	bne.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0x72>
		int16_t pDataXYZ[3];
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 f96d 	bl	8003054 <BSP_ACCELERO_AccGetXYZ>
		printf("%d, %d, %d\r\n", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8001d7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d8a:	4815      	ldr	r0, [pc, #84]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001d8c:	f00b fd94 	bl	800d8b8 <iprintf>

		Input_Acc_Z[cnt] = pDataXYZ[2];
 8001d90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	ee07 2a90 	vmov	s15, r2
 8001d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da0:	4a11      	ldr	r2, [pc, #68]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	edc3 7a00 	vstr	s15, [r3]
		cnt += 1;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a0c      	ldr	r2, [pc, #48]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001db2:	6013      	str	r3, [r2, #0]
		if(cnt == TEST_LENGTH_SAMPLES){
 8001db4:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d10a      	bne.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0x72>
			cnt = 0;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
			printf("before 1st Release\r\n");
 8001dc2:	480a      	ldr	r0, [pc, #40]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001dc4:	f00b fde0 	bl	800d988 <puts>
			osSemaphoreRelease(SemFilterHandle);
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f008 f8e1 	bl	8009f94 <osSemaphoreRelease>
		}
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000344 	.word	0x20000344
 8001de0:	0800e838 	.word	0x0800e838
 8001de4:	200024b4 	.word	0x200024b4
 8001de8:	200023b4 	.word	0x200023b4
 8001dec:	0800e848 	.word	0x0800e848
 8001df0:	2000221c 	.word	0x2000221c

08001df4 <StartTaskAcc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskAcc */
void StartTaskAcc(void *argument)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f007 ffd3 	bl	8009da8 <osDelay>
 8001e02:	e7fb      	b.n	8001dfc <StartTaskAcc+0x8>

08001e04 <StartTaskFilter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskFilter */
void StartTaskFilter(void *argument)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFilter */
  /* Infinite loop */
  for(;;)
  {
      osSemaphoreAcquire(SemFilterHandle, osWaitForever);
 8001e0c:	4b38      	ldr	r3, [pc, #224]	@ (8001ef0 <StartTaskFilter+0xec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	4618      	mov	r0, r3
 8001e16:	f008 f86b 	bl	8009ef0 <osSemaphoreAcquire>
//      printf("after 1st Acquire\r\n");
      uint32_t i;
      inputF32 = &Input_Acc_Z[0];
 8001e1a:	4b36      	ldr	r3, [pc, #216]	@ (8001ef4 <StartTaskFilter+0xf0>)
 8001e1c:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <StartTaskFilter+0xf4>)
 8001e1e:	601a      	str	r2, [r3, #0]
      outputF32 = &Output_Acc_Z[0];
 8001e20:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <StartTaskFilter+0xf8>)
 8001e22:	4a37      	ldr	r2, [pc, #220]	@ (8001f00 <StartTaskFilter+0xfc>)
 8001e24:	601a      	str	r2, [r3, #0]
      for(i=0; i < numBlocks; i++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e01a      	b.n	8001e62 <StartTaskFilter+0x5e>
	  {
    	  arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001e2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <StartTaskFilter+0xf0>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b34      	ldr	r3, [pc, #208]	@ (8001f04 <StartTaskFilter+0x100>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68f9      	ldr	r1, [r7, #12]
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	18d0      	adds	r0, r2, r3
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <StartTaskFilter+0xf8>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b30      	ldr	r3, [pc, #192]	@ (8001f04 <StartTaskFilter+0x100>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68f9      	ldr	r1, [r7, #12]
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	441a      	add	r2, r3
 8001e50:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <StartTaskFilter+0x100>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4601      	mov	r1, r0
 8001e56:	482c      	ldr	r0, [pc, #176]	@ (8001f08 <StartTaskFilter+0x104>)
 8001e58:	f00b f9ae 	bl	800d1b8 <arm_fir_f32>
      for(i=0; i < numBlocks; i++)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <StartTaskFilter+0x108>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d3df      	bcc.n	8001e2c <StartTaskFilter+0x28>
	  }
//      printf("before 2nd Release\r\n");s
      Acc_Update(0, inputF32);
 8001e6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <StartTaskFilter+0xf0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7fe ff38 	bl	8000ce8 <Acc_Update>
      Acc_Update(256, inputF32 + 8);
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <StartTaskFilter+0xf0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3320      	adds	r3, #32
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e84:	f7fe ff30 	bl	8000ce8 <Acc_Update>
      Acc_Update(256*2, inputF32 + 16);
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <StartTaskFilter+0xf0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3340      	adds	r3, #64	@ 0x40
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e94:	f7fe ff28 	bl	8000ce8 <Acc_Update>
      Acc_Update(256*3, inputF32 + 24);
 8001e98:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <StartTaskFilter+0xf0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3360      	adds	r3, #96	@ 0x60
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8001ea4:	f7fe ff20 	bl	8000ce8 <Acc_Update>
	  Acc_Update(256*4, outputF32);
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <StartTaskFilter+0xf8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001eb2:	f7fe ff19 	bl	8000ce8 <Acc_Update>
	  Acc_Update(256*5, outputF32 + 8);
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <StartTaskFilter+0xf8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3320      	adds	r3, #32
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001ec2:	f7fe ff11 	bl	8000ce8 <Acc_Update>
	  Acc_Update(256*6, outputF32 + 16);
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <StartTaskFilter+0xf8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3340      	adds	r3, #64	@ 0x40
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8001ed2:	f7fe ff09 	bl	8000ce8 <Acc_Update>
	  Acc_Update(256*7, outputF32 + 24);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <StartTaskFilter+0xf8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3360      	adds	r3, #96	@ 0x60
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 8001ee2:	f7fe ff01 	bl	8000ce8 <Acc_Update>
	  osDelay(1);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f007 ff5e 	bl	8009da8 <osDelay>
  {
 8001eec:	e78e      	b.n	8001e0c <StartTaskFilter+0x8>
 8001eee:	bf00      	nop
 8001ef0:	2000221c 	.word	0x2000221c
 8001ef4:	20000118 	.word	0x20000118
 8001ef8:	200023b4 	.word	0x200023b4
 8001efc:	2000011c 	.word	0x2000011c
 8001f00:	20002434 	.word	0x20002434
 8001f04:	20000004 	.word	0x20000004
 8001f08:	200024b8 	.word	0x200024b8
 8001f0c:	20000008 	.word	0x20000008

08001f10 <StartTaskVis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskVis */
void StartTaskVis(void *argument)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	//	if (set_connectable)
	//	  {
	//		Set_DeviceConnectable();
	//		set_connectable = FALSE;
	//	  }
		MX_BlueNRG_MS_Process();
 8001f18:	f7fe fde2 	bl	8000ae0 <MX_BlueNRG_MS_Process>
	//
	//	  hci_user_evt_proc();
	    osDelay(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f007 ff43 	bl	8009da8 <osDelay>
		MX_BlueNRG_MS_Process();
 8001f22:	bf00      	nop
 8001f24:	e7f8      	b.n	8001f18 <StartTaskVis+0x8>

08001f26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2a:	b672      	cpsid	i
}
 8001f2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f2e:	bf00      	nop
 8001f30:	e7fd      	b.n	8001f2e <Error_Handler+0x8>
	...

08001f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	f06f 0001 	mvn.w	r0, #1
 8001f72:	f001 fb10 	bl	8003596 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ac      	sub	sp, #176	@ 0xb0
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2288      	movs	r2, #136	@ 0x88
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00b fdcf 	bl	800db48 <memset>
  if(DFSDM1_Init == 0)
 8001faa:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d142      	bne.n	8002038 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fe58 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001fce:	f7ff ffaa 	bl	8001f26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fea:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ff0:	f043 0310 	orr.w	r3, r3, #16
 8001ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff6:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002002:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800201c:	2306      	movs	r3, #6
 800201e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002022:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002026:	4619      	mov	r1, r3
 8002028:	4807      	ldr	r0, [pc, #28]	@ (8002048 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800202a:	f001 fc55 	bl	80038d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800202e:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	4a02      	ldr	r2, [pc, #8]	@ (8002040 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002036:	6013      	str	r3, [r2, #0]
  }

}
 8002038:	bf00      	nop
 800203a:	37b0      	adds	r7, #176	@ 0xb0
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200024c4 	.word	0x200024c4
 8002044:	40021000 	.word	0x40021000
 8002048:	48001000 	.word	0x48001000

0800204c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0ac      	sub	sp, #176	@ 0xb0
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2288      	movs	r2, #136	@ 0x88
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f00b fd6b 	bl	800db48 <memset>
  if(hi2c->Instance==I2C2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a21      	ldr	r2, [pc, #132]	@ (80020fc <HAL_I2C_MspInit+0xb0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d13b      	bne.n	80020f4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002080:	2300      	movs	r3, #0
 8002082:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4618      	mov	r0, r3
 800208a:	f003 fdf5 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002094:	f7ff ff47 	bl	8001f26 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <HAL_I2C_MspInit+0xb4>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_I2C_MspInit+0xb4>)
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a4:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_I2C_MspInit+0xb4>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80020b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b8:	2312      	movs	r3, #18
 80020ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020be:	2301      	movs	r3, #1
 80020c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020ca:	2304      	movs	r3, #4
 80020cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020d4:	4619      	mov	r1, r3
 80020d6:	480b      	ldr	r0, [pc, #44]	@ (8002104 <HAL_I2C_MspInit+0xb8>)
 80020d8:	f001 fbfe 	bl	80038d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_I2C_MspInit+0xb4>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	4a07      	ldr	r2, [pc, #28]	@ (8002100 <HAL_I2C_MspInit+0xb4>)
 80020e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_I2C_MspInit+0xb4>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80020f4:	bf00      	nop
 80020f6:	37b0      	adds	r7, #176	@ 0xb0
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40005800 	.word	0x40005800
 8002100:	40021000 	.word	0x40021000
 8002104:	48000400 	.word	0x48000400

08002108 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0b      	ldr	r2, [pc, #44]	@ (8002144 <HAL_I2C_MspDeInit+0x3c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10f      	bne.n	800213a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_I2C_MspDeInit+0x40>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_I2C_MspDeInit+0x40>)
 8002120:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002124:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002126:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800212a:	4808      	ldr	r0, [pc, #32]	@ (800214c <HAL_I2C_MspDeInit+0x44>)
 800212c:	f001 fd7e 	bl	8003c2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002130:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002134:	4805      	ldr	r0, [pc, #20]	@ (800214c <HAL_I2C_MspDeInit+0x44>)
 8002136:	f001 fd79 	bl	8003c2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40005800 	.word	0x40005800
 8002148:	40021000 	.word	0x40021000
 800214c:	48000400 	.word	0x48000400

08002150 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_QSPI_MspInit+0x7c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d128      	bne.n	80021c4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <HAL_QSPI_MspInit+0x80>)
 8002174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002176:	4a16      	ldr	r2, [pc, #88]	@ (80021d0 <HAL_QSPI_MspInit+0x80>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217c:	6513      	str	r3, [r2, #80]	@ 0x50
 800217e:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_QSPI_MspInit+0x80>)
 8002180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_QSPI_MspInit+0x80>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <HAL_QSPI_MspInit+0x80>)
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <HAL_QSPI_MspInit+0x80>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80021a2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80021a6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021b4:	230a      	movs	r3, #10
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <HAL_QSPI_MspInit+0x84>)
 80021c0:	f001 fb8a 	bl	80038d8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	@ 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	a0001000 	.word	0xa0001000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	48001000 	.word	0x48001000

080021d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a24      	ldr	r2, [pc, #144]	@ (8002288 <HAL_TIM_Base_MspInit+0xb0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10c      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fa:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	4a23      	ldr	r2, [pc, #140]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 8002200:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002204:	6613      	str	r3, [r2, #96]	@ 0x60
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002212:	e035      	b.n	8002280 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221c:	d130      	bne.n	8002280 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221e:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a1a      	ldr	r2, [pc, #104]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
 800222a:	4b18      	ldr	r3, [pc, #96]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a14      	ldr	r2, [pc, #80]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_TIM_Base_MspInit+0xb4>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800224e:	2308      	movs	r3, #8
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225e:	2301      	movs	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800226c:	f001 fb34 	bl	80038d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2105      	movs	r1, #5
 8002274:	201c      	movs	r0, #28
 8002276:	f001 f98e 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800227a:	201c      	movs	r0, #28
 800227c:	f001 f9a7 	bl	80035ce <HAL_NVIC_EnableIRQ>
}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	@ 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ac      	sub	sp, #176	@ 0xb0
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2288      	movs	r2, #136	@ 0x88
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b fc49 	bl	800db48 <memset>
  if(huart->Instance==USART3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a21      	ldr	r2, [pc, #132]	@ (8002340 <HAL_UART_MspInit+0xb0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d13b      	bne.n	8002338 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022c0:	2304      	movs	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fcd3 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022d8:	f7ff fe25 	bl	8001f26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_UART_MspInit+0xb4>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	4a18      	ldr	r2, [pc, #96]	@ (8002344 <HAL_UART_MspInit+0xb4>)
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <HAL_UART_MspInit+0xb4>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_UART_MspInit+0xb4>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <HAL_UART_MspInit+0xb4>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002300:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_UART_MspInit+0xb4>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800230c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002326:	2307      	movs	r3, #7
 8002328:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002330:	4619      	mov	r1, r3
 8002332:	4805      	ldr	r0, [pc, #20]	@ (8002348 <HAL_UART_MspInit+0xb8>)
 8002334:	f001 fad0 	bl	80038d8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002338:	bf00      	nop
 800233a:	37b0      	adds	r7, #176	@ 0xb0
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40004800 	.word	0x40004800
 8002344:	40021000 	.word	0x40021000
 8002348:	48000c00 	.word	0x48000c00

0800234c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0ac      	sub	sp, #176	@ 0xb0
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2288      	movs	r2, #136	@ 0x88
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f00b fbeb 	bl	800db48 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800237a:	d17c      	bne.n	8002476 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800237c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002380:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002382:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002386:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002392:	2318      	movs	r3, #24
 8002394:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002396:	2307      	movs	r3, #7
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800239a:	2302      	movs	r3, #2
 800239c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800239e:	2302      	movs	r3, #2
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80023a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fc63 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80023b8:	f7ff fdb5 	bl	8001f26 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	4b30      	ldr	r3, [pc, #192]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023ec:	4619      	mov	r1, r3
 80023ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f2:	f001 fa71 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80023fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002410:	230a      	movs	r3, #10
 8002412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800241a:	4619      	mov	r1, r3
 800241c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002420:	f001 fa5a 	bl	80038d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 8002426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002428:	4a15      	ldr	r2, [pc, #84]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 800242a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800242e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243c:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d114      	bne.n	8002472 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	4a0c      	ldr	r2, [pc, #48]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002452:	6593      	str	r3, [r2, #88]	@ 0x58
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002460:	f002 fd3e 	bl	8004ee0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <HAL_PCD_MspInit+0x134>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002470:	e001      	b.n	8002476 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002472:	f002 fd35 	bl	8004ee0 <HAL_PWREx_EnableVddUSB>
}
 8002476:	bf00      	nop
 8002478:	37b0      	adds	r7, #176	@ 0xb0
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <NMI_Handler+0x4>

0800248c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <HardFault_Handler+0x4>

08002494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <MemManage_Handler+0x4>

0800249c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <UsageFault_Handler+0x4>

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024be:	f000 ff4b 	bl	8003358 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80024c2:	f009 fce9 	bl	800be98 <xTaskGetSchedulerState>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d001      	beq.n	80024d0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80024cc:	f00a fbe4 	bl	800cc98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80024d8:	2020      	movs	r0, #32
 80024da:	f001 fce5 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80024de:	4806      	ldr	r0, [pc, #24]	@ (80024f8 <EXTI9_5_IRQHandler+0x24>)
 80024e0:	f001 f9ca 	bl	8003878 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80024e4:	2080      	movs	r0, #128	@ 0x80
 80024e6:	f001 fcdf 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80024ea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80024ee:	f001 fcdb 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000120 	.word	0x20000120

080024fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <TIM2_IRQHandler+0x10>)
 8002502:	f004 fd8b 	bl	800701c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000344 	.word	0x20000344

08002510 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002514:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002518:	f001 fcc6 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800251c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002520:	f001 fcc2 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002524:	4806      	ldr	r0, [pc, #24]	@ (8002540 <EXTI15_10_IRQHandler+0x30>)
 8002526:	f001 f9a7 	bl	8003878 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800252a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800252e:	f001 fcbb 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002532:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002536:	f001 fcb7 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000018 	.word	0x20000018

08002544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return 1;
 8002548:	2301      	movs	r3, #1
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_kill>:

int _kill(int pid, int sig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800255e:	f00b fb41 	bl	800dbe4 <__errno>
 8002562:	4603      	mov	r3, r0
 8002564:	2216      	movs	r2, #22
 8002566:	601a      	str	r2, [r3, #0]
  return -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_exit>:

void _exit (int status)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ffe7 	bl	8002554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002586:	bf00      	nop
 8002588:	e7fd      	b.n	8002586 <_exit+0x12>

0800258a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e00a      	b.n	80025b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800259c:	f3af 8000 	nop.w
 80025a0:	4601      	mov	r1, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	60ba      	str	r2, [r7, #8]
 80025a8:	b2ca      	uxtb	r2, r1
 80025aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3301      	adds	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	dbf0      	blt.n	800259c <_read+0x12>
  }

  return len;
 80025ba:	687b      	ldr	r3, [r7, #4]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e009      	b.n	80025ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	60ba      	str	r2, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fb8e 	bl	8002d00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3301      	adds	r3, #1
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dbf1      	blt.n	80025d6 <_write+0x12>
  }
  return len;
 80025f2:	687b      	ldr	r3, [r7, #4]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_close>:

int _close(int file)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002624:	605a      	str	r2, [r3, #4]
  return 0;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_isatty>:

int _isatty(int file)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800266c:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <_sbrk+0x5c>)
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <_sbrk+0x60>)
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002678:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <_sbrk+0x64>)
 8002682:	4a12      	ldr	r2, [pc, #72]	@ (80026cc <_sbrk+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	429a      	cmp	r2, r3
 8002692:	d207      	bcs.n	80026a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002694:	f00b faa6 	bl	800dbe4 <__errno>
 8002698:	4603      	mov	r3, r0
 800269a:	220c      	movs	r2, #12
 800269c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e009      	b.n	80026b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a05      	ldr	r2, [pc, #20]	@ (80026c8 <_sbrk+0x64>)
 80026b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20018000 	.word	0x20018000
 80026c4:	00000400 	.word	0x00000400
 80026c8:	200024c8 	.word	0x200024c8
 80026cc:	20004380 	.word	0x20004380

080026d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <SystemInit+0x20>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026da:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <SystemInit+0x20>)
 80026dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800272c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f8:	f7ff ffea 	bl	80026d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026fc:	480c      	ldr	r0, [pc, #48]	@ (8002730 <LoopForever+0x6>)
  ldr r1, =_edata
 80026fe:	490d      	ldr	r1, [pc, #52]	@ (8002734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <LoopForever+0xe>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002714:	4c0a      	ldr	r4, [pc, #40]	@ (8002740 <LoopForever+0x16>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002722:	f00b fa65 	bl	800dbf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002726:	f7fe ff13 	bl	8001550 <main>

0800272a <LoopForever>:

LoopForever:
    b LoopForever
 800272a:	e7fe      	b.n	800272a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800272c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002734:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002738:	0800eadc 	.word	0x0800eadc
  ldr r2, =_sbss
 800273c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002740:	20004380 	.word	0x20004380

08002744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002744:	e7fe      	b.n	8002744 <ADC1_2_IRQHandler>
	...

08002748 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	4a04      	ldr	r2, [pc, #16]	@ (8002768 <BSP_LED_Init+0x20>)
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	0800e9d8 	.word	0x0800e9d8

0800276c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4a06      	ldr	r2, [pc, #24]	@ (8002794 <BSP_LED_Toggle+0x28>)
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fb75 	bl	8003e74 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000010 	.word	0x20000010

08002798 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <LED_USER_GPIO_Init+0x78>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <LED_USER_GPIO_Init+0x78>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027aa:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <LED_USER_GPIO_Init+0x78>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <LED_USER_GPIO_Init+0x78>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ca:	4a11      	ldr	r2, [pc, #68]	@ (8002810 <LED_USER_GPIO_Init+0x78>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <LED_USER_GPIO_Init+0x78>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027e4:	480b      	ldr	r0, [pc, #44]	@ (8002814 <LED_USER_GPIO_Init+0x7c>)
 80027e6:	f001 fb2d 	bl	8003e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80027ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	4619      	mov	r1, r3
 8002802:	4804      	ldr	r0, [pc, #16]	@ (8002814 <LED_USER_GPIO_Init+0x7c>)
 8002804:	f001 f868 	bl	80038d8 <HAL_GPIO_Init>

}
 8002808:	bf00      	nop
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000
 8002814:	48000400 	.word	0x48000400

08002818 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	460a      	mov	r2, r1
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	4613      	mov	r3, r2
 8002826:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <BSP_PB_Init+0x94>)
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002836:	79bb      	ldrb	r3, [r7, #6]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d132      	bne.n	80028a2 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <BSP_PB_Init+0x98>)
 8002842:	441a      	add	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	491b      	ldr	r1, [pc, #108]	@ (80028b4 <BSP_PB_Init+0x9c>)
 8002848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f000 fffe 	bl	8003850 <HAL_EXTI_GetHandle>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800285a:	f06f 0303 	mvn.w	r3, #3
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e01f      	b.n	80028a2 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <BSP_PB_Init+0x98>)
 8002868:	1898      	adds	r0, r3, r2
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <BSP_PB_Init+0xa0>)
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	461a      	mov	r2, r3
 8002874:	2100      	movs	r1, #0
 8002876:	f000 ffd1 	bl	800381c <HAL_EXTI_RegisterCallback>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002880:	f06f 0303 	mvn.w	r3, #3
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e00c      	b.n	80028a2 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002888:	2028      	movs	r0, #40	@ 0x28
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <BSP_PB_Init+0xa4>)
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	2200      	movs	r2, #0
 8002894:	4619      	mov	r1, r3
 8002896:	f000 fe7e 	bl	8003596 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800289a:	2328      	movs	r3, #40	@ 0x28
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fe96 	bl	80035ce <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	0800e9dc 	.word	0x0800e9dc
 80028b0:	20000018 	.word	0x20000018
 80028b4:	0800e9e0 	.word	0x0800e9e0
 80028b8:	0800e9e4 	.word	0x0800e9e4
 80028bc:	0800e9e8 	.word	0x0800e9e8

080028c0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4a09      	ldr	r2, [pc, #36]	@ (80028f4 <BSP_PB_GetState+0x34>)
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 fa9b 	bl	8003e14 <HAL_GPIO_ReadPin>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000014 	.word	0x20000014

080028f8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7fe f919 	bl	8000b34 <BSP_PB_Callback>
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290e:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <BUTTON_USER_GPIO_Init+0x6c>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <BUTTON_USER_GPIO_Init+0x6c>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291a:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <BUTTON_USER_GPIO_Init+0x6c>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002936:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <BUTTON_USER_GPIO_Init+0x6c>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	4a0e      	ldr	r2, [pc, #56]	@ (8002974 <BUTTON_USER_GPIO_Init+0x6c>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002942:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <BUTTON_USER_GPIO_Init+0x6c>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800294e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002954:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	4619      	mov	r1, r3
 8002964:	4804      	ldr	r0, [pc, #16]	@ (8002978 <BUTTON_USER_GPIO_Init+0x70>)
 8002966:	f000 ffb7 	bl	80038d8 <HAL_GPIO_Init>

}
 800296a:	bf00      	nop
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	48000800 	.word	0x48000800

0800297c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d903      	bls.n	8002998 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002990:	f06f 0301 	mvn.w	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e025      	b.n	80029e4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	79fa      	ldrb	r2, [r7, #7]
 800299c:	4914      	ldr	r1, [pc, #80]	@ (80029f0 <BSP_COM_Init+0x74>)
 800299e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80029a2:	4814      	ldr	r0, [pc, #80]	@ (80029f4 <BSP_COM_Init+0x78>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4403      	add	r3, r0
 80029ae:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80029b0:	79fa      	ldrb	r2, [r7, #7]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <BSP_COM_Init+0x78>)
 80029bc:	4413      	add	r3, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f9ba 	bl	8002d38 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80029c4:	79fa      	ldrb	r2, [r7, #7]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <BSP_COM_Init+0x78>)
 80029d0:	4413      	add	r3, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f960 	bl	8002c98 <MX_USART1_UART_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80029de:	f06f 0303 	mvn.w	r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80029e4:	68fb      	ldr	r3, [r7, #12]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000020 	.word	0x20000020
 80029f4:	200024cc 	.word	0x200024cc

080029f8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002a00:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	4a26      	ldr	r2, [pc, #152]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0c:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002a18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a1c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002a1e:	2312      	movs	r3, #18
 8002a20:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	481b      	ldr	r0, [pc, #108]	@ (8002aa4 <I2Cx_MspInit+0xac>)
 8002a36:	f000 ff4f 	bl	80038d8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4818      	ldr	r0, [pc, #96]	@ (8002aa4 <I2Cx_MspInit+0xac>)
 8002a42:	f000 ff49 	bl	80038d8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002a46:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4a:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a52:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a68:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa0 <I2Cx_MspInit+0xa8>)
 8002a70:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	210f      	movs	r1, #15
 8002a7a:	2021      	movs	r0, #33	@ 0x21
 8002a7c:	f000 fd8b 	bl	8003596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002a80:	2021      	movs	r0, #33	@ 0x21
 8002a82:	f000 fda4 	bl	80035ce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	210f      	movs	r1, #15
 8002a8a:	2022      	movs	r0, #34	@ 0x22
 8002a8c:	f000 fd83 	bl	8003596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002a90:	2022      	movs	r0, #34	@ 0x22
 8002a92:	f000 fd9c 	bl	80035ce <HAL_NVIC_EnableIRQ>
}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	@ 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	48000400 	.word	0x48000400

08002aa8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <I2Cx_Init+0x54>)
 8002ab4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a11      	ldr	r2, [pc, #68]	@ (8002b00 <I2Cx_Init+0x58>)
 8002aba:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff89 	bl	80029f8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f001 fa01 	bl	8003eee <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8002aec:	2100      	movs	r1, #0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 ffb8 	bl	8004a64 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40005800 	.word	0x40005800
 8002b00:	00702681 	.word	0x00702681

08002b04 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	@ 0x28
 8002b08:	af04      	add	r7, sp, #16
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	72fb      	strb	r3, [r7, #11]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	b299      	uxth	r1, r3
 8002b26:	88f8      	ldrh	r0, [r7, #6]
 8002b28:	893a      	ldrh	r2, [r7, #8]
 8002b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b2e:	9302      	str	r3, [sp, #8]
 8002b30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4603      	mov	r3, r0
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f001 fbb6 	bl	80042ac <HAL_I2C_Mem_Read>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f832 	bl	8002bb8 <I2Cx_Error>
  }
  return status;
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b08a      	sub	sp, #40	@ 0x28
 8002b62:	af04      	add	r7, sp, #16
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	4608      	mov	r0, r1
 8002b68:	4611      	mov	r1, r2
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	72fb      	strb	r3, [r7, #11]
 8002b70:	460b      	mov	r3, r1
 8002b72:	813b      	strh	r3, [r7, #8]
 8002b74:	4613      	mov	r3, r2
 8002b76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	b299      	uxth	r1, r3
 8002b80:	88f8      	ldrh	r0, [r7, #6]
 8002b82:	893a      	ldrh	r2, [r7, #8]
 8002b84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b88:	9302      	str	r3, [sp, #8]
 8002b8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	4603      	mov	r3, r0
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f001 fa75 	bl	8004084 <HAL_I2C_Mem_Write>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f805 	bl	8002bb8 <I2Cx_Error>
  }
  return status;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f001 fa2d 	bl	8004024 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ff6c 	bl	8002aa8 <I2Cx_Init>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002bdc:	4802      	ldr	r0, [pc, #8]	@ (8002be8 <SENSOR_IO_Init+0x10>)
 8002bde:	f7ff ff63 	bl	8002aa8 <I2Cx_Init>
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20002558 	.word	0x20002558

08002bec <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	71bb      	strb	r3, [r7, #6]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	79f9      	ldrb	r1, [r7, #7]
 8002c04:	2301      	movs	r3, #1
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	1d7b      	adds	r3, r7, #5
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	4803      	ldr	r0, [pc, #12]	@ (8002c1c <SENSOR_IO_Write+0x30>)
 8002c10:	f7ff ffa5 	bl	8002b5e <I2Cx_WriteMultiple>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20002558 	.word	0x20002558

08002c20 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	4603      	mov	r3, r0
 8002c28:	460a      	mov	r2, r1
 8002c2a:	71fb      	strb	r3, [r7, #7]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002c34:	79bb      	ldrb	r3, [r7, #6]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	79f9      	ldrb	r1, [r7, #7]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	f107 030f 	add.w	r3, r7, #15
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	4804      	ldr	r0, [pc, #16]	@ (8002c58 <SENSOR_IO_Read+0x38>)
 8002c48:	f7ff ff5c 	bl	8002b04 <I2Cx_ReadMultiple>

  return read_value;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20002558 	.word	0x20002558

08002c5c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	603a      	str	r2, [r7, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	71bb      	strb	r3, [r7, #6]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002c72:	79bb      	ldrb	r3, [r7, #6]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	79f9      	ldrb	r1, [r7, #7]
 8002c78:	88bb      	ldrh	r3, [r7, #4]
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2301      	movs	r3, #1
 8002c82:	4804      	ldr	r0, [pc, #16]	@ (8002c94 <SENSOR_IO_ReadMultiple+0x38>)
 8002c84:	f7ff ff3e 	bl	8002b04 <I2Cx_ReadMultiple>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20002558 	.word	0x20002558

08002c98 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a15      	ldr	r2, [pc, #84]	@ (8002cfc <MX_USART1_UART_Init+0x64>)
 8002ca8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cb0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f004 fd78 	bl	80077d8 <HAL_UART_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40013800 	.word	0x40013800

08002d00 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002d08:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <__io_putchar+0x30>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4a07      	ldr	r2, [pc, #28]	@ (8002d34 <__io_putchar+0x34>)
 8002d18:	1898      	adds	r0, r3, r2
 8002d1a:	1d39      	adds	r1, r7, #4
 8002d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d20:	2201      	movs	r2, #1
 8002d22:	f004 fda7 	bl	8007874 <HAL_UART_Transmit>
  return ch;
 8002d26:	687b      	ldr	r3, [r7, #4]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20002554 	.word	0x20002554
 8002d34:	200024cc 	.word	0x200024cc

08002d38 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0ac      	sub	sp, #176	@ 0xb0
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2288      	movs	r2, #136	@ 0x88
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f00a fefd 	bl	800db48 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d52:	2300      	movs	r3, #0
 8002d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 ff8c 	bl	8005c78 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d60:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <USART1_MspInit+0xb4>)
 8002d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d64:	4a21      	ldr	r2, [pc, #132]	@ (8002dec <USART1_MspInit+0xb4>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <USART1_MspInit+0xb4>)
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d78:	4b1c      	ldr	r3, [pc, #112]	@ (8002dec <USART1_MspInit+0xb4>)
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dec <USART1_MspInit+0xb4>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d84:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <USART1_MspInit+0xb4>)
 8002d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8002d90:	2340      	movs	r3, #64	@ 0x40
 8002d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8002da8:	2307      	movs	r3, #7
 8002daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002dae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002db2:	4619      	mov	r1, r3
 8002db4:	480e      	ldr	r0, [pc, #56]	@ (8002df0 <USART1_MspInit+0xb8>)
 8002db6:	f000 fd8f 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8002dba:	2380      	movs	r3, #128	@ 0x80
 8002dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8002dd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4804      	ldr	r0, [pc, #16]	@ (8002df0 <USART1_MspInit+0xb8>)
 8002de0:	f000 fd7a 	bl	80038d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8002de4:	bf00      	nop
 8002de6:	37b0      	adds	r7, #176	@ 0xb0
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	48000400 	.word	0x48000400

08002df4 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8002dfe:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <BSP_SPI3_Init+0x54>)
 8002e00:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <BSP_SPI3_Init+0x58>)
 8002e02:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <BSP_SPI3_Init+0x5c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	4911      	ldr	r1, [pc, #68]	@ (8002e50 <BSP_SPI3_Init+0x5c>)
 8002e0c:	600a      	str	r2, [r1, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d114      	bne.n	8002e3c <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8002e12:	480d      	ldr	r0, [pc, #52]	@ (8002e48 <BSP_SPI3_Init+0x54>)
 8002e14:	f003 fec8 	bl	8006ba8 <HAL_SPI_GetState>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10e      	bne.n	8002e3c <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8002e1e:	480a      	ldr	r0, [pc, #40]	@ (8002e48 <BSP_SPI3_Init+0x54>)
 8002e20:	f000 f882 	bl	8002f28 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8002e2a:	4807      	ldr	r0, [pc, #28]	@ (8002e48 <BSP_SPI3_Init+0x54>)
 8002e2c:	f000 f83a 	bl	8002ea4 <MX_SPI3_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002e36:	f06f 0307 	mvn.w	r3, #7
 8002e3a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002e3c:	687b      	ldr	r3, [r7, #4]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200025ac 	.word	0x200025ac
 8002e4c:	40003c00 	.word	0x40003c00
 8002e50:	20002610 	.word	0x20002610

08002e54 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e6c:	9200      	str	r2, [sp, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	4807      	ldr	r0, [pc, #28]	@ (8002e90 <BSP_SPI3_SendRecv+0x3c>)
 8002e74:	f003 fc79 	bl	800676a <HAL_SPI_TransmitReceive>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002e7e:	f06f 0305 	mvn.w	r3, #5
 8002e82:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8002e84:	697b      	ldr	r3, [r7, #20]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200025ac 	.word	0x200025ac

08002e94 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002e98:	f000 fa72 	bl	8003380 <HAL_GetTick>
 8002e9c:	4603      	mov	r3, r0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f24 <MX_SPI3_Init+0x80>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ebc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002eca:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ede:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2207      	movs	r2, #7
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2208      	movs	r2, #8
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f003 fb80 	bl	8006610 <HAL_SPI_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40003c00 	.word	0x40003c00

08002f28 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	@ 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f30:	4b27      	ldr	r3, [pc, #156]	@ (8002fd0 <SPI3_MspInit+0xa8>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	4a26      	ldr	r2, [pc, #152]	@ (8002fd0 <SPI3_MspInit+0xa8>)
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f3c:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <SPI3_MspInit+0xa8>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f48:	4b21      	ldr	r3, [pc, #132]	@ (8002fd0 <SPI3_MspInit+0xa8>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4c:	4a20      	ldr	r2, [pc, #128]	@ (8002fd0 <SPI3_MspInit+0xa8>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f54:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <SPI3_MspInit+0xa8>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8002f60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8002f72:	2306      	movs	r3, #6
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4815      	ldr	r0, [pc, #84]	@ (8002fd4 <SPI3_MspInit+0xac>)
 8002f7e:	f000 fcab 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8002f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8002f94:	2306      	movs	r3, #6
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480d      	ldr	r0, [pc, #52]	@ (8002fd4 <SPI3_MspInit+0xac>)
 8002fa0:	f000 fc9a 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4804      	ldr	r0, [pc, #16]	@ (8002fd4 <SPI3_MspInit+0xac>)
 8002fc2:	f000 fc89 	bl	80038d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	3728      	adds	r7, #40	@ 0x28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	48000800 	.word	0x48000800

08002fd8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002fe6:	4b19      	ldr	r3, [pc, #100]	@ (800304c <BSP_ACCELERO_Init+0x74>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4798      	blx	r3
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b6a      	cmp	r3, #106	@ 0x6a
 8002ff0:	d002      	beq.n	8002ff8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e024      	b.n	8003042 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <BSP_ACCELERO_Init+0x78>)
 8002ffa:	4a14      	ldr	r2, [pc, #80]	@ (800304c <BSP_ACCELERO_Init+0x74>)
 8002ffc:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002ffe:	2330      	movs	r3, #48	@ 0x30
 8003000:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003006:	2300      	movs	r3, #0
 8003008:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800300a:	2340      	movs	r3, #64	@ 0x40
 800300c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003016:	797a      	ldrb	r2, [r7, #5]
 8003018:	7abb      	ldrb	r3, [r7, #10]
 800301a:	4313      	orrs	r3, r2
 800301c:	b2db      	uxtb	r3, r3
 800301e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003020:	7a3b      	ldrb	r3, [r7, #8]
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	b2db      	uxtb	r3, r3
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	b21a      	sxth	r2, r3
 800302c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	b21b      	sxth	r3, r3
 8003034:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <BSP_ACCELERO_Init+0x78>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	89ba      	ldrh	r2, [r7, #12]
 800303e:	4610      	mov	r0, r2
 8003040:	4798      	blx	r3
  }  

  return ret;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000024 	.word	0x20000024
 8003050:	20002614 	.word	0x20002614

08003054 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800306e:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20002614 	.word	0x20002614

08003084 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003092:	2110      	movs	r1, #16
 8003094:	20d4      	movs	r0, #212	@ 0xd4
 8003096:	f7ff fdc3 	bl	8002c20 <SENSOR_IO_Read>
 800309a:	4603      	mov	r3, r0
 800309c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80030a2:	7bbb      	ldrb	r3, [r7, #14]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80030aa:	7bba      	ldrb	r2, [r7, #14]
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80030b2:	7bbb      	ldrb	r3, [r7, #14]
 80030b4:	461a      	mov	r2, r3
 80030b6:	2110      	movs	r1, #16
 80030b8:	20d4      	movs	r0, #212	@ 0xd4
 80030ba:	f7ff fd97 	bl	8002bec <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80030be:	2112      	movs	r1, #18
 80030c0:	20d4      	movs	r0, #212	@ 0xd4
 80030c2:	f7ff fdad 	bl	8002c20 <SENSOR_IO_Read>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80030d8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80030da:	7bba      	ldrb	r2, [r7, #14]
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	4313      	orrs	r3, r2
 80030e0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80030e2:	7bbb      	ldrb	r3, [r7, #14]
 80030e4:	461a      	mov	r2, r3
 80030e6:	2112      	movs	r1, #18
 80030e8:	20d4      	movs	r0, #212	@ 0xd4
 80030ea:	f7ff fd7f 	bl	8002bec <SENSOR_IO_Write>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80030fc:	2300      	movs	r3, #0
 80030fe:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003100:	2110      	movs	r1, #16
 8003102:	20d4      	movs	r0, #212	@ 0xd4
 8003104:	f7ff fd8c 	bl	8002c20 <SENSOR_IO_Read>
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	461a      	mov	r2, r3
 8003118:	2110      	movs	r1, #16
 800311a:	20d4      	movs	r0, #212	@ 0xd4
 800311c:	f7ff fd66 	bl	8002bec <SENSOR_IO_Write>
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800312c:	f7ff fd54 	bl	8002bd8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003130:	210f      	movs	r1, #15
 8003132:	20d4      	movs	r0, #212	@ 0xd4
 8003134:	f7ff fd74 	bl	8002c20 <SENSOR_IO_Read>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	bd80      	pop	{r7, pc}

0800313e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800314c:	2115      	movs	r1, #21
 800314e:	20d4      	movs	r0, #212	@ 0xd4
 8003150:	f7ff fd66 	bl	8002c20 <SENSOR_IO_Read>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	f023 0310 	bic.w	r3, r3, #16
 800315e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	461a      	mov	r2, r3
 8003172:	2115      	movs	r1, #21
 8003174:	20d4      	movs	r0, #212	@ 0xd4
 8003176:	f7ff fd39 	bl	8002bec <SENSOR_IO_Write>
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800319a:	2110      	movs	r1, #16
 800319c:	20d4      	movs	r0, #212	@ 0xd4
 800319e:	f7ff fd3f 	bl	8002c20 <SENSOR_IO_Read>
 80031a2:	4603      	mov	r3, r0
 80031a4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80031a6:	f107 0208 	add.w	r2, r7, #8
 80031aa:	2306      	movs	r3, #6
 80031ac:	2128      	movs	r1, #40	@ 0x28
 80031ae:	20d4      	movs	r0, #212	@ 0xd4
 80031b0:	f7ff fd54 	bl	8002c5c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e01a      	b.n	80031f0 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	3301      	adds	r3, #1
 80031c0:	3320      	adds	r3, #32
 80031c2:	443b      	add	r3, r7
 80031c4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	7ffa      	ldrb	r2, [r7, #31]
 80031ce:	0052      	lsls	r2, r2, #1
 80031d0:	3220      	adds	r2, #32
 80031d2:	443a      	add	r2, r7
 80031d4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80031d8:	4413      	add	r3, r2
 80031da:	b29a      	uxth	r2, r3
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	b212      	sxth	r2, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	3320      	adds	r3, #32
 80031e4:	443b      	add	r3, r7
 80031e6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	3301      	adds	r3, #1
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d9e1      	bls.n	80031ba <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	d829      	bhi.n	8003254 <LSM6DSL_AccReadXYZ+0xd0>
 8003200:	a201      	add	r2, pc, #4	@ (adr r2, 8003208 <LSM6DSL_AccReadXYZ+0x84>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003255 	.word	0x08003255
 8003210:	08003255 	.word	0x08003255
 8003214:	08003255 	.word	0x08003255
 8003218:	0800324f 	.word	0x0800324f
 800321c:	08003255 	.word	0x08003255
 8003220:	08003255 	.word	0x08003255
 8003224:	08003255 	.word	0x08003255
 8003228:	08003243 	.word	0x08003243
 800322c:	08003255 	.word	0x08003255
 8003230:	08003255 	.word	0x08003255
 8003234:	08003255 	.word	0x08003255
 8003238:	08003249 	.word	0x08003249
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800323c:	4b18      	ldr	r3, [pc, #96]	@ (80032a0 <LSM6DSL_AccReadXYZ+0x11c>)
 800323e:	61bb      	str	r3, [r7, #24]
    break;
 8003240:	e008      	b.n	8003254 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003242:	4b18      	ldr	r3, [pc, #96]	@ (80032a4 <LSM6DSL_AccReadXYZ+0x120>)
 8003244:	61bb      	str	r3, [r7, #24]
    break;
 8003246:	e005      	b.n	8003254 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003248:	4b17      	ldr	r3, [pc, #92]	@ (80032a8 <LSM6DSL_AccReadXYZ+0x124>)
 800324a:	61bb      	str	r3, [r7, #24]
    break;
 800324c:	e002      	b.n	8003254 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800324e:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <LSM6DSL_AccReadXYZ+0x128>)
 8003250:	61bb      	str	r3, [r7, #24]
    break;    
 8003252:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e01a      	b.n	8003290 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800325a:	7ffb      	ldrb	r3, [r7, #31]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	3320      	adds	r3, #32
 8003260:	443b      	add	r3, r7
 8003262:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800326e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003276:	7ffb      	ldrb	r3, [r7, #31]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003282:	ee17 2a90 	vmov	r2, s15
 8003286:	b212      	sxth	r2, r2
 8003288:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800328a:	7ffb      	ldrb	r3, [r7, #31]
 800328c:	3301      	adds	r3, #1
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	7ffb      	ldrb	r3, [r7, #31]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d9e1      	bls.n	800325a <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	3d79db23 	.word	0x3d79db23
 80032a4:	3df9db23 	.word	0x3df9db23
 80032a8:	3e79db23 	.word	0x3e79db23
 80032ac:	3ef9db23 	.word	0x3ef9db23

080032b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ba:	2003      	movs	r0, #3
 80032bc:	f000 f960 	bl	8003580 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032c0:	200f      	movs	r0, #15
 80032c2:	f000 f80d 	bl	80032e0 <HAL_InitTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	e001      	b.n	80032d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032d2:	f7fe fe2f 	bl	8001f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032d6:	79fb      	ldrb	r3, [r7, #7]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <HAL_InitTick+0x6c>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d023      	beq.n	800333c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032f4:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_InitTick+0x70>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b14      	ldr	r3, [pc, #80]	@ (800334c <HAL_InitTick+0x6c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003302:	fbb3 f3f1 	udiv	r3, r3, r1
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f96d 	bl	80035ea <HAL_SYSTICK_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d809      	bhi.n	8003330 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800331c:	2200      	movs	r2, #0
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f000 f937 	bl	8003596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003328:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <HAL_InitTick+0x74>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e007      	b.n	8003340 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e004      	b.n	8003340 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e001      	b.n	8003340 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	2000005c 	.word	0x2000005c
 8003350:	2000000c 	.word	0x2000000c
 8003354:	20000058 	.word	0x20000058

08003358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <HAL_IncTick+0x20>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_IncTick+0x24>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	@ (800337c <HAL_IncTick+0x24>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	2000005c 	.word	0x2000005c
 800337c:	20002618 	.word	0x20002618

08003380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_GetTick+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20002618 	.word	0x20002618

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff ffee 	bl	8003380 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d005      	beq.n	80033be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033b2:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <HAL_Delay+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033be:	bf00      	nop
 80033c0:	f7ff ffde 	bl	8003380 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d8f7      	bhi.n	80033c0 <HAL_Delay+0x28>
  {
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000005c 	.word	0x2000005c

080033e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033fc:	4013      	ands	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342c:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <__NVIC_GetPriorityGrouping+0x18>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0307 	and.w	r3, r3, #7
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	db0b      	blt.n	800346e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4907      	ldr	r1, [pc, #28]	@ (800347c <__NVIC_EnableIRQ+0x38>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2001      	movs	r0, #1
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100

08003480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db0a      	blt.n	80034aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	490c      	ldr	r1, [pc, #48]	@ (80034cc <__NVIC_SetPriority+0x4c>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	440b      	add	r3, r1
 80034a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a8:	e00a      	b.n	80034c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4908      	ldr	r1, [pc, #32]	@ (80034d0 <__NVIC_SetPriority+0x50>)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3b04      	subs	r3, #4
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	440b      	add	r3, r1
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	@ 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f1c3 0307 	rsb	r3, r3, #7
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	bf28      	it	cs
 80034f2:	2304      	movcs	r3, #4
 80034f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d902      	bls.n	8003504 <NVIC_EncodePriority+0x30>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3b03      	subs	r3, #3
 8003502:	e000      	b.n	8003506 <NVIC_EncodePriority+0x32>
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	401a      	ands	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800351c:	f04f 31ff 	mov.w	r1, #4294967295
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	43d9      	mvns	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	4313      	orrs	r3, r2
         );
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	@ 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800354c:	d301      	bcc.n	8003552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354e:	2301      	movs	r3, #1
 8003550:	e00f      	b.n	8003572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003552:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <SysTick_Config+0x40>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355a:	210f      	movs	r1, #15
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	f7ff ff8e 	bl	8003480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <SysTick_Config+0x40>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356a:	4b04      	ldr	r3, [pc, #16]	@ (800357c <SysTick_Config+0x40>)
 800356c:	2207      	movs	r2, #7
 800356e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	e000e010 	.word	0xe000e010

08003580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ff29 	bl	80033e0 <__NVIC_SetPriorityGrouping>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035a8:	f7ff ff3e 	bl	8003428 <__NVIC_GetPriorityGrouping>
 80035ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	f7ff ff8e 	bl	80034d4 <NVIC_EncodePriority>
 80035b8:	4602      	mov	r2, r0
 80035ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff5d 	bl	8003480 <__NVIC_SetPriority>
}
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff31 	bl	8003444 <__NVIC_EnableIRQ>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ffa2 	bl	800353c <SysTick_Config>
 80035f8:	4603      	mov	r3, r0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0ac      	b.n	8003770 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f8b2 	bl	8003784 <DFSDM_GetChannelFromInstance>
 8003620:	4603      	mov	r3, r0
 8003622:	4a55      	ldr	r2, [pc, #340]	@ (8003778 <HAL_DFSDM_ChannelInit+0x174>)
 8003624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e09f      	b.n	8003770 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fe fca7 	bl	8001f84 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003636:	4b51      	ldr	r3, [pc, #324]	@ (800377c <HAL_DFSDM_ChannelInit+0x178>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	4a4f      	ldr	r2, [pc, #316]	@ (800377c <HAL_DFSDM_ChannelInit+0x178>)
 800363e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003640:	4b4e      	ldr	r3, [pc, #312]	@ (800377c <HAL_DFSDM_ChannelInit+0x178>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d125      	bne.n	8003694 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003648:	4b4d      	ldr	r3, [pc, #308]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a4c      	ldr	r2, [pc, #304]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 800364e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003652:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003654:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4948      	ldr	r1, [pc, #288]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a46      	ldr	r2, [pc, #280]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 8003668:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800366c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	791b      	ldrb	r3, [r3, #4]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d108      	bne.n	8003688 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003676:	4b42      	ldr	r3, [pc, #264]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	493f      	ldr	r1, [pc, #252]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003688:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3c      	ldr	r2, [pc, #240]	@ (8003780 <HAL_DFSDM_ChannelInit+0x17c>)
 800368e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003692:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80036a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80036b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80036b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 020f 	bic.w	r2, r2, #15
 80036d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6819      	ldr	r1, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80036f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f002 0207 	and.w	r2, r2, #7
 8003724:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003750:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f810 	bl	8003784 <DFSDM_GetChannelFromInstance>
 8003764:	4602      	mov	r2, r0
 8003766:	4904      	ldr	r1, [pc, #16]	@ (8003778 <HAL_DFSDM_ChannelInit+0x174>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20002620 	.word	0x20002620
 800377c:	2000261c 	.word	0x2000261c
 8003780:	40016000 	.word	0x40016000

08003784 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a1c      	ldr	r2, [pc, #112]	@ (8003800 <DFSDM_GetChannelFromInstance+0x7c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d102      	bne.n	800379a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e02b      	b.n	80037f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a19      	ldr	r2, [pc, #100]	@ (8003804 <DFSDM_GetChannelFromInstance+0x80>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d102      	bne.n	80037a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80037a2:	2301      	movs	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e024      	b.n	80037f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	@ (8003808 <DFSDM_GetChannelFromInstance+0x84>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d102      	bne.n	80037b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80037b0:	2302      	movs	r3, #2
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e01d      	b.n	80037f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a14      	ldr	r2, [pc, #80]	@ (800380c <DFSDM_GetChannelFromInstance+0x88>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d102      	bne.n	80037c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80037be:	2304      	movs	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e016      	b.n	80037f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a12      	ldr	r2, [pc, #72]	@ (8003810 <DFSDM_GetChannelFromInstance+0x8c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d102      	bne.n	80037d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80037cc:	2305      	movs	r3, #5
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e00f      	b.n	80037f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003814 <DFSDM_GetChannelFromInstance+0x90>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d102      	bne.n	80037e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80037da:	2306      	movs	r3, #6
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e008      	b.n	80037f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003818 <DFSDM_GetChannelFromInstance+0x94>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d102      	bne.n	80037ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80037e8:	2307      	movs	r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e001      	b.n	80037f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80037ee:	2303      	movs	r3, #3
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40016000 	.word	0x40016000
 8003804:	40016020 	.word	0x40016020
 8003808:	40016040 	.word	0x40016040
 800380c:	40016080 	.word	0x40016080
 8003810:	400160a0 	.word	0x400160a0
 8003814:	400160c0 	.word	0x400160c0
 8003818:	400160e0 	.word	0x400160e0

0800381c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	460b      	mov	r3, r1
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	605a      	str	r2, [r3, #4]
      break;
 800383a:	e002      	b.n	8003842 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
      break;
 8003840:	bf00      	nop
  }

  return status;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e003      	b.n	800386c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800386a:	2300      	movs	r3, #0
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	2201      	movs	r2, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <HAL_EXTI_IRQHandler+0x5c>)
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4798      	blx	r3
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40010414 	.word	0x40010414

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e6:	e17f      	b.n	8003be8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8171 	beq.w	8003be2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d005      	beq.n	8003918 <HAL_GPIO_Init+0x40>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d130      	bne.n	800397a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800394e:	2201      	movs	r2, #1
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0201 	and.w	r2, r3, #1
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d118      	bne.n	80039b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800398c:	2201      	movs	r2, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	08db      	lsrs	r3, r3, #3
 80039a2:	f003 0201 	and.w	r2, r3, #1
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d017      	beq.n	80039f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2203      	movs	r2, #3
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d123      	bne.n	8003a48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	08da      	lsrs	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3208      	adds	r2, #8
 8003a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	220f      	movs	r2, #15
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	08da      	lsrs	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3208      	adds	r2, #8
 8003a42:	6939      	ldr	r1, [r7, #16]
 8003a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80ac 	beq.w	8003be2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c08 <HAL_GPIO_Init+0x330>)
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003c08 <HAL_GPIO_Init+0x330>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a96:	4b5c      	ldr	r3, [pc, #368]	@ (8003c08 <HAL_GPIO_Init+0x330>)
 8003a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8003c0c <HAL_GPIO_Init+0x334>)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	220f      	movs	r2, #15
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003acc:	d025      	beq.n	8003b1a <HAL_GPIO_Init+0x242>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8003c10 <HAL_GPIO_Init+0x338>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01f      	beq.n	8003b16 <HAL_GPIO_Init+0x23e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8003c14 <HAL_GPIO_Init+0x33c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d019      	beq.n	8003b12 <HAL_GPIO_Init+0x23a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8003c18 <HAL_GPIO_Init+0x340>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_GPIO_Init+0x236>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8003c1c <HAL_GPIO_Init+0x344>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00d      	beq.n	8003b0a <HAL_GPIO_Init+0x232>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	@ (8003c20 <HAL_GPIO_Init+0x348>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <HAL_GPIO_Init+0x22e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4a      	ldr	r2, [pc, #296]	@ (8003c24 <HAL_GPIO_Init+0x34c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_GPIO_Init+0x22a>
 8003afe:	2306      	movs	r3, #6
 8003b00:	e00c      	b.n	8003b1c <HAL_GPIO_Init+0x244>
 8003b02:	2307      	movs	r3, #7
 8003b04:	e00a      	b.n	8003b1c <HAL_GPIO_Init+0x244>
 8003b06:	2305      	movs	r3, #5
 8003b08:	e008      	b.n	8003b1c <HAL_GPIO_Init+0x244>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	e006      	b.n	8003b1c <HAL_GPIO_Init+0x244>
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e004      	b.n	8003b1c <HAL_GPIO_Init+0x244>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e002      	b.n	8003b1c <HAL_GPIO_Init+0x244>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <HAL_GPIO_Init+0x244>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	f002 0203 	and.w	r2, r2, #3
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	4093      	lsls	r3, r2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b2c:	4937      	ldr	r1, [pc, #220]	@ (8003c0c <HAL_GPIO_Init+0x334>)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	3302      	adds	r3, #2
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b5e:	4a32      	ldr	r2, [pc, #200]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b64:	4b30      	ldr	r3, [pc, #192]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b88:	4a27      	ldr	r2, [pc, #156]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b8e:	4b26      	ldr	r3, [pc, #152]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bdc:	4a12      	ldr	r2, [pc, #72]	@ (8003c28 <HAL_GPIO_Init+0x350>)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f47f ae78 	bne.w	80038e8 <HAL_GPIO_Init+0x10>
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	48000400 	.word	0x48000400
 8003c14:	48000800 	.word	0x48000800
 8003c18:	48000c00 	.word	0x48000c00
 8003c1c:	48001000 	.word	0x48001000
 8003c20:	48001400 	.word	0x48001400
 8003c24:	48001800 	.word	0x48001800
 8003c28:	40010400 	.word	0x40010400

08003c2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c3a:	e0cd      	b.n	8003dd8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80c0 	beq.w	8003dd2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003c52:	4a68      	ldr	r2, [pc, #416]	@ (8003df4 <HAL_GPIO_DeInit+0x1c8>)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c7a:	d025      	beq.n	8003cc8 <HAL_GPIO_DeInit+0x9c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8003df8 <HAL_GPIO_DeInit+0x1cc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01f      	beq.n	8003cc4 <HAL_GPIO_DeInit+0x98>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a5d      	ldr	r2, [pc, #372]	@ (8003dfc <HAL_GPIO_DeInit+0x1d0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d019      	beq.n	8003cc0 <HAL_GPIO_DeInit+0x94>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e00 <HAL_GPIO_DeInit+0x1d4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_GPIO_DeInit+0x90>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a5b      	ldr	r2, [pc, #364]	@ (8003e04 <HAL_GPIO_DeInit+0x1d8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_GPIO_DeInit+0x8c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a5a      	ldr	r2, [pc, #360]	@ (8003e08 <HAL_GPIO_DeInit+0x1dc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <HAL_GPIO_DeInit+0x88>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a59      	ldr	r2, [pc, #356]	@ (8003e0c <HAL_GPIO_DeInit+0x1e0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_GPIO_DeInit+0x84>
 8003cac:	2306      	movs	r3, #6
 8003cae:	e00c      	b.n	8003cca <HAL_GPIO_DeInit+0x9e>
 8003cb0:	2307      	movs	r3, #7
 8003cb2:	e00a      	b.n	8003cca <HAL_GPIO_DeInit+0x9e>
 8003cb4:	2305      	movs	r3, #5
 8003cb6:	e008      	b.n	8003cca <HAL_GPIO_DeInit+0x9e>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	e006      	b.n	8003cca <HAL_GPIO_DeInit+0x9e>
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e004      	b.n	8003cca <HAL_GPIO_DeInit+0x9e>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e002      	b.n	8003cca <HAL_GPIO_DeInit+0x9e>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <HAL_GPIO_DeInit+0x9e>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	f002 0203 	and.w	r2, r2, #3
 8003cd0:	0092      	lsls	r2, r2, #2
 8003cd2:	4093      	lsls	r3, r2
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d132      	bne.n	8003d40 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003cda:	4b4d      	ldr	r3, [pc, #308]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	494b      	ldr	r1, [pc, #300]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003ce8:	4b49      	ldr	r3, [pc, #292]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	4947      	ldr	r1, [pc, #284]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003cf6:	4b46      	ldr	r3, [pc, #280]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	4944      	ldr	r1, [pc, #272]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d04:	4b42      	ldr	r3, [pc, #264]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	4940      	ldr	r1, [pc, #256]	@ (8003e10 <HAL_GPIO_DeInit+0x1e4>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003d22:	4a34      	ldr	r2, [pc, #208]	@ (8003df4 <HAL_GPIO_DeInit+0x1c8>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	4830      	ldr	r0, [pc, #192]	@ (8003df4 <HAL_GPIO_DeInit+0x1c8>)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	400a      	ands	r2, r1
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2103      	movs	r1, #3
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	220f      	movs	r2, #15
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	08d2      	lsrs	r2, r2, #3
 8003d74:	4019      	ands	r1, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3208      	adds	r2, #8
 8003d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2103      	movs	r1, #3
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	401a      	ands	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	401a      	ands	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	2103      	movs	r1, #3
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	401a      	ands	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	401a      	ands	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f47f af2b 	bne.w	8003c3c <HAL_GPIO_DeInit+0x10>
  }
}
 8003de6:	bf00      	nop
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40010000 	.word	0x40010000
 8003df8:	48000400 	.word	0x48000400
 8003dfc:	48000800 	.word	0x48000800
 8003e00:	48000c00 	.word	0x48000c00
 8003e04:	48001000 	.word	0x48001000
 8003e08:	48001400 	.word	0x48001400
 8003e0c:	48001800 	.word	0x48001800
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e001      	b.n	8003e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]
 8003e50:	4613      	mov	r3, r2
 8003e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e54:	787b      	ldrb	r3, [r7, #1]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e60:	e002      	b.n	8003e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	041a      	lsls	r2, r3, #16
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	43d9      	mvns	r1, r3
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	400b      	ands	r3, r1
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eb2:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ebe:	4a05      	ldr	r2, [pc, #20]	@ (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f806 	bl	8003ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e08d      	b.n	800401c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fe f899 	bl	800204c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2224      	movs	r2, #36	@ 0x24
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d107      	bne.n	8003f68 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	e006      	b.n	8003f76 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d108      	bne.n	8003f90 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e007      	b.n	8003fa0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69d9      	ldr	r1, [r3, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1a      	ldr	r2, [r3, #32]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e021      	b.n	800407a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2224      	movs	r2, #36	@ 0x24
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe f85a 	bl	8002108 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	4603      	mov	r3, r0
 8004094:	817b      	strh	r3, [r7, #10]
 8004096:	460b      	mov	r3, r1
 8004098:	813b      	strh	r3, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	f040 80f9 	bne.w	800429e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x34>
 80040b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0ed      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Write+0x4e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0e6      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040da:	f7ff f951 	bl	8003380 <HAL_GetTick>
 80040de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2319      	movs	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fac3 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d1      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2221      	movs	r2, #33	@ 0x21
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2240      	movs	r2, #64	@ 0x40
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004124:	88f8      	ldrh	r0, [r7, #6]
 8004126:	893a      	ldrh	r2, [r7, #8]
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4603      	mov	r3, r0
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f9d3 	bl	80044e0 <I2C_RequestMemoryWrite>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0a9      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2bff      	cmp	r3, #255	@ 0xff
 8004154:	d90e      	bls.n	8004174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	22ff      	movs	r2, #255	@ 0xff
 800415a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fc47 	bl	8004a00 <I2C_TransferConfig>
 8004172:	e00f      	b.n	8004194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	b2da      	uxtb	r2, r3
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fc36 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fac6 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e07b      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d034      	beq.n	800424c <HAL_I2C_Mem_Write+0x1c8>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d130      	bne.n	800424c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	2200      	movs	r2, #0
 80041f2:	2180      	movs	r1, #128	@ 0x80
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa3f 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e04d      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2bff      	cmp	r3, #255	@ 0xff
 800420c:	d90e      	bls.n	800422c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22ff      	movs	r2, #255	@ 0xff
 8004212:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	b2da      	uxtb	r2, r3
 800421a:	8979      	ldrh	r1, [r7, #10]
 800421c:	2300      	movs	r3, #0
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fbeb 	bl	8004a00 <I2C_TransferConfig>
 800422a:	e00f      	b.n	800424c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	b2da      	uxtb	r2, r3
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	2300      	movs	r3, #0
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fbda 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d19e      	bne.n	8004194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 faac 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e01a      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2220      	movs	r2, #32
 8004270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_I2C_Mem_Write+0x224>)
 800427e:	400b      	ands	r3, r1
 8004280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	fe00e800 	.word	0xfe00e800

080042ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	817b      	strh	r3, [r7, #10]
 80042be:	460b      	mov	r3, r1
 80042c0:	813b      	strh	r3, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	f040 80fd 	bne.w	80044ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x34>
 80042da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0f1      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Read+0x4e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0ea      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004302:	f7ff f83d 	bl	8003380 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2319      	movs	r3, #25
 800430e:	2201      	movs	r2, #1
 8004310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f9af 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0d5      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2222      	movs	r2, #34	@ 0x22
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2240      	movs	r2, #64	@ 0x40
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004344:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800434c:	88f8      	ldrh	r0, [r7, #6]
 800434e:	893a      	ldrh	r2, [r7, #8]
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	4603      	mov	r3, r0
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f913 	bl	8004588 <I2C_RequestMemoryRead>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ad      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2bff      	cmp	r3, #255	@ 0xff
 800437c:	d90e      	bls.n	800439c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	b2da      	uxtb	r2, r3
 800438a:	8979      	ldrh	r1, [r7, #10]
 800438c:	4b52      	ldr	r3, [pc, #328]	@ (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fb33 	bl	8004a00 <I2C_TransferConfig>
 800439a:	e00f      	b.n	80043bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	8979      	ldrh	r1, [r7, #10]
 80043ae:	4b4a      	ldr	r3, [pc, #296]	@ (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb22 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	2200      	movs	r2, #0
 80043c4:	2104      	movs	r1, #4
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f956 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07c      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d034      	beq.n	800447c <HAL_I2C_Mem_Read+0x1d0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	d130      	bne.n	800447c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	@ 0x80
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f927 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04d      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2bff      	cmp	r3, #255	@ 0xff
 800443c:	d90e      	bls.n	800445c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	b2da      	uxtb	r2, r3
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fad3 	bl	8004a00 <I2C_TransferConfig>
 800445a:	e00f      	b.n	800447c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	b2da      	uxtb	r2, r3
 800446c:	8979      	ldrh	r1, [r7, #10]
 800446e:	2300      	movs	r3, #0
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fac2 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d19a      	bne.n	80043bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f994 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e01a      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2220      	movs	r2, #32
 80044a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_I2C_Mem_Read+0x230>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	80002400 	.word	0x80002400
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	460b      	mov	r3, r1
 80044f4:	813b      	strh	r3, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	8979      	ldrh	r1, [r7, #10]
 8004500:	4b20      	ldr	r3, [pc, #128]	@ (8004584 <I2C_RequestMemoryWrite+0xa4>)
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fa79 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f909 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e02c      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004528:	893b      	ldrh	r3, [r7, #8]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28
 8004532:	e015      	b.n	8004560 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004534:	893b      	ldrh	r3, [r7, #8]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	b29b      	uxth	r3, r3
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	69b9      	ldr	r1, [r7, #24]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f8ef 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e012      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004556:	893b      	ldrh	r3, [r7, #8]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2200      	movs	r2, #0
 8004568:	2180      	movs	r1, #128	@ 0x80
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f884 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	80002000 	.word	0x80002000

08004588 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4603      	mov	r3, r0
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	460b      	mov	r3, r1
 800459c:	813b      	strh	r3, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	8979      	ldrh	r1, [r7, #10]
 80045a8:	4b20      	ldr	r3, [pc, #128]	@ (800462c <I2C_RequestMemoryRead+0xa4>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa26 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f8b6 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e02c      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ce:	893b      	ldrh	r3, [r7, #8]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045d8:	e015      	b.n	8004606 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045da:	893b      	ldrh	r3, [r7, #8]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	b29b      	uxth	r3, r3
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f89c 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e012      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	@ 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f831 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	80002000 	.word	0x80002000

08004630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d103      	bne.n	800464e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d007      	beq.n	800466c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	619a      	str	r2, [r3, #24]
  }
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004688:	e03b      	b.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f8d6 	bl	8004840 <I2C_IsErrorOccurred>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e041      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d02d      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fe fe6b 	bl	8003380 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d122      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d113      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d0b4      	beq.n	800468a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004736:	e033      	b.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f87f 	bl	8004840 <I2C_IsErrorOccurred>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e031      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d025      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004754:	f7fe fe14 	bl	8003380 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11a      	bne.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d013      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d1c4      	bne.n	8004738 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c4:	e02f      	b.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f838 	bl	8004840 <I2C_IsErrorOccurred>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02d      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe fdd1 	bl	8003380 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11a      	bne.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d013      	beq.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b20      	cmp	r3, #32
 8004832:	d1c8      	bne.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	@ 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d068      	beq.n	800493e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004874:	e049      	b.n	800490a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d045      	beq.n	800490a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fe fd7f 	bl	8003380 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_IsErrorOccurred+0x54>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d13a      	bne.n	800490a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800489e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b6:	d121      	bne.n	80048fc <I2C_IsErrorOccurred+0xbc>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048be:	d01d      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d01a      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048d6:	f7fe fd53 	bl	8003380 <HAL_GetTick>
 80048da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048dc:	e00e      	b.n	80048fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048de:	f7fe fd4f 	bl	8003380 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b19      	cmp	r3, #25
 80048ea:	d907      	bls.n	80048fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048fa:	e006      	b.n	800490a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d1e9      	bne.n	80048de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b20      	cmp	r3, #32
 8004916:	d003      	beq.n	8004920 <I2C_IsErrorOccurred+0xe0>
 8004918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0aa      	beq.n	8004876 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01c      	beq.n	80049ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff fe3b 	bl	8004630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <I2C_IsErrorOccurred+0x1bc>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	@ 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	fe00e800 	.word	0xfe00e800

08004a00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a18:	7a7b      	ldrb	r3, [r7, #9]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	0d5b      	lsrs	r3, r3, #21
 8004a3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a3e:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <I2C_TransferConfig+0x60>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	43db      	mvns	r3, r3
 8004a44:	ea02 0103 	and.w	r1, r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	03ff63ff 	.word	0x03ff63ff

08004a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d138      	bne.n	8004aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e032      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	@ 0x24
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d139      	bne.n	8004b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e033      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2224      	movs	r2, #36	@ 0x24
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af02      	add	r7, sp, #8
 8004b98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e101      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fd fbc7 	bl	800234c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 fbd9 	bl	8008388 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7c1a      	ldrb	r2, [r3, #16]
 8004bde:	f88d 2000 	strb.w	r2, [sp]
 8004be2:	3304      	adds	r3, #4
 8004be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be6:	f003 fba2 	bl	800832e <USB_CoreInit>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0d5      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 fbd1 	bl	80083aa <USB_SetCurrentMode>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0c6      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	e04a      	b.n	8004cb6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3315      	adds	r3, #21
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3314      	adds	r3, #20
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c48:	7bfa      	ldrb	r2, [r7, #15]
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	b298      	uxth	r0, r3
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	332e      	adds	r3, #46	@ 0x2e
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3318      	adds	r3, #24
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	331c      	adds	r3, #28
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c88:	7bfa      	ldrb	r2, [r7, #15]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3320      	adds	r3, #32
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c9c:	7bfa      	ldrb	r2, [r7, #15]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	3324      	adds	r3, #36	@ 0x24
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	791b      	ldrb	r3, [r3, #4]
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d3af      	bcc.n	8004c20 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e044      	b.n	8004d50 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cdc:	7bfa      	ldrb	r2, [r7, #15]
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	791b      	ldrb	r3, [r3, #4]
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3b5      	bcc.n	8004cc6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7c1a      	ldrb	r2, [r3, #16]
 8004d62:	f88d 2000 	strb.w	r2, [sp]
 8004d66:	3304      	adds	r3, #4
 8004d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d6a:	f003 fb6b 	bl	8008444 <USB_DevInit>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e013      	b.n	8004da8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	7b1b      	ldrb	r3, [r3, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d102      	bne.n	8004d9c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f80a 	bl	8004db0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f003 fd10 	bl	80087c6 <USB_DevDisconnect>

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	f043 0303 	orr.w	r3, r3, #3
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfc:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e06:	6013      	str	r3, [r2, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40007000 	.word	0x40007000

08004e18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e1c:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40007000 	.word	0x40007000

08004e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e42:	d130      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e44:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e50:	d038      	beq.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e52:	4b20      	ldr	r3, [pc, #128]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2232      	movs	r2, #50	@ 0x32
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004edc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	0c9b      	lsrs	r3, r3, #18
 8004e74:	3301      	adds	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e78:	e002      	b.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e80:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8c:	d102      	bne.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f2      	bne.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e94:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea0:	d110      	bne.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e00f      	b.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb2:	d007      	beq.n	8004ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eb4:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ebc:	4a05      	ldr	r2, [pc, #20]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ec2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	2000000c 	.word	0x2000000c
 8004edc:	431bde83 	.word	0x431bde83

08004ee0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ee4:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a04      	ldr	r2, [pc, #16]	@ (8004efc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eee:	6053      	str	r3, [r2, #4]
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40007000 	.word	0x40007000

08004f00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7fe fa3a 	bl	8003380 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e063      	b.n	8004fe0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fd f90f 	bl	8002150 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f32:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f858 	bl	8004fec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2120      	movs	r1, #32
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f850 	bl	8005008 <QSPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d131      	bne.n	8004fd6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	0611      	lsls	r1, r2, #24
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68d2      	ldr	r2, [r2, #12]
 8004f8a:	4311      	orrs	r1, r2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	4b13      	ldr	r3, [pc, #76]	@ (8004fe8 <HAL_QSPI_Init+0xe8>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6912      	ldr	r2, [r2, #16]
 8004fa2:	0411      	lsls	r1, r2, #16
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6952      	ldr	r2, [r2, #20]
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6992      	ldr	r2, [r2, #24]
 8004fae:	4311      	orrs	r1, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004fde:	7afb      	ldrb	r3, [r7, #11]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	ffe0f8fe 	.word	0xffe0f8fe

08004fec <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005018:	e01a      	b.n	8005050 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d016      	beq.n	8005050 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fe f9ad 	bl	8003380 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2204      	movs	r2, #4
 800503c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	f043 0201 	orr.w	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e00e      	b.n	800506e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	429a      	cmp	r2, r3
 800506a:	d1d6      	bne.n	800501a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e3ca      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508a:	4b97      	ldr	r3, [pc, #604]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005094:	4b94      	ldr	r3, [pc, #592]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80e4 	beq.w	8005274 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_RCC_OscConfig+0x4a>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	f040 808b 	bne.w	80051d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 8087 	bne.w	80051d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050c2:	4b89      	ldr	r3, [pc, #548]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x62>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e3a2      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	4b82      	ldr	r3, [pc, #520]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <HAL_RCC_OscConfig+0x7c>
 80050ea:	4b7f      	ldr	r3, [pc, #508]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050f2:	e005      	b.n	8005100 <HAL_RCC_OscConfig+0x88>
 80050f4:	4b7c      	ldr	r3, [pc, #496]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80050f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005100:	4293      	cmp	r3, r2
 8005102:	d223      	bcs.n	800514c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fd55 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e383      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005118:	4b73      	ldr	r3, [pc, #460]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a72      	ldr	r2, [pc, #456]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800511e:	f043 0308 	orr.w	r3, r3, #8
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b70      	ldr	r3, [pc, #448]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	496d      	ldr	r1, [pc, #436]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005136:	4b6c      	ldr	r3, [pc, #432]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	4968      	ldr	r1, [pc, #416]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005146:	4313      	orrs	r3, r2
 8005148:	604b      	str	r3, [r1, #4]
 800514a:	e025      	b.n	8005198 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800514c:	4b66      	ldr	r3, [pc, #408]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a65      	ldr	r2, [pc, #404]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005152:	f043 0308 	orr.w	r3, r3, #8
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b63      	ldr	r3, [pc, #396]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4960      	ldr	r1, [pc, #384]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800516a:	4b5f      	ldr	r3, [pc, #380]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	495b      	ldr	r1, [pc, #364]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fd15 	bl	8005bb8 <RCC_SetFlashLatencyFromMSIRange>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e343      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005198:	f000 fc4a 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b52      	ldr	r3, [pc, #328]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	4950      	ldr	r1, [pc, #320]	@ (80052ec <HAL_RCC_OscConfig+0x274>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
 80051b4:	4a4e      	ldr	r2, [pc, #312]	@ (80052f0 <HAL_RCC_OscConfig+0x278>)
 80051b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051b8:	4b4e      	ldr	r3, [pc, #312]	@ (80052f4 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe f88f 	bl	80032e0 <HAL_InitTick>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d052      	beq.n	8005272 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	e327      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d032      	beq.n	800523e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051d8:	4b43      	ldr	r3, [pc, #268]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a42      	ldr	r2, [pc, #264]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051e4:	f7fe f8cc 	bl	8003380 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ec:	f7fe f8c8 	bl	8003380 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e310      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051fe:	4b3a      	ldr	r3, [pc, #232]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520a:	4b37      	ldr	r3, [pc, #220]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a36      	ldr	r2, [pc, #216]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005210:	f043 0308 	orr.w	r3, r3, #8
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	4b34      	ldr	r3, [pc, #208]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4931      	ldr	r1, [pc, #196]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005228:	4b2f      	ldr	r3, [pc, #188]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	492c      	ldr	r1, [pc, #176]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	e01a      	b.n	8005274 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800523e:	4b2a      	ldr	r3, [pc, #168]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a29      	ldr	r2, [pc, #164]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800524a:	f7fe f899 	bl	8003380 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005252:	f7fe f895 	bl	8003380 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e2dd      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005264:	4b20      	ldr	r3, [pc, #128]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x1da>
 8005270:	e000      	b.n	8005274 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005272:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d074      	beq.n	800536a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b08      	cmp	r3, #8
 8005284:	d005      	beq.n	8005292 <HAL_RCC_OscConfig+0x21a>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d10e      	bne.n	80052aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d10b      	bne.n	80052aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005292:	4b15      	ldr	r3, [pc, #84]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d064      	beq.n	8005368 <HAL_RCC_OscConfig+0x2f0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d160      	bne.n	8005368 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e2ba      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x24a>
 80052b4:	4b0c      	ldr	r3, [pc, #48]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0b      	ldr	r2, [pc, #44]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e026      	b.n	8005310 <HAL_RCC_OscConfig+0x298>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052ca:	d115      	bne.n	80052f8 <HAL_RCC_OscConfig+0x280>
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a05      	ldr	r2, [pc, #20]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	4b03      	ldr	r3, [pc, #12]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a02      	ldr	r2, [pc, #8]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e014      	b.n	8005310 <HAL_RCC_OscConfig+0x298>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	0800e990 	.word	0x0800e990
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	20000058 	.word	0x20000058
 80052f8:	4ba0      	ldr	r3, [pc, #640]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a9f      	ldr	r2, [pc, #636]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4b9d      	ldr	r3, [pc, #628]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a9c      	ldr	r2, [pc, #624]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800530a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800530e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fe f832 	bl	8003380 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005320:	f7fe f82e 	bl	8003380 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	@ 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e276      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005332:	4b92      	ldr	r3, [pc, #584]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0x2a8>
 800533e:	e014      	b.n	800536a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fe f81e 	bl	8003380 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005348:	f7fe f81a 	bl	8003380 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	@ 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e262      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800535a:	4b88      	ldr	r3, [pc, #544]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x2d0>
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d060      	beq.n	8005438 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d005      	beq.n	8005388 <HAL_RCC_OscConfig+0x310>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d119      	bne.n	80053b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d116      	bne.n	80053b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005388:	4b7c      	ldr	r3, [pc, #496]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_OscConfig+0x328>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e23f      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b76      	ldr	r3, [pc, #472]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	4973      	ldr	r1, [pc, #460]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053b4:	e040      	b.n	8005438 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d023      	beq.n	8005406 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053be:	4b6f      	ldr	r3, [pc, #444]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a6e      	ldr	r2, [pc, #440]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fd ffd9 	bl	8003380 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d2:	f7fd ffd5 	bl	8003380 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e21d      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e4:	4b65      	ldr	r3, [pc, #404]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f0:	4b62      	ldr	r3, [pc, #392]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	495f      	ldr	r1, [pc, #380]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
 8005404:	e018      	b.n	8005438 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005406:	4b5d      	ldr	r3, [pc, #372]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a5c      	ldr	r2, [pc, #368]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800540c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fd ffb5 	bl	8003380 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541a:	f7fd ffb1 	bl	8003380 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e1f9      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800542c:	4b53      	ldr	r3, [pc, #332]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d03c      	beq.n	80054be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01c      	beq.n	8005486 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544c:	4b4b      	ldr	r3, [pc, #300]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800544e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005452:	4a4a      	ldr	r2, [pc, #296]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fd ff90 	bl	8003380 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005464:	f7fd ff8c 	bl	8003380 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e1d4      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005476:	4b41      	ldr	r3, [pc, #260]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ef      	beq.n	8005464 <HAL_RCC_OscConfig+0x3ec>
 8005484:	e01b      	b.n	80054be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005486:	4b3d      	ldr	r3, [pc, #244]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548c:	4a3b      	ldr	r2, [pc, #236]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fd ff73 	bl	8003380 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549e:	f7fd ff6f 	bl	8003380 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1b7      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b0:	4b32      	ldr	r3, [pc, #200]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80054b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1ef      	bne.n	800549e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80a6 	beq.w	8005618 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054d0:	4b2a      	ldr	r3, [pc, #168]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10d      	bne.n	80054f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054dc:	4b27      	ldr	r3, [pc, #156]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e0:	4a26      	ldr	r2, [pc, #152]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e8:	4b24      	ldr	r3, [pc, #144]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f4:	2301      	movs	r3, #1
 80054f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f8:	4b21      	ldr	r3, [pc, #132]	@ (8005580 <HAL_RCC_OscConfig+0x508>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d118      	bne.n	8005536 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005504:	4b1e      	ldr	r3, [pc, #120]	@ (8005580 <HAL_RCC_OscConfig+0x508>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <HAL_RCC_OscConfig+0x508>)
 800550a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800550e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005510:	f7fd ff36 	bl	8003380 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005518:	f7fd ff32 	bl	8003380 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e17a      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800552a:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <HAL_RCC_OscConfig+0x508>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d108      	bne.n	8005550 <HAL_RCC_OscConfig+0x4d8>
 800553e:	4b0f      	ldr	r3, [pc, #60]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005544:	4a0d      	ldr	r2, [pc, #52]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800554e:	e029      	b.n	80055a4 <HAL_RCC_OscConfig+0x52c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b05      	cmp	r3, #5
 8005556:	d115      	bne.n	8005584 <HAL_RCC_OscConfig+0x50c>
 8005558:	4b08      	ldr	r3, [pc, #32]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555e:	4a07      	ldr	r2, [pc, #28]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005568:	4b04      	ldr	r3, [pc, #16]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556e:	4a03      	ldr	r2, [pc, #12]	@ (800557c <HAL_RCC_OscConfig+0x504>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005578:	e014      	b.n	80055a4 <HAL_RCC_OscConfig+0x52c>
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	40007000 	.word	0x40007000
 8005584:	4b9c      	ldr	r3, [pc, #624]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	4a9b      	ldr	r2, [pc, #620]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005594:	4b98      	ldr	r3, [pc, #608]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559a:	4a97      	ldr	r2, [pc, #604]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d016      	beq.n	80055da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fd fee8 	bl	8003380 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fd fee4 	bl	8003380 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e12a      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ca:	4b8b      	ldr	r3, [pc, #556]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ed      	beq.n	80055b4 <HAL_RCC_OscConfig+0x53c>
 80055d8:	e015      	b.n	8005606 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055da:	f7fd fed1 	bl	8003380 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055e0:	e00a      	b.n	80055f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e2:	f7fd fecd 	bl	8003380 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e113      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055f8:	4b7f      	ldr	r3, [pc, #508]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ed      	bne.n	80055e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005606:	7ffb      	ldrb	r3, [r7, #31]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d105      	bne.n	8005618 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800560c:	4b7a      	ldr	r3, [pc, #488]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800560e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005610:	4a79      	ldr	r2, [pc, #484]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005616:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80fe 	beq.w	800581e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	2b02      	cmp	r3, #2
 8005628:	f040 80d0 	bne.w	80057cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800562c:	4b72      	ldr	r3, [pc, #456]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 0203 	and.w	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	429a      	cmp	r2, r3
 800563e:	d130      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	3b01      	subs	r3, #1
 800564c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d127      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800565e:	429a      	cmp	r2, r3
 8005660:	d11f      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800566c:	2a07      	cmp	r2, #7
 800566e:	bf14      	ite	ne
 8005670:	2201      	movne	r2, #1
 8005672:	2200      	moveq	r2, #0
 8005674:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005676:	4293      	cmp	r3, r2
 8005678:	d113      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	3b01      	subs	r3, #1
 8005688:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d109      	bne.n	80056a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	3b01      	subs	r3, #1
 800569c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d06e      	beq.n	8005780 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d069      	beq.n	800577c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056a8:	4b53      	ldr	r3, [pc, #332]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056b4:	4b50      	ldr	r3, [pc, #320]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0ad      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056c4:	4b4c      	ldr	r3, [pc, #304]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a4b      	ldr	r2, [pc, #300]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056d0:	f7fd fe56 	bl	8003380 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fd fe52 	bl	8003380 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e09a      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ea:	4b43      	ldr	r3, [pc, #268]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f6:	4b40      	ldr	r3, [pc, #256]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	4b40      	ldr	r3, [pc, #256]	@ (80057fc <HAL_RCC_OscConfig+0x784>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005706:	3a01      	subs	r2, #1
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	4311      	orrs	r1, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005710:	0212      	lsls	r2, r2, #8
 8005712:	4311      	orrs	r1, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005718:	0852      	lsrs	r2, r2, #1
 800571a:	3a01      	subs	r2, #1
 800571c:	0552      	lsls	r2, r2, #21
 800571e:	4311      	orrs	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005724:	0852      	lsrs	r2, r2, #1
 8005726:	3a01      	subs	r2, #1
 8005728:	0652      	lsls	r2, r2, #25
 800572a:	4311      	orrs	r1, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005730:	0912      	lsrs	r2, r2, #4
 8005732:	0452      	lsls	r2, r2, #17
 8005734:	430a      	orrs	r2, r1
 8005736:	4930      	ldr	r1, [pc, #192]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005738:	4313      	orrs	r3, r2
 800573a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800573c:	4b2e      	ldr	r3, [pc, #184]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2d      	ldr	r2, [pc, #180]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005746:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005748:	4b2b      	ldr	r3, [pc, #172]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a2a      	ldr	r2, [pc, #168]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800574e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005752:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005754:	f7fd fe14 	bl	8003380 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fd fe10 	bl	8003380 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e058      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576e:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800577a:	e050      	b.n	800581e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e04f      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005780:	4b1d      	ldr	r3, [pc, #116]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d148      	bne.n	800581e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800578c:	4b1a      	ldr	r3, [pc, #104]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005796:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005798:	4b17      	ldr	r3, [pc, #92]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a16      	ldr	r2, [pc, #88]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 800579e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057a4:	f7fd fdec 	bl	8003380 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fd fde8 	bl	8003380 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e030      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057be:	4b0e      	ldr	r3, [pc, #56]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x734>
 80057ca:	e028      	b.n	800581e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b0c      	cmp	r3, #12
 80057d0:	d023      	beq.n	800581a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d2:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a08      	ldr	r2, [pc, #32]	@ (80057f8 <HAL_RCC_OscConfig+0x780>)
 80057d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fd fdcf 	bl	8003380 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e4:	e00c      	b.n	8005800 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fd fdcb 	bl	8003380 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d905      	bls.n	8005800 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e013      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005800:	4b09      	ldr	r3, [pc, #36]	@ (8005828 <HAL_RCC_OscConfig+0x7b0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ec      	bne.n	80057e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <HAL_RCC_OscConfig+0x7b0>)
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	4905      	ldr	r1, [pc, #20]	@ (8005828 <HAL_RCC_OscConfig+0x7b0>)
 8005812:	4b06      	ldr	r3, [pc, #24]	@ (800582c <HAL_RCC_OscConfig+0x7b4>)
 8005814:	4013      	ands	r3, r2
 8005816:	60cb      	str	r3, [r1, #12]
 8005818:	e001      	b.n	800581e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40021000 	.word	0x40021000
 800582c:	feeefffc 	.word	0xfeeefffc

08005830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0e7      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005844:	4b75      	ldr	r3, [pc, #468]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d910      	bls.n	8005874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005852:	4b72      	ldr	r3, [pc, #456]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 0207 	bic.w	r2, r3, #7
 800585a:	4970      	ldr	r1, [pc, #448]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	4313      	orrs	r3, r2
 8005860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005862:	4b6e      	ldr	r3, [pc, #440]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cf      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b66      	ldr	r3, [pc, #408]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800588c:	429a      	cmp	r2, r3
 800588e:	d908      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005890:	4b63      	ldr	r3, [pc, #396]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4960      	ldr	r1, [pc, #384]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d04c      	beq.n	8005948 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d107      	bne.n	80058c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d121      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e0a6      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ce:	4b54      	ldr	r3, [pc, #336]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d115      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e09a      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e08e      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e086      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005906:	4b46      	ldr	r3, [pc, #280]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4943      	ldr	r1, [pc, #268]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005918:	f7fd fd32 	bl	8003380 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fd fd2e 	bl	8003380 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e06e      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	4b3a      	ldr	r3, [pc, #232]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 020c 	and.w	r2, r3, #12
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	429a      	cmp	r2, r3
 8005946:	d1eb      	bne.n	8005920 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	4b31      	ldr	r3, [pc, #196]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005960:	429a      	cmp	r2, r3
 8005962:	d208      	bcs.n	8005976 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005964:	4b2e      	ldr	r3, [pc, #184]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	492b      	ldr	r1, [pc, #172]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005976:	4b29      	ldr	r3, [pc, #164]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d210      	bcs.n	80059a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005984:	4b25      	ldr	r3, [pc, #148]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f023 0207 	bic.w	r2, r3, #7
 800598c:	4923      	ldr	r1, [pc, #140]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005994:	4b21      	ldr	r3, [pc, #132]	@ (8005a1c <HAL_RCC_ClockConfig+0x1ec>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d001      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e036      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	4918      	ldr	r1, [pc, #96]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d0:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4910      	ldr	r1, [pc, #64]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059e4:	f000 f824 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <HAL_RCC_ClockConfig+0x1f0>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	490b      	ldr	r1, [pc, #44]	@ (8005a24 <HAL_RCC_ClockConfig+0x1f4>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	4a09      	ldr	r2, [pc, #36]	@ (8005a28 <HAL_RCC_ClockConfig+0x1f8>)
 8005a02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a04:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCC_ClockConfig+0x1fc>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fd fc69 	bl	80032e0 <HAL_InitTick>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a12:	7afb      	ldrb	r3, [r7, #11]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	40021000 	.word	0x40021000
 8005a24:	0800e990 	.word	0x0800e990
 8005a28:	2000000c 	.word	0x2000000c
 8005a2c:	20000058 	.word	0x20000058

08005a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	@ 0x24
 8005a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a48:	4b3b      	ldr	r3, [pc, #236]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x34>
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	d121      	bne.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d11e      	bne.n	8005aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a64:	4b34      	ldr	r3, [pc, #208]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a70:	4b31      	ldr	r3, [pc, #196]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e005      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a80:	4b2d      	ldr	r3, [pc, #180]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d102      	bne.n	8005aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005aa8:	4b25      	ldr	r3, [pc, #148]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	e004      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ab4:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b0c      	cmp	r3, #12
 8005abc:	d134      	bne.n	8005b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005abe:	4b1e      	ldr	r3, [pc, #120]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d003      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0xac>
 8005ad4:	e005      	b.n	8005ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ad8:	617b      	str	r3, [r7, #20]
      break;
 8005ada:	e005      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005adc:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ade:	617b      	str	r3, [r7, #20]
      break;
 8005ae0:	e002      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	617b      	str	r3, [r7, #20]
      break;
 8005ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ae8:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	3301      	adds	r3, #1
 8005af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005af6:	4b10      	ldr	r3, [pc, #64]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	0a1b      	lsrs	r3, r3, #8
 8005afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	fb03 f202 	mul.w	r2, r3, r2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	0e5b      	lsrs	r3, r3, #25
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b28:	69bb      	ldr	r3, [r7, #24]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3724      	adds	r7, #36	@ 0x24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	0800e9a8 	.word	0x0800e9a8
 8005b40:	00f42400 	.word	0x00f42400
 8005b44:	007a1200 	.word	0x007a1200

08005b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	@ (8005b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	2000000c 	.word	0x2000000c

08005b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b64:	f7ff fff0 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4904      	ldr	r1, [pc, #16]	@ (8005b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000
 8005b88:	0800e9a0 	.word	0x0800e9a0

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b90:	f7ff ffda 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0adb      	lsrs	r3, r3, #11
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4904      	ldr	r1, [pc, #16]	@ (8005bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	0800e9a0 	.word	0x0800e9a0

08005bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bd0:	f7ff f922 	bl	8004e18 <HAL_PWREx_GetVoltageRange>
 8005bd4:	6178      	str	r0, [r7, #20]
 8005bd6:	e014      	b.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4b25      	ldr	r3, [pc, #148]	@ (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bdc:	4a24      	ldr	r2, [pc, #144]	@ (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005be4:	4b22      	ldr	r3, [pc, #136]	@ (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bf0:	f7ff f912 	bl	8004e18 <HAL_PWREx_GetVoltageRange>
 8005bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c08:	d10b      	bne.n	8005c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b80      	cmp	r3, #128	@ 0x80
 8005c0e:	d919      	bls.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c14:	d902      	bls.n	8005c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c16:	2302      	movs	r3, #2
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e013      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e010      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b80      	cmp	r3, #128	@ 0x80
 8005c26:	d902      	bls.n	8005c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c28:	2303      	movs	r3, #3
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	e00a      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b80      	cmp	r3, #128	@ 0x80
 8005c32:	d102      	bne.n	8005c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c34:	2302      	movs	r3, #2
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	e004      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b70      	cmp	r3, #112	@ 0x70
 8005c3e:	d101      	bne.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c40:	2301      	movs	r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c44:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f023 0207 	bic.w	r2, r3, #7
 8005c4c:	4909      	ldr	r1, [pc, #36]	@ (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c54:	4b07      	ldr	r3, [pc, #28]	@ (8005c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d001      	beq.n	8005c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40022000 	.word	0x40022000

08005c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c80:	2300      	movs	r3, #0
 8005c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c84:	2300      	movs	r3, #0
 8005c86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d041      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c9c:	d02a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c9e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ca2:	d824      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ca4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ca8:	d008      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005caa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cae:	d81e      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cba:	e018      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cbc:	4b86      	ldr	r3, [pc, #536]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4a85      	ldr	r2, [pc, #532]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cc8:	e015      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 facb 	bl	800626c <RCCEx_PLLSAI1_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cda:	e00c      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3320      	adds	r3, #32
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fbb6 	bl	8006454 <RCCEx_PLLSAI2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cec:	e003      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf6:	7cfb      	ldrb	r3, [r7, #19]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cfc:	4b76      	ldr	r3, [pc, #472]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d0a:	4973      	ldr	r1, [pc, #460]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d12:	e001      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	7cfb      	ldrb	r3, [r7, #19]
 8005d16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d041      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d2c:	d02a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d32:	d824      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d38:	d008      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d3e:	d81e      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d48:	d010      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d4a:	e018      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d4c:	4b62      	ldr	r3, [pc, #392]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a61      	ldr	r2, [pc, #388]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d58:	e015      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fa83 	bl	800626c <RCCEx_PLLSAI1_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d6a:	e00c      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3320      	adds	r3, #32
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fb6e 	bl	8006454 <RCCEx_PLLSAI2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d7c:	e003      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	74fb      	strb	r3, [r7, #19]
      break;
 8005d82:	e000      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d86:	7cfb      	ldrb	r3, [r7, #19]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d8c:	4b52      	ldr	r3, [pc, #328]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d9a:	494f      	ldr	r1, [pc, #316]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005da2:	e001      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80a0 	beq.w	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005dba:	4b47      	ldr	r3, [pc, #284]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00d      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd0:	4b41      	ldr	r3, [pc, #260]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd4:	4a40      	ldr	r2, [pc, #256]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de8:	2301      	movs	r3, #1
 8005dea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dec:	4b3b      	ldr	r3, [pc, #236]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a3a      	ldr	r2, [pc, #232]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df8:	f7fd fac2 	bl	8003380 <HAL_GetTick>
 8005dfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dfe:	e009      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e00:	f7fd fabe 	bl	8003380 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d902      	bls.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	74fb      	strb	r3, [r7, #19]
        break;
 8005e12:	e005      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e14:	4b31      	ldr	r3, [pc, #196]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0ef      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d15c      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01f      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d019      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e44:	4b24      	ldr	r3, [pc, #144]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e50:	4b21      	ldr	r3, [pc, #132]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e56:	4a20      	ldr	r2, [pc, #128]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e66:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e70:	4a19      	ldr	r2, [pc, #100]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7fd fa7d 	bl	8003380 <HAL_GetTick>
 8005e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e88:	e00b      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fd fa79 	bl	8003380 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d902      	bls.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8005ea0:	e006      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0ec      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb6:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec6:	4904      	ldr	r1, [pc, #16]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ece:	e009      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	74bb      	strb	r3, [r7, #18]
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ed6:	bf00      	nop
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	7cfb      	ldrb	r3, [r7, #19]
 8005ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ee4:	7c7b      	ldrb	r3, [r7, #17]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d105      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eea:	4b9e      	ldr	r3, [pc, #632]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eee:	4a9d      	ldr	r2, [pc, #628]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ef4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f02:	4b98      	ldr	r3, [pc, #608]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f023 0203 	bic.w	r2, r3, #3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	4994      	ldr	r1, [pc, #592]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f24:	4b8f      	ldr	r3, [pc, #572]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2a:	f023 020c 	bic.w	r2, r3, #12
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f32:	498c      	ldr	r1, [pc, #560]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f46:	4b87      	ldr	r3, [pc, #540]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	4983      	ldr	r1, [pc, #524]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f68:	4b7e      	ldr	r3, [pc, #504]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	497b      	ldr	r1, [pc, #492]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f8a:	4b76      	ldr	r3, [pc, #472]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f98:	4972      	ldr	r1, [pc, #456]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fac:	4b6d      	ldr	r3, [pc, #436]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fba:	496a      	ldr	r1, [pc, #424]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fce:	4b65      	ldr	r3, [pc, #404]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fdc:	4961      	ldr	r1, [pc, #388]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffe:	4959      	ldr	r1, [pc, #356]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006012:	4b54      	ldr	r3, [pc, #336]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006018:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006020:	4950      	ldr	r1, [pc, #320]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006034:	4b4b      	ldr	r3, [pc, #300]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006042:	4948      	ldr	r1, [pc, #288]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006056:	4b43      	ldr	r3, [pc, #268]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006064:	493f      	ldr	r1, [pc, #252]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d028      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006078:	4b3a      	ldr	r3, [pc, #232]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006086:	4937      	ldr	r1, [pc, #220]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006096:	d106      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006098:	4b32      	ldr	r3, [pc, #200]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a31      	ldr	r2, [pc, #196]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060a2:	60d3      	str	r3, [r2, #12]
 80060a4:	e011      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060ae:	d10c      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	2101      	movs	r1, #1
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 f8d8 	bl	800626c <RCCEx_PLLSAI1_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060c0:	7cfb      	ldrb	r3, [r7, #19]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060c6:	7cfb      	ldrb	r3, [r7, #19]
 80060c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d028      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060d6:	4b23      	ldr	r3, [pc, #140]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e4:	491f      	ldr	r1, [pc, #124]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060f4:	d106      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006100:	60d3      	str	r3, [r2, #12]
 8006102:	e011      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006108:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800610c:	d10c      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f8a9 	bl	800626c <RCCEx_PLLSAI1_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800611e:	7cfb      	ldrb	r3, [r7, #19]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d02b      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006134:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006142:	4908      	ldr	r1, [pc, #32]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006152:	d109      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006154:	4b03      	ldr	r3, [pc, #12]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a02      	ldr	r2, [pc, #8]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800615e:	60d3      	str	r3, [r2, #12]
 8006160:	e014      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006162:	bf00      	nop
 8006164:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800616c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006170:	d10c      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f877 	bl	800626c <RCCEx_PLLSAI1_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006182:	7cfb      	ldrb	r3, [r7, #19]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006188:	7cfb      	ldrb	r3, [r7, #19]
 800618a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d02f      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006198:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061a6:	4928      	ldr	r1, [pc, #160]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061b6:	d10d      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f854 	bl	800626c <RCCEx_PLLSAI1_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c8:	7cfb      	ldrb	r3, [r7, #19]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d014      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061ce:	7cfb      	ldrb	r3, [r7, #19]
 80061d0:	74bb      	strb	r3, [r7, #18]
 80061d2:	e011      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3320      	adds	r3, #32
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f935 	bl	8006454 <RCCEx_PLLSAI2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006204:	4b10      	ldr	r3, [pc, #64]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006212:	490d      	ldr	r1, [pc, #52]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006226:	4b08      	ldr	r3, [pc, #32]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006236:	4904      	ldr	r1, [pc, #16]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800623e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40021000 	.word	0x40021000

0800624c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006250:	4b05      	ldr	r3, [pc, #20]	@ (8006268 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a04      	ldr	r2, [pc, #16]	@ (8006268 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006256:	f043 0304 	orr.w	r3, r3, #4
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000

0800626c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800627a:	4b75      	ldr	r3, [pc, #468]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006286:	4b72      	ldr	r3, [pc, #456]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0203 	and.w	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d10d      	bne.n	80062b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
       ||
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800629e:	4b6c      	ldr	r3, [pc, #432]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
       ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d047      	beq.n	8006342 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	e044      	b.n	8006342 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d018      	beq.n	80062f2 <RCCEx_PLLSAI1_Config+0x86>
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d825      	bhi.n	8006310 <RCCEx_PLLSAI1_Config+0xa4>
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d002      	beq.n	80062ce <RCCEx_PLLSAI1_Config+0x62>
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d009      	beq.n	80062e0 <RCCEx_PLLSAI1_Config+0x74>
 80062cc:	e020      	b.n	8006310 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ce:	4b60      	ldr	r3, [pc, #384]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d11d      	bne.n	8006316 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062de:	e01a      	b.n	8006316 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d116      	bne.n	800631a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f0:	e013      	b.n	800631a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062f2:	4b57      	ldr	r3, [pc, #348]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062fe:	4b54      	ldr	r3, [pc, #336]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800630e:	e006      	b.n	800631e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e004      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800631e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10d      	bne.n	8006342 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006326:	4b4a      	ldr	r3, [pc, #296]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	3b01      	subs	r3, #1
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	430b      	orrs	r3, r1
 800633c:	4944      	ldr	r1, [pc, #272]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800633e:	4313      	orrs	r3, r2
 8006340:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d17d      	bne.n	8006444 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006348:	4b41      	ldr	r3, [pc, #260]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a40      	ldr	r2, [pc, #256]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800634e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006354:	f7fd f814 	bl	8003380 <HAL_GetTick>
 8006358:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800635a:	e009      	b.n	8006370 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800635c:	f7fd f810 	bl	8003380 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d902      	bls.n	8006370 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	73fb      	strb	r3, [r7, #15]
        break;
 800636e:	e005      	b.n	800637c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006370:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1ef      	bne.n	800635c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d160      	bne.n	8006444 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d111      	bne.n	80063ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006388:	4b31      	ldr	r3, [pc, #196]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6892      	ldr	r2, [r2, #8]
 8006398:	0211      	lsls	r1, r2, #8
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	68d2      	ldr	r2, [r2, #12]
 800639e:	0912      	lsrs	r2, r2, #4
 80063a0:	0452      	lsls	r2, r2, #17
 80063a2:	430a      	orrs	r2, r1
 80063a4:	492a      	ldr	r1, [pc, #168]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	610b      	str	r3, [r1, #16]
 80063aa:	e027      	b.n	80063fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d112      	bne.n	80063d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063b2:	4b27      	ldr	r3, [pc, #156]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80063ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6892      	ldr	r2, [r2, #8]
 80063c2:	0211      	lsls	r1, r2, #8
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6912      	ldr	r2, [r2, #16]
 80063c8:	0852      	lsrs	r2, r2, #1
 80063ca:	3a01      	subs	r2, #1
 80063cc:	0552      	lsls	r2, r2, #21
 80063ce:	430a      	orrs	r2, r1
 80063d0:	491f      	ldr	r1, [pc, #124]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	610b      	str	r3, [r1, #16]
 80063d6:	e011      	b.n	80063fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80063e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6892      	ldr	r2, [r2, #8]
 80063e8:	0211      	lsls	r1, r2, #8
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6952      	ldr	r2, [r2, #20]
 80063ee:	0852      	lsrs	r2, r2, #1
 80063f0:	3a01      	subs	r2, #1
 80063f2:	0652      	lsls	r2, r2, #25
 80063f4:	430a      	orrs	r2, r1
 80063f6:	4916      	ldr	r1, [pc, #88]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063fc:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a13      	ldr	r2, [pc, #76]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006402:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006406:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006408:	f7fc ffba 	bl	8003380 <HAL_GetTick>
 800640c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800640e:	e009      	b.n	8006424 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006410:	f7fc ffb6 	bl	8003380 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d902      	bls.n	8006424 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	73fb      	strb	r3, [r7, #15]
          break;
 8006422:	e005      	b.n	8006430 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006424:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ef      	beq.n	8006410 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006436:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	4904      	ldr	r1, [pc, #16]	@ (8006450 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006440:	4313      	orrs	r3, r2
 8006442:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000

08006454 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006462:	4b6a      	ldr	r3, [pc, #424]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800646e:	4b67      	ldr	r3, [pc, #412]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0203 	and.w	r2, r3, #3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d10d      	bne.n	800649a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
       ||
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006486:	4b61      	ldr	r3, [pc, #388]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
       ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d047      	beq.n	800652a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
 800649e:	e044      	b.n	800652a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d018      	beq.n	80064da <RCCEx_PLLSAI2_Config+0x86>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d825      	bhi.n	80064f8 <RCCEx_PLLSAI2_Config+0xa4>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d002      	beq.n	80064b6 <RCCEx_PLLSAI2_Config+0x62>
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d009      	beq.n	80064c8 <RCCEx_PLLSAI2_Config+0x74>
 80064b4:	e020      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064b6:	4b55      	ldr	r3, [pc, #340]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11d      	bne.n	80064fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c6:	e01a      	b.n	80064fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064c8:	4b50      	ldr	r3, [pc, #320]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d8:	e013      	b.n	8006502 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064da:	4b4c      	ldr	r3, [pc, #304]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10f      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064e6:	4b49      	ldr	r3, [pc, #292]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064f6:	e006      	b.n	8006506 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e004      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006506:	bf00      	nop
    }

    if(status == HAL_OK)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800650e:	4b3f      	ldr	r3, [pc, #252]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	3b01      	subs	r3, #1
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	430b      	orrs	r3, r1
 8006524:	4939      	ldr	r1, [pc, #228]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d167      	bne.n	8006600 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006530:	4b36      	ldr	r3, [pc, #216]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a35      	ldr	r2, [pc, #212]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800653a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653c:	f7fc ff20 	bl	8003380 <HAL_GetTick>
 8006540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006542:	e009      	b.n	8006558 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006544:	f7fc ff1c 	bl	8003380 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d902      	bls.n	8006558 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	73fb      	strb	r3, [r7, #15]
        break;
 8006556:	e005      	b.n	8006564 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006558:	4b2c      	ldr	r3, [pc, #176]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ef      	bne.n	8006544 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d14a      	bne.n	8006600 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d111      	bne.n	8006594 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006570:	4b26      	ldr	r3, [pc, #152]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6892      	ldr	r2, [r2, #8]
 8006580:	0211      	lsls	r1, r2, #8
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	68d2      	ldr	r2, [r2, #12]
 8006586:	0912      	lsrs	r2, r2, #4
 8006588:	0452      	lsls	r2, r2, #17
 800658a:	430a      	orrs	r2, r1
 800658c:	491f      	ldr	r1, [pc, #124]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 800658e:	4313      	orrs	r3, r2
 8006590:	614b      	str	r3, [r1, #20]
 8006592:	e011      	b.n	80065b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006594:	4b1d      	ldr	r3, [pc, #116]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800659c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6892      	ldr	r2, [r2, #8]
 80065a4:	0211      	lsls	r1, r2, #8
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6912      	ldr	r2, [r2, #16]
 80065aa:	0852      	lsrs	r2, r2, #1
 80065ac:	3a01      	subs	r2, #1
 80065ae:	0652      	lsls	r2, r2, #25
 80065b0:	430a      	orrs	r2, r1
 80065b2:	4916      	ldr	r1, [pc, #88]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065b8:	4b14      	ldr	r3, [pc, #80]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a13      	ldr	r2, [pc, #76]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c4:	f7fc fedc 	bl	8003380 <HAL_GetTick>
 80065c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065ca:	e009      	b.n	80065e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065cc:	f7fc fed8 	bl	8003380 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d902      	bls.n	80065e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	73fb      	strb	r3, [r7, #15]
          break;
 80065de:	e005      	b.n	80065ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065e0:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0ef      	beq.n	80065cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065f2:	4b06      	ldr	r3, [pc, #24]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f4:	695a      	ldr	r2, [r3, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	4904      	ldr	r1, [pc, #16]	@ (800660c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	40021000 	.word	0x40021000

08006610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e095      	b.n	800674e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d108      	bne.n	800663c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006632:	d009      	beq.n	8006648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	61da      	str	r2, [r3, #28]
 800663a:	e005      	b.n	8006648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f877 	bl	8006756 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800667e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006688:	d902      	bls.n	8006690 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	e002      	b.n	8006696 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006694:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800669e:	d007      	beq.n	80066b0 <HAL_SPI_Init+0xa0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066a8:	d002      	beq.n	80066b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f2:	ea42 0103 	orr.w	r1, r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	0c1b      	lsrs	r3, r3, #16
 800670c:	f003 0204 	and.w	r2, r3, #4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800672c:	ea42 0103 	orr.w	r1, r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b08a      	sub	sp, #40	@ 0x28
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006778:	2301      	movs	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800677c:	f7fc fe00 	bl	8003380 <HAL_GetTick>
 8006780:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006788:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006790:	887b      	ldrh	r3, [r7, #2]
 8006792:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006798:	7ffb      	ldrb	r3, [r7, #31]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d00c      	beq.n	80067b8 <HAL_SPI_TransmitReceive+0x4e>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067a4:	d106      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x4a>
 80067ae:	7ffb      	ldrb	r3, [r7, #31]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d001      	beq.n	80067b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
 80067b6:	e1f3      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_SPI_TransmitReceive+0x60>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <HAL_SPI_TransmitReceive+0x60>
 80067c4:	887b      	ldrh	r3, [r7, #2]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e1e8      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x72>
 80067d8:	2302      	movs	r3, #2
 80067da:	e1e1      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x436>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d003      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2205      	movs	r2, #5
 80067f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	887a      	ldrh	r2, [r7, #2]
 8006808:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	887a      	ldrh	r2, [r7, #2]
 8006810:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	887a      	ldrh	r2, [r7, #2]
 800681e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	887a      	ldrh	r2, [r7, #2]
 8006824:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800683a:	d802      	bhi.n	8006842 <HAL_SPI_TransmitReceive+0xd8>
 800683c:	8abb      	ldrh	r3, [r7, #20]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d908      	bls.n	8006854 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006850:	605a      	str	r2, [r3, #4]
 8006852:	e007      	b.n	8006864 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006862:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d007      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006880:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800688a:	f240 8083 	bls.w	8006994 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_SPI_TransmitReceive+0x132>
 8006896:	8afb      	ldrh	r3, [r7, #22]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d16f      	bne.n	800697c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a0:	881a      	ldrh	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c0:	e05c      	b.n	800697c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d11b      	bne.n	8006908 <HAL_SPI_TransmitReceive+0x19e>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d016      	beq.n	8006908 <HAL_SPI_TransmitReceive+0x19e>
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d113      	bne.n	8006908 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	881a      	ldrh	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f0:	1c9a      	adds	r2, r3, #2
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	d11c      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x1e6>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692c:	b292      	uxth	r2, r2
 800692e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	1c9a      	adds	r2, r3, #2
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800694c:	2301      	movs	r3, #1
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006950:	f7fc fd16 	bl	8003380 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695c:	429a      	cmp	r2, r3
 800695e:	d80d      	bhi.n	800697c <HAL_SPI_TransmitReceive+0x212>
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d009      	beq.n	800697c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e111      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d19d      	bne.n	80068c2 <HAL_SPI_TransmitReceive+0x158>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d197      	bne.n	80068c2 <HAL_SPI_TransmitReceive+0x158>
 8006992:	e0e5      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x23a>
 800699c:	8afb      	ldrh	r3, [r7, #22]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	f040 80d1 	bne.w	8006b46 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d912      	bls.n	80069d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b2:	881a      	ldrh	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069be:	1c9a      	adds	r2, r3, #2
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b02      	subs	r3, #2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069d2:	e0b8      	b.n	8006b46 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	330c      	adds	r3, #12
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069fa:	e0a4      	b.n	8006b46 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d134      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x30a>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d02f      	beq.n	8006a74 <HAL_SPI_TransmitReceive+0x30a>
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d12c      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d912      	bls.n	8006a4a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	1c9a      	adds	r2, r3, #2
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b02      	subs	r3, #2
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a48:	e012      	b.n	8006a70 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	330c      	adds	r3, #12
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d148      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x3aa>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d042      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d923      	bls.n	8006ae2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	b292      	uxth	r2, r2
 8006aa6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	1c9a      	adds	r2, r3, #2
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b02      	subs	r3, #2
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d81f      	bhi.n	8006b10 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	e016      	b.n	8006b10 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f103 020c 	add.w	r2, r3, #12
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b10:	2301      	movs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b14:	f7fc fc34 	bl	8003380 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d803      	bhi.n	8006b2c <HAL_SPI_TransmitReceive+0x3c2>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d102      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x3c8>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e02c      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f47f af55 	bne.w	80069fc <HAL_SPI_TransmitReceive+0x292>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f47f af4e 	bne.w	80069fc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b60:	6a3a      	ldr	r2, [r7, #32]
 8006b62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f94b 	bl	8006e00 <SPI_EndRxTxTransaction>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e00e      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
  }
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3728      	adds	r7, #40	@ 0x28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bb6:	b2db      	uxtb	r3, r3
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bd4:	f7fc fbd4 	bl	8003380 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006be4:	f7fc fbcc 	bl	8003380 <HAL_GetTick>
 8006be8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bea:	4b39      	ldr	r3, [pc, #228]	@ (8006cd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	015b      	lsls	r3, r3, #5
 8006bf0:	0d1b      	lsrs	r3, r3, #20
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	fb02 f303 	mul.w	r3, r2, r3
 8006bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bfa:	e054      	b.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d050      	beq.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c04:	f7fc fbbc 	bl	8003380 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d902      	bls.n	8006c1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d13d      	bne.n	8006c96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c32:	d111      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c3c:	d004      	beq.n	8006c48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c46:	d107      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c60:	d10f      	bne.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e017      	b.n	8006cc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	bf0c      	ite	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	2300      	movne	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d19b      	bne.n	8006bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000000c 	.word	0x2000000c

08006cd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	@ 0x28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ce6:	f7fc fb4b 	bl	8003380 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006cf6:	f7fc fb43 	bl	8003380 <HAL_GetTick>
 8006cfa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d04:	4b3d      	ldr	r3, [pc, #244]	@ (8006dfc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	00da      	lsls	r2, r3, #3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	0d1b      	lsrs	r3, r3, #20
 8006d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d1c:	e060      	b.n	8006de0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d24:	d107      	bne.n	8006d36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d050      	beq.n	8006de0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d3e:	f7fc fb1f 	bl	8003380 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d902      	bls.n	8006d54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d13d      	bne.n	8006dd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d6c:	d111      	bne.n	8006d92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d76:	d004      	beq.n	8006d82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d80:	d107      	bne.n	8006d92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d9a:	d10f      	bne.n	8006dbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e010      	b.n	8006df2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4013      	ands	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d196      	bne.n	8006d1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3728      	adds	r7, #40	@ 0x28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	2000000c 	.word	0x2000000c

08006e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f7ff ff5b 	bl	8006cd4 <SPI_WaitFifoStateUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e28:	f043 0220 	orr.w	r2, r3, #32
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e027      	b.n	8006e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2180      	movs	r1, #128	@ 0x80
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fec0 	bl	8006bc4 <SPI_WaitFlagStateUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d007      	beq.n	8006e5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e4e:	f043 0220 	orr.w	r2, r3, #32
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e014      	b.n	8006e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff ff34 	bl	8006cd4 <SPI_WaitFifoStateUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e76:	f043 0220 	orr.w	r2, r3, #32
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e000      	b.n	8006e84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e049      	b.n	8006f32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fb f990 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f000 fa9e 	bl	800740c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d001      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e04f      	b.n	8006ff4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a23      	ldr	r2, [pc, #140]	@ (8007000 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d01d      	beq.n	8006fb2 <HAL_TIM_Base_Start_IT+0x76>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7e:	d018      	beq.n	8006fb2 <HAL_TIM_Base_Start_IT+0x76>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <HAL_TIM_Base_Start_IT+0x76>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007008 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00e      	beq.n	8006fb2 <HAL_TIM_Base_Start_IT+0x76>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <HAL_TIM_Base_Start_IT+0xd0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_TIM_Base_Start_IT+0x76>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8007010 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_TIM_Base_Start_IT+0x76>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a19      	ldr	r2, [pc, #100]	@ (8007014 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d115      	bne.n	8006fde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	4b17      	ldr	r3, [pc, #92]	@ (8007018 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b06      	cmp	r3, #6
 8006fc2:	d015      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0xb4>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fca:	d011      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fdc:	e008      	b.n	8006ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e000      	b.n	8006ff2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40013400 	.word	0x40013400
 8007014:	40014000 	.word	0x40014000
 8007018:	00010007 	.word	0x00010007

0800701c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d020      	beq.n	8007080 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0202 	mvn.w	r2, #2
 8007050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9b2 	bl	80073d0 <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9a4 	bl	80073bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9b5 	bl	80073e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d020      	beq.n	80070cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01b      	beq.n	80070cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0204 	mvn.w	r2, #4
 800709c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f98c 	bl	80073d0 <HAL_TIM_IC_CaptureCallback>
 80070b8:	e005      	b.n	80070c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f97e 	bl	80073bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f98f 	bl	80073e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d020      	beq.n	8007118 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01b      	beq.n	8007118 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0208 	mvn.w	r2, #8
 80070e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2204      	movs	r2, #4
 80070ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f966 	bl	80073d0 <HAL_TIM_IC_CaptureCallback>
 8007104:	e005      	b.n	8007112 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f958 	bl	80073bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f969 	bl	80073e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b00      	cmp	r3, #0
 8007120:	d020      	beq.n	8007164 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f003 0310 	and.w	r3, r3, #16
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01b      	beq.n	8007164 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0210 	mvn.w	r2, #16
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2208      	movs	r2, #8
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f940 	bl	80073d0 <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f932 	bl	80073bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f943 	bl	80073e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d007      	beq.n	8007188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0201 	mvn.w	r2, #1
 8007180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fa fdec 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80071ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fafd 	bl	80077b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00c      	beq.n	80071da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80071d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 faf5 	bl	80077c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80071f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8fd 	bl	80073f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f06f 0220 	mvn.w	r2, #32
 800721a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fabd 	bl	800779c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_TIM_ConfigClockSource+0x1c>
 8007242:	2302      	movs	r3, #2
 8007244:	e0b6      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x18a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007264:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007268:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007270:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007282:	d03e      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0xd8>
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007288:	f200 8087 	bhi.w	800739a <HAL_TIM_ConfigClockSource+0x170>
 800728c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007290:	f000 8086 	beq.w	80073a0 <HAL_TIM_ConfigClockSource+0x176>
 8007294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007298:	d87f      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x170>
 800729a:	2b70      	cmp	r3, #112	@ 0x70
 800729c:	d01a      	beq.n	80072d4 <HAL_TIM_ConfigClockSource+0xaa>
 800729e:	2b70      	cmp	r3, #112	@ 0x70
 80072a0:	d87b      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x170>
 80072a2:	2b60      	cmp	r3, #96	@ 0x60
 80072a4:	d050      	beq.n	8007348 <HAL_TIM_ConfigClockSource+0x11e>
 80072a6:	2b60      	cmp	r3, #96	@ 0x60
 80072a8:	d877      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x170>
 80072aa:	2b50      	cmp	r3, #80	@ 0x50
 80072ac:	d03c      	beq.n	8007328 <HAL_TIM_ConfigClockSource+0xfe>
 80072ae:	2b50      	cmp	r3, #80	@ 0x50
 80072b0:	d873      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x170>
 80072b2:	2b40      	cmp	r3, #64	@ 0x40
 80072b4:	d058      	beq.n	8007368 <HAL_TIM_ConfigClockSource+0x13e>
 80072b6:	2b40      	cmp	r3, #64	@ 0x40
 80072b8:	d86f      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x170>
 80072ba:	2b30      	cmp	r3, #48	@ 0x30
 80072bc:	d064      	beq.n	8007388 <HAL_TIM_ConfigClockSource+0x15e>
 80072be:	2b30      	cmp	r3, #48	@ 0x30
 80072c0:	d86b      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x170>
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d060      	beq.n	8007388 <HAL_TIM_ConfigClockSource+0x15e>
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d867      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x170>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d05c      	beq.n	8007388 <HAL_TIM_ConfigClockSource+0x15e>
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d05a      	beq.n	8007388 <HAL_TIM_ConfigClockSource+0x15e>
 80072d2:	e062      	b.n	800739a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072e4:	f000 f9b2 	bl	800764c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	609a      	str	r2, [r3, #8]
      break;
 8007300:	e04f      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007312:	f000 f99b 	bl	800764c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007324:	609a      	str	r2, [r3, #8]
      break;
 8007326:	e03c      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007334:	461a      	mov	r2, r3
 8007336:	f000 f90f 	bl	8007558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2150      	movs	r1, #80	@ 0x50
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f968 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8007346:	e02c      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007354:	461a      	mov	r2, r3
 8007356:	f000 f92e 	bl	80075b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2160      	movs	r1, #96	@ 0x60
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f958 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8007366:	e01c      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007374:	461a      	mov	r2, r3
 8007376:	f000 f8ef 	bl	8007558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2140      	movs	r1, #64	@ 0x40
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f948 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8007386:	e00c      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f000 f93f 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8007398:	e003      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	73fb      	strb	r3, [r7, #15]
      break;
 800739e:	e000      	b.n	80073a2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a46      	ldr	r2, [pc, #280]	@ (8007538 <TIM_Base_SetConfig+0x12c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d013      	beq.n	800744c <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742a:	d00f      	beq.n	800744c <TIM_Base_SetConfig+0x40>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a43      	ldr	r2, [pc, #268]	@ (800753c <TIM_Base_SetConfig+0x130>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00b      	beq.n	800744c <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a42      	ldr	r2, [pc, #264]	@ (8007540 <TIM_Base_SetConfig+0x134>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d007      	beq.n	800744c <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a41      	ldr	r2, [pc, #260]	@ (8007544 <TIM_Base_SetConfig+0x138>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d003      	beq.n	800744c <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a40      	ldr	r2, [pc, #256]	@ (8007548 <TIM_Base_SetConfig+0x13c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d108      	bne.n	800745e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a35      	ldr	r2, [pc, #212]	@ (8007538 <TIM_Base_SetConfig+0x12c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01f      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800746c:	d01b      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a32      	ldr	r2, [pc, #200]	@ (800753c <TIM_Base_SetConfig+0x130>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d017      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a31      	ldr	r2, [pc, #196]	@ (8007540 <TIM_Base_SetConfig+0x134>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d013      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a30      	ldr	r2, [pc, #192]	@ (8007544 <TIM_Base_SetConfig+0x138>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d00f      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2f      	ldr	r2, [pc, #188]	@ (8007548 <TIM_Base_SetConfig+0x13c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00b      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2e      	ldr	r2, [pc, #184]	@ (800754c <TIM_Base_SetConfig+0x140>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d007      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2d      	ldr	r2, [pc, #180]	@ (8007550 <TIM_Base_SetConfig+0x144>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_Base_SetConfig+0x9a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007554 <TIM_Base_SetConfig+0x148>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d108      	bne.n	80074b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a16      	ldr	r2, [pc, #88]	@ (8007538 <TIM_Base_SetConfig+0x12c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00f      	beq.n	8007504 <TIM_Base_SetConfig+0xf8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a18      	ldr	r2, [pc, #96]	@ (8007548 <TIM_Base_SetConfig+0x13c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00b      	beq.n	8007504 <TIM_Base_SetConfig+0xf8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a17      	ldr	r2, [pc, #92]	@ (800754c <TIM_Base_SetConfig+0x140>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d007      	beq.n	8007504 <TIM_Base_SetConfig+0xf8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a16      	ldr	r2, [pc, #88]	@ (8007550 <TIM_Base_SetConfig+0x144>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_Base_SetConfig+0xf8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a15      	ldr	r2, [pc, #84]	@ (8007554 <TIM_Base_SetConfig+0x148>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d103      	bne.n	800750c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b01      	cmp	r3, #1
 800751c:	d105      	bne.n	800752a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f023 0201 	bic.w	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	611a      	str	r2, [r3, #16]
  }
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40012c00 	.word	0x40012c00
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40000c00 	.word	0x40000c00
 8007548:	40013400 	.word	0x40013400
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800

08007558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f023 0201 	bic.w	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 030a 	bic.w	r3, r3, #10
 8007594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	621a      	str	r2, [r3, #32]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b087      	sub	sp, #28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	f023 0210 	bic.w	r2, r3, #16
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	031b      	lsls	r3, r3, #12
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800762c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	f043 0307 	orr.w	r3, r3, #7
 8007638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	609a      	str	r2, [r3, #8]
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	021a      	lsls	r2, r3, #8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	431a      	orrs	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	609a      	str	r2, [r3, #8]
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e068      	b.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d004      	beq.n	80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d108      	bne.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80076de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1e      	ldr	r2, [pc, #120]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d01d      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007716:	d018      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1b      	ldr	r2, [pc, #108]	@ (800778c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1a      	ldr	r2, [pc, #104]	@ (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00e      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a18      	ldr	r2, [pc, #96]	@ (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d009      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a13      	ldr	r2, [pc, #76]	@ (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d004      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a14      	ldr	r2, [pc, #80]	@ (8007798 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d10c      	bne.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4313      	orrs	r3, r2
 800775a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40013400 	.word	0x40013400
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40014000 	.word	0x40014000

0800779c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e040      	b.n	800786c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fa fd48 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2224      	movs	r2, #36	@ 0x24
 8007804:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0201 	bic.w	r2, r2, #1
 8007814:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fb6a 	bl	8007ef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8af 	bl	8007988 <UART_SetConfig>
 800782a:	4603      	mov	r3, r0
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e01b      	b.n	800786c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbe9 	bl	800803c <UART_CheckIdleState>
 800786a:	4603      	mov	r3, r0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	@ 0x28
 8007878:	af02      	add	r7, sp, #8
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	4613      	mov	r3, r2
 8007882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007888:	2b20      	cmp	r3, #32
 800788a:	d177      	bne.n	800797c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_UART_Transmit+0x24>
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e070      	b.n	800797e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2221      	movs	r2, #33	@ 0x21
 80078a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078aa:	f7fb fd69 	bl	8003380 <HAL_GetTick>
 80078ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	88fa      	ldrh	r2, [r7, #6]
 80078bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078c8:	d108      	bne.n	80078dc <HAL_UART_Transmit+0x68>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e003      	b.n	80078e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078e4:	e02f      	b.n	8007946 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2180      	movs	r1, #128	@ 0x80
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fc4b 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e03b      	b.n	800797e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10b      	bne.n	8007924 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007918:	b292      	uxth	r2, r2
 800791a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	3302      	adds	r3, #2
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	e007      	b.n	8007934 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	781a      	ldrb	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	3301      	adds	r3, #1
 8007932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1c9      	bne.n	80078e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2200      	movs	r2, #0
 800795a:	2140      	movs	r1, #64	@ 0x40
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fc15 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2220      	movs	r2, #32
 800796c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e005      	b.n	800797e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	e000      	b.n	800797e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800797c:	2302      	movs	r3, #2
  }
}
 800797e:	4618      	mov	r0, r3
 8007980:	3720      	adds	r7, #32
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800798c:	b08a      	sub	sp, #40	@ 0x28
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4ba4      	ldr	r3, [pc, #656]	@ (8007c48 <UART_SetConfig+0x2c0>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079c0:	430b      	orrs	r3, r1
 80079c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a99      	ldr	r2, [pc, #612]	@ (8007c4c <UART_SetConfig+0x2c4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079f0:	4313      	orrs	r3, r2
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a04:	430a      	orrs	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a90      	ldr	r2, [pc, #576]	@ (8007c50 <UART_SetConfig+0x2c8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d126      	bne.n	8007a60 <UART_SetConfig+0xd8>
 8007a12:	4b90      	ldr	r3, [pc, #576]	@ (8007c54 <UART_SetConfig+0x2cc>)
 8007a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a18:	f003 0303 	and.w	r3, r3, #3
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d81b      	bhi.n	8007a58 <UART_SetConfig+0xd0>
 8007a20:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <UART_SetConfig+0xa0>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a39 	.word	0x08007a39
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a51 	.word	0x08007a51
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a3e:	e116      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007a40:	2302      	movs	r3, #2
 8007a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a46:	e112      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4e:	e10e      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007a50:	2308      	movs	r3, #8
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a56:	e10a      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5e:	e106      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a7c      	ldr	r2, [pc, #496]	@ (8007c58 <UART_SetConfig+0x2d0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d138      	bne.n	8007adc <UART_SetConfig+0x154>
 8007a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8007c54 <UART_SetConfig+0x2cc>)
 8007a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a70:	f003 030c 	and.w	r3, r3, #12
 8007a74:	2b0c      	cmp	r3, #12
 8007a76:	d82d      	bhi.n	8007ad4 <UART_SetConfig+0x14c>
 8007a78:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <UART_SetConfig+0xf8>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007ab5 	.word	0x08007ab5
 8007a84:	08007ad5 	.word	0x08007ad5
 8007a88:	08007ad5 	.word	0x08007ad5
 8007a8c:	08007ad5 	.word	0x08007ad5
 8007a90:	08007ac5 	.word	0x08007ac5
 8007a94:	08007ad5 	.word	0x08007ad5
 8007a98:	08007ad5 	.word	0x08007ad5
 8007a9c:	08007ad5 	.word	0x08007ad5
 8007aa0:	08007abd 	.word	0x08007abd
 8007aa4:	08007ad5 	.word	0x08007ad5
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	08007ad5 	.word	0x08007ad5
 8007ab0:	08007acd 	.word	0x08007acd
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aba:	e0d8      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007abc:	2302      	movs	r3, #2
 8007abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac2:	e0d4      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aca:	e0d0      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007acc:	2308      	movs	r3, #8
 8007ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad2:	e0cc      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ada:	e0c8      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8007c5c <UART_SetConfig+0x2d4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d125      	bne.n	8007b32 <UART_SetConfig+0x1aa>
 8007ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8007c54 <UART_SetConfig+0x2cc>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007af0:	2b30      	cmp	r3, #48	@ 0x30
 8007af2:	d016      	beq.n	8007b22 <UART_SetConfig+0x19a>
 8007af4:	2b30      	cmp	r3, #48	@ 0x30
 8007af6:	d818      	bhi.n	8007b2a <UART_SetConfig+0x1a2>
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d00a      	beq.n	8007b12 <UART_SetConfig+0x18a>
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d814      	bhi.n	8007b2a <UART_SetConfig+0x1a2>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <UART_SetConfig+0x182>
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	d008      	beq.n	8007b1a <UART_SetConfig+0x192>
 8007b08:	e00f      	b.n	8007b2a <UART_SetConfig+0x1a2>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b10:	e0ad      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b12:	2302      	movs	r3, #2
 8007b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b18:	e0a9      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b1a:	2304      	movs	r3, #4
 8007b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b20:	e0a5      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b22:	2308      	movs	r3, #8
 8007b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b28:	e0a1      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b30:	e09d      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a4a      	ldr	r2, [pc, #296]	@ (8007c60 <UART_SetConfig+0x2d8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d125      	bne.n	8007b88 <UART_SetConfig+0x200>
 8007b3c:	4b45      	ldr	r3, [pc, #276]	@ (8007c54 <UART_SetConfig+0x2cc>)
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b48:	d016      	beq.n	8007b78 <UART_SetConfig+0x1f0>
 8007b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b4c:	d818      	bhi.n	8007b80 <UART_SetConfig+0x1f8>
 8007b4e:	2b80      	cmp	r3, #128	@ 0x80
 8007b50:	d00a      	beq.n	8007b68 <UART_SetConfig+0x1e0>
 8007b52:	2b80      	cmp	r3, #128	@ 0x80
 8007b54:	d814      	bhi.n	8007b80 <UART_SetConfig+0x1f8>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <UART_SetConfig+0x1d8>
 8007b5a:	2b40      	cmp	r3, #64	@ 0x40
 8007b5c:	d008      	beq.n	8007b70 <UART_SetConfig+0x1e8>
 8007b5e:	e00f      	b.n	8007b80 <UART_SetConfig+0x1f8>
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b66:	e082      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b6e:	e07e      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b76:	e07a      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b7e:	e076      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b86:	e072      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a35      	ldr	r2, [pc, #212]	@ (8007c64 <UART_SetConfig+0x2dc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d12a      	bne.n	8007be8 <UART_SetConfig+0x260>
 8007b92:	4b30      	ldr	r3, [pc, #192]	@ (8007c54 <UART_SetConfig+0x2cc>)
 8007b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ba0:	d01a      	beq.n	8007bd8 <UART_SetConfig+0x250>
 8007ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ba6:	d81b      	bhi.n	8007be0 <UART_SetConfig+0x258>
 8007ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bac:	d00c      	beq.n	8007bc8 <UART_SetConfig+0x240>
 8007bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb2:	d815      	bhi.n	8007be0 <UART_SetConfig+0x258>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <UART_SetConfig+0x238>
 8007bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bbc:	d008      	beq.n	8007bd0 <UART_SetConfig+0x248>
 8007bbe:	e00f      	b.n	8007be0 <UART_SetConfig+0x258>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bc6:	e052      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bce:	e04e      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bd6:	e04a      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007bd8:	2308      	movs	r3, #8
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bde:	e046      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007be0:	2310      	movs	r3, #16
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be6:	e042      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a17      	ldr	r2, [pc, #92]	@ (8007c4c <UART_SetConfig+0x2c4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d13a      	bne.n	8007c68 <UART_SetConfig+0x2e0>
 8007bf2:	4b18      	ldr	r3, [pc, #96]	@ (8007c54 <UART_SetConfig+0x2cc>)
 8007bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c00:	d01a      	beq.n	8007c38 <UART_SetConfig+0x2b0>
 8007c02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c06:	d81b      	bhi.n	8007c40 <UART_SetConfig+0x2b8>
 8007c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c0c:	d00c      	beq.n	8007c28 <UART_SetConfig+0x2a0>
 8007c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c12:	d815      	bhi.n	8007c40 <UART_SetConfig+0x2b8>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <UART_SetConfig+0x298>
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c1c:	d008      	beq.n	8007c30 <UART_SetConfig+0x2a8>
 8007c1e:	e00f      	b.n	8007c40 <UART_SetConfig+0x2b8>
 8007c20:	2300      	movs	r3, #0
 8007c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c26:	e022      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c2e:	e01e      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007c30:	2304      	movs	r3, #4
 8007c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c36:	e01a      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007c38:	2308      	movs	r3, #8
 8007c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c3e:	e016      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c46:	e012      	b.n	8007c6e <UART_SetConfig+0x2e6>
 8007c48:	efff69f3 	.word	0xefff69f3
 8007c4c:	40008000 	.word	0x40008000
 8007c50:	40013800 	.word	0x40013800
 8007c54:	40021000 	.word	0x40021000
 8007c58:	40004400 	.word	0x40004400
 8007c5c:	40004800 	.word	0x40004800
 8007c60:	40004c00 	.word	0x40004c00
 8007c64:	40005000 	.word	0x40005000
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a9f      	ldr	r2, [pc, #636]	@ (8007ef0 <UART_SetConfig+0x568>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d17a      	bne.n	8007d6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d824      	bhi.n	8007cca <UART_SetConfig+0x342>
 8007c80:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <UART_SetConfig+0x300>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007ccb 	.word	0x08007ccb
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007ccb 	.word	0x08007ccb
 8007c98:	08007cbb 	.word	0x08007cbb
 8007c9c:	08007ccb 	.word	0x08007ccb
 8007ca0:	08007ccb 	.word	0x08007ccb
 8007ca4:	08007ccb 	.word	0x08007ccb
 8007ca8:	08007cc3 	.word	0x08007cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cac:	f7fd ff58 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8007cb0:	61f8      	str	r0, [r7, #28]
        break;
 8007cb2:	e010      	b.n	8007cd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8007ef4 <UART_SetConfig+0x56c>)
 8007cb6:	61fb      	str	r3, [r7, #28]
        break;
 8007cb8:	e00d      	b.n	8007cd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cba:	f7fd feb9 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8007cbe:	61f8      	str	r0, [r7, #28]
        break;
 8007cc0:	e009      	b.n	8007cd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc6:	61fb      	str	r3, [r7, #28]
        break;
 8007cc8:	e005      	b.n	8007cd6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007cd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80fb 	beq.w	8007ed4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	4413      	add	r3, r2
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d305      	bcc.n	8007cfa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d903      	bls.n	8007d02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d00:	e0e8      	b.n	8007ed4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	2200      	movs	r2, #0
 8007d06:	461c      	mov	r4, r3
 8007d08:	4615      	mov	r5, r2
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	022b      	lsls	r3, r5, #8
 8007d14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d18:	0222      	lsls	r2, r4, #8
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	6849      	ldr	r1, [r1, #4]
 8007d1e:	0849      	lsrs	r1, r1, #1
 8007d20:	2000      	movs	r0, #0
 8007d22:	4688      	mov	r8, r1
 8007d24:	4681      	mov	r9, r0
 8007d26:	eb12 0a08 	adds.w	sl, r2, r8
 8007d2a:	eb43 0b09 	adc.w	fp, r3, r9
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	603b      	str	r3, [r7, #0]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	4659      	mov	r1, fp
 8007d40:	f7f8 fcaa 	bl	8000698 <__aeabi_uldivmod>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4613      	mov	r3, r2
 8007d4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d52:	d308      	bcc.n	8007d66 <UART_SetConfig+0x3de>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d5a:	d204      	bcs.n	8007d66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	60da      	str	r2, [r3, #12]
 8007d64:	e0b6      	b.n	8007ed4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d6c:	e0b2      	b.n	8007ed4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d76:	d15e      	bne.n	8007e36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d828      	bhi.n	8007dd2 <UART_SetConfig+0x44a>
 8007d80:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0x400>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	08007dd3 	.word	0x08007dd3
 8007d98:	08007dc3 	.word	0x08007dc3
 8007d9c:	08007dd3 	.word	0x08007dd3
 8007da0:	08007dd3 	.word	0x08007dd3
 8007da4:	08007dd3 	.word	0x08007dd3
 8007da8:	08007dcb 	.word	0x08007dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dac:	f7fd fed8 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8007db0:	61f8      	str	r0, [r7, #28]
        break;
 8007db2:	e014      	b.n	8007dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db4:	f7fd feea 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8007db8:	61f8      	str	r0, [r7, #28]
        break;
 8007dba:	e010      	b.n	8007dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8007ef4 <UART_SetConfig+0x56c>)
 8007dbe:	61fb      	str	r3, [r7, #28]
        break;
 8007dc0:	e00d      	b.n	8007dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dc2:	f7fd fe35 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8007dc6:	61f8      	str	r0, [r7, #28]
        break;
 8007dc8:	e009      	b.n	8007dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dce:	61fb      	str	r3, [r7, #28]
        break;
 8007dd0:	e005      	b.n	8007dde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d077      	beq.n	8007ed4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	005a      	lsls	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	441a      	add	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b0f      	cmp	r3, #15
 8007dfe:	d916      	bls.n	8007e2e <UART_SetConfig+0x4a6>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e06:	d212      	bcs.n	8007e2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f023 030f 	bic.w	r3, r3, #15
 8007e10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	085b      	lsrs	r3, r3, #1
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	8afb      	ldrh	r3, [r7, #22]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	8afa      	ldrh	r2, [r7, #22]
 8007e2a:	60da      	str	r2, [r3, #12]
 8007e2c:	e052      	b.n	8007ed4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e34:	e04e      	b.n	8007ed4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d827      	bhi.n	8007e8e <UART_SetConfig+0x506>
 8007e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <UART_SetConfig+0x4bc>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e69 	.word	0x08007e69
 8007e48:	08007e71 	.word	0x08007e71
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	08007e8f 	.word	0x08007e8f
 8007e54:	08007e7f 	.word	0x08007e7f
 8007e58:	08007e8f 	.word	0x08007e8f
 8007e5c:	08007e8f 	.word	0x08007e8f
 8007e60:	08007e8f 	.word	0x08007e8f
 8007e64:	08007e87 	.word	0x08007e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e68:	f7fd fe7a 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8007e6c:	61f8      	str	r0, [r7, #28]
        break;
 8007e6e:	e014      	b.n	8007e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e70:	f7fd fe8c 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8007e74:	61f8      	str	r0, [r7, #28]
        break;
 8007e76:	e010      	b.n	8007e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e78:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef4 <UART_SetConfig+0x56c>)
 8007e7a:	61fb      	str	r3, [r7, #28]
        break;
 8007e7c:	e00d      	b.n	8007e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e7e:	f7fd fdd7 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8007e82:	61f8      	str	r0, [r7, #28]
        break;
 8007e84:	e009      	b.n	8007e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e8a:	61fb      	str	r3, [r7, #28]
        break;
 8007e8c:	e005      	b.n	8007e9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e98:	bf00      	nop
    }

    if (pclk != 0U)
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d019      	beq.n	8007ed4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	085a      	lsrs	r2, r3, #1
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	441a      	add	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	2b0f      	cmp	r3, #15
 8007eb8:	d909      	bls.n	8007ece <UART_SetConfig+0x546>
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec0:	d205      	bcs.n	8007ece <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	e002      	b.n	8007ed4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007ee0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3728      	adds	r7, #40	@ 0x28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eee:	bf00      	nop
 8007ef0:	40008000 	.word	0x40008000
 8007ef4:	00f42400 	.word	0x00f42400

08007ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01a      	beq.n	800800e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ff6:	d10a      	bne.n	800800e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	605a      	str	r2, [r3, #4]
  }
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b098      	sub	sp, #96	@ 0x60
 8008040:	af02      	add	r7, sp, #8
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800804c:	f7fb f998 	bl	8003380 <HAL_GetTick>
 8008050:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b08      	cmp	r3, #8
 800805e:	d12e      	bne.n	80080be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008068:	2200      	movs	r2, #0
 800806a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f88c 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d021      	beq.n	80080be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800808e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008098:	647b      	str	r3, [r7, #68]	@ 0x44
 800809a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800809e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e6      	bne.n	800807a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e062      	b.n	8008184 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d149      	bne.n	8008160 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d4:	2200      	movs	r2, #0
 80080d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f856 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d03c      	beq.n	8008160 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	623b      	str	r3, [r7, #32]
   return(result);
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008104:	633b      	str	r3, [r7, #48]	@ 0x30
 8008106:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800810a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e6      	bne.n	80080e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3308      	adds	r3, #8
 800811e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	60fb      	str	r3, [r7, #12]
   return(result);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0301 	bic.w	r3, r3, #1
 800812e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008138:	61fa      	str	r2, [r7, #28]
 800813a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	69b9      	ldr	r1, [r7, #24]
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	617b      	str	r3, [r7, #20]
   return(result);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e011      	b.n	8008184 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3758      	adds	r7, #88	@ 0x58
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4613      	mov	r3, r2
 800819a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819c:	e04f      	b.n	800823e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d04b      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a6:	f7fb f8eb 	bl	8003380 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <UART_WaitOnFlagUntilTimeout+0x30>
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e04e      	b.n	800825e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d037      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b80      	cmp	r3, #128	@ 0x80
 80081d2:	d034      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b40      	cmp	r3, #64	@ 0x40
 80081d8:	d031      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d110      	bne.n	800820a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2208      	movs	r2, #8
 80081ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f000 f838 	bl	8008266 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2208      	movs	r2, #8
 80081fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e029      	b.n	800825e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008218:	d111      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f81e 	bl	8008266 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e00f      	b.n	800825e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4013      	ands	r3, r2
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	429a      	cmp	r2, r3
 800824c:	bf0c      	ite	eq
 800824e:	2301      	moveq	r3, #1
 8008250:	2300      	movne	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	461a      	mov	r2, r3
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	429a      	cmp	r2, r3
 800825a:	d0a0      	beq.n	800819e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008266:	b480      	push	{r7}
 8008268:	b095      	sub	sp, #84	@ 0x54
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800827c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800828c:	643b      	str	r3, [r7, #64]	@ 0x40
 800828e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008292:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e6      	bne.n	800826e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3308      	adds	r3, #8
 80082be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e5      	bne.n	80082a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d118      	bne.n	800830e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f023 0310 	bic.w	r3, r3, #16
 80082f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082fa:	61bb      	str	r3, [r7, #24]
 80082fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6979      	ldr	r1, [r7, #20]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	613b      	str	r3, [r7, #16]
   return(result);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e6      	bne.n	80082dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008322:	bf00      	nop
 8008324:	3754      	adds	r7, #84	@ 0x54
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800832e:	b084      	sub	sp, #16
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	f107 001c 	add.w	r0, r7, #28
 800833c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa69 	bl	8008824 <USB_CoreReset>
 8008352:	4603      	mov	r3, r0
 8008354:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008356:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008362:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	639a      	str	r2, [r3, #56]	@ 0x38
 800836a:	e005      	b.n	8008378 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008370:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008384:	b004      	add	sp, #16
 8008386:	4770      	bx	lr

08008388 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f023 0201 	bic.w	r2, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d115      	bne.n	80083f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083d8:	200a      	movs	r0, #10
 80083da:	f7fa ffdd 	bl	8003398 <HAL_Delay>
      ms += 10U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	330a      	adds	r3, #10
 80083e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa0f 	bl	8008808 <USB_GetMode>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d01e      	beq.n	800842e <USB_SetCurrentMode+0x84>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80083f4:	d9f0      	bls.n	80083d8 <USB_SetCurrentMode+0x2e>
 80083f6:	e01a      	b.n	800842e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d115      	bne.n	800842a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800840a:	200a      	movs	r0, #10
 800840c:	f7fa ffc4 	bl	8003398 <HAL_Delay>
      ms += 10U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	330a      	adds	r3, #10
 8008414:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f9f6 	bl	8008808 <USB_GetMode>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <USB_SetCurrentMode+0x84>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2bc7      	cmp	r3, #199	@ 0xc7
 8008426:	d9f0      	bls.n	800840a <USB_SetCurrentMode+0x60>
 8008428:	e001      	b.n	800842e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e005      	b.n	800843a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2bc8      	cmp	r3, #200	@ 0xc8
 8008432:	d101      	bne.n	8008438 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e000      	b.n	800843a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008444:	b084      	sub	sp, #16
 8008446:	b580      	push	{r7, lr}
 8008448:	b086      	sub	sp, #24
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800845e:	2300      	movs	r3, #0
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	e009      	b.n	8008478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	3340      	adds	r3, #64	@ 0x40
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	2200      	movs	r2, #0
 8008470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3301      	adds	r3, #1
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	2b0e      	cmp	r3, #14
 800847c:	d9f2      	bls.n	8008464 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800847e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11c      	bne.n	80084c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008494:	f043 0302 	orr.w	r3, r3, #2
 8008498:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e005      	b.n	80084cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084d2:	461a      	mov	r2, r3
 80084d4:	2300      	movs	r3, #0
 80084d6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084d8:	2103      	movs	r1, #3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f95a 	bl	8008794 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084e0:	2110      	movs	r1, #16
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8f6 	bl	80086d4 <USB_FlushTxFifo>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f920 	bl	8008738 <USB_FlushRxFifo>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008508:	461a      	mov	r2, r3
 800850a:	2300      	movs	r3, #0
 800850c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008514:	461a      	mov	r2, r3
 8008516:	2300      	movs	r3, #0
 8008518:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008520:	461a      	mov	r2, r3
 8008522:	2300      	movs	r3, #0
 8008524:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]
 800852a:	e043      	b.n	80085b4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800853e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008542:	d118      	bne.n	8008576 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008556:	461a      	mov	r2, r3
 8008558:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	e013      	b.n	8008588 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800856c:	461a      	mov	r2, r3
 800856e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	e008      	b.n	8008588 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008582:	461a      	mov	r2, r3
 8008584:	2300      	movs	r3, #0
 8008586:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008594:	461a      	mov	r2, r3
 8008596:	2300      	movs	r3, #0
 8008598:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a6:	461a      	mov	r2, r3
 80085a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	3301      	adds	r3, #1
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085b8:	461a      	mov	r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	4293      	cmp	r3, r2
 80085be:	d3b5      	bcc.n	800852c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085c0:	2300      	movs	r3, #0
 80085c2:	613b      	str	r3, [r7, #16]
 80085c4:	e043      	b.n	800864e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085dc:	d118      	bne.n	8008610 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f0:	461a      	mov	r2, r3
 80085f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	e013      	b.n	8008622 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008606:	461a      	mov	r2, r3
 8008608:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	e008      	b.n	8008622 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800861c:	461a      	mov	r2, r3
 800861e:	2300      	movs	r3, #0
 8008620:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862e:	461a      	mov	r2, r3
 8008630:	2300      	movs	r3, #0
 8008632:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008640:	461a      	mov	r2, r3
 8008642:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008646:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	3301      	adds	r3, #1
 800864c:	613b      	str	r3, [r7, #16]
 800864e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008652:	461a      	mov	r2, r3
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	4293      	cmp	r3, r2
 8008658:	d3b5      	bcc.n	80085c6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800866c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800867a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	f043 0210 	orr.w	r2, r3, #16
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699a      	ldr	r2, [r3, #24]
 800868c:	4b10      	ldr	r3, [pc, #64]	@ (80086d0 <USB_DevInit+0x28c>)
 800868e:	4313      	orrs	r3, r2
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008694:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	f043 0208 	orr.w	r2, r3, #8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d107      	bne.n	80086c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086b8:	f043 0304 	orr.w	r3, r3, #4
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086cc:	b004      	add	sp, #16
 80086ce:	4770      	bx	lr
 80086d0:	803c3800 	.word	0x803c3800

080086d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3301      	adds	r3, #1
 80086e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086ee:	d901      	bls.n	80086f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e01b      	b.n	800872c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	daf2      	bge.n	80086e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	019b      	lsls	r3, r3, #6
 8008704:	f043 0220 	orr.w	r2, r3, #32
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3301      	adds	r3, #1
 8008710:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008718:	d901      	bls.n	800871e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e006      	b.n	800872c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b20      	cmp	r3, #32
 8008728:	d0f0      	beq.n	800870c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008750:	d901      	bls.n	8008756 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e018      	b.n	8008788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	daf2      	bge.n	8008744 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2210      	movs	r2, #16
 8008766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3301      	adds	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008774:	d901      	bls.n	800877a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e006      	b.n	8008788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f003 0310 	and.w	r3, r3, #16
 8008782:	2b10      	cmp	r3, #16
 8008784:	d0f0      	beq.n	8008768 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	68f9      	ldr	r1, [r7, #12]
 80087b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087b4:	4313      	orrs	r3, r2
 80087b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80087e0:	f023 0303 	bic.w	r3, r3, #3
 80087e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	f003 0301 	and.w	r3, r3, #1
}
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800883c:	d901      	bls.n	8008842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e01b      	b.n	800887a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	daf2      	bge.n	8008830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f043 0201 	orr.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008866:	d901      	bls.n	800886c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e006      	b.n	800887a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b01      	cmp	r3, #1
 8008876:	d0f0      	beq.n	800885a <USB_CoreReset+0x36>

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b08c      	sub	sp, #48	@ 0x30
 800888a:	af00      	add	r7, sp, #0
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
 8008892:	460b      	mov	r3, r1
 8008894:	71bb      	strb	r3, [r7, #6]
 8008896:	4613      	mov	r3, r2
 8008898:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800889e:	79bb      	ldrb	r3, [r7, #6]
 80088a0:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80088a2:	797b      	ldrb	r3, [r7, #5]
 80088a4:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80088a6:	f107 030c 	add.w	r3, r7, #12
 80088aa:	2207      	movs	r2, #7
 80088ac:	2100      	movs	r1, #0
 80088ae:	4618      	mov	r0, r3
 80088b0:	f005 f94a 	bl	800db48 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088b4:	f107 0318 	add.w	r3, r7, #24
 80088b8:	2218      	movs	r2, #24
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f005 f943 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80088c2:	233f      	movs	r3, #63	@ 0x3f
 80088c4:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80088c6:	238a      	movs	r3, #138	@ 0x8a
 80088c8:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80088ca:	f107 0314 	add.w	r3, r7, #20
 80088ce:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80088d0:	2303      	movs	r3, #3
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 80088d4:	f107 030c 	add.w	r3, r7, #12
 80088d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80088da:	2307      	movs	r3, #7
 80088dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80088de:	f107 0318 	add.w	r3, r7, #24
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fea7 	bl	8009638 <hci_send_req>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da01      	bge.n	80088f4 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80088f0:	23ff      	movs	r3, #255	@ 0xff
 80088f2:	e014      	b.n	800891e <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80088f4:	7b3b      	ldrb	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80088fa:	7b3b      	ldrb	r3, [r7, #12]
 80088fc:	e00f      	b.n	800891e <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80088fe:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008902:	b29a      	uxth	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008908:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800890c:	b29a      	uxth	r2, r3
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008912:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008916:	b29a      	uxth	r2, r3
 8008918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3730      	adds	r7, #48	@ 0x30
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b08e      	sub	sp, #56	@ 0x38
 800892a:	af00      	add	r7, sp, #0
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4603      	mov	r3, r0
 8008934:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800893a:	f107 0314 	add.w	r3, r7, #20
 800893e:	2207      	movs	r2, #7
 8008940:	2100      	movs	r1, #0
 8008942:	4618      	mov	r0, r3
 8008944:	f005 f900 	bl	800db48 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008948:	f107 0320 	add.w	r3, r7, #32
 800894c:	2218      	movs	r2, #24
 800894e:	2100      	movs	r1, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f005 f8f9 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008956:	233f      	movs	r3, #63	@ 0x3f
 8008958:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800895a:	238a      	movs	r3, #138	@ 0x8a
 800895c:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 800895e:	f107 031c 	add.w	r3, r7, #28
 8008962:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8008964:	2301      	movs	r3, #1
 8008966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008968:	f107 0314 	add.w	r3, r7, #20
 800896c:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800896e:	2307      	movs	r3, #7
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008972:	f107 0320 	add.w	r3, r7, #32
 8008976:	2100      	movs	r1, #0
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fe5d 	bl	8009638 <hci_send_req>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	da01      	bge.n	8008988 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008984:	23ff      	movs	r3, #255	@ 0xff
 8008986:	e014      	b.n	80089b2 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8008988:	7d3b      	ldrb	r3, [r7, #20]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800898e:	7d3b      	ldrb	r3, [r7, #20]
 8008990:	e00f      	b.n	80089b2 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008992:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008996:	b29a      	uxth	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800899c:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80089a6:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3738      	adds	r7, #56	@ 0x38
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80089ba:	b590      	push	{r4, r7, lr}
 80089bc:	b095      	sub	sp, #84	@ 0x54
 80089be:	af00      	add	r7, sp, #0
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	461a      	mov	r2, r3
 80089c8:	4623      	mov	r3, r4
 80089ca:	71fb      	strb	r3, [r7, #7]
 80089cc:	4603      	mov	r3, r0
 80089ce:	80bb      	strh	r3, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	807b      	strh	r3, [r7, #2]
 80089d4:	4613      	mov	r3, r2
 80089d6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80089de:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80089e2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80089e6:	4413      	add	r3, r2
 80089e8:	330e      	adds	r3, #14
 80089ea:	2b28      	cmp	r3, #40	@ 0x28
 80089ec:	d901      	bls.n	80089f2 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80089ee:	2342      	movs	r3, #66	@ 0x42
 80089f0:	e0c9      	b.n	8008b86 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80089f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80089f6:	3350      	adds	r3, #80	@ 0x50
 80089f8:	443b      	add	r3, r7
 80089fa:	79fa      	ldrb	r2, [r7, #7]
 80089fc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008a00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a04:	3301      	adds	r3, #1
 8008a06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008a0a:	88bb      	ldrh	r3, [r7, #4]
 8008a0c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008a0e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	4413      	add	r3, r2
 8008a18:	88ba      	ldrh	r2, [r7, #4]
 8008a1a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008a1c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a20:	3302      	adds	r3, #2
 8008a22:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008a26:	887b      	ldrh	r3, [r7, #2]
 8008a28:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8008a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a2e:	f107 0208 	add.w	r2, r7, #8
 8008a32:	4413      	add	r3, r2
 8008a34:	887a      	ldrh	r2, [r7, #2]
 8008a36:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008a38:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8008a42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a46:	3350      	adds	r3, #80	@ 0x50
 8008a48:	443b      	add	r3, r7
 8008a4a:	79ba      	ldrb	r2, [r7, #6]
 8008a4c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008a50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a54:	3301      	adds	r3, #1
 8008a56:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8008a5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a5e:	3350      	adds	r3, #80	@ 0x50
 8008a60:	443b      	add	r3, r7
 8008a62:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008a66:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008a6a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a6e:	3301      	adds	r3, #1
 8008a70:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8008a74:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a78:	3350      	adds	r3, #80	@ 0x50
 8008a7a:	443b      	add	r3, r7
 8008a7c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008a80:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008a84:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a88:	3301      	adds	r3, #1
 8008a8a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008a92:	f107 0208 	add.w	r2, r7, #8
 8008a96:	4413      	add	r3, r2
 8008a98:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008a9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f005 f8cd 	bl	800dc3e <memcpy>
  indx +=  LocalNameLen;
 8008aa4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008aa8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8008aac:	4413      	add	r3, r2
 8008aae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8008ab2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008ab6:	3350      	adds	r3, #80	@ 0x50
 8008ab8:	443b      	add	r3, r7
 8008aba:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008abe:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008ac2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008acc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008ad0:	f107 0208 	add.w	r2, r7, #8
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008ada:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008adc:	4618      	mov	r0, r3
 8008ade:	f005 f8ae 	bl	800dc3e <memcpy>
  indx +=  ServiceUUIDLen;  
 8008ae2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008ae6:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008aea:	4413      	add	r3, r2
 8008aec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008af0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8008af4:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008af8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008afc:	f107 0208 	add.w	r2, r7, #8
 8008b00:	4413      	add	r3, r2
 8008b02:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8008b06:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008b08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008b12:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8008b16:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008b1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008b1e:	f107 0208 	add.w	r2, r7, #8
 8008b22:	4413      	add	r3, r2
 8008b24:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8008b28:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8008b2a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008b2e:	3302      	adds	r3, #2
 8008b30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008b38:	2218      	movs	r2, #24
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f005 f803 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b42:	233f      	movs	r3, #63	@ 0x3f
 8008b44:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008b46:	2383      	movs	r3, #131	@ 0x83
 8008b48:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8008b4a:	f107 0308 	add.w	r3, r7, #8
 8008b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8008b50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008b54:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8008b56:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8008b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8008b60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fd66 	bl	8009638 <hci_send_req>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	da01      	bge.n	8008b76 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8008b72:	23ff      	movs	r3, #255	@ 0xff
 8008b74:	e007      	b.n	8008b86 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8008b76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <aci_gap_set_discoverable+0x1ca>
    return status;
 8008b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b82:	e000      	b.n	8008b86 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3754      	adds	r7, #84	@ 0x54
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd90      	pop	{r4, r7, pc}

08008b8e <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008b8e:	b590      	push	{r4, r7, lr}
 8008b90:	b091      	sub	sp, #68	@ 0x44
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	603a      	str	r2, [r7, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	4603      	mov	r3, r0
 8008b9a:	71fb      	strb	r3, [r7, #7]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	71bb      	strb	r3, [r7, #6]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008ba8:	79bb      	ldrb	r3, [r7, #6]
 8008baa:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008bac:	79bb      	ldrb	r3, [r7, #6]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	f107 030e 	add.w	r3, r7, #14
 8008bb8:	6814      	ldr	r4, [r2, #0]
 8008bba:	6850      	ldr	r0, [r2, #4]
 8008bbc:	6891      	ldr	r1, [r2, #8]
 8008bbe:	68d2      	ldr	r2, [r2, #12]
 8008bc0:	601c      	str	r4, [r3, #0]
 8008bc2:	6058      	str	r0, [r3, #4]
 8008bc4:	6099      	str	r1, [r3, #8]
 8008bc6:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008bc8:	797b      	ldrb	r3, [r7, #5]
 8008bca:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008bcc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8008bd0:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008bd2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008bd6:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bdc:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8008be0:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8008be4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008be8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008bec:	2218      	movs	r2, #24
 8008bee:	2100      	movs	r1, #0
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f004 ffa9 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008bf6:	233f      	movs	r3, #63	@ 0x3f
 8008bf8:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008bfa:	2386      	movs	r3, #134	@ 0x86
 8008bfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8008bfe:	f107 030c 	add.w	r3, r7, #12
 8008c02:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008c04:	231a      	movs	r3, #26
 8008c06:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8008c08:	f107 030b 	add.w	r3, r7, #11
 8008c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008c12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fd0d 	bl	8009638 <hci_send_req>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	da01      	bge.n	8008c28 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008c24:	23ff      	movs	r3, #255	@ 0xff
 8008c26:	e005      	b.n	8008c34 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	e000      	b.n	8008c34 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3744      	adds	r7, #68	@ 0x44
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd90      	pop	{r4, r7, pc}

08008c3c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b092      	sub	sp, #72	@ 0x48
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	2b1f      	cmp	r3, #31
 8008c52:	d901      	bls.n	8008c58 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008c54:	2342      	movs	r3, #66	@ 0x42
 8008c56:	e03e      	b.n	8008cd6 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8008c58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c5c:	3348      	adds	r3, #72	@ 0x48
 8008c5e:	443b      	add	r3, r7
 8008c60:	79fa      	ldrb	r2, [r7, #7]
 8008c62:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8008c66:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8008c70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008c74:	f107 0208 	add.w	r2, r7, #8
 8008c78:	4413      	add	r3, r2
 8008c7a:	79fa      	ldrb	r2, [r7, #7]
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f004 ffdd 	bl	800dc3e <memcpy>
  indx +=  AdvLen;
 8008c84:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c94:	2218      	movs	r2, #24
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f004 ff55 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008c9e:	233f      	movs	r3, #63	@ 0x3f
 8008ca0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8008ca2:	238e      	movs	r3, #142	@ 0x8e
 8008ca4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008ca6:	f107 0308 	add.w	r3, r7, #8
 8008caa:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008cac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8008cb2:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fcb8 	bl	8009638 <hci_send_req>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	da01      	bge.n	8008cd2 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8008cce:	23ff      	movs	r3, #255	@ 0xff
 8008cd0:	e001      	b.n	8008cd6 <aci_gap_update_adv_data+0x9a>
    
  return status;
 8008cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3748      	adds	r7, #72	@ 0x48
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b088      	sub	sp, #32
 8008ce2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ce4:	f107 0308 	add.w	r3, r7, #8
 8008ce8:	2218      	movs	r2, #24
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f004 ff2b 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008cf2:	233f      	movs	r3, #63	@ 0x3f
 8008cf4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008cf6:	f240 1301 	movw	r3, #257	@ 0x101
 8008cfa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008cfc:	1dfb      	adds	r3, r7, #7
 8008cfe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d00:	2301      	movs	r3, #1
 8008d02:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008d04:	f107 0308 	add.w	r3, r7, #8
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fc94 	bl	8009638 <hci_send_req>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	da01      	bge.n	8008d1a <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008d16:	23ff      	movs	r3, #255	@ 0xff
 8008d18:	e000      	b.n	8008d1c <aci_gatt_init+0x3e>

  return status;
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b090      	sub	sp, #64	@ 0x40
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6039      	str	r1, [r7, #0]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	461a      	mov	r2, r3
 8008d30:	4603      	mov	r3, r0
 8008d32:	71fb      	strb	r3, [r7, #7]
 8008d34:	460b      	mov	r3, r1
 8008d36:	71bb      	strb	r3, [r7, #6]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8008d42:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008d46:	3340      	adds	r3, #64	@ 0x40
 8008d48:	443b      	add	r3, r7
 8008d4a:	79fa      	ldrb	r2, [r7, #7]
 8008d4c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008d50:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008d54:	3301      	adds	r3, #1
 8008d56:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d103      	bne.n	8008d68 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8008d60:	2302      	movs	r3, #2
 8008d62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008d66:	e002      	b.n	8008d6e <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8008d68:	2310      	movs	r3, #16
 8008d6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008d6e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008d72:	f107 020c 	add.w	r2, r7, #12
 8008d76:	4413      	add	r3, r2
 8008d78:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f004 ff5d 	bl	800dc3e <memcpy>
  indx +=  uuid_len;
 8008d84:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8008d88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8008d92:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008d96:	3340      	adds	r3, #64	@ 0x40
 8008d98:	443b      	add	r3, r7
 8008d9a:	79ba      	ldrb	r2, [r7, #6]
 8008d9c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008da0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008da4:	3301      	adds	r3, #1
 8008da6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8008daa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008dae:	3340      	adds	r3, #64	@ 0x40
 8008db0:	443b      	add	r3, r7
 8008db2:	797a      	ldrb	r2, [r7, #5]
 8008db4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008db8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008dc2:	f107 0320 	add.w	r3, r7, #32
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f004 febc 	bl	800db48 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dd4:	2218      	movs	r2, #24
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f004 feb5 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008dde:	233f      	movs	r3, #63	@ 0x3f
 8008de0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8008de2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008de6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8008de8:	f107 030c 	add.w	r3, r7, #12
 8008dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8008dee:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008df2:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8008df4:	f107 0320 	add.w	r3, r7, #32
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fc17 	bl	8009638 <hci_send_req>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	da01      	bge.n	8008e14 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008e10:	23ff      	movs	r3, #255	@ 0xff
 8008e12:	e00c      	b.n	8008e2e <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008e1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e20:	e005      	b.n	8008e2e <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008e22:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e2a:	801a      	strh	r2, [r3, #0]

  return 0;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3740      	adds	r7, #64	@ 0x40
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b092      	sub	sp, #72	@ 0x48
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	603a      	str	r2, [r7, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	4603      	mov	r3, r0
 8008e42:	80fb      	strh	r3, [r7, #6]
 8008e44:	460b      	mov	r3, r1
 8008e46:	717b      	strb	r3, [r7, #5]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008e52:	88fb      	ldrh	r3, [r7, #6]
 8008e54:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008e56:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e5a:	f107 020c 	add.w	r2, r7, #12
 8008e5e:	4413      	add	r3, r2
 8008e60:	88fa      	ldrh	r2, [r7, #6]
 8008e62:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008e64:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e68:	3302      	adds	r3, #2
 8008e6a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8008e6e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e72:	3348      	adds	r3, #72	@ 0x48
 8008e74:	443b      	add	r3, r7
 8008e76:	797a      	ldrb	r2, [r7, #5]
 8008e78:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008e7c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e80:	3301      	adds	r3, #1
 8008e82:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008e86:	797b      	ldrb	r3, [r7, #5]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d103      	bne.n	8008e94 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e92:	e002      	b.n	8008e9a <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008e94:	2310      	movs	r3, #16
 8008e96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008e9a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e9e:	f107 020c 	add.w	r2, r7, #12
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f004 fec7 	bl	800dc3e <memcpy>
  indx +=  uuid_len;
 8008eb0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008eb8:	4413      	add	r3, r2
 8008eba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008ebe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ec2:	3348      	adds	r3, #72	@ 0x48
 8008ec4:	443b      	add	r3, r7
 8008ec6:	793a      	ldrb	r2, [r7, #4]
 8008ec8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008ecc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8008ed6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008eda:	3348      	adds	r3, #72	@ 0x48
 8008edc:	443b      	add	r3, r7
 8008ede:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008ee2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008ee6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008eea:	3301      	adds	r3, #1
 8008eec:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8008ef0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ef4:	3348      	adds	r3, #72	@ 0x48
 8008ef6:	443b      	add	r3, r7
 8008ef8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008efc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008f00:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f04:	3301      	adds	r3, #1
 8008f06:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8008f0a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f0e:	3348      	adds	r3, #72	@ 0x48
 8008f10:	443b      	add	r3, r7
 8008f12:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8008f16:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008f1a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f1e:	3301      	adds	r3, #1
 8008f20:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8008f24:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f28:	3348      	adds	r3, #72	@ 0x48
 8008f2a:	443b      	add	r3, r7
 8008f2c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008f30:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008f34:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f38:	3301      	adds	r3, #1
 8008f3a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008f3e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f42:	3348      	adds	r3, #72	@ 0x48
 8008f44:	443b      	add	r3, r7
 8008f46:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008f4a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008f4e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f52:	3301      	adds	r3, #1
 8008f54:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008f58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008f5c:	2203      	movs	r2, #3
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f004 fdf1 	bl	800db48 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f6a:	2218      	movs	r2, #24
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f004 fdea 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f74:	233f      	movs	r3, #63	@ 0x3f
 8008f76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008f78:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008f7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008f84:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8008f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008f90:	2303      	movs	r3, #3
 8008f92:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008f94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fb4c 	bl	8009638 <hci_send_req>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da01      	bge.n	8008faa <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8008fa6:	23ff      	movs	r3, #255	@ 0xff
 8008fa8:	e00c      	b.n	8008fc4 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8008faa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <aci_gatt_add_char+0x182>
    return resp.status;
 8008fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fb6:	e005      	b.n	8008fc4 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008fb8:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fc0:	801a      	strh	r2, [r3, #0]

  return 0;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3748      	adds	r7, #72	@ 0x48
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008fcc:	b590      	push	{r4, r7, lr}
 8008fce:	b0ab      	sub	sp, #172	@ 0xac
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4623      	mov	r3, r4
 8008fdc:	80fb      	strh	r3, [r7, #6]
 8008fde:	4603      	mov	r3, r0
 8008fe0:	80bb      	strh	r3, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70fb      	strb	r3, [r7, #3]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE){
 8008ff0:	78bb      	ldrb	r3, [r7, #2]
 8008ff2:	2b7a      	cmp	r3, #122	@ 0x7a
 8008ff4:	d904      	bls.n	8009000 <aci_gatt_update_char_value+0x34>
	  printf("BLE_STATUS_INVALID_PARAMS\r\n");
 8008ff6:	483f      	ldr	r0, [pc, #252]	@ (80090f4 <aci_gatt_update_char_value+0x128>)
 8008ff8:	f004 fcc6 	bl	800d988 <puts>
	  return BLE_STATUS_INVALID_PARAMS;
 8008ffc:	2342      	movs	r3, #66	@ 0x42
 8008ffe:	e074      	b.n	80090ea <aci_gatt_update_char_value+0x11e>
  }


  servHandle = htobs(servHandle);
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009004:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009008:	f107 0208 	add.w	r2, r7, #8
 800900c:	4413      	add	r3, r2
 800900e:	88fa      	ldrh	r2, [r7, #6]
 8009010:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009012:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009016:	3302      	adds	r3, #2
 8009018:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 800901c:	88bb      	ldrh	r3, [r7, #4]
 800901e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009020:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009024:	f107 0208 	add.w	r2, r7, #8
 8009028:	4413      	add	r3, r2
 800902a:	88ba      	ldrh	r2, [r7, #4]
 800902c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800902e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009032:	3302      	adds	r3, #2
 8009034:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8009038:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800903c:	33a8      	adds	r3, #168	@ 0xa8
 800903e:	443b      	add	r3, r7
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009046:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800904a:	3301      	adds	r3, #1
 800904c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8009050:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009054:	33a8      	adds	r3, #168	@ 0xa8
 8009056:	443b      	add	r3, r7
 8009058:	78ba      	ldrb	r2, [r7, #2]
 800905a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800905e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009062:	3301      	adds	r3, #1
 8009064:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009068:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800906c:	f107 0208 	add.w	r2, r7, #8
 8009070:	4413      	add	r3, r2
 8009072:	78ba      	ldrb	r2, [r7, #2]
 8009074:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8009078:	4618      	mov	r0, r3
 800907a:	f004 fde0 	bl	800dc3e <memcpy>
  indx +=  charValueLen;
 800907e:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8009082:	78bb      	ldrb	r3, [r7, #2]
 8009084:	4413      	add	r3, r2
 8009086:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800908a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800908e:	2218      	movs	r2, #24
 8009090:	2100      	movs	r1, #0
 8009092:	4618      	mov	r0, r3
 8009094:	f004 fd58 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009098:	233f      	movs	r3, #63	@ 0x3f
 800909a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800909e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80090a2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 80090a6:	f107 0308 	add.w	r3, r7, #8
 80090aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 80090ae:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80090b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 80090b6:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 80090ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 80090be:	2301      	movs	r3, #1
 80090c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80090c4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fab4 	bl	8009638 <hci_send_req>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da01      	bge.n	80090da <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 80090d6:	23ff      	movs	r3, #255	@ 0xff
 80090d8:	e007      	b.n	80090ea <aci_gatt_update_char_value+0x11e>

  if (status) {
 80090da:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <aci_gatt_update_char_value+0x11c>
    return status;
 80090e2:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80090e6:	e000      	b.n	80090ea <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	37ac      	adds	r7, #172	@ 0xac
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd90      	pop	{r4, r7, pc}
 80090f2:	bf00      	nop
 80090f4:	0800e85c 	.word	0x0800e85c

080090f8 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	@ 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8009106:	f107 0310 	add.w	r3, r7, #16
 800910a:	2218      	movs	r2, #24
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f004 fd1a 	bl	800db48 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8009114:	233f      	movs	r3, #63	@ 0x3f
 8009116:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8009118:	f240 1327 	movw	r3, #295	@ 0x127
 800911c:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800911e:	f107 030c 	add.w	r3, r7, #12
 8009122:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8009124:	2302      	movs	r3, #2
 8009126:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8009128:	f107 030b 	add.w	r3, r7, #11
 800912c:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800912e:	2301      	movs	r3, #1
 8009130:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8009132:	f107 0310 	add.w	r3, r7, #16
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fa7d 	bl	8009638 <hci_send_req>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	da01      	bge.n	8009148 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8009144:	23ff      	movs	r3, #255	@ 0xff
 8009146:	e000      	b.n	800914a <aci_gatt_allow_read+0x52>

    return status;
 8009148:	7afb      	ldrb	r3, [r7, #11]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3728      	adds	r7, #40	@ 0x28
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b0ac      	sub	sp, #176	@ 0xb0
 8009156:	af00      	add	r7, sp, #0
 8009158:	60ba      	str	r2, [r7, #8]
 800915a:	607b      	str	r3, [r7, #4]
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
 8009160:	460b      	mov	r3, r1
 8009162:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800916a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800916e:	2218      	movs	r2, #24
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f004 fce8 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009178:	233f      	movs	r3, #63	@ 0x3f
 800917a:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800917e:	230d      	movs	r3, #13
 8009180:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8009184:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009188:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 800918c:	2301      	movs	r3, #1
 800918e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8009192:	f107 0314 	add.w	r3, r7, #20
 8009196:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 800919a:	2380      	movs	r3, #128	@ 0x80
 800919c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 80091a0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fa46 	bl	8009638 <hci_send_req>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da01      	bge.n	80091b6 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 80091b2:	23ff      	movs	r3, #255	@ 0xff
 80091b4:	e01e      	b.n	80091f4 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 80091b6:	7d3b      	ldrb	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <aci_hal_read_config_data+0x6e>
    return rp.status;
 80091bc:	7d3b      	ldrb	r3, [r7, #20]
 80091be:	e019      	b.n	80091f4 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 80091c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	89bb      	ldrh	r3, [r7, #12]
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d201      	bcs.n	80091de <aci_hal_read_config_data+0x8c>
 80091da:	89ba      	ldrh	r2, [r7, #12]
 80091dc:	e002      	b.n	80091e4 <aci_hal_read_config_data+0x92>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f107 0314 	add.w	r3, r7, #20
 80091e8:	3301      	adds	r3, #1
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f004 fd26 	bl	800dc3e <memcpy>
  
  return 0;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	37b0      	adds	r7, #176	@ 0xb0
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	@ 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	460a      	mov	r2, r1
 8009206:	71fb      	strb	r3, [r7, #7]
 8009208:	4613      	mov	r3, r2
 800920a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8009210:	79bb      	ldrb	r3, [r7, #6]
 8009212:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009214:	f107 0310 	add.w	r3, r7, #16
 8009218:	2218      	movs	r2, #24
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f004 fc93 	bl	800db48 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009222:	233f      	movs	r3, #63	@ 0x3f
 8009224:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8009226:	230f      	movs	r3, #15
 8009228:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800922a:	f107 030c 	add.w	r3, r7, #12
 800922e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8009230:	2302      	movs	r3, #2
 8009232:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8009234:	f107 030b 	add.w	r3, r7, #11
 8009238:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800923a:	2301      	movs	r3, #1
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800923e:	f107 0310 	add.w	r3, r7, #16
 8009242:	2100      	movs	r1, #0
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f9f7 	bl	8009638 <hci_send_req>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	da01      	bge.n	8009254 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8009250:	23ff      	movs	r3, #255	@ 0xff
 8009252:	e000      	b.n	8009256 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8009254:	7afb      	ldrb	r3, [r7, #11]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3728      	adds	r7, #40	@ 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800925e:	b590      	push	{r4, r7, lr}
 8009260:	b089      	sub	sp, #36	@ 0x24
 8009262:	af02      	add	r7, sp, #8
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8009268:	f107 0410 	add.w	r4, r7, #16
 800926c:	f107 0215 	add.w	r2, r7, #21
 8009270:	f107 0112 	add.w	r1, r7, #18
 8009274:	f107 0016 	add.w	r0, r7, #22
 8009278:	f107 030e 	add.w	r3, r7, #14
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	4623      	mov	r3, r4
 8009280:	f000 f853 	bl	800932a <hci_le_read_local_version>
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d126      	bne.n	80092dc <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800928e:	8a7b      	ldrh	r3, [r7, #18]
 8009290:	0a1b      	lsrs	r3, r3, #8
 8009292:	b29b      	uxth	r3, r3
 8009294:	b2da      	uxtb	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800929a:	8a7b      	ldrh	r3, [r7, #18]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	b29a      	uxth	r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	b21a      	sxth	r2, r3
 80092aa:	89fb      	ldrh	r3, [r7, #14]
 80092ac:	091b      	lsrs	r3, r3, #4
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	b21b      	sxth	r3, r3
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	b21b      	sxth	r3, r3
 80092b8:	4313      	orrs	r3, r2
 80092ba:	b21b      	sxth	r3, r3
 80092bc:	b29a      	uxth	r2, r3
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	b21a      	sxth	r2, r3
 80092c8:	89fb      	ldrh	r3, [r7, #14]
 80092ca:	b21b      	sxth	r3, r3
 80092cc:	f003 030f 	and.w	r3, r3, #15
 80092d0:	b21b      	sxth	r3, r3
 80092d2:	4313      	orrs	r3, r2
 80092d4:	b21b      	sxth	r3, r3
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd90      	pop	{r4, r7, pc}

080092e6 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b088      	sub	sp, #32
 80092ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80092ec:	f107 0308 	add.w	r3, r7, #8
 80092f0:	2218      	movs	r2, #24
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f004 fc27 	bl	800db48 <memset>
  rq.ogf = OGF_HOST_CTL;
 80092fa:	2303      	movs	r3, #3
 80092fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80092fe:	2303      	movs	r3, #3
 8009300:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009302:	1dfb      	adds	r3, r7, #7
 8009304:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009306:	2301      	movs	r3, #1
 8009308:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800930a:	f107 0308 	add.w	r3, r7, #8
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f000 f991 	bl	8009638 <hci_send_req>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	da01      	bge.n	8009320 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800931c:	23ff      	movs	r3, #255	@ 0xff
 800931e:	e000      	b.n	8009322 <hci_reset+0x3c>
  
  return status;  
 8009320:	79fb      	ldrb	r3, [r7, #7]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b08e      	sub	sp, #56	@ 0x38
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	607a      	str	r2, [r7, #4]
 8009336:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	2209      	movs	r2, #9
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f004 fc01 	bl	800db48 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009346:	f107 0320 	add.w	r3, r7, #32
 800934a:	2218      	movs	r2, #24
 800934c:	2100      	movs	r1, #0
 800934e:	4618      	mov	r0, r3
 8009350:	f004 fbfa 	bl	800db48 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8009354:	2304      	movs	r3, #4
 8009356:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8009358:	2301      	movs	r3, #1
 800935a:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009364:	f107 0314 	add.w	r3, r7, #20
 8009368:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800936a:	2309      	movs	r3, #9
 800936c:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800936e:	f107 0320 	add.w	r3, r7, #32
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f95f 	bl	8009638 <hci_send_req>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	da01      	bge.n	8009384 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009380:	23ff      	movs	r3, #255	@ 0xff
 8009382:	e018      	b.n	80093b6 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8009384:	7d3b      	ldrb	r3, [r7, #20]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <hci_le_read_local_version+0x64>
    return resp.status;
 800938a:	7d3b      	ldrb	r3, [r7, #20]
 800938c:	e013      	b.n	80093b6 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800938e:	7d7a      	ldrb	r2, [r7, #21]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8009394:	8afa      	ldrh	r2, [r7, #22]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800939a:	7e3a      	ldrb	r2, [r7, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80093a0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80093aa:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b2:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3738      	adds	r7, #56	@ 0x38
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b092      	sub	sp, #72	@ 0x48
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	4603      	mov	r3, r0
 80093c6:	6039      	str	r1, [r7, #0]
 80093c8:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80093ca:	f107 0310 	add.w	r3, r7, #16
 80093ce:	2220      	movs	r2, #32
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f004 fbb8 	bl	800db48 <memset>
  scan_resp_cp.length = length;
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	2b1f      	cmp	r3, #31
 80093e0:	bf28      	it	cs
 80093e2:	231f      	movcs	r3, #31
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	461a      	mov	r2, r3
 80093e8:	f107 0310 	add.w	r3, r7, #16
 80093ec:	3301      	adds	r3, #1
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f004 fc24 	bl	800dc3e <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80093fa:	2218      	movs	r2, #24
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f004 fba2 	bl	800db48 <memset>
  rq.ogf = OGF_LE_CTL;
 8009404:	2308      	movs	r3, #8
 8009406:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009408:	2309      	movs	r3, #9
 800940a:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800940c:	f107 0310 	add.w	r3, r7, #16
 8009410:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009412:	2320      	movs	r3, #32
 8009414:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8009416:	f107 030f 	add.w	r3, r7, #15
 800941a:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800941c:	2301      	movs	r3, #1
 800941e:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009420:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f906 	bl	8009638 <hci_send_req>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	da01      	bge.n	8009436 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8009432:	23ff      	movs	r3, #255	@ 0xff
 8009434:	e000      	b.n	8009438 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3748      	adds	r7, #72	@ 0x48
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3308      	adds	r3, #8
 800944c:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b04      	cmp	r3, #4
 8009454:	d001      	beq.n	800945a <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009456:	2301      	movs	r3, #1
 8009458:	e00c      	b.n	8009474 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3302      	adds	r3, #2
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	461a      	mov	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009468:	3b03      	subs	r3, #3
 800946a:	429a      	cmp	r2, r3
 800946c:	d001      	beq.n	8009472 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800946e:	2302      	movs	r3, #2
 8009470:	e000      	b.n	8009474 <verify_packet+0x34>
  
  return 0;      
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b0a6      	sub	sp, #152	@ 0x98
 8009484:	af00      	add	r7, sp, #0
 8009486:	607b      	str	r3, [r7, #4]
 8009488:	4603      	mov	r3, r0
 800948a:	81fb      	strh	r3, [r7, #14]
 800948c:	460b      	mov	r3, r1
 800948e:	81bb      	strh	r3, [r7, #12]
 8009490:	4613      	mov	r3, r2
 8009492:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009494:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800949c:	b21a      	sxth	r2, r3
 800949e:	89fb      	ldrh	r3, [r7, #14]
 80094a0:	029b      	lsls	r3, r3, #10
 80094a2:	b21b      	sxth	r3, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	b21b      	sxth	r3, r3
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80094ac:	7afb      	ldrb	r3, [r7, #11]
 80094ae:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80094b0:	2301      	movs	r3, #1
 80094b2:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80094b4:	f107 0318 	add.w	r3, r7, #24
 80094b8:	3301      	adds	r3, #1
 80094ba:	461a      	mov	r2, r3
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	8819      	ldrh	r1, [r3, #0]
 80094c2:	789b      	ldrb	r3, [r3, #2]
 80094c4:	8011      	strh	r1, [r2, #0]
 80094c6:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80094c8:	f107 0318 	add.w	r3, r7, #24
 80094cc:	3304      	adds	r3, #4
 80094ce:	7afa      	ldrb	r2, [r7, #11]
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f004 fbb3 	bl	800dc3e <memcpy>
  
  if (hciContext.io.Send)
 80094d8:	4b08      	ldr	r3, [pc, #32]	@ (80094fc <send_cmd+0x7c>)
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80094e0:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <send_cmd+0x7c>)
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	7afa      	ldrb	r2, [r7, #11]
 80094e6:	b292      	uxth	r2, r2
 80094e8:	3204      	adds	r2, #4
 80094ea:	b291      	uxth	r1, r2
 80094ec:	f107 0218 	add.w	r2, r7, #24
 80094f0:	4610      	mov	r0, r2
 80094f2:	4798      	blx	r3
  }
}
 80094f4:	bf00      	nop
 80094f6:	3798      	adds	r7, #152	@ 0x98
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	2000290c 	.word	0x2000290c

08009500 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800950a:	e00a      	b.n	8009522 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800950c:	f107 030c 	add.w	r3, r7, #12
 8009510:	4619      	mov	r1, r3
 8009512:	6838      	ldr	r0, [r7, #0]
 8009514:	f000 fae8 	bl	8009ae8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fa4f 	bl	80099c0 <list_insert_head>
  while (!list_is_empty(src_list))
 8009522:	6838      	ldr	r0, [r7, #0]
 8009524:	f000 fa2a 	bl	800997c <list_is_empty>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0ee      	beq.n	800950c <move_list+0xc>
  }
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800953e:	e009      	b.n	8009554 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009540:	1d3b      	adds	r3, r7, #4
 8009542:	4619      	mov	r1, r3
 8009544:	4809      	ldr	r0, [pc, #36]	@ (800956c <free_event_list+0x34>)
 8009546:	f000 faa8 	bl	8009a9a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4619      	mov	r1, r3
 800954e:	4808      	ldr	r0, [pc, #32]	@ (8009570 <free_event_list+0x38>)
 8009550:	f000 fa5c 	bl	8009a0c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009554:	4806      	ldr	r0, [pc, #24]	@ (8009570 <free_event_list+0x38>)
 8009556:	f000 faee 	bl	8009b36 <list_get_size>
 800955a:	4603      	mov	r3, r0
 800955c:	2b01      	cmp	r3, #1
 800955e:	ddef      	ble.n	8009540 <free_event_list+0x8>
  }
}
 8009560:	bf00      	nop
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20002648 	.word	0x20002648
 8009570:	20002640 	.word	0x20002640

08009574 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009584:	4a18      	ldr	r2, [pc, #96]	@ (80095e8 <hci_init+0x74>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800958a:	4818      	ldr	r0, [pc, #96]	@ (80095ec <hci_init+0x78>)
 800958c:	f000 f9e6 	bl	800995c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009590:	4817      	ldr	r0, [pc, #92]	@ (80095f0 <hci_init+0x7c>)
 8009592:	f000 f9e3 	bl	800995c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009596:	f7f7 ff8f 	bl	80014b8 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
 800959e:	e00c      	b.n	80095ba <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	228c      	movs	r2, #140	@ 0x8c
 80095a4:	fb02 f303 	mul.w	r3, r2, r3
 80095a8:	4a12      	ldr	r2, [pc, #72]	@ (80095f4 <hci_init+0x80>)
 80095aa:	4413      	add	r3, r2
 80095ac:	4619      	mov	r1, r3
 80095ae:	480f      	ldr	r0, [pc, #60]	@ (80095ec <hci_init+0x78>)
 80095b0:	f000 fa2c 	bl	8009a0c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	3301      	adds	r3, #1
 80095b8:	73fb      	strb	r3, [r7, #15]
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d9ef      	bls.n	80095a0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80095c0:	4b09      	ldr	r3, [pc, #36]	@ (80095e8 <hci_init+0x74>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d003      	beq.n	80095d0 <hci_init+0x5c>
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <hci_init+0x74>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2000      	movs	r0, #0
 80095ce:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80095d0:	4b05      	ldr	r3, [pc, #20]	@ (80095e8 <hci_init+0x74>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <hci_init+0x6a>
 80095d8:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <hci_init+0x74>)
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	4798      	blx	r3
}
 80095de:	bf00      	nop
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	2000290c 	.word	0x2000290c
 80095ec:	20002640 	.word	0x20002640
 80095f0:	20002648 	.word	0x20002648
 80095f4:	20002650 	.word	0x20002650

080095f8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a0b      	ldr	r2, [pc, #44]	@ (8009634 <hci_register_io_bus+0x3c>)
 8009606:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	4a09      	ldr	r2, [pc, #36]	@ (8009634 <hci_register_io_bus+0x3c>)
 800960e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	4a07      	ldr	r2, [pc, #28]	@ (8009634 <hci_register_io_bus+0x3c>)
 8009616:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	4a05      	ldr	r2, [pc, #20]	@ (8009634 <hci_register_io_bus+0x3c>)
 800961e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4a03      	ldr	r2, [pc, #12]	@ (8009634 <hci_register_io_bus+0x3c>)
 8009626:	6093      	str	r3, [r2, #8]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	2000290c 	.word	0x2000290c

08009638 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08e      	sub	sp, #56	@ 0x38
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	885b      	ldrh	r3, [r3, #2]
 8009648:	b21b      	sxth	r3, r3
 800964a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800964e:	b21a      	sxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	029b      	lsls	r3, r3, #10
 8009656:	b21b      	sxth	r3, r3
 8009658:	4313      	orrs	r3, r2
 800965a:	b21b      	sxth	r3, r3
 800965c:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f978 	bl	800995c <list_init_head>

  free_event_list();
 800966c:	f7ff ff64 	bl	8009538 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	8818      	ldrh	r0, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	8859      	ldrh	r1, [r3, #2]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	b2da      	uxtb	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f7ff fefd 	bl	8009480 <send_cmd>
  
  if (async)
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <hci_send_req+0x58>
  {
    return 0;
 800968c:	2300      	movs	r3, #0
 800968e:	e0e2      	b.n	8009856 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009690:	f7f9 fe76 	bl	8003380 <HAL_GetTick>
 8009694:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009696:	f7f9 fe73 	bl	8003380 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096a4:	f200 80b3 	bhi.w	800980e <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80096a8:	486d      	ldr	r0, [pc, #436]	@ (8009860 <hci_send_req+0x228>)
 80096aa:	f000 f967 	bl	800997c <list_is_empty>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d000      	beq.n	80096b6 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80096b4:	e7ef      	b.n	8009696 <hci_send_req+0x5e>
      {
        break;
 80096b6:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80096b8:	f107 0310 	add.w	r3, r7, #16
 80096bc:	4619      	mov	r1, r3
 80096be:	4868      	ldr	r0, [pc, #416]	@ (8009860 <hci_send_req+0x228>)
 80096c0:	f000 f9eb 	bl	8009a9a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	3308      	adds	r3, #8
 80096c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d17f      	bne.n	80097d2 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 80096d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d4:	3301      	adds	r3, #1
 80096d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	3308      	adds	r3, #8
 80096dc:	3303      	adds	r3, #3
 80096de:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80096e6:	3b03      	subs	r3, #3
 80096e8:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80096f0:	d04c      	beq.n	800978c <hci_send_req+0x154>
 80096f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80096f4:	dc68      	bgt.n	80097c8 <hci_send_req+0x190>
 80096f6:	2b10      	cmp	r3, #16
 80096f8:	f000 808b 	beq.w	8009812 <hci_send_req+0x1da>
 80096fc:	2b10      	cmp	r3, #16
 80096fe:	dc63      	bgt.n	80097c8 <hci_send_req+0x190>
 8009700:	2b0e      	cmp	r3, #14
 8009702:	d023      	beq.n	800974c <hci_send_req+0x114>
 8009704:	2b0f      	cmp	r3, #15
 8009706:	d15f      	bne.n	80097c8 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	b29b      	uxth	r3, r3
 8009712:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009714:	429a      	cmp	r2, r3
 8009716:	d17e      	bne.n	8009816 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	2b0f      	cmp	r3, #15
 800971e:	d004      	beq.n	800972a <hci_send_req+0xf2>
          if (cs->status) {
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d051      	beq.n	80097cc <hci_send_req+0x194>
            goto failed;
 8009728:	e078      	b.n	800981c <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	695a      	ldr	r2, [r3, #20]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	429a      	cmp	r2, r3
 8009732:	bf28      	it	cs
 8009734:	461a      	movcs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6918      	ldr	r0, [r3, #16]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	461a      	mov	r2, r3
 8009744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009746:	f004 fa7a 	bl	800dc3e <memcpy>
        goto done;
 800974a:	e078      	b.n	800983e <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009756:	b29b      	uxth	r3, r3
 8009758:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800975a:	429a      	cmp	r2, r3
 800975c:	d15d      	bne.n	800981a <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800975e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009760:	3303      	adds	r3, #3
 8009762:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	3b03      	subs	r3, #3
 8009768:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	695a      	ldr	r2, [r3, #20]
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	429a      	cmp	r2, r3
 8009772:	bf28      	it	cs
 8009774:	461a      	movcs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6918      	ldr	r0, [r3, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	461a      	mov	r2, r3
 8009784:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009786:	f004 fa5a 	bl	800dc3e <memcpy>
        goto done;
 800978a:	e058      	b.n	800983e <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	429a      	cmp	r2, r3
 800979c:	d118      	bne.n	80097d0 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	695a      	ldr	r2, [r3, #20]
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	bf28      	it	cs
 80097ae:	461a      	movcs	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6918      	ldr	r0, [r3, #16]
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	1c59      	adds	r1, r3, #1
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	461a      	mov	r2, r3
 80097c2:	f004 fa3c 	bl	800dc3e <memcpy>
        goto done;
 80097c6:	e03a      	b.n	800983e <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 80097c8:	bf00      	nop
 80097ca:	e002      	b.n	80097d2 <hci_send_req+0x19a>
          break;
 80097cc:	bf00      	nop
 80097ce:	e000      	b.n	80097d2 <hci_send_req+0x19a>
          break;
 80097d0:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80097d2:	4824      	ldr	r0, [pc, #144]	@ (8009864 <hci_send_req+0x22c>)
 80097d4:	f000 f8d2 	bl	800997c <list_is_empty>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00d      	beq.n	80097fa <hci_send_req+0x1c2>
 80097de:	4820      	ldr	r0, [pc, #128]	@ (8009860 <hci_send_req+0x228>)
 80097e0:	f000 f8cc 	bl	800997c <list_is_empty>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d007      	beq.n	80097fa <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	4619      	mov	r1, r3
 80097ee:	481d      	ldr	r0, [pc, #116]	@ (8009864 <hci_send_req+0x22c>)
 80097f0:	f000 f90c 	bl	8009a0c <list_insert_tail>
      hciReadPacket=NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	e008      	b.n	800980c <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	f107 0308 	add.w	r3, r7, #8
 8009800:	4611      	mov	r1, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f902 	bl	8009a0c <list_insert_tail>
      hciReadPacket=NULL;
 8009808:	2300      	movs	r3, #0
 800980a:	613b      	str	r3, [r7, #16]
  {
 800980c:	e740      	b.n	8009690 <hci_send_req+0x58>
        goto failed;
 800980e:	bf00      	nop
 8009810:	e004      	b.n	800981c <hci_send_req+0x1e4>
        goto failed;
 8009812:	bf00      	nop
 8009814:	e002      	b.n	800981c <hci_send_req+0x1e4>
          goto failed;
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <hci_send_req+0x1e4>
          goto failed;
 800981a:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d004      	beq.n	800982c <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	4619      	mov	r1, r3
 8009826:	480f      	ldr	r0, [pc, #60]	@ (8009864 <hci_send_req+0x22c>)
 8009828:	f000 f8ca 	bl	80099c0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800982c:	f107 0308 	add.w	r3, r7, #8
 8009830:	4619      	mov	r1, r3
 8009832:	480b      	ldr	r0, [pc, #44]	@ (8009860 <hci_send_req+0x228>)
 8009834:	f7ff fe64 	bl	8009500 <move_list>

  return -1;
 8009838:	f04f 33ff 	mov.w	r3, #4294967295
 800983c:	e00b      	b.n	8009856 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	4619      	mov	r1, r3
 8009842:	4808      	ldr	r0, [pc, #32]	@ (8009864 <hci_send_req+0x22c>)
 8009844:	f000 f8bc 	bl	80099c0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009848:	f107 0308 	add.w	r3, r7, #8
 800984c:	4619      	mov	r1, r3
 800984e:	4804      	ldr	r0, [pc, #16]	@ (8009860 <hci_send_req+0x228>)
 8009850:	f7ff fe56 	bl	8009500 <move_list>

  return 0;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3738      	adds	r7, #56	@ 0x38
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20002648 	.word	0x20002648
 8009864:	20002640 	.word	0x20002640

08009868 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009872:	e013      	b.n	800989c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009874:	1d3b      	adds	r3, r7, #4
 8009876:	4619      	mov	r1, r3
 8009878:	480e      	ldr	r0, [pc, #56]	@ (80098b4 <hci_user_evt_proc+0x4c>)
 800987a:	f000 f90e 	bl	8009a9a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800987e:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <hci_user_evt_proc+0x50>)
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d005      	beq.n	8009892 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009886:	4b0c      	ldr	r3, [pc, #48]	@ (80098b8 <hci_user_evt_proc+0x50>)
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	3208      	adds	r2, #8
 800988e:	4610      	mov	r0, r2
 8009890:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4619      	mov	r1, r3
 8009896:	4809      	ldr	r0, [pc, #36]	@ (80098bc <hci_user_evt_proc+0x54>)
 8009898:	f000 f8b8 	bl	8009a0c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800989c:	4805      	ldr	r0, [pc, #20]	@ (80098b4 <hci_user_evt_proc+0x4c>)
 800989e:	f000 f86d 	bl	800997c <list_is_empty>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0e5      	beq.n	8009874 <hci_user_evt_proc+0xc>
  }
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20002648 	.word	0x20002648
 80098b8:	2000290c 	.word	0x2000290c
 80098bc:	20002640 	.word	0x20002640

080098c0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80098d0:	481f      	ldr	r0, [pc, #124]	@ (8009950 <hci_notify_asynch_evt+0x90>)
 80098d2:	f000 f853 	bl	800997c <list_is_empty>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d132      	bne.n	8009942 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	4619      	mov	r1, r3
 80098e2:	481b      	ldr	r0, [pc, #108]	@ (8009950 <hci_notify_asynch_evt+0x90>)
 80098e4:	f000 f8d9 	bl	8009a9a <list_remove_head>
    
    if (hciContext.io.Receive)
 80098e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009954 <hci_notify_asynch_evt+0x94>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d02a      	beq.n	8009946 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80098f0:	4b18      	ldr	r3, [pc, #96]	@ (8009954 <hci_notify_asynch_evt+0x94>)
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	3208      	adds	r2, #8
 80098f8:	2180      	movs	r1, #128	@ 0x80
 80098fa:	4610      	mov	r0, r2
 80098fc:	4798      	blx	r3
 80098fe:	4603      	mov	r3, r0
 8009900:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009902:	7cfb      	ldrb	r3, [r7, #19]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d016      	beq.n	8009936 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	7cfa      	ldrb	r2, [r7, #19]
 800990c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff fd94 	bl	8009440 <verify_packet>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d105      	bne.n	800992a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4619      	mov	r1, r3
 8009922:	480d      	ldr	r0, [pc, #52]	@ (8009958 <hci_notify_asynch_evt+0x98>)
 8009924:	f000 f872 	bl	8009a0c <list_insert_tail>
 8009928:	e00d      	b.n	8009946 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4619      	mov	r1, r3
 800992e:	4808      	ldr	r0, [pc, #32]	@ (8009950 <hci_notify_asynch_evt+0x90>)
 8009930:	f000 f846 	bl	80099c0 <list_insert_head>
 8009934:	e007      	b.n	8009946 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4619      	mov	r1, r3
 800993a:	4805      	ldr	r0, [pc, #20]	@ (8009950 <hci_notify_asynch_evt+0x90>)
 800993c:	f000 f840 	bl	80099c0 <list_insert_head>
 8009940:	e001      	b.n	8009946 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009942:	2301      	movs	r3, #1
 8009944:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009946:	697b      	ldr	r3, [r7, #20]

}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	20002640 	.word	0x20002640
 8009954:	2000290c 	.word	0x2000290c
 8009958:	20002648 	.word	0x20002648

0800995c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	605a      	str	r2, [r3, #4]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009984:	f3ef 8310 	mrs	r3, PRIMASK
 8009988:	60fb      	str	r3, [r7, #12]
  return(result);
 800998a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800998c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800998e:	b672      	cpsid	i
}
 8009990:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	429a      	cmp	r2, r3
 800999a:	d102      	bne.n	80099a2 <list_is_empty+0x26>
  {
    return_value = 1;
 800999c:	2301      	movs	r3, #1
 800999e:	75fb      	strb	r3, [r7, #23]
 80099a0:	e001      	b.n	80099a6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75fb      	strb	r3, [r7, #23]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f383 8810 	msr	PRIMASK, r3
}
 80099b0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ca:	f3ef 8310 	mrs	r3, PRIMASK
 80099ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80099d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80099d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099d4:	b672      	cpsid	i
}
 80099d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	605a      	str	r2, [r3, #4]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f383 8810 	msr	PRIMASK, r3
}
 80099fe:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009a00:	bf00      	nop
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a16:	f3ef 8310 	mrs	r3, PRIMASK
 8009a1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a20:	b672      	cpsid	i
}
 8009a22:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f383 8810 	msr	PRIMASK, r3
}
 8009a4a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009a4c:	bf00      	nop
 8009a4e:	371c      	adds	r7, #28
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a60:	f3ef 8310 	mrs	r3, PRIMASK
 8009a64:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a66:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009a68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a6a:	b672      	cpsid	i
}
 8009a6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6852      	ldr	r2, [r2, #4]
 8009a80:	605a      	str	r2, [r3, #4]
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f383 8810 	msr	PRIMASK, r3
}
 8009a8c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009a8e:	bf00      	nop
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b086      	sub	sp, #24
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8009aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009aac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aae:	b672      	cpsid	i
}
 8009ab0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff ffca 	bl	8009a58 <list_remove_node>
  (*node)->next = NULL;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	605a      	str	r2, [r3, #4]
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f383 8810 	msr	PRIMASK, r3
}
 8009ade:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009ae0:	bf00      	nop
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af2:	f3ef 8310 	mrs	r3, PRIMASK
 8009af6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009af8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009afa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009afc:	b672      	cpsid	i
}
 8009afe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff ffa3 	bl	8009a58 <list_remove_node>
  (*node)->next = NULL;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	605a      	str	r2, [r3, #4]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f383 8810 	msr	PRIMASK, r3
}
 8009b2c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009b2e:	bf00      	nop
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b089      	sub	sp, #36	@ 0x24
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  int size = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b42:	f3ef 8310 	mrs	r3, PRIMASK
 8009b46:	613b      	str	r3, [r7, #16]
  return(result);
 8009b48:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b4c:	b672      	cpsid	i
}
 8009b4e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009b56:	e005      	b.n	8009b64 <list_get_size+0x2e>
  {
    size++;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d1f5      	bne.n	8009b58 <list_get_size+0x22>
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f383 8810 	msr	PRIMASK, r3
}
 8009b76:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8009b78:	69fb      	ldr	r3, [r7, #28]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3724      	adds	r7, #36	@ 0x24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <__NVIC_SetPriority>:
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	db0a      	blt.n	8009bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	490c      	ldr	r1, [pc, #48]	@ (8009bd4 <__NVIC_SetPriority+0x4c>)
 8009ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ba6:	0112      	lsls	r2, r2, #4
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	440b      	add	r3, r1
 8009bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009bb0:	e00a      	b.n	8009bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	4908      	ldr	r1, [pc, #32]	@ (8009bd8 <__NVIC_SetPriority+0x50>)
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	f003 030f 	and.w	r3, r3, #15
 8009bbe:	3b04      	subs	r3, #4
 8009bc0:	0112      	lsls	r2, r2, #4
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	761a      	strb	r2, [r3, #24]
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	e000e100 	.word	0xe000e100
 8009bd8:	e000ed00 	.word	0xe000ed00

08009bdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009be0:	2100      	movs	r1, #0
 8009be2:	f06f 0004 	mvn.w	r0, #4
 8009be6:	f7ff ffcf 	bl	8009b88 <__NVIC_SetPriority>
#endif
}
 8009bea:	bf00      	nop
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bf6:	f3ef 8305 	mrs	r3, IPSR
 8009bfa:	603b      	str	r3, [r7, #0]
  return(result);
 8009bfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c02:	f06f 0305 	mvn.w	r3, #5
 8009c06:	607b      	str	r3, [r7, #4]
 8009c08:	e00c      	b.n	8009c24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <osKernelInitialize+0x44>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d105      	bne.n	8009c1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c12:	4b08      	ldr	r3, [pc, #32]	@ (8009c34 <osKernelInitialize+0x44>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	607b      	str	r3, [r7, #4]
 8009c1c:	e002      	b.n	8009c24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c24:	687b      	ldr	r3, [r7, #4]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	2000292c 	.word	0x2000292c

08009c38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	603b      	str	r3, [r7, #0]
  return(result);
 8009c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c4a:	f06f 0305 	mvn.w	r3, #5
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	e010      	b.n	8009c74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c52:	4b0b      	ldr	r3, [pc, #44]	@ (8009c80 <osKernelStart+0x48>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d109      	bne.n	8009c6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c5a:	f7ff ffbf 	bl	8009bdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c5e:	4b08      	ldr	r3, [pc, #32]	@ (8009c80 <osKernelStart+0x48>)
 8009c60:	2202      	movs	r2, #2
 8009c62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c64:	f001 fcca 	bl	800b5fc <vTaskStartScheduler>
      stat = osOK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	e002      	b.n	8009c74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c74:	687b      	ldr	r3, [r7, #4]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	2000292c 	.word	0x2000292c

08009c84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08e      	sub	sp, #56	@ 0x38
 8009c88:	af04      	add	r7, sp, #16
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c94:	f3ef 8305 	mrs	r3, IPSR
 8009c98:	617b      	str	r3, [r7, #20]
  return(result);
 8009c9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d17e      	bne.n	8009d9e <osThreadNew+0x11a>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d07b      	beq.n	8009d9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ca6:	2380      	movs	r3, #128	@ 0x80
 8009ca8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009caa:	2318      	movs	r3, #24
 8009cac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d045      	beq.n	8009d4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <osThreadNew+0x48>
        name = attr->name;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d008      	beq.n	8009cf2 <osThreadNew+0x6e>
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2b38      	cmp	r3, #56	@ 0x38
 8009ce4:	d805      	bhi.n	8009cf2 <osThreadNew+0x6e>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <osThreadNew+0x72>
        return (NULL);
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e054      	b.n	8009da0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	089b      	lsrs	r3, r3, #2
 8009d04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00e      	beq.n	8009d2c <osThreadNew+0xa8>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	2b5b      	cmp	r3, #91	@ 0x5b
 8009d14:	d90a      	bls.n	8009d2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d006      	beq.n	8009d2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <osThreadNew+0xa8>
        mem = 1;
 8009d26:	2301      	movs	r3, #1
 8009d28:	61bb      	str	r3, [r7, #24]
 8009d2a:	e010      	b.n	8009d4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10c      	bne.n	8009d4e <osThreadNew+0xca>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d108      	bne.n	8009d4e <osThreadNew+0xca>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d104      	bne.n	8009d4e <osThreadNew+0xca>
          mem = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	61bb      	str	r3, [r7, #24]
 8009d48:	e001      	b.n	8009d4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d110      	bne.n	8009d76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d5c:	9202      	str	r2, [sp, #8]
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	6a3a      	ldr	r2, [r7, #32]
 8009d68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f001 fa6a 	bl	800b244 <xTaskCreateStatic>
 8009d70:	4603      	mov	r3, r0
 8009d72:	613b      	str	r3, [r7, #16]
 8009d74:	e013      	b.n	8009d9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d110      	bne.n	8009d9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	f107 0310 	add.w	r3, r7, #16
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f001 fab8 	bl	800b304 <xTaskCreate>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d001      	beq.n	8009d9e <osThreadNew+0x11a>
            hTask = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d9e:	693b      	ldr	r3, [r7, #16]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3728      	adds	r7, #40	@ 0x28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db0:	f3ef 8305 	mrs	r3, IPSR
 8009db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009db6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <osDelay+0x1c>
    stat = osErrorISR;
 8009dbc:	f06f 0305 	mvn.w	r3, #5
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e007      	b.n	8009dd4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 fbde 	bl	800b590 <vTaskDelay>
    }
  }

  return (stat);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b08a      	sub	sp, #40	@ 0x28
 8009de2:	af02      	add	r7, sp, #8
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dee:	f3ef 8305 	mrs	r3, IPSR
 8009df2:	613b      	str	r3, [r7, #16]
  return(result);
 8009df4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d175      	bne.n	8009ee6 <osSemaphoreNew+0x108>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d072      	beq.n	8009ee6 <osSemaphoreNew+0x108>
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d86e      	bhi.n	8009ee6 <osSemaphoreNew+0x108>
    mem = -1;
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d015      	beq.n	8009e40 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d006      	beq.n	8009e2a <osSemaphoreNew+0x4c>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b4f      	cmp	r3, #79	@ 0x4f
 8009e22:	d902      	bls.n	8009e2a <osSemaphoreNew+0x4c>
        mem = 1;
 8009e24:	2301      	movs	r3, #1
 8009e26:	61bb      	str	r3, [r7, #24]
 8009e28:	e00c      	b.n	8009e44 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d108      	bne.n	8009e44 <osSemaphoreNew+0x66>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <osSemaphoreNew+0x66>
          mem = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	e001      	b.n	8009e44 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4a:	d04c      	beq.n	8009ee6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d128      	bne.n	8009ea4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d10a      	bne.n	8009e6e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2203      	movs	r2, #3
 8009e5e:	9200      	str	r2, [sp, #0]
 8009e60:	2200      	movs	r2, #0
 8009e62:	2100      	movs	r1, #0
 8009e64:	2001      	movs	r0, #1
 8009e66:	f000 fa2b 	bl	800a2c0 <xQueueGenericCreateStatic>
 8009e6a:	61f8      	str	r0, [r7, #28]
 8009e6c:	e005      	b.n	8009e7a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009e6e:	2203      	movs	r2, #3
 8009e70:	2100      	movs	r1, #0
 8009e72:	2001      	movs	r0, #1
 8009e74:	f000 faa1 	bl	800a3ba <xQueueGenericCreate>
 8009e78:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d022      	beq.n	8009ec6 <osSemaphoreNew+0xe8>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01f      	beq.n	8009ec6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e86:	2300      	movs	r3, #0
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	69f8      	ldr	r0, [r7, #28]
 8009e8e:	f000 fb61 	bl	800a554 <xQueueGenericSend>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d016      	beq.n	8009ec6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009e98:	69f8      	ldr	r0, [r7, #28]
 8009e9a:	f000 ffff 	bl	800ae9c <vQueueDelete>
            hSemaphore = NULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	e010      	b.n	8009ec6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d108      	bne.n	8009ebc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 fadf 	bl	800a476 <xQueueCreateCountingSemaphoreStatic>
 8009eb8:	61f8      	str	r0, [r7, #28]
 8009eba:	e004      	b.n	8009ec6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009ebc:	68b9      	ldr	r1, [r7, #8]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 fb12 	bl	800a4e8 <xQueueCreateCountingSemaphore>
 8009ec4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00c      	beq.n	8009ee6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <osSemaphoreNew+0xfc>
          name = attr->name;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	e001      	b.n	8009ede <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009ede:	6979      	ldr	r1, [r7, #20]
 8009ee0:	69f8      	ldr	r0, [r7, #28]
 8009ee2:	f001 f927 	bl	800b134 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009ee6:	69fb      	ldr	r3, [r7, #28]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d103      	bne.n	8009f10 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009f08:	f06f 0303 	mvn.w	r3, #3
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	e039      	b.n	8009f84 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f10:	f3ef 8305 	mrs	r3, IPSR
 8009f14:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f16:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d022      	beq.n	8009f62 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009f22:	f06f 0303 	mvn.w	r3, #3
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	e02c      	b.n	8009f84 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	461a      	mov	r2, r3
 8009f34:	2100      	movs	r1, #0
 8009f36:	6938      	ldr	r0, [r7, #16]
 8009f38:	f000 ff2e 	bl	800ad98 <xQueueReceiveFromISR>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d003      	beq.n	8009f4a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009f42:	f06f 0302 	mvn.w	r3, #2
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	e01c      	b.n	8009f84 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d019      	beq.n	8009f84 <osSemaphoreAcquire+0x94>
 8009f50:	4b0f      	ldr	r3, [pc, #60]	@ (8009f90 <osSemaphoreAcquire+0xa0>)
 8009f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	e010      	b.n	8009f84 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6938      	ldr	r0, [r7, #16]
 8009f66:	f000 fe07 	bl	800ab78 <xQueueSemaphoreTake>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d009      	beq.n	8009f84 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009f76:	f06f 0301 	mvn.w	r3, #1
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	e002      	b.n	8009f84 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009f7e:	f06f 0302 	mvn.w	r3, #2
 8009f82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009f84:	697b      	ldr	r3, [r7, #20]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	e000ed04 	.word	0xe000ed04

08009f94 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d103      	bne.n	8009fb2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009faa:	f06f 0303 	mvn.w	r3, #3
 8009fae:	617b      	str	r3, [r7, #20]
 8009fb0:	e02c      	b.n	800a00c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fb2:	f3ef 8305 	mrs	r3, IPSR
 8009fb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d01a      	beq.n	8009ff4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fc2:	f107 0308 	add.w	r3, r7, #8
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6938      	ldr	r0, [r7, #16]
 8009fca:	f000 fc63 	bl	800a894 <xQueueGiveFromISR>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d003      	beq.n	8009fdc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009fd4:	f06f 0302 	mvn.w	r3, #2
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	e017      	b.n	800a00c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d014      	beq.n	800a00c <osSemaphoreRelease+0x78>
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	@ (800a018 <osSemaphoreRelease+0x84>)
 8009fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	e00b      	b.n	800a00c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	6938      	ldr	r0, [r7, #16]
 8009ffc:	f000 faaa 	bl	800a554 <xQueueGenericSend>
 800a000:	4603      	mov	r3, r0
 800a002:	2b01      	cmp	r3, #1
 800a004:	d002      	beq.n	800a00c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a006:	f06f 0302 	mvn.w	r3, #2
 800a00a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a00c:	697b      	ldr	r3, [r7, #20]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	e000ed04 	.word	0xe000ed04

0800a01c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4a07      	ldr	r2, [pc, #28]	@ (800a048 <vApplicationGetIdleTaskMemory+0x2c>)
 800a02c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	4a06      	ldr	r2, [pc, #24]	@ (800a04c <vApplicationGetIdleTaskMemory+0x30>)
 800a032:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2280      	movs	r2, #128	@ 0x80
 800a038:	601a      	str	r2, [r3, #0]
}
 800a03a:	bf00      	nop
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	20002930 	.word	0x20002930
 800a04c:	2000298c 	.word	0x2000298c

0800a050 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4a07      	ldr	r2, [pc, #28]	@ (800a07c <vApplicationGetTimerTaskMemory+0x2c>)
 800a060:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	4a06      	ldr	r2, [pc, #24]	@ (800a080 <vApplicationGetTimerTaskMemory+0x30>)
 800a066:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a06e:	601a      	str	r2, [r3, #0]
}
 800a070:	bf00      	nop
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20002b8c 	.word	0x20002b8c
 800a080:	20002be8 	.word	0x20002be8

0800a084 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f103 0208 	add.w	r2, r3, #8
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f103 0208 	add.w	r2, r3, #8
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f103 0208 	add.w	r2, r3, #8
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	601a      	str	r2, [r3, #0]
}
 800a11a:	bf00      	nop
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13c:	d103      	bne.n	800a146 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	e00c      	b.n	800a160 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3308      	adds	r3, #8
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	e002      	b.n	800a154 <vListInsert+0x2e>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d2f6      	bcs.n	800a14e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	601a      	str	r2, [r3, #0]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6892      	ldr	r2, [r2, #8]
 800a1ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6852      	ldr	r2, [r2, #4]
 800a1b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d103      	bne.n	800a1cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10b      	bne.n	800a218 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a212:	bf00      	nop
 800a214:	bf00      	nop
 800a216:	e7fd      	b.n	800a214 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a218:	f002 fcae 	bl	800cb78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	441a      	add	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a248:	3b01      	subs	r3, #1
 800a24a:	68f9      	ldr	r1, [r7, #12]
 800a24c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a24e:	fb01 f303 	mul.w	r3, r1, r3
 800a252:	441a      	add	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	22ff      	movs	r2, #255	@ 0xff
 800a25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	22ff      	movs	r2, #255	@ 0xff
 800a264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d114      	bne.n	800a298 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01a      	beq.n	800a2ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3310      	adds	r3, #16
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fc4c 	bl	800bb18 <xTaskRemoveFromEventList>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d012      	beq.n	800a2ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <xQueueGenericReset+0xd0>)
 800a288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	e009      	b.n	800a2ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3310      	adds	r3, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff fef1 	bl	800a084 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	3324      	adds	r3, #36	@ 0x24
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff feec 	bl	800a084 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2ac:	f002 fc96 	bl	800cbdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2b0:	2301      	movs	r3, #1
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	@ 0x38
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10b      	bne.n	800a30a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	e7fd      	b.n	800a306 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <xQueueGenericCreateStatic+0x56>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <xQueueGenericCreateStatic+0x5a>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <xQueueGenericCreateStatic+0x5c>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	623b      	str	r3, [r7, #32]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <xQueueGenericCreateStatic+0x84>
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <xQueueGenericCreateStatic+0x88>
 800a344:	2301      	movs	r3, #1
 800a346:	e000      	b.n	800a34a <xQueueGenericCreateStatic+0x8a>
 800a348:	2300      	movs	r3, #0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10b      	bne.n	800a366 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	61fb      	str	r3, [r7, #28]
}
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	e7fd      	b.n	800a362 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a366:	2350      	movs	r3, #80	@ 0x50
 800a368:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b50      	cmp	r3, #80	@ 0x50
 800a36e:	d00b      	beq.n	800a388 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	61bb      	str	r3, [r7, #24]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a388:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00d      	beq.n	800a3b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a39c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 f840 	bl	800a430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3730      	adds	r7, #48	@ 0x30
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b08a      	sub	sp, #40	@ 0x28
 800a3be:	af02      	add	r7, sp, #8
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10b      	bne.n	800a3e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	613b      	str	r3, [r7, #16]
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	e7fd      	b.n	800a3e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	fb02 f303 	mul.w	r3, r2, r3
 800a3ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	3350      	adds	r3, #80	@ 0x50
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f002 fce1 	bl	800cdbc <pvPortMalloc>
 800a3fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d011      	beq.n	800a426 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	3350      	adds	r3, #80	@ 0x50
 800a40a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a414:	79fa      	ldrb	r2, [r7, #7]
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	4613      	mov	r3, r2
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 f805 	bl	800a430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a426:	69bb      	ldr	r3, [r7, #24]
	}
 800a428:	4618      	mov	r0, r3
 800a42a:	3720      	adds	r7, #32
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d103      	bne.n	800a44c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	e002      	b.n	800a452 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a45e:	2101      	movs	r1, #1
 800a460:	69b8      	ldr	r0, [r7, #24]
 800a462:	f7ff fec3 	bl	800a1ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	78fa      	ldrb	r2, [r7, #3]
 800a46a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a476:	b580      	push	{r7, lr}
 800a478:	b08a      	sub	sp, #40	@ 0x28
 800a47a:	af02      	add	r7, sp, #8
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	61bb      	str	r3, [r7, #24]
}
 800a49a:	bf00      	nop
 800a49c:	bf00      	nop
 800a49e:	e7fd      	b.n	800a49c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d90b      	bls.n	800a4c0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	617b      	str	r3, [r7, #20]
}
 800a4ba:	bf00      	nop
 800a4bc:	bf00      	nop
 800a4be:	e7fd      	b.n	800a4bc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff fef8 	bl	800a2c0 <xQueueGenericCreateStatic>
 800a4d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a4de:	69fb      	ldr	r3, [r7, #28]
	}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3720      	adds	r7, #32
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10b      	bne.n	800a510 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	613b      	str	r3, [r7, #16]
}
 800a50a:	bf00      	nop
 800a50c:	bf00      	nop
 800a50e:	e7fd      	b.n	800a50c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	429a      	cmp	r2, r3
 800a516:	d90b      	bls.n	800a530 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	60fb      	str	r3, [r7, #12]
}
 800a52a:	bf00      	nop
 800a52c:	bf00      	nop
 800a52e:	e7fd      	b.n	800a52c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a530:	2202      	movs	r2, #2
 800a532:	2100      	movs	r1, #0
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ff40 	bl	800a3ba <xQueueGenericCreate>
 800a53a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a548:	697b      	ldr	r3, [r7, #20]
	}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08e      	sub	sp, #56	@ 0x38
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a562:	2300      	movs	r3, #0
 800a564:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10b      	bne.n	800a588 <xQueueGenericSend+0x34>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a582:	bf00      	nop
 800a584:	bf00      	nop
 800a586:	e7fd      	b.n	800a584 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d103      	bne.n	800a596 <xQueueGenericSend+0x42>
 800a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <xQueueGenericSend+0x46>
 800a596:	2301      	movs	r3, #1
 800a598:	e000      	b.n	800a59c <xQueueGenericSend+0x48>
 800a59a:	2300      	movs	r3, #0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10b      	bne.n	800a5b8 <xQueueGenericSend+0x64>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	e7fd      	b.n	800a5b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d103      	bne.n	800a5c6 <xQueueGenericSend+0x72>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d101      	bne.n	800a5ca <xQueueGenericSend+0x76>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <xQueueGenericSend+0x78>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10b      	bne.n	800a5e8 <xQueueGenericSend+0x94>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	623b      	str	r3, [r7, #32]
}
 800a5e2:	bf00      	nop
 800a5e4:	bf00      	nop
 800a5e6:	e7fd      	b.n	800a5e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5e8:	f001 fc56 	bl	800be98 <xTaskGetSchedulerState>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d102      	bne.n	800a5f8 <xQueueGenericSend+0xa4>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <xQueueGenericSend+0xa8>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <xQueueGenericSend+0xaa>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10b      	bne.n	800a61a <xQueueGenericSend+0xc6>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	61fb      	str	r3, [r7, #28]
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	e7fd      	b.n	800a616 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a61a:	f002 faad 	bl	800cb78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a626:	429a      	cmp	r2, r3
 800a628:	d302      	bcc.n	800a630 <xQueueGenericSend+0xdc>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d129      	bne.n	800a684 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a636:	f000 fc6d 	bl	800af14 <prvCopyDataToQueue>
 800a63a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a646:	3324      	adds	r3, #36	@ 0x24
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 fa65 	bl	800bb18 <xTaskRemoveFromEventList>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d013      	beq.n	800a67c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a654:	4b3f      	ldr	r3, [pc, #252]	@ (800a754 <xQueueGenericSend+0x200>)
 800a656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	e00a      	b.n	800a67c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a66c:	4b39      	ldr	r3, [pc, #228]	@ (800a754 <xQueueGenericSend+0x200>)
 800a66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a67c:	f002 faae 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800a680:	2301      	movs	r3, #1
 800a682:	e063      	b.n	800a74c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d103      	bne.n	800a692 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a68a:	f002 faa7 	bl	800cbdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	e05c      	b.n	800a74c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a694:	2b00      	cmp	r3, #0
 800a696:	d106      	bne.n	800a6a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a698:	f107 0314 	add.w	r3, r7, #20
 800a69c:	4618      	mov	r0, r3
 800a69e:	f001 fa9f 	bl	800bbe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6a6:	f002 fa99 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6aa:	f001 f80f 	bl	800b6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ae:	f002 fa63 	bl	800cb78 <vPortEnterCritical>
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6b8:	b25b      	sxtb	r3, r3
 800a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6be:	d103      	bne.n	800a6c8 <xQueueGenericSend+0x174>
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6ce:	b25b      	sxtb	r3, r3
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d103      	bne.n	800a6de <xQueueGenericSend+0x18a>
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6de:	f002 fa7d 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6e2:	1d3a      	adds	r2, r7, #4
 800a6e4:	f107 0314 	add.w	r3, r7, #20
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f001 fa8e 	bl	800bc0c <xTaskCheckForTimeOut>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d124      	bne.n	800a740 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6f8:	f000 fd04 	bl	800b104 <prvIsQueueFull>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d018      	beq.n	800a734 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	3310      	adds	r3, #16
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	4611      	mov	r1, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f001 f9b2 	bl	800ba74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a712:	f000 fc8f 	bl	800b034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a716:	f000 ffe7 	bl	800b6e8 <xTaskResumeAll>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f af7c 	bne.w	800a61a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a722:	4b0c      	ldr	r3, [pc, #48]	@ (800a754 <xQueueGenericSend+0x200>)
 800a724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	e772      	b.n	800a61a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a736:	f000 fc7d 	bl	800b034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a73a:	f000 ffd5 	bl	800b6e8 <xTaskResumeAll>
 800a73e:	e76c      	b.n	800a61a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a742:	f000 fc77 	bl	800b034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a746:	f000 ffcf 	bl	800b6e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a74a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3738      	adds	r7, #56	@ 0x38
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	e000ed04 	.word	0xe000ed04

0800a758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b090      	sub	sp, #64	@ 0x40
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10b      	bne.n	800a788 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <xQueueGenericSendFromISR+0x3e>
 800a78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <xQueueGenericSendFromISR+0x42>
 800a796:	2301      	movs	r3, #1
 800a798:	e000      	b.n	800a79c <xQueueGenericSendFromISR+0x44>
 800a79a:	2300      	movs	r3, #0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10b      	bne.n	800a7b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d103      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x6e>
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d101      	bne.n	800a7ca <xQueueGenericSendFromISR+0x72>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <xQueueGenericSendFromISR+0x74>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10b      	bne.n	800a7e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	623b      	str	r3, [r7, #32]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7e8:	f002 faa6 	bl	800cd38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7ec:	f3ef 8211 	mrs	r2, BASEPRI
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	61fa      	str	r2, [r7, #28]
 800a802:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a804:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a806:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a810:	429a      	cmp	r2, r3
 800a812:	d302      	bcc.n	800a81a <xQueueGenericSendFromISR+0xc2>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d12f      	bne.n	800a87a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a820:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a828:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a830:	f000 fb70 	bl	800af14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a834:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83c:	d112      	bne.n	800a864 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a842:	2b00      	cmp	r3, #0
 800a844:	d016      	beq.n	800a874 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a848:	3324      	adds	r3, #36	@ 0x24
 800a84a:	4618      	mov	r0, r3
 800a84c:	f001 f964 	bl	800bb18 <xTaskRemoveFromEventList>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00e      	beq.n	800a874 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	e007      	b.n	800a874 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a864:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a868:	3301      	adds	r3, #1
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	b25a      	sxtb	r2, r3
 800a86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a874:	2301      	movs	r3, #1
 800a876:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a878:	e001      	b.n	800a87e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a880:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a888:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3740      	adds	r7, #64	@ 0x40
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08e      	sub	sp, #56	@ 0x38
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10b      	bne.n	800a8c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	623b      	str	r3, [r7, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	e7fd      	b.n	800a8bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00b      	beq.n	800a8e0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	61fb      	str	r3, [r7, #28]
}
 800a8da:	bf00      	nop
 800a8dc:	bf00      	nop
 800a8de:	e7fd      	b.n	800a8dc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d103      	bne.n	800a8f0 <xQueueGiveFromISR+0x5c>
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d101      	bne.n	800a8f4 <xQueueGiveFromISR+0x60>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e000      	b.n	800a8f6 <xQueueGiveFromISR+0x62>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10b      	bne.n	800a912 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	61bb      	str	r3, [r7, #24]
}
 800a90c:	bf00      	nop
 800a90e:	bf00      	nop
 800a910:	e7fd      	b.n	800a90e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a912:	f002 fa11 	bl	800cd38 <vPortValidateInterruptPriority>
	__asm volatile
 800a916:	f3ef 8211 	mrs	r2, BASEPRI
 800a91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	617a      	str	r2, [r7, #20]
 800a92c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a92e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a930:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a936:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a93c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a93e:	429a      	cmp	r2, r3
 800a940:	d22b      	bcs.n	800a99a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a944:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a952:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a954:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95c:	d112      	bne.n	800a984 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a962:	2b00      	cmp	r3, #0
 800a964:	d016      	beq.n	800a994 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	3324      	adds	r3, #36	@ 0x24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 f8d4 	bl	800bb18 <xTaskRemoveFromEventList>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00e      	beq.n	800a994 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2201      	movs	r2, #1
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e007      	b.n	800a994 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a988:	3301      	adds	r3, #1
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	b25a      	sxtb	r2, r3
 800a98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a994:	2301      	movs	r3, #1
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34
 800a998:	e001      	b.n	800a99e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f383 8811 	msr	BASEPRI, r3
}
 800a9a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3738      	adds	r7, #56	@ 0x38
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08c      	sub	sp, #48	@ 0x30
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10b      	bne.n	800a9e6 <xQueueReceive+0x32>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	623b      	str	r3, [r7, #32]
}
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	e7fd      	b.n	800a9e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d103      	bne.n	800a9f4 <xQueueReceive+0x40>
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <xQueueReceive+0x44>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e000      	b.n	800a9fa <xQueueReceive+0x46>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10b      	bne.n	800aa16 <xQueueReceive+0x62>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	61fb      	str	r3, [r7, #28]
}
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
 800aa14:	e7fd      	b.n	800aa12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa16:	f001 fa3f 	bl	800be98 <xTaskGetSchedulerState>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <xQueueReceive+0x72>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <xQueueReceive+0x76>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <xQueueReceive+0x78>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10b      	bne.n	800aa48 <xQueueReceive+0x94>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	61bb      	str	r3, [r7, #24]
}
 800aa42:	bf00      	nop
 800aa44:	bf00      	nop
 800aa46:	e7fd      	b.n	800aa44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa48:	f002 f896 	bl	800cb78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d01f      	beq.n	800aa98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa58:	68b9      	ldr	r1, [r7, #8]
 800aa5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa5c:	f000 fac4 	bl	800afe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa62:	1e5a      	subs	r2, r3, #1
 800aa64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00f      	beq.n	800aa90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa72:	3310      	adds	r3, #16
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 f84f 	bl	800bb18 <xTaskRemoveFromEventList>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d007      	beq.n	800aa90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa80:	4b3c      	ldr	r3, [pc, #240]	@ (800ab74 <xQueueReceive+0x1c0>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa90:	f002 f8a4 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e069      	b.n	800ab6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d103      	bne.n	800aaa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa9e:	f002 f89d 	bl	800cbdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e062      	b.n	800ab6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d106      	bne.n	800aaba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaac:	f107 0310 	add.w	r3, r7, #16
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 f895 	bl	800bbe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aab6:	2301      	movs	r3, #1
 800aab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaba:	f002 f88f 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aabe:	f000 fe05 	bl	800b6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac2:	f002 f859 	bl	800cb78 <vPortEnterCritical>
 800aac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aacc:	b25b      	sxtb	r3, r3
 800aace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad2:	d103      	bne.n	800aadc <xQueueReceive+0x128>
 800aad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aae2:	b25b      	sxtb	r3, r3
 800aae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae8:	d103      	bne.n	800aaf2 <xQueueReceive+0x13e>
 800aaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaf2:	f002 f873 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf6:	1d3a      	adds	r2, r7, #4
 800aaf8:	f107 0310 	add.w	r3, r7, #16
 800aafc:	4611      	mov	r1, r2
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 f884 	bl	800bc0c <xTaskCheckForTimeOut>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d123      	bne.n	800ab52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab0c:	f000 fae4 	bl	800b0d8 <prvIsQueueEmpty>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d017      	beq.n	800ab46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab18:	3324      	adds	r3, #36	@ 0x24
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 ffa8 	bl	800ba74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab26:	f000 fa85 	bl	800b034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab2a:	f000 fddd 	bl	800b6e8 <xTaskResumeAll>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d189      	bne.n	800aa48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ab34:	4b0f      	ldr	r3, [pc, #60]	@ (800ab74 <xQueueReceive+0x1c0>)
 800ab36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	e780      	b.n	800aa48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab48:	f000 fa74 	bl	800b034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab4c:	f000 fdcc 	bl	800b6e8 <xTaskResumeAll>
 800ab50:	e77a      	b.n	800aa48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab54:	f000 fa6e 	bl	800b034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab58:	f000 fdc6 	bl	800b6e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab5e:	f000 fabb 	bl	800b0d8 <prvIsQueueEmpty>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f43f af6f 	beq.w	800aa48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3730      	adds	r7, #48	@ 0x30
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	e000ed04 	.word	0xe000ed04

0800ab78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08e      	sub	sp, #56	@ 0x38
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab82:	2300      	movs	r3, #0
 800ab84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	623b      	str	r3, [r7, #32]
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	e7fd      	b.n	800aba8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00b      	beq.n	800abcc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	61fb      	str	r3, [r7, #28]
}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	e7fd      	b.n	800abc8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abcc:	f001 f964 	bl	800be98 <xTaskGetSchedulerState>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <xQueueSemaphoreTake+0x64>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <xQueueSemaphoreTake+0x68>
 800abdc:	2301      	movs	r3, #1
 800abde:	e000      	b.n	800abe2 <xQueueSemaphoreTake+0x6a>
 800abe0:	2300      	movs	r3, #0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10b      	bne.n	800abfe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	61bb      	str	r3, [r7, #24]
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	e7fd      	b.n	800abfa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abfe:	f001 ffbb 	bl	800cb78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d024      	beq.n	800ac58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac10:	1e5a      	subs	r2, r3, #1
 800ac12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d104      	bne.n	800ac28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac1e:	f001 fab5 	bl	800c18c <pvTaskIncrementMutexHeldCount>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00f      	beq.n	800ac50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac32:	3310      	adds	r3, #16
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 ff6f 	bl	800bb18 <xTaskRemoveFromEventList>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d007      	beq.n	800ac50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac40:	4b54      	ldr	r3, [pc, #336]	@ (800ad94 <xQueueSemaphoreTake+0x21c>)
 800ac42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac50:	f001 ffc4 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e098      	b.n	800ad8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d112      	bne.n	800ac84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00b      	beq.n	800ac7c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	617b      	str	r3, [r7, #20]
}
 800ac76:	bf00      	nop
 800ac78:	bf00      	nop
 800ac7a:	e7fd      	b.n	800ac78 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac7c:	f001 ffae 	bl	800cbdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac80:	2300      	movs	r3, #0
 800ac82:	e082      	b.n	800ad8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac8a:	f107 030c 	add.w	r3, r7, #12
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 ffa6 	bl	800bbe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac94:	2301      	movs	r3, #1
 800ac96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac98:	f001 ffa0 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac9c:	f000 fd16 	bl	800b6cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aca0:	f001 ff6a 	bl	800cb78 <vPortEnterCritical>
 800aca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acaa:	b25b      	sxtb	r3, r3
 800acac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb0:	d103      	bne.n	800acba <xQueueSemaphoreTake+0x142>
 800acb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acc0:	b25b      	sxtb	r3, r3
 800acc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc6:	d103      	bne.n	800acd0 <xQueueSemaphoreTake+0x158>
 800acc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acd0:	f001 ff84 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acd4:	463a      	mov	r2, r7
 800acd6:	f107 030c 	add.w	r3, r7, #12
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 ff95 	bl	800bc0c <xTaskCheckForTimeOut>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d132      	bne.n	800ad4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ace8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800acea:	f000 f9f5 	bl	800b0d8 <prvIsQueueEmpty>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d026      	beq.n	800ad42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d109      	bne.n	800ad10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800acfc:	f001 ff3c 	bl	800cb78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f001 f8e5 	bl	800bed4 <xTaskPriorityInherit>
 800ad0a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ad0c:	f001 ff66 	bl	800cbdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad12:	3324      	adds	r3, #36	@ 0x24
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	4611      	mov	r1, r2
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 feab 	bl	800ba74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad20:	f000 f988 	bl	800b034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad24:	f000 fce0 	bl	800b6e8 <xTaskResumeAll>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f47f af67 	bne.w	800abfe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ad30:	4b18      	ldr	r3, [pc, #96]	@ (800ad94 <xQueueSemaphoreTake+0x21c>)
 800ad32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	e75d      	b.n	800abfe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad44:	f000 f976 	bl	800b034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad48:	f000 fcce 	bl	800b6e8 <xTaskResumeAll>
 800ad4c:	e757      	b.n	800abfe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad50:	f000 f970 	bl	800b034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad54:	f000 fcc8 	bl	800b6e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad5a:	f000 f9bd 	bl	800b0d8 <prvIsQueueEmpty>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f43f af4c 	beq.w	800abfe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00d      	beq.n	800ad88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ad6c:	f001 ff04 	bl	800cb78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad72:	f000 f8b7 	bl	800aee4 <prvGetDisinheritPriorityAfterTimeout>
 800ad76:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ad78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 f980 	bl	800c084 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad84:	f001 ff2a 	bl	800cbdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3738      	adds	r7, #56	@ 0x38
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	e000ed04 	.word	0xe000ed04

0800ad98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08e      	sub	sp, #56	@ 0x38
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ada8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10b      	bne.n	800adc6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	623b      	str	r3, [r7, #32]
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	e7fd      	b.n	800adc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d103      	bne.n	800add4 <xQueueReceiveFromISR+0x3c>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add0:	2b00      	cmp	r3, #0
 800add2:	d101      	bne.n	800add8 <xQueueReceiveFromISR+0x40>
 800add4:	2301      	movs	r3, #1
 800add6:	e000      	b.n	800adda <xQueueReceiveFromISR+0x42>
 800add8:	2300      	movs	r3, #0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10b      	bne.n	800adf6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	61fb      	str	r3, [r7, #28]
}
 800adf0:	bf00      	nop
 800adf2:	bf00      	nop
 800adf4:	e7fd      	b.n	800adf2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adf6:	f001 ff9f 	bl	800cd38 <vPortValidateInterruptPriority>
	__asm volatile
 800adfa:	f3ef 8211 	mrs	r2, BASEPRI
 800adfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	61ba      	str	r2, [r7, #24]
 800ae10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d02f      	beq.n	800ae82 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae30:	f000 f8da 	bl	800afe8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae36:	1e5a      	subs	r2, r3, #1
 800ae38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae44:	d112      	bne.n	800ae6c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d016      	beq.n	800ae7c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	3310      	adds	r3, #16
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fe60 	bl	800bb18 <xTaskRemoveFromEventList>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00e      	beq.n	800ae7c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	e007      	b.n	800ae7c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae70:	3301      	adds	r3, #1
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	b25a      	sxtb	r2, r3
 800ae76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae80:	e001      	b.n	800ae86 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	f383 8811 	msr	BASEPRI, r3
}
 800ae90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3738      	adds	r7, #56	@ 0x38
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10b      	bne.n	800aec6 <vQueueDelete+0x2a>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	60bb      	str	r3, [r7, #8]
}
 800aec0:	bf00      	nop
 800aec2:	bf00      	nop
 800aec4:	e7fd      	b.n	800aec2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 f95e 	bl	800b188 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d102      	bne.n	800aedc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f002 f83e 	bl	800cf58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d006      	beq.n	800af02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	e001      	b.n	800af06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af02:	2300      	movs	r3, #0
 800af04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af06:	68fb      	ldr	r3, [r7, #12]
	}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af20:	2300      	movs	r3, #0
 800af22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10d      	bne.n	800af4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d14d      	bne.n	800afd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	4618      	mov	r0, r3
 800af40:	f001 f830 	bl	800bfa4 <xTaskPriorityDisinherit>
 800af44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	609a      	str	r2, [r3, #8]
 800af4c:	e043      	b.n	800afd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d119      	bne.n	800af88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6858      	ldr	r0, [r3, #4]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5c:	461a      	mov	r2, r3
 800af5e:	68b9      	ldr	r1, [r7, #8]
 800af60:	f002 fe6d 	bl	800dc3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6c:	441a      	add	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d32b      	bcc.n	800afd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	605a      	str	r2, [r3, #4]
 800af86:	e026      	b.n	800afd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	68d8      	ldr	r0, [r3, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af90:	461a      	mov	r2, r3
 800af92:	68b9      	ldr	r1, [r7, #8]
 800af94:	f002 fe53 	bl	800dc3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	68da      	ldr	r2, [r3, #12]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa0:	425b      	negs	r3, r3
 800afa2:	441a      	add	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d207      	bcs.n	800afc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbc:	425b      	negs	r3, r3
 800afbe:	441a      	add	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d105      	bne.n	800afd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800afde:	697b      	ldr	r3, [r7, #20]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d018      	beq.n	800b02c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68da      	ldr	r2, [r3, #12]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b002:	441a      	add	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	429a      	cmp	r2, r3
 800b012:	d303      	bcc.n	800b01c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68d9      	ldr	r1, [r3, #12]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b024:	461a      	mov	r2, r3
 800b026:	6838      	ldr	r0, [r7, #0]
 800b028:	f002 fe09 	bl	800dc3e <memcpy>
	}
}
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b03c:	f001 fd9c 	bl	800cb78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b048:	e011      	b.n	800b06e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d012      	beq.n	800b078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3324      	adds	r3, #36	@ 0x24
 800b056:	4618      	mov	r0, r3
 800b058:	f000 fd5e 	bl	800bb18 <xTaskRemoveFromEventList>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b062:	f000 fe37 	bl	800bcd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	3b01      	subs	r3, #1
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b06e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b072:	2b00      	cmp	r3, #0
 800b074:	dce9      	bgt.n	800b04a <prvUnlockQueue+0x16>
 800b076:	e000      	b.n	800b07a <prvUnlockQueue+0x46>
					break;
 800b078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	22ff      	movs	r2, #255	@ 0xff
 800b07e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b082:	f001 fdab 	bl	800cbdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b086:	f001 fd77 	bl	800cb78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b092:	e011      	b.n	800b0b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d012      	beq.n	800b0c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3310      	adds	r3, #16
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 fd39 	bl	800bb18 <xTaskRemoveFromEventList>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0ac:	f000 fe12 	bl	800bcd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dce9      	bgt.n	800b094 <prvUnlockQueue+0x60>
 800b0c0:	e000      	b.n	800b0c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	22ff      	movs	r2, #255	@ 0xff
 800b0c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b0cc:	f001 fd86 	bl	800cbdc <vPortExitCritical>
}
 800b0d0:	bf00      	nop
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0e0:	f001 fd4a 	bl	800cb78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d102      	bne.n	800b0f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	e001      	b.n	800b0f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0f6:	f001 fd71 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b10c:	f001 fd34 	bl	800cb78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b118:	429a      	cmp	r2, r3
 800b11a:	d102      	bne.n	800b122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b11c:	2301      	movs	r3, #1
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	e001      	b.n	800b126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b122:	2300      	movs	r3, #0
 800b124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b126:	f001 fd59 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800b12a:	68fb      	ldr	r3, [r7, #12]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	e014      	b.n	800b16e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b144:	4a0f      	ldr	r2, [pc, #60]	@ (800b184 <vQueueAddToRegistry+0x50>)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10b      	bne.n	800b168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b150:	490c      	ldr	r1, [pc, #48]	@ (800b184 <vQueueAddToRegistry+0x50>)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b15a:	4a0a      	ldr	r2, [pc, #40]	@ (800b184 <vQueueAddToRegistry+0x50>)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	4413      	add	r3, r2
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b166:	e006      	b.n	800b176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3301      	adds	r3, #1
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b07      	cmp	r3, #7
 800b172:	d9e7      	bls.n	800b144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b174:	bf00      	nop
 800b176:	bf00      	nop
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	20002fe8 	.word	0x20002fe8

0800b188 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b190:	2300      	movs	r3, #0
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	e016      	b.n	800b1c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b196:	4a10      	ldr	r2, [pc, #64]	@ (800b1d8 <vQueueUnregisterQueue+0x50>)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	4413      	add	r3, r2
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d10b      	bne.n	800b1be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b1a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b1d8 <vQueueUnregisterQueue+0x50>)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b1b0:	4a09      	ldr	r2, [pc, #36]	@ (800b1d8 <vQueueUnregisterQueue+0x50>)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	4413      	add	r3, r2
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	605a      	str	r2, [r3, #4]
				break;
 800b1bc:	e006      	b.n	800b1cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b07      	cmp	r3, #7
 800b1c8:	d9e5      	bls.n	800b196 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	20002fe8 	.word	0x20002fe8

0800b1dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b1ec:	f001 fcc4 	bl	800cb78 <vPortEnterCritical>
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1f6:	b25b      	sxtb	r3, r3
 800b1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fc:	d103      	bne.n	800b206 <vQueueWaitForMessageRestricted+0x2a>
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b20c:	b25b      	sxtb	r3, r3
 800b20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b212:	d103      	bne.n	800b21c <vQueueWaitForMessageRestricted+0x40>
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b21c:	f001 fcde 	bl	800cbdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b224:	2b00      	cmp	r3, #0
 800b226:	d106      	bne.n	800b236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	3324      	adds	r3, #36	@ 0x24
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	68b9      	ldr	r1, [r7, #8]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fc45 	bl	800bac0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b236:	6978      	ldr	r0, [r7, #20]
 800b238:	f7ff fefc 	bl	800b034 <prvUnlockQueue>
	}
 800b23c:	bf00      	nop
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08e      	sub	sp, #56	@ 0x38
 800b248:	af04      	add	r7, sp, #16
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
 800b250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10b      	bne.n	800b270 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	623b      	str	r3, [r7, #32]
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	e7fd      	b.n	800b26c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10b      	bne.n	800b28e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	61fb      	str	r3, [r7, #28]
}
 800b288:	bf00      	nop
 800b28a:	bf00      	nop
 800b28c:	e7fd      	b.n	800b28a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b28e:	235c      	movs	r3, #92	@ 0x5c
 800b290:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2b5c      	cmp	r3, #92	@ 0x5c
 800b296:	d00b      	beq.n	800b2b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	61bb      	str	r3, [r7, #24]
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	e7fd      	b.n	800b2ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01e      	beq.n	800b2f6 <xTaskCreateStatic+0xb2>
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d01b      	beq.n	800b2f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9303      	str	r3, [sp, #12]
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d6:	9302      	str	r3, [sp, #8]
 800b2d8:	f107 0314 	add.w	r3, r7, #20
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 f850 	bl	800b38e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2f0:	f000 f8de 	bl	800b4b0 <prvAddNewTaskToReadyList>
 800b2f4:	e001      	b.n	800b2fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2fa:	697b      	ldr	r3, [r7, #20]
	}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3728      	adds	r7, #40	@ 0x28
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	@ 0x30
 800b308:	af04      	add	r7, sp, #16
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	603b      	str	r3, [r7, #0]
 800b310:	4613      	mov	r3, r2
 800b312:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b314:	88fb      	ldrh	r3, [r7, #6]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4618      	mov	r0, r3
 800b31a:	f001 fd4f 	bl	800cdbc <pvPortMalloc>
 800b31e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00e      	beq.n	800b344 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b326:	205c      	movs	r0, #92	@ 0x5c
 800b328:	f001 fd48 	bl	800cdbc <pvPortMalloc>
 800b32c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	631a      	str	r2, [r3, #48]	@ 0x30
 800b33a:	e005      	b.n	800b348 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b33c:	6978      	ldr	r0, [r7, #20]
 800b33e:	f001 fe0b 	bl	800cf58 <vPortFree>
 800b342:	e001      	b.n	800b348 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d017      	beq.n	800b37e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b356:	88fa      	ldrh	r2, [r7, #6]
 800b358:	2300      	movs	r3, #0
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	9302      	str	r3, [sp, #8]
 800b360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 f80e 	bl	800b38e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b372:	69f8      	ldr	r0, [r7, #28]
 800b374:	f000 f89c 	bl	800b4b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b378:	2301      	movs	r3, #1
 800b37a:	61bb      	str	r3, [r7, #24]
 800b37c:	e002      	b.n	800b384 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b37e:	f04f 33ff 	mov.w	r3, #4294967295
 800b382:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b384:	69bb      	ldr	r3, [r7, #24]
	}
 800b386:	4618      	mov	r0, r3
 800b388:	3720      	adds	r7, #32
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b088      	sub	sp, #32
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	21a5      	movs	r1, #165	@ 0xa5
 800b3a8:	f002 fbce 	bl	800db48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	f023 0307 	bic.w	r3, r3, #7
 800b3c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	f003 0307 	and.w	r3, r3, #7
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	617b      	str	r3, [r7, #20]
}
 800b3e2:	bf00      	nop
 800b3e4:	bf00      	nop
 800b3e6:	e7fd      	b.n	800b3e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d01f      	beq.n	800b42e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	61fb      	str	r3, [r7, #28]
 800b3f2:	e012      	b.n	800b41a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	7819      	ldrb	r1, [r3, #0]
 800b3fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4413      	add	r3, r2
 800b402:	3334      	adds	r3, #52	@ 0x34
 800b404:	460a      	mov	r2, r1
 800b406:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	4413      	add	r3, r2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d006      	beq.n	800b422 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	3301      	adds	r3, #1
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	2b0f      	cmp	r3, #15
 800b41e:	d9e9      	bls.n	800b3f4 <prvInitialiseNewTask+0x66>
 800b420:	e000      	b.n	800b424 <prvInitialiseNewTask+0x96>
			{
				break;
 800b422:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b426:	2200      	movs	r2, #0
 800b428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b42c:	e003      	b.n	800b436 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	2b37      	cmp	r3, #55	@ 0x37
 800b43a:	d901      	bls.n	800b440 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b43c:	2337      	movs	r3, #55	@ 0x37
 800b43e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b444:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b44a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44e:	2200      	movs	r2, #0
 800b450:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	3304      	adds	r3, #4
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fe34 	bl	800a0c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45e:	3318      	adds	r3, #24
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe fe2f 	bl	800a0c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b46a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b47a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	2200      	movs	r2, #0
 800b480:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	68f9      	ldr	r1, [r7, #12]
 800b48e:	69b8      	ldr	r0, [r7, #24]
 800b490:	f001 fa3e 	bl	800c910 <pxPortInitialiseStack>
 800b494:	4602      	mov	r2, r0
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4a6:	bf00      	nop
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4b8:	f001 fb5e 	bl	800cb78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4bc:	4b2d      	ldr	r3, [pc, #180]	@ (800b574 <prvAddNewTaskToReadyList+0xc4>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	4a2c      	ldr	r2, [pc, #176]	@ (800b574 <prvAddNewTaskToReadyList+0xc4>)
 800b4c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4c6:	4b2c      	ldr	r3, [pc, #176]	@ (800b578 <prvAddNewTaskToReadyList+0xc8>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d109      	bne.n	800b4e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b578 <prvAddNewTaskToReadyList+0xc8>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4d4:	4b27      	ldr	r3, [pc, #156]	@ (800b574 <prvAddNewTaskToReadyList+0xc4>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d110      	bne.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4dc:	f000 fc1e 	bl	800bd1c <prvInitialiseTaskLists>
 800b4e0:	e00d      	b.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4e2:	4b26      	ldr	r3, [pc, #152]	@ (800b57c <prvAddNewTaskToReadyList+0xcc>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d109      	bne.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4ea:	4b23      	ldr	r3, [pc, #140]	@ (800b578 <prvAddNewTaskToReadyList+0xc8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d802      	bhi.n	800b4fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4f8:	4a1f      	ldr	r2, [pc, #124]	@ (800b578 <prvAddNewTaskToReadyList+0xc8>)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4fe:	4b20      	ldr	r3, [pc, #128]	@ (800b580 <prvAddNewTaskToReadyList+0xd0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3301      	adds	r3, #1
 800b504:	4a1e      	ldr	r2, [pc, #120]	@ (800b580 <prvAddNewTaskToReadyList+0xd0>)
 800b506:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b508:	4b1d      	ldr	r3, [pc, #116]	@ (800b580 <prvAddNewTaskToReadyList+0xd0>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b514:	4b1b      	ldr	r3, [pc, #108]	@ (800b584 <prvAddNewTaskToReadyList+0xd4>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d903      	bls.n	800b524 <prvAddNewTaskToReadyList+0x74>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b520:	4a18      	ldr	r2, [pc, #96]	@ (800b584 <prvAddNewTaskToReadyList+0xd4>)
 800b522:	6013      	str	r3, [r2, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b528:	4613      	mov	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4a15      	ldr	r2, [pc, #84]	@ (800b588 <prvAddNewTaskToReadyList+0xd8>)
 800b532:	441a      	add	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3304      	adds	r3, #4
 800b538:	4619      	mov	r1, r3
 800b53a:	4610      	mov	r0, r2
 800b53c:	f7fe fdcf 	bl	800a0de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b540:	f001 fb4c 	bl	800cbdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b544:	4b0d      	ldr	r3, [pc, #52]	@ (800b57c <prvAddNewTaskToReadyList+0xcc>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00e      	beq.n	800b56a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b54c:	4b0a      	ldr	r3, [pc, #40]	@ (800b578 <prvAddNewTaskToReadyList+0xc8>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	429a      	cmp	r2, r3
 800b558:	d207      	bcs.n	800b56a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b55a:	4b0c      	ldr	r3, [pc, #48]	@ (800b58c <prvAddNewTaskToReadyList+0xdc>)
 800b55c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b56a:	bf00      	nop
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	200034fc 	.word	0x200034fc
 800b578:	20003028 	.word	0x20003028
 800b57c:	20003508 	.word	0x20003508
 800b580:	20003518 	.word	0x20003518
 800b584:	20003504 	.word	0x20003504
 800b588:	2000302c 	.word	0x2000302c
 800b58c:	e000ed04 	.word	0xe000ed04

0800b590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b598:	2300      	movs	r3, #0
 800b59a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d018      	beq.n	800b5d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5a2:	4b14      	ldr	r3, [pc, #80]	@ (800b5f4 <vTaskDelay+0x64>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00b      	beq.n	800b5c2 <vTaskDelay+0x32>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	60bb      	str	r3, [r7, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	bf00      	nop
 800b5c0:	e7fd      	b.n	800b5be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5c2:	f000 f883 	bl	800b6cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fdf3 	bl	800c1b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5ce:	f000 f88b 	bl	800b6e8 <xTaskResumeAll>
 800b5d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d107      	bne.n	800b5ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b5da:	4b07      	ldr	r3, [pc, #28]	@ (800b5f8 <vTaskDelay+0x68>)
 800b5dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5ea:	bf00      	nop
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20003524 	.word	0x20003524
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08a      	sub	sp, #40	@ 0x28
 800b600:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b606:	2300      	movs	r3, #0
 800b608:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b60a:	463a      	mov	r2, r7
 800b60c:	1d39      	adds	r1, r7, #4
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe fd02 	bl	800a01c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	9202      	str	r2, [sp, #8]
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	2300      	movs	r3, #0
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	2300      	movs	r3, #0
 800b628:	460a      	mov	r2, r1
 800b62a:	4922      	ldr	r1, [pc, #136]	@ (800b6b4 <vTaskStartScheduler+0xb8>)
 800b62c:	4822      	ldr	r0, [pc, #136]	@ (800b6b8 <vTaskStartScheduler+0xbc>)
 800b62e:	f7ff fe09 	bl	800b244 <xTaskCreateStatic>
 800b632:	4603      	mov	r3, r0
 800b634:	4a21      	ldr	r2, [pc, #132]	@ (800b6bc <vTaskStartScheduler+0xc0>)
 800b636:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b638:	4b20      	ldr	r3, [pc, #128]	@ (800b6bc <vTaskStartScheduler+0xc0>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b640:	2301      	movs	r3, #1
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e001      	b.n	800b64a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d102      	bne.n	800b656 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b650:	f000 fe04 	bl	800c25c <xTimerCreateTimerTask>
 800b654:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d116      	bne.n	800b68a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	613b      	str	r3, [r7, #16]
}
 800b66e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b670:	4b13      	ldr	r3, [pc, #76]	@ (800b6c0 <vTaskStartScheduler+0xc4>)
 800b672:	f04f 32ff 	mov.w	r2, #4294967295
 800b676:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b678:	4b12      	ldr	r3, [pc, #72]	@ (800b6c4 <vTaskStartScheduler+0xc8>)
 800b67a:	2201      	movs	r2, #1
 800b67c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b67e:	4b12      	ldr	r3, [pc, #72]	@ (800b6c8 <vTaskStartScheduler+0xcc>)
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b684:	f001 f9d4 	bl	800ca30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b688:	e00f      	b.n	800b6aa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b690:	d10b      	bne.n	800b6aa <vTaskStartScheduler+0xae>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	60fb      	str	r3, [r7, #12]
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <vTaskStartScheduler+0xaa>
}
 800b6aa:	bf00      	nop
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	0800e878 	.word	0x0800e878
 800b6b8:	0800bced 	.word	0x0800bced
 800b6bc:	20003520 	.word	0x20003520
 800b6c0:	2000351c 	.word	0x2000351c
 800b6c4:	20003508 	.word	0x20003508
 800b6c8:	20003500 	.word	0x20003500

0800b6cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6d0:	4b04      	ldr	r3, [pc, #16]	@ (800b6e4 <vTaskSuspendAll+0x18>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	4a03      	ldr	r2, [pc, #12]	@ (800b6e4 <vTaskSuspendAll+0x18>)
 800b6d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6da:	bf00      	nop
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr
 800b6e4:	20003524 	.word	0x20003524

0800b6e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6f6:	4b42      	ldr	r3, [pc, #264]	@ (800b800 <xTaskResumeAll+0x118>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10b      	bne.n	800b716 <xTaskResumeAll+0x2e>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	603b      	str	r3, [r7, #0]
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	e7fd      	b.n	800b712 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b716:	f001 fa2f 	bl	800cb78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b71a:	4b39      	ldr	r3, [pc, #228]	@ (800b800 <xTaskResumeAll+0x118>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3b01      	subs	r3, #1
 800b720:	4a37      	ldr	r2, [pc, #220]	@ (800b800 <xTaskResumeAll+0x118>)
 800b722:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b724:	4b36      	ldr	r3, [pc, #216]	@ (800b800 <xTaskResumeAll+0x118>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d162      	bne.n	800b7f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b72c:	4b35      	ldr	r3, [pc, #212]	@ (800b804 <xTaskResumeAll+0x11c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d05e      	beq.n	800b7f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b734:	e02f      	b.n	800b796 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b736:	4b34      	ldr	r3, [pc, #208]	@ (800b808 <xTaskResumeAll+0x120>)
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3318      	adds	r3, #24
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fd28 	bl	800a198 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe fd23 	bl	800a198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b756:	4b2d      	ldr	r3, [pc, #180]	@ (800b80c <xTaskResumeAll+0x124>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d903      	bls.n	800b766 <xTaskResumeAll+0x7e>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b762:	4a2a      	ldr	r2, [pc, #168]	@ (800b80c <xTaskResumeAll+0x124>)
 800b764:	6013      	str	r3, [r2, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4a27      	ldr	r2, [pc, #156]	@ (800b810 <xTaskResumeAll+0x128>)
 800b774:	441a      	add	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3304      	adds	r3, #4
 800b77a:	4619      	mov	r1, r3
 800b77c:	4610      	mov	r0, r2
 800b77e:	f7fe fcae 	bl	800a0de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b786:	4b23      	ldr	r3, [pc, #140]	@ (800b814 <xTaskResumeAll+0x12c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d302      	bcc.n	800b796 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b790:	4b21      	ldr	r3, [pc, #132]	@ (800b818 <xTaskResumeAll+0x130>)
 800b792:	2201      	movs	r2, #1
 800b794:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b796:	4b1c      	ldr	r3, [pc, #112]	@ (800b808 <xTaskResumeAll+0x120>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1cb      	bne.n	800b736 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7a4:	f000 fb58 	bl	800be58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7a8:	4b1c      	ldr	r3, [pc, #112]	@ (800b81c <xTaskResumeAll+0x134>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d010      	beq.n	800b7d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7b4:	f000 f846 	bl	800b844 <xTaskIncrementTick>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b7be:	4b16      	ldr	r3, [pc, #88]	@ (800b818 <xTaskResumeAll+0x130>)
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1f1      	bne.n	800b7b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b7d0:	4b12      	ldr	r3, [pc, #72]	@ (800b81c <xTaskResumeAll+0x134>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7d6:	4b10      	ldr	r3, [pc, #64]	@ (800b818 <xTaskResumeAll+0x130>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b820 <xTaskResumeAll+0x138>)
 800b7e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7f2:	f001 f9f3 	bl	800cbdc <vPortExitCritical>

	return xAlreadyYielded;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20003524 	.word	0x20003524
 800b804:	200034fc 	.word	0x200034fc
 800b808:	200034bc 	.word	0x200034bc
 800b80c:	20003504 	.word	0x20003504
 800b810:	2000302c 	.word	0x2000302c
 800b814:	20003028 	.word	0x20003028
 800b818:	20003510 	.word	0x20003510
 800b81c:	2000350c 	.word	0x2000350c
 800b820:	e000ed04 	.word	0xe000ed04

0800b824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b82a:	4b05      	ldr	r3, [pc, #20]	@ (800b840 <xTaskGetTickCount+0x1c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b830:	687b      	ldr	r3, [r7, #4]
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	20003500 	.word	0x20003500

0800b844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b84e:	4b4f      	ldr	r3, [pc, #316]	@ (800b98c <xTaskIncrementTick+0x148>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f040 8090 	bne.w	800b978 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b858:	4b4d      	ldr	r3, [pc, #308]	@ (800b990 <xTaskIncrementTick+0x14c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3301      	adds	r3, #1
 800b85e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b860:	4a4b      	ldr	r2, [pc, #300]	@ (800b990 <xTaskIncrementTick+0x14c>)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d121      	bne.n	800b8b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b86c:	4b49      	ldr	r3, [pc, #292]	@ (800b994 <xTaskIncrementTick+0x150>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	603b      	str	r3, [r7, #0]
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	e7fd      	b.n	800b88a <xTaskIncrementTick+0x46>
 800b88e:	4b41      	ldr	r3, [pc, #260]	@ (800b994 <xTaskIncrementTick+0x150>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	4b40      	ldr	r3, [pc, #256]	@ (800b998 <xTaskIncrementTick+0x154>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a3e      	ldr	r2, [pc, #248]	@ (800b994 <xTaskIncrementTick+0x150>)
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	4a3e      	ldr	r2, [pc, #248]	@ (800b998 <xTaskIncrementTick+0x154>)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	4b3e      	ldr	r3, [pc, #248]	@ (800b99c <xTaskIncrementTick+0x158>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	4a3c      	ldr	r2, [pc, #240]	@ (800b99c <xTaskIncrementTick+0x158>)
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	f000 fad4 	bl	800be58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8b0:	4b3b      	ldr	r3, [pc, #236]	@ (800b9a0 <xTaskIncrementTick+0x15c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d349      	bcc.n	800b94e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ba:	4b36      	ldr	r3, [pc, #216]	@ (800b994 <xTaskIncrementTick+0x150>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d104      	bne.n	800b8ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c4:	4b36      	ldr	r3, [pc, #216]	@ (800b9a0 <xTaskIncrementTick+0x15c>)
 800b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ca:	601a      	str	r2, [r3, #0]
					break;
 800b8cc:	e03f      	b.n	800b94e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ce:	4b31      	ldr	r3, [pc, #196]	@ (800b994 <xTaskIncrementTick+0x150>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d203      	bcs.n	800b8ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8e6:	4a2e      	ldr	r2, [pc, #184]	@ (800b9a0 <xTaskIncrementTick+0x15c>)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8ec:	e02f      	b.n	800b94e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fc50 	bl	800a198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	3318      	adds	r3, #24
 800b904:	4618      	mov	r0, r3
 800b906:	f7fe fc47 	bl	800a198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b90e:	4b25      	ldr	r3, [pc, #148]	@ (800b9a4 <xTaskIncrementTick+0x160>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	429a      	cmp	r2, r3
 800b914:	d903      	bls.n	800b91e <xTaskIncrementTick+0xda>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91a:	4a22      	ldr	r2, [pc, #136]	@ (800b9a4 <xTaskIncrementTick+0x160>)
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b922:	4613      	mov	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4a1f      	ldr	r2, [pc, #124]	@ (800b9a8 <xTaskIncrementTick+0x164>)
 800b92c:	441a      	add	r2, r3
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	3304      	adds	r3, #4
 800b932:	4619      	mov	r1, r3
 800b934:	4610      	mov	r0, r2
 800b936:	f7fe fbd2 	bl	800a0de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b93e:	4b1b      	ldr	r3, [pc, #108]	@ (800b9ac <xTaskIncrementTick+0x168>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b944:	429a      	cmp	r2, r3
 800b946:	d3b8      	bcc.n	800b8ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b948:	2301      	movs	r3, #1
 800b94a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b94c:	e7b5      	b.n	800b8ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b94e:	4b17      	ldr	r3, [pc, #92]	@ (800b9ac <xTaskIncrementTick+0x168>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b954:	4914      	ldr	r1, [pc, #80]	@ (800b9a8 <xTaskIncrementTick+0x164>)
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	440b      	add	r3, r1
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d901      	bls.n	800b96a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b966:	2301      	movs	r3, #1
 800b968:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b96a:	4b11      	ldr	r3, [pc, #68]	@ (800b9b0 <xTaskIncrementTick+0x16c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d007      	beq.n	800b982 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b972:	2301      	movs	r3, #1
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	e004      	b.n	800b982 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b978:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b4 <xTaskIncrementTick+0x170>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3301      	adds	r3, #1
 800b97e:	4a0d      	ldr	r2, [pc, #52]	@ (800b9b4 <xTaskIncrementTick+0x170>)
 800b980:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b982:	697b      	ldr	r3, [r7, #20]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20003524 	.word	0x20003524
 800b990:	20003500 	.word	0x20003500
 800b994:	200034b4 	.word	0x200034b4
 800b998:	200034b8 	.word	0x200034b8
 800b99c:	20003514 	.word	0x20003514
 800b9a0:	2000351c 	.word	0x2000351c
 800b9a4:	20003504 	.word	0x20003504
 800b9a8:	2000302c 	.word	0x2000302c
 800b9ac:	20003028 	.word	0x20003028
 800b9b0:	20003510 	.word	0x20003510
 800b9b4:	2000350c 	.word	0x2000350c

0800b9b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9be:	4b28      	ldr	r3, [pc, #160]	@ (800ba60 <vTaskSwitchContext+0xa8>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9c6:	4b27      	ldr	r3, [pc, #156]	@ (800ba64 <vTaskSwitchContext+0xac>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9cc:	e042      	b.n	800ba54 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b9ce:	4b25      	ldr	r3, [pc, #148]	@ (800ba64 <vTaskSwitchContext+0xac>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9d4:	4b24      	ldr	r3, [pc, #144]	@ (800ba68 <vTaskSwitchContext+0xb0>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	e011      	b.n	800ba00 <vTaskSwitchContext+0x48>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10b      	bne.n	800b9fa <vTaskSwitchContext+0x42>
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	607b      	str	r3, [r7, #4]
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop
 800b9f8:	e7fd      	b.n	800b9f6 <vTaskSwitchContext+0x3e>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	491a      	ldr	r1, [pc, #104]	@ (800ba6c <vTaskSwitchContext+0xb4>)
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	440b      	add	r3, r1
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0e3      	beq.n	800b9dc <vTaskSwitchContext+0x24>
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	4613      	mov	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4a13      	ldr	r2, [pc, #76]	@ (800ba6c <vTaskSwitchContext+0xb4>)
 800ba20:	4413      	add	r3, r2
 800ba22:	60bb      	str	r3, [r7, #8]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	685a      	ldr	r2, [r3, #4]
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	605a      	str	r2, [r3, #4]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	3308      	adds	r3, #8
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d104      	bne.n	800ba44 <vTaskSwitchContext+0x8c>
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	605a      	str	r2, [r3, #4]
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	4a09      	ldr	r2, [pc, #36]	@ (800ba70 <vTaskSwitchContext+0xb8>)
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	4a06      	ldr	r2, [pc, #24]	@ (800ba68 <vTaskSwitchContext+0xb0>)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6013      	str	r3, [r2, #0]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	20003524 	.word	0x20003524
 800ba64:	20003510 	.word	0x20003510
 800ba68:	20003504 	.word	0x20003504
 800ba6c:	2000302c 	.word	0x2000302c
 800ba70:	20003028 	.word	0x20003028

0800ba74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10b      	bne.n	800ba9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	60fb      	str	r3, [r7, #12]
}
 800ba96:	bf00      	nop
 800ba98:	bf00      	nop
 800ba9a:	e7fd      	b.n	800ba98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba9c:	4b07      	ldr	r3, [pc, #28]	@ (800babc <vTaskPlaceOnEventList+0x48>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3318      	adds	r3, #24
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7fe fb3e 	bl	800a126 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baaa:	2101      	movs	r1, #1
 800baac:	6838      	ldr	r0, [r7, #0]
 800baae:	f000 fb81 	bl	800c1b4 <prvAddCurrentTaskToDelayedList>
}
 800bab2:	bf00      	nop
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	20003028 	.word	0x20003028

0800bac0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10b      	bne.n	800baea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	617b      	str	r3, [r7, #20]
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop
 800bae8:	e7fd      	b.n	800bae6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baea:	4b0a      	ldr	r3, [pc, #40]	@ (800bb14 <vTaskPlaceOnEventListRestricted+0x54>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3318      	adds	r3, #24
 800baf0:	4619      	mov	r1, r3
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7fe faf3 	bl	800a0de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295
 800bb02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	68b8      	ldr	r0, [r7, #8]
 800bb08:	f000 fb54 	bl	800c1b4 <prvAddCurrentTaskToDelayedList>
	}
 800bb0c:	bf00      	nop
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20003028 	.word	0x20003028

0800bb18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10b      	bne.n	800bb46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	60fb      	str	r3, [r7, #12]
}
 800bb40:	bf00      	nop
 800bb42:	bf00      	nop
 800bb44:	e7fd      	b.n	800bb42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	3318      	adds	r3, #24
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe fb24 	bl	800a198 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb50:	4b1d      	ldr	r3, [pc, #116]	@ (800bbc8 <xTaskRemoveFromEventList+0xb0>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d11d      	bne.n	800bb94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe fb1b 	bl	800a198 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb66:	4b19      	ldr	r3, [pc, #100]	@ (800bbcc <xTaskRemoveFromEventList+0xb4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d903      	bls.n	800bb76 <xTaskRemoveFromEventList+0x5e>
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb72:	4a16      	ldr	r2, [pc, #88]	@ (800bbcc <xTaskRemoveFromEventList+0xb4>)
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4a13      	ldr	r2, [pc, #76]	@ (800bbd0 <xTaskRemoveFromEventList+0xb8>)
 800bb84:	441a      	add	r2, r3
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	f7fe faa6 	bl	800a0de <vListInsertEnd>
 800bb92:	e005      	b.n	800bba0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	3318      	adds	r3, #24
 800bb98:	4619      	mov	r1, r3
 800bb9a:	480e      	ldr	r0, [pc, #56]	@ (800bbd4 <xTaskRemoveFromEventList+0xbc>)
 800bb9c:	f7fe fa9f 	bl	800a0de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba4:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd8 <xTaskRemoveFromEventList+0xc0>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d905      	bls.n	800bbba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbb2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbdc <xTaskRemoveFromEventList+0xc4>)
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	e001      	b.n	800bbbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbbe:	697b      	ldr	r3, [r7, #20]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	20003524 	.word	0x20003524
 800bbcc:	20003504 	.word	0x20003504
 800bbd0:	2000302c 	.word	0x2000302c
 800bbd4:	200034bc 	.word	0x200034bc
 800bbd8:	20003028 	.word	0x20003028
 800bbdc:	20003510 	.word	0x20003510

0800bbe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbe8:	4b06      	ldr	r3, [pc, #24]	@ (800bc04 <vTaskInternalSetTimeOutState+0x24>)
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbf0:	4b05      	ldr	r3, [pc, #20]	@ (800bc08 <vTaskInternalSetTimeOutState+0x28>)
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	605a      	str	r2, [r3, #4]
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	20003514 	.word	0x20003514
 800bc08:	20003500 	.word	0x20003500

0800bc0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b088      	sub	sp, #32
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10b      	bne.n	800bc34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	613b      	str	r3, [r7, #16]
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	e7fd      	b.n	800bc30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10b      	bne.n	800bc52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	60fb      	str	r3, [r7, #12]
}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	e7fd      	b.n	800bc4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bc52:	f000 ff91 	bl	800cb78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc56:	4b1d      	ldr	r3, [pc, #116]	@ (800bccc <xTaskCheckForTimeOut+0xc0>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d102      	bne.n	800bc76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc70:	2300      	movs	r3, #0
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	e023      	b.n	800bcbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	4b15      	ldr	r3, [pc, #84]	@ (800bcd0 <xTaskCheckForTimeOut+0xc4>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d007      	beq.n	800bc92 <xTaskCheckForTimeOut+0x86>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	69ba      	ldr	r2, [r7, #24]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d302      	bcc.n	800bc92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	61fb      	str	r3, [r7, #28]
 800bc90:	e015      	b.n	800bcbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d20b      	bcs.n	800bcb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff ff99 	bl	800bbe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61fb      	str	r3, [r7, #28]
 800bcb2:	e004      	b.n	800bcbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcbe:	f000 ff8d 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800bcc2:	69fb      	ldr	r3, [r7, #28]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3720      	adds	r7, #32
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	20003500 	.word	0x20003500
 800bcd0:	20003514 	.word	0x20003514

0800bcd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcd8:	4b03      	ldr	r3, [pc, #12]	@ (800bce8 <vTaskMissedYield+0x14>)
 800bcda:	2201      	movs	r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]
}
 800bcde:	bf00      	nop
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	20003510 	.word	0x20003510

0800bcec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bcf4:	f000 f852 	bl	800bd9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcf8:	4b06      	ldr	r3, [pc, #24]	@ (800bd14 <prvIdleTask+0x28>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d9f9      	bls.n	800bcf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd00:	4b05      	ldr	r3, [pc, #20]	@ (800bd18 <prvIdleTask+0x2c>)
 800bd02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd10:	e7f0      	b.n	800bcf4 <prvIdleTask+0x8>
 800bd12:	bf00      	nop
 800bd14:	2000302c 	.word	0x2000302c
 800bd18:	e000ed04 	.word	0xe000ed04

0800bd1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd22:	2300      	movs	r3, #0
 800bd24:	607b      	str	r3, [r7, #4]
 800bd26:	e00c      	b.n	800bd42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4a12      	ldr	r2, [pc, #72]	@ (800bd7c <prvInitialiseTaskLists+0x60>)
 800bd34:	4413      	add	r3, r2
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe f9a4 	bl	800a084 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	607b      	str	r3, [r7, #4]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b37      	cmp	r3, #55	@ 0x37
 800bd46:	d9ef      	bls.n	800bd28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd48:	480d      	ldr	r0, [pc, #52]	@ (800bd80 <prvInitialiseTaskLists+0x64>)
 800bd4a:	f7fe f99b 	bl	800a084 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd4e:	480d      	ldr	r0, [pc, #52]	@ (800bd84 <prvInitialiseTaskLists+0x68>)
 800bd50:	f7fe f998 	bl	800a084 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd54:	480c      	ldr	r0, [pc, #48]	@ (800bd88 <prvInitialiseTaskLists+0x6c>)
 800bd56:	f7fe f995 	bl	800a084 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd5a:	480c      	ldr	r0, [pc, #48]	@ (800bd8c <prvInitialiseTaskLists+0x70>)
 800bd5c:	f7fe f992 	bl	800a084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd60:	480b      	ldr	r0, [pc, #44]	@ (800bd90 <prvInitialiseTaskLists+0x74>)
 800bd62:	f7fe f98f 	bl	800a084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd66:	4b0b      	ldr	r3, [pc, #44]	@ (800bd94 <prvInitialiseTaskLists+0x78>)
 800bd68:	4a05      	ldr	r2, [pc, #20]	@ (800bd80 <prvInitialiseTaskLists+0x64>)
 800bd6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd98 <prvInitialiseTaskLists+0x7c>)
 800bd6e:	4a05      	ldr	r2, [pc, #20]	@ (800bd84 <prvInitialiseTaskLists+0x68>)
 800bd70:	601a      	str	r2, [r3, #0]
}
 800bd72:	bf00      	nop
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	2000302c 	.word	0x2000302c
 800bd80:	2000348c 	.word	0x2000348c
 800bd84:	200034a0 	.word	0x200034a0
 800bd88:	200034bc 	.word	0x200034bc
 800bd8c:	200034d0 	.word	0x200034d0
 800bd90:	200034e8 	.word	0x200034e8
 800bd94:	200034b4 	.word	0x200034b4
 800bd98:	200034b8 	.word	0x200034b8

0800bd9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bda2:	e019      	b.n	800bdd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bda4:	f000 fee8 	bl	800cb78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda8:	4b10      	ldr	r3, [pc, #64]	@ (800bdec <prvCheckTasksWaitingTermination+0x50>)
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fe f9ef 	bl	800a198 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdba:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf0 <prvCheckTasksWaitingTermination+0x54>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	4a0b      	ldr	r2, [pc, #44]	@ (800bdf0 <prvCheckTasksWaitingTermination+0x54>)
 800bdc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdc4:	4b0b      	ldr	r3, [pc, #44]	@ (800bdf4 <prvCheckTasksWaitingTermination+0x58>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	4a0a      	ldr	r2, [pc, #40]	@ (800bdf4 <prvCheckTasksWaitingTermination+0x58>)
 800bdcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdce:	f000 ff05 	bl	800cbdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f810 	bl	800bdf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdd8:	4b06      	ldr	r3, [pc, #24]	@ (800bdf4 <prvCheckTasksWaitingTermination+0x58>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e1      	bne.n	800bda4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bde0:	bf00      	nop
 800bde2:	bf00      	nop
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200034d0 	.word	0x200034d0
 800bdf0:	200034fc 	.word	0x200034fc
 800bdf4:	200034e4 	.word	0x200034e4

0800bdf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be06:	2b00      	cmp	r3, #0
 800be08:	d108      	bne.n	800be1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be0e:	4618      	mov	r0, r3
 800be10:	f001 f8a2 	bl	800cf58 <vPortFree>
				vPortFree( pxTCB );
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f001 f89f 	bl	800cf58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be1a:	e019      	b.n	800be50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be22:	2b01      	cmp	r3, #1
 800be24:	d103      	bne.n	800be2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f001 f896 	bl	800cf58 <vPortFree>
	}
 800be2c:	e010      	b.n	800be50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be34:	2b02      	cmp	r3, #2
 800be36:	d00b      	beq.n	800be50 <prvDeleteTCB+0x58>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	60fb      	str	r3, [r7, #12]
}
 800be4a:	bf00      	nop
 800be4c:	bf00      	nop
 800be4e:	e7fd      	b.n	800be4c <prvDeleteTCB+0x54>
	}
 800be50:	bf00      	nop
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be5e:	4b0c      	ldr	r3, [pc, #48]	@ (800be90 <prvResetNextTaskUnblockTime+0x38>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d104      	bne.n	800be72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be68:	4b0a      	ldr	r3, [pc, #40]	@ (800be94 <prvResetNextTaskUnblockTime+0x3c>)
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be70:	e008      	b.n	800be84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be72:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <prvResetNextTaskUnblockTime+0x38>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	4a04      	ldr	r2, [pc, #16]	@ (800be94 <prvResetNextTaskUnblockTime+0x3c>)
 800be82:	6013      	str	r3, [r2, #0]
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	200034b4 	.word	0x200034b4
 800be94:	2000351c 	.word	0x2000351c

0800be98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be9e:	4b0b      	ldr	r3, [pc, #44]	@ (800becc <xTaskGetSchedulerState+0x34>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bea6:	2301      	movs	r3, #1
 800bea8:	607b      	str	r3, [r7, #4]
 800beaa:	e008      	b.n	800bebe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beac:	4b08      	ldr	r3, [pc, #32]	@ (800bed0 <xTaskGetSchedulerState+0x38>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d102      	bne.n	800beba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800beb4:	2302      	movs	r3, #2
 800beb6:	607b      	str	r3, [r7, #4]
 800beb8:	e001      	b.n	800bebe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beba:	2300      	movs	r3, #0
 800bebc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bebe:	687b      	ldr	r3, [r7, #4]
	}
 800bec0:	4618      	mov	r0, r3
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	20003508 	.word	0x20003508
 800bed0:	20003524 	.word	0x20003524

0800bed4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d051      	beq.n	800bf8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beee:	4b2a      	ldr	r3, [pc, #168]	@ (800bf98 <xTaskPriorityInherit+0xc4>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d241      	bcs.n	800bf7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	db06      	blt.n	800bf0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf00:	4b25      	ldr	r3, [pc, #148]	@ (800bf98 <xTaskPriorityInherit+0xc4>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	6959      	ldr	r1, [r3, #20]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4a1f      	ldr	r2, [pc, #124]	@ (800bf9c <xTaskPriorityInherit+0xc8>)
 800bf20:	4413      	add	r3, r2
 800bf22:	4299      	cmp	r1, r3
 800bf24:	d122      	bne.n	800bf6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	3304      	adds	r3, #4
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe f934 	bl	800a198 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf30:	4b19      	ldr	r3, [pc, #100]	@ (800bf98 <xTaskPriorityInherit+0xc4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf3e:	4b18      	ldr	r3, [pc, #96]	@ (800bfa0 <xTaskPriorityInherit+0xcc>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d903      	bls.n	800bf4e <xTaskPriorityInherit+0x7a>
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf4a:	4a15      	ldr	r2, [pc, #84]	@ (800bfa0 <xTaskPriorityInherit+0xcc>)
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4a10      	ldr	r2, [pc, #64]	@ (800bf9c <xTaskPriorityInherit+0xc8>)
 800bf5c:	441a      	add	r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	3304      	adds	r3, #4
 800bf62:	4619      	mov	r1, r3
 800bf64:	4610      	mov	r0, r2
 800bf66:	f7fe f8ba 	bl	800a0de <vListInsertEnd>
 800bf6a:	e004      	b.n	800bf76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <xTaskPriorityInherit+0xc4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bf76:	2301      	movs	r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e008      	b.n	800bf8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf80:	4b05      	ldr	r3, [pc, #20]	@ (800bf98 <xTaskPriorityInherit+0xc4>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d201      	bcs.n	800bf8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
	}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20003028 	.word	0x20003028
 800bf9c:	2000302c 	.word	0x2000302c
 800bfa0:	20003504 	.word	0x20003504

0800bfa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d058      	beq.n	800c06c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfba:	4b2f      	ldr	r3, [pc, #188]	@ (800c078 <xTaskPriorityDisinherit+0xd4>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d00b      	beq.n	800bfdc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	60fb      	str	r3, [r7, #12]
}
 800bfd6:	bf00      	nop
 800bfd8:	bf00      	nop
 800bfda:	e7fd      	b.n	800bfd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10b      	bne.n	800bffc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	60bb      	str	r3, [r7, #8]
}
 800bff6:	bf00      	nop
 800bff8:	bf00      	nop
 800bffa:	e7fd      	b.n	800bff8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c000:	1e5a      	subs	r2, r3, #1
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c00e:	429a      	cmp	r2, r3
 800c010:	d02c      	beq.n	800c06c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c016:	2b00      	cmp	r3, #0
 800c018:	d128      	bne.n	800c06c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	3304      	adds	r3, #4
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe f8ba 	bl	800a198 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c030:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c03c:	4b0f      	ldr	r3, [pc, #60]	@ (800c07c <xTaskPriorityDisinherit+0xd8>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d903      	bls.n	800c04c <xTaskPriorityDisinherit+0xa8>
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c048:	4a0c      	ldr	r2, [pc, #48]	@ (800c07c <xTaskPriorityDisinherit+0xd8>)
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4a09      	ldr	r2, [pc, #36]	@ (800c080 <xTaskPriorityDisinherit+0xdc>)
 800c05a:	441a      	add	r2, r3
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	3304      	adds	r3, #4
 800c060:	4619      	mov	r1, r3
 800c062:	4610      	mov	r0, r2
 800c064:	f7fe f83b 	bl	800a0de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c06c:	697b      	ldr	r3, [r7, #20]
	}
 800c06e:	4618      	mov	r0, r3
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20003028 	.word	0x20003028
 800c07c:	20003504 	.word	0x20003504
 800c080:	2000302c 	.word	0x2000302c

0800c084 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c092:	2301      	movs	r3, #1
 800c094:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d06c      	beq.n	800c176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10b      	bne.n	800c0bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	60fb      	str	r3, [r7, #12]
}
 800c0b6:	bf00      	nop
 800c0b8:	bf00      	nop
 800c0ba:	e7fd      	b.n	800c0b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d902      	bls.n	800c0cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	61fb      	str	r3, [r7, #28]
 800c0ca:	e002      	b.n	800c0d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d6:	69fa      	ldr	r2, [r7, #28]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d04c      	beq.n	800c176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d147      	bne.n	800c176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c0e6:	4b26      	ldr	r3, [pc, #152]	@ (800c180 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d10b      	bne.n	800c108 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60bb      	str	r3, [r7, #8]
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c10c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	69fa      	ldr	r2, [r7, #28]
 800c112:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	db04      	blt.n	800c126 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	6959      	ldr	r1, [r3, #20]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4a13      	ldr	r2, [pc, #76]	@ (800c184 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c136:	4413      	add	r3, r2
 800c138:	4299      	cmp	r1, r3
 800c13a:	d11c      	bne.n	800c176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	3304      	adds	r3, #4
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe f829 	bl	800a198 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c14a:	4b0f      	ldr	r3, [pc, #60]	@ (800c188 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d903      	bls.n	800c15a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c156:	4a0c      	ldr	r2, [pc, #48]	@ (800c188 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c158:	6013      	str	r3, [r2, #0]
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c15e:	4613      	mov	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4a07      	ldr	r2, [pc, #28]	@ (800c184 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c168:	441a      	add	r2, r3
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7fd ffb4 	bl	800a0de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c176:	bf00      	nop
 800c178:	3720      	adds	r7, #32
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20003028 	.word	0x20003028
 800c184:	2000302c 	.word	0x2000302c
 800c188:	20003504 	.word	0x20003504

0800c18c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c18c:	b480      	push	{r7}
 800c18e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c190:	4b07      	ldr	r3, [pc, #28]	@ (800c1b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c198:	4b05      	ldr	r3, [pc, #20]	@ (800c1b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c19e:	3201      	adds	r2, #1
 800c1a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c1a2:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
	}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20003028 	.word	0x20003028

0800c1b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1be:	4b21      	ldr	r3, [pc, #132]	@ (800c244 <prvAddCurrentTaskToDelayedList+0x90>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1c4:	4b20      	ldr	r3, [pc, #128]	@ (800c248 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fd ffe4 	bl	800a198 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d6:	d10a      	bne.n	800c1ee <prvAddCurrentTaskToDelayedList+0x3a>
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d007      	beq.n	800c1ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1de:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4819      	ldr	r0, [pc, #100]	@ (800c24c <prvAddCurrentTaskToDelayedList+0x98>)
 800c1e8:	f7fd ff79 	bl	800a0de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1ec:	e026      	b.n	800c23c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1f6:	4b14      	ldr	r3, [pc, #80]	@ (800c248 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	429a      	cmp	r2, r3
 800c204:	d209      	bcs.n	800c21a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c206:	4b12      	ldr	r3, [pc, #72]	@ (800c250 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4b0f      	ldr	r3, [pc, #60]	@ (800c248 <prvAddCurrentTaskToDelayedList+0x94>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3304      	adds	r3, #4
 800c210:	4619      	mov	r1, r3
 800c212:	4610      	mov	r0, r2
 800c214:	f7fd ff87 	bl	800a126 <vListInsert>
}
 800c218:	e010      	b.n	800c23c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c21a:	4b0e      	ldr	r3, [pc, #56]	@ (800c254 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	4b0a      	ldr	r3, [pc, #40]	@ (800c248 <prvAddCurrentTaskToDelayedList+0x94>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7fd ff7d 	bl	800a126 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c22c:	4b0a      	ldr	r3, [pc, #40]	@ (800c258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	429a      	cmp	r2, r3
 800c234:	d202      	bcs.n	800c23c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c236:	4a08      	ldr	r2, [pc, #32]	@ (800c258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	6013      	str	r3, [r2, #0]
}
 800c23c:	bf00      	nop
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	20003500 	.word	0x20003500
 800c248:	20003028 	.word	0x20003028
 800c24c:	200034e8 	.word	0x200034e8
 800c250:	200034b8 	.word	0x200034b8
 800c254:	200034b4 	.word	0x200034b4
 800c258:	2000351c 	.word	0x2000351c

0800c25c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	@ 0x28
 800c260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c262:	2300      	movs	r3, #0
 800c264:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c266:	f000 fb13 	bl	800c890 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c26a:	4b1d      	ldr	r3, [pc, #116]	@ (800c2e0 <xTimerCreateTimerTask+0x84>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d021      	beq.n	800c2b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c27a:	1d3a      	adds	r2, r7, #4
 800c27c:	f107 0108 	add.w	r1, r7, #8
 800c280:	f107 030c 	add.w	r3, r7, #12
 800c284:	4618      	mov	r0, r3
 800c286:	f7fd fee3 	bl	800a050 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	9202      	str	r2, [sp, #8]
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	2302      	movs	r3, #2
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	2300      	movs	r3, #0
 800c29a:	460a      	mov	r2, r1
 800c29c:	4911      	ldr	r1, [pc, #68]	@ (800c2e4 <xTimerCreateTimerTask+0x88>)
 800c29e:	4812      	ldr	r0, [pc, #72]	@ (800c2e8 <xTimerCreateTimerTask+0x8c>)
 800c2a0:	f7fe ffd0 	bl	800b244 <xTaskCreateStatic>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	4a11      	ldr	r2, [pc, #68]	@ (800c2ec <xTimerCreateTimerTask+0x90>)
 800c2a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2aa:	4b10      	ldr	r3, [pc, #64]	@ (800c2ec <xTimerCreateTimerTask+0x90>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10b      	bne.n	800c2d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	613b      	str	r3, [r7, #16]
}
 800c2ce:	bf00      	nop
 800c2d0:	bf00      	nop
 800c2d2:	e7fd      	b.n	800c2d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c2d4:	697b      	ldr	r3, [r7, #20]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3718      	adds	r7, #24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20003558 	.word	0x20003558
 800c2e4:	0800e880 	.word	0x0800e880
 800c2e8:	0800c429 	.word	0x0800c429
 800c2ec:	2000355c 	.word	0x2000355c

0800c2f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08a      	sub	sp, #40	@ 0x28
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
 800c2fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2fe:	2300      	movs	r3, #0
 800c300:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10b      	bne.n	800c320 <xTimerGenericCommand+0x30>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	623b      	str	r3, [r7, #32]
}
 800c31a:	bf00      	nop
 800c31c:	bf00      	nop
 800c31e:	e7fd      	b.n	800c31c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c320:	4b19      	ldr	r3, [pc, #100]	@ (800c388 <xTimerGenericCommand+0x98>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d02a      	beq.n	800c37e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b05      	cmp	r3, #5
 800c338:	dc18      	bgt.n	800c36c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c33a:	f7ff fdad 	bl	800be98 <xTaskGetSchedulerState>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b02      	cmp	r3, #2
 800c342:	d109      	bne.n	800c358 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c344:	4b10      	ldr	r3, [pc, #64]	@ (800c388 <xTimerGenericCommand+0x98>)
 800c346:	6818      	ldr	r0, [r3, #0]
 800c348:	f107 0110 	add.w	r1, r7, #16
 800c34c:	2300      	movs	r3, #0
 800c34e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c350:	f7fe f900 	bl	800a554 <xQueueGenericSend>
 800c354:	6278      	str	r0, [r7, #36]	@ 0x24
 800c356:	e012      	b.n	800c37e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c358:	4b0b      	ldr	r3, [pc, #44]	@ (800c388 <xTimerGenericCommand+0x98>)
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	f107 0110 	add.w	r1, r7, #16
 800c360:	2300      	movs	r3, #0
 800c362:	2200      	movs	r2, #0
 800c364:	f7fe f8f6 	bl	800a554 <xQueueGenericSend>
 800c368:	6278      	str	r0, [r7, #36]	@ 0x24
 800c36a:	e008      	b.n	800c37e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c36c:	4b06      	ldr	r3, [pc, #24]	@ (800c388 <xTimerGenericCommand+0x98>)
 800c36e:	6818      	ldr	r0, [r3, #0]
 800c370:	f107 0110 	add.w	r1, r7, #16
 800c374:	2300      	movs	r3, #0
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	f7fe f9ee 	bl	800a758 <xQueueGenericSendFromISR>
 800c37c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c380:	4618      	mov	r0, r3
 800c382:	3728      	adds	r7, #40	@ 0x28
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	20003558 	.word	0x20003558

0800c38c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b088      	sub	sp, #32
 800c390:	af02      	add	r7, sp, #8
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c396:	4b23      	ldr	r3, [pc, #140]	@ (800c424 <prvProcessExpiredTimer+0x98>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fd fef7 	bl	800a198 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d023      	beq.n	800c400 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	699a      	ldr	r2, [r3, #24]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	18d1      	adds	r1, r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	6978      	ldr	r0, [r7, #20]
 800c3c6:	f000 f8d5 	bl	800c574 <prvInsertTimerInActiveList>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d020      	beq.n	800c412 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	2100      	movs	r1, #0
 800c3da:	6978      	ldr	r0, [r7, #20]
 800c3dc:	f7ff ff88 	bl	800c2f0 <xTimerGenericCommand>
 800c3e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d114      	bne.n	800c412 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	60fb      	str	r3, [r7, #12]
}
 800c3fa:	bf00      	nop
 800c3fc:	bf00      	nop
 800c3fe:	e7fd      	b.n	800c3fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c406:	f023 0301 	bic.w	r3, r3, #1
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	6978      	ldr	r0, [r7, #20]
 800c418:	4798      	blx	r3
}
 800c41a:	bf00      	nop
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20003550 	.word	0x20003550

0800c428 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c430:	f107 0308 	add.w	r3, r7, #8
 800c434:	4618      	mov	r0, r3
 800c436:	f000 f859 	bl	800c4ec <prvGetNextExpireTime>
 800c43a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	4619      	mov	r1, r3
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 f805 	bl	800c450 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c446:	f000 f8d7 	bl	800c5f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c44a:	bf00      	nop
 800c44c:	e7f0      	b.n	800c430 <prvTimerTask+0x8>
	...

0800c450 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c45a:	f7ff f937 	bl	800b6cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c45e:	f107 0308 	add.w	r3, r7, #8
 800c462:	4618      	mov	r0, r3
 800c464:	f000 f866 	bl	800c534 <prvSampleTimeNow>
 800c468:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d130      	bne.n	800c4d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d10a      	bne.n	800c48c <prvProcessTimerOrBlockTask+0x3c>
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d806      	bhi.n	800c48c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c47e:	f7ff f933 	bl	800b6e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c482:	68f9      	ldr	r1, [r7, #12]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff ff81 	bl	800c38c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c48a:	e024      	b.n	800c4d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d008      	beq.n	800c4a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c492:	4b13      	ldr	r3, [pc, #76]	@ (800c4e0 <prvProcessTimerOrBlockTask+0x90>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d101      	bne.n	800c4a0 <prvProcessTimerOrBlockTask+0x50>
 800c49c:	2301      	movs	r3, #1
 800c49e:	e000      	b.n	800c4a2 <prvProcessTimerOrBlockTask+0x52>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e4 <prvProcessTimerOrBlockTask+0x94>)
 800c4a6:	6818      	ldr	r0, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	f7fe fe93 	bl	800b1dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4b6:	f7ff f917 	bl	800b6e8 <xTaskResumeAll>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4c0:	4b09      	ldr	r3, [pc, #36]	@ (800c4e8 <prvProcessTimerOrBlockTask+0x98>)
 800c4c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	f3bf 8f6f 	isb	sy
}
 800c4d0:	e001      	b.n	800c4d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4d2:	f7ff f909 	bl	800b6e8 <xTaskResumeAll>
}
 800c4d6:	bf00      	nop
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20003554 	.word	0x20003554
 800c4e4:	20003558 	.word	0x20003558
 800c4e8:	e000ed04 	.word	0xe000ed04

0800c4ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c530 <prvGetNextExpireTime+0x44>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <prvGetNextExpireTime+0x16>
 800c4fe:	2201      	movs	r2, #1
 800c500:	e000      	b.n	800c504 <prvGetNextExpireTime+0x18>
 800c502:	2200      	movs	r2, #0
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d105      	bne.n	800c51c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c510:	4b07      	ldr	r3, [pc, #28]	@ (800c530 <prvGetNextExpireTime+0x44>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	e001      	b.n	800c520 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c51c:	2300      	movs	r3, #0
 800c51e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c520:	68fb      	ldr	r3, [r7, #12]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	20003550 	.word	0x20003550

0800c534 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c53c:	f7ff f972 	bl	800b824 <xTaskGetTickCount>
 800c540:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c542:	4b0b      	ldr	r3, [pc, #44]	@ (800c570 <prvSampleTimeNow+0x3c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d205      	bcs.n	800c558 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c54c:	f000 f93a 	bl	800c7c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	e002      	b.n	800c55e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c55e:	4a04      	ldr	r2, [pc, #16]	@ (800c570 <prvSampleTimeNow+0x3c>)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c564:	68fb      	ldr	r3, [r7, #12]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20003560 	.word	0x20003560

0800c574 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c582:	2300      	movs	r3, #0
 800c584:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	d812      	bhi.n	800c5c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	1ad2      	subs	r2, r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	699b      	ldr	r3, [r3, #24]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d302      	bcc.n	800c5ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	e01b      	b.n	800c5e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5ae:	4b10      	ldr	r3, [pc, #64]	@ (800c5f0 <prvInsertTimerInActiveList+0x7c>)
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	f7fd fdb4 	bl	800a126 <vListInsert>
 800c5be:	e012      	b.n	800c5e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d206      	bcs.n	800c5d6 <prvInsertTimerInActiveList+0x62>
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d302      	bcc.n	800c5d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	e007      	b.n	800c5e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5d6:	4b07      	ldr	r3, [pc, #28]	@ (800c5f4 <prvInsertTimerInActiveList+0x80>)
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3304      	adds	r3, #4
 800c5de:	4619      	mov	r1, r3
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	f7fd fda0 	bl	800a126 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5e6:	697b      	ldr	r3, [r7, #20]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	20003554 	.word	0x20003554
 800c5f4:	20003550 	.word	0x20003550

0800c5f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b08e      	sub	sp, #56	@ 0x38
 800c5fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5fe:	e0ce      	b.n	800c79e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	da19      	bge.n	800c63a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c606:	1d3b      	adds	r3, r7, #4
 800c608:	3304      	adds	r3, #4
 800c60a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10b      	bne.n	800c62a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	61fb      	str	r3, [r7, #28]
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	e7fd      	b.n	800c626 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c630:	6850      	ldr	r0, [r2, #4]
 800c632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c634:	6892      	ldr	r2, [r2, #8]
 800c636:	4611      	mov	r1, r2
 800c638:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f2c0 80ae 	blt.w	800c79e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c650:	3304      	adds	r3, #4
 800c652:	4618      	mov	r0, r3
 800c654:	f7fd fda0 	bl	800a198 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c658:	463b      	mov	r3, r7
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff ff6a 	bl	800c534 <prvSampleTimeNow>
 800c660:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b09      	cmp	r3, #9
 800c666:	f200 8097 	bhi.w	800c798 <prvProcessReceivedCommands+0x1a0>
 800c66a:	a201      	add	r2, pc, #4	@ (adr r2, 800c670 <prvProcessReceivedCommands+0x78>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c699 	.word	0x0800c699
 800c674:	0800c699 	.word	0x0800c699
 800c678:	0800c699 	.word	0x0800c699
 800c67c:	0800c70f 	.word	0x0800c70f
 800c680:	0800c723 	.word	0x0800c723
 800c684:	0800c76f 	.word	0x0800c76f
 800c688:	0800c699 	.word	0x0800c699
 800c68c:	0800c699 	.word	0x0800c699
 800c690:	0800c70f 	.word	0x0800c70f
 800c694:	0800c723 	.word	0x0800c723
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c69e:	f043 0301 	orr.w	r3, r3, #1
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	18d1      	adds	r1, r2, r3
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6b8:	f7ff ff5c 	bl	800c574 <prvInsertTimerInActiveList>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d06c      	beq.n	800c79c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d061      	beq.n	800c79c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6dc:	699b      	ldr	r3, [r3, #24]
 800c6de:	441a      	add	r2, r3
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6ea:	f7ff fe01 	bl	800c2f0 <xTimerGenericCommand>
 800c6ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d152      	bne.n	800c79c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	61bb      	str	r3, [r7, #24]
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c714:	f023 0301 	bic.w	r3, r3, #1
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c720:	e03d      	b.n	800c79e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c728:	f043 0301 	orr.w	r3, r3, #1
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c730:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c738:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10b      	bne.n	800c75a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	617b      	str	r3, [r7, #20]
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop
 800c758:	e7fd      	b.n	800c756 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75c:	699a      	ldr	r2, [r3, #24]
 800c75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c760:	18d1      	adds	r1, r2, r3
 800c762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c768:	f7ff ff04 	bl	800c574 <prvInsertTimerInActiveList>
					break;
 800c76c:	e017      	b.n	800c79e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c774:	f003 0302 	and.w	r3, r3, #2
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c77c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c77e:	f000 fbeb 	bl	800cf58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c782:	e00c      	b.n	800c79e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c78a:	f023 0301 	bic.w	r3, r3, #1
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c796:	e002      	b.n	800c79e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c798:	bf00      	nop
 800c79a:	e000      	b.n	800c79e <prvProcessReceivedCommands+0x1a6>
					break;
 800c79c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c79e:	4b08      	ldr	r3, [pc, #32]	@ (800c7c0 <prvProcessReceivedCommands+0x1c8>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	1d39      	adds	r1, r7, #4
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe f904 	bl	800a9b4 <xQueueReceive>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f47f af26 	bne.w	800c600 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	3730      	adds	r7, #48	@ 0x30
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20003558 	.word	0x20003558

0800c7c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7ca:	e049      	b.n	800c860 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7cc:	4b2e      	ldr	r3, [pc, #184]	@ (800c888 <prvSwitchTimerLists+0xc4>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c888 <prvSwitchTimerLists+0xc4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fd fcd7 	bl	800a198 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d02f      	beq.n	800c860 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	4413      	add	r3, r2
 800c808:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d90e      	bls.n	800c830 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c81e:	4b1a      	ldr	r3, [pc, #104]	@ (800c888 <prvSwitchTimerLists+0xc4>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3304      	adds	r3, #4
 800c826:	4619      	mov	r1, r3
 800c828:	4610      	mov	r0, r2
 800c82a:	f7fd fc7c 	bl	800a126 <vListInsert>
 800c82e:	e017      	b.n	800c860 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c830:	2300      	movs	r3, #0
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	2300      	movs	r3, #0
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	2100      	movs	r1, #0
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff fd58 	bl	800c2f0 <xTimerGenericCommand>
 800c840:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10b      	bne.n	800c860 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	603b      	str	r3, [r7, #0]
}
 800c85a:	bf00      	nop
 800c85c:	bf00      	nop
 800c85e:	e7fd      	b.n	800c85c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c860:	4b09      	ldr	r3, [pc, #36]	@ (800c888 <prvSwitchTimerLists+0xc4>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1b0      	bne.n	800c7cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c86a:	4b07      	ldr	r3, [pc, #28]	@ (800c888 <prvSwitchTimerLists+0xc4>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c870:	4b06      	ldr	r3, [pc, #24]	@ (800c88c <prvSwitchTimerLists+0xc8>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a04      	ldr	r2, [pc, #16]	@ (800c888 <prvSwitchTimerLists+0xc4>)
 800c876:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c878:	4a04      	ldr	r2, [pc, #16]	@ (800c88c <prvSwitchTimerLists+0xc8>)
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	6013      	str	r3, [r2, #0]
}
 800c87e:	bf00      	nop
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	20003550 	.word	0x20003550
 800c88c:	20003554 	.word	0x20003554

0800c890 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c896:	f000 f96f 	bl	800cb78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c89a:	4b15      	ldr	r3, [pc, #84]	@ (800c8f0 <prvCheckForValidListAndQueue+0x60>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d120      	bne.n	800c8e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8a2:	4814      	ldr	r0, [pc, #80]	@ (800c8f4 <prvCheckForValidListAndQueue+0x64>)
 800c8a4:	f7fd fbee 	bl	800a084 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8a8:	4813      	ldr	r0, [pc, #76]	@ (800c8f8 <prvCheckForValidListAndQueue+0x68>)
 800c8aa:	f7fd fbeb 	bl	800a084 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8ae:	4b13      	ldr	r3, [pc, #76]	@ (800c8fc <prvCheckForValidListAndQueue+0x6c>)
 800c8b0:	4a10      	ldr	r2, [pc, #64]	@ (800c8f4 <prvCheckForValidListAndQueue+0x64>)
 800c8b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8b4:	4b12      	ldr	r3, [pc, #72]	@ (800c900 <prvCheckForValidListAndQueue+0x70>)
 800c8b6:	4a10      	ldr	r2, [pc, #64]	@ (800c8f8 <prvCheckForValidListAndQueue+0x68>)
 800c8b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	4b11      	ldr	r3, [pc, #68]	@ (800c904 <prvCheckForValidListAndQueue+0x74>)
 800c8c0:	4a11      	ldr	r2, [pc, #68]	@ (800c908 <prvCheckForValidListAndQueue+0x78>)
 800c8c2:	2110      	movs	r1, #16
 800c8c4:	200a      	movs	r0, #10
 800c8c6:	f7fd fcfb 	bl	800a2c0 <xQueueGenericCreateStatic>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	4a08      	ldr	r2, [pc, #32]	@ (800c8f0 <prvCheckForValidListAndQueue+0x60>)
 800c8ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8d0:	4b07      	ldr	r3, [pc, #28]	@ (800c8f0 <prvCheckForValidListAndQueue+0x60>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8d8:	4b05      	ldr	r3, [pc, #20]	@ (800c8f0 <prvCheckForValidListAndQueue+0x60>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	490b      	ldr	r1, [pc, #44]	@ (800c90c <prvCheckForValidListAndQueue+0x7c>)
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fc28 	bl	800b134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8e4:	f000 f97a 	bl	800cbdc <vPortExitCritical>
}
 800c8e8:	bf00      	nop
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20003558 	.word	0x20003558
 800c8f4:	20003528 	.word	0x20003528
 800c8f8:	2000353c 	.word	0x2000353c
 800c8fc:	20003550 	.word	0x20003550
 800c900:	20003554 	.word	0x20003554
 800c904:	20003604 	.word	0x20003604
 800c908:	20003564 	.word	0x20003564
 800c90c:	0800e888 	.word	0x0800e888

0800c910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3b04      	subs	r3, #4
 800c920:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3b04      	subs	r3, #4
 800c92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	f023 0201 	bic.w	r2, r3, #1
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3b04      	subs	r3, #4
 800c93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c940:	4a0c      	ldr	r2, [pc, #48]	@ (800c974 <pxPortInitialiseStack+0x64>)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3b14      	subs	r3, #20
 800c94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3b04      	subs	r3, #4
 800c956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f06f 0202 	mvn.w	r2, #2
 800c95e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3b20      	subs	r3, #32
 800c964:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c966:	68fb      	ldr	r3, [r7, #12]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3714      	adds	r7, #20
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	0800c979 	.word	0x0800c979

0800c978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c982:	4b13      	ldr	r3, [pc, #76]	@ (800c9d0 <prvTaskExitError+0x58>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d00b      	beq.n	800c9a4 <prvTaskExitError+0x2c>
	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c990:	f383 8811 	msr	BASEPRI, r3
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	60fb      	str	r3, [r7, #12]
}
 800c99e:	bf00      	nop
 800c9a0:	bf00      	nop
 800c9a2:	e7fd      	b.n	800c9a0 <prvTaskExitError+0x28>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	60bb      	str	r3, [r7, #8]
}
 800c9b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9b8:	bf00      	nop
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0fc      	beq.n	800c9ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9c0:	bf00      	nop
 800c9c2:	bf00      	nop
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	20000060 	.word	0x20000060
	...

0800c9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9e0:	4b07      	ldr	r3, [pc, #28]	@ (800ca00 <pxCurrentTCBConst2>)
 800c9e2:	6819      	ldr	r1, [r3, #0]
 800c9e4:	6808      	ldr	r0, [r1, #0]
 800c9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ea:	f380 8809 	msr	PSP, r0
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f04f 0000 	mov.w	r0, #0
 800c9f6:	f380 8811 	msr	BASEPRI, r0
 800c9fa:	4770      	bx	lr
 800c9fc:	f3af 8000 	nop.w

0800ca00 <pxCurrentTCBConst2>:
 800ca00:	20003028 	.word	0x20003028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca04:	bf00      	nop
 800ca06:	bf00      	nop

0800ca08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca08:	4808      	ldr	r0, [pc, #32]	@ (800ca2c <prvPortStartFirstTask+0x24>)
 800ca0a:	6800      	ldr	r0, [r0, #0]
 800ca0c:	6800      	ldr	r0, [r0, #0]
 800ca0e:	f380 8808 	msr	MSP, r0
 800ca12:	f04f 0000 	mov.w	r0, #0
 800ca16:	f380 8814 	msr	CONTROL, r0
 800ca1a:	b662      	cpsie	i
 800ca1c:	b661      	cpsie	f
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	df00      	svc	0
 800ca28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca2a:	bf00      	nop
 800ca2c:	e000ed08 	.word	0xe000ed08

0800ca30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca36:	4b47      	ldr	r3, [pc, #284]	@ (800cb54 <xPortStartScheduler+0x124>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a47      	ldr	r2, [pc, #284]	@ (800cb58 <xPortStartScheduler+0x128>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d10b      	bne.n	800ca58 <xPortStartScheduler+0x28>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	613b      	str	r3, [r7, #16]
}
 800ca52:	bf00      	nop
 800ca54:	bf00      	nop
 800ca56:	e7fd      	b.n	800ca54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca58:	4b3e      	ldr	r3, [pc, #248]	@ (800cb54 <xPortStartScheduler+0x124>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a3f      	ldr	r2, [pc, #252]	@ (800cb5c <xPortStartScheduler+0x12c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d10b      	bne.n	800ca7a <xPortStartScheduler+0x4a>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	60fb      	str	r3, [r7, #12]
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop
 800ca78:	e7fd      	b.n	800ca76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca7a:	4b39      	ldr	r3, [pc, #228]	@ (800cb60 <xPortStartScheduler+0x130>)
 800ca7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	22ff      	movs	r2, #255	@ 0xff
 800ca8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca94:	78fb      	ldrb	r3, [r7, #3]
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	4b31      	ldr	r3, [pc, #196]	@ (800cb64 <xPortStartScheduler+0x134>)
 800caa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800caa2:	4b31      	ldr	r3, [pc, #196]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caa4:	2207      	movs	r2, #7
 800caa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caa8:	e009      	b.n	800cabe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800caaa:	4b2f      	ldr	r3, [pc, #188]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3b01      	subs	r3, #1
 800cab0:	4a2d      	ldr	r2, [pc, #180]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	005b      	lsls	r3, r3, #1
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cabe:	78fb      	ldrb	r3, [r7, #3]
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cac6:	2b80      	cmp	r3, #128	@ 0x80
 800cac8:	d0ef      	beq.n	800caaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800caca:	4b27      	ldr	r3, [pc, #156]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f1c3 0307 	rsb	r3, r3, #7
 800cad2:	2b04      	cmp	r3, #4
 800cad4:	d00b      	beq.n	800caee <xPortStartScheduler+0xbe>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	60bb      	str	r3, [r7, #8]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800caee:	4b1e      	ldr	r3, [pc, #120]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	021b      	lsls	r3, r3, #8
 800caf4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caf8:	4b1b      	ldr	r3, [pc, #108]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb00:	4a19      	ldr	r2, [pc, #100]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cb02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb0c:	4b17      	ldr	r3, [pc, #92]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a16      	ldr	r2, [pc, #88]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cb16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb18:	4b14      	ldr	r3, [pc, #80]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a13      	ldr	r2, [pc, #76]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cb22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb24:	f000 f8da 	bl	800ccdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb28:	4b11      	ldr	r3, [pc, #68]	@ (800cb70 <xPortStartScheduler+0x140>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb2e:	f000 f8f9 	bl	800cd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb32:	4b10      	ldr	r3, [pc, #64]	@ (800cb74 <xPortStartScheduler+0x144>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a0f      	ldr	r2, [pc, #60]	@ (800cb74 <xPortStartScheduler+0x144>)
 800cb38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cb3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb3e:	f7ff ff63 	bl	800ca08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb42:	f7fe ff39 	bl	800b9b8 <vTaskSwitchContext>
	prvTaskExitError();
 800cb46:	f7ff ff17 	bl	800c978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	e000ed00 	.word	0xe000ed00
 800cb58:	410fc271 	.word	0x410fc271
 800cb5c:	410fc270 	.word	0x410fc270
 800cb60:	e000e400 	.word	0xe000e400
 800cb64:	20003654 	.word	0x20003654
 800cb68:	20003658 	.word	0x20003658
 800cb6c:	e000ed20 	.word	0xe000ed20
 800cb70:	20000060 	.word	0x20000060
 800cb74:	e000ef34 	.word	0xe000ef34

0800cb78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb92:	4b10      	ldr	r3, [pc, #64]	@ (800cbd4 <vPortEnterCritical+0x5c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	3301      	adds	r3, #1
 800cb98:	4a0e      	ldr	r2, [pc, #56]	@ (800cbd4 <vPortEnterCritical+0x5c>)
 800cb9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd4 <vPortEnterCritical+0x5c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d110      	bne.n	800cbc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cba4:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd8 <vPortEnterCritical+0x60>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00b      	beq.n	800cbc6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	603b      	str	r3, [r7, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	e7fd      	b.n	800cbc2 <vPortEnterCritical+0x4a>
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20000060 	.word	0x20000060
 800cbd8:	e000ed04 	.word	0xe000ed04

0800cbdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbe2:	4b12      	ldr	r3, [pc, #72]	@ (800cc2c <vPortExitCritical+0x50>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10b      	bne.n	800cc02 <vPortExitCritical+0x26>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	607b      	str	r3, [r7, #4]
}
 800cbfc:	bf00      	nop
 800cbfe:	bf00      	nop
 800cc00:	e7fd      	b.n	800cbfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc02:	4b0a      	ldr	r3, [pc, #40]	@ (800cc2c <vPortExitCritical+0x50>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	4a08      	ldr	r2, [pc, #32]	@ (800cc2c <vPortExitCritical+0x50>)
 800cc0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc0c:	4b07      	ldr	r3, [pc, #28]	@ (800cc2c <vPortExitCritical+0x50>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <vPortExitCritical+0x44>
 800cc14:	2300      	movs	r3, #0
 800cc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f383 8811 	msr	BASEPRI, r3
}
 800cc1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	20000060 	.word	0x20000060

0800cc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc30:	f3ef 8009 	mrs	r0, PSP
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4b15      	ldr	r3, [pc, #84]	@ (800cc90 <pxCurrentTCBConst>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	f01e 0f10 	tst.w	lr, #16
 800cc40:	bf08      	it	eq
 800cc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	6010      	str	r0, [r2, #0]
 800cc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cc54:	f380 8811 	msr	BASEPRI, r0
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f7fe feaa 	bl	800b9b8 <vTaskSwitchContext>
 800cc64:	f04f 0000 	mov.w	r0, #0
 800cc68:	f380 8811 	msr	BASEPRI, r0
 800cc6c:	bc09      	pop	{r0, r3}
 800cc6e:	6819      	ldr	r1, [r3, #0]
 800cc70:	6808      	ldr	r0, [r1, #0]
 800cc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc76:	f01e 0f10 	tst.w	lr, #16
 800cc7a:	bf08      	it	eq
 800cc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc80:	f380 8809 	msr	PSP, r0
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	f3af 8000 	nop.w

0800cc90 <pxCurrentTCBConst>:
 800cc90:	20003028 	.word	0x20003028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop

0800cc98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	607b      	str	r3, [r7, #4]
}
 800ccb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccb2:	f7fe fdc7 	bl	800b844 <xTaskIncrementTick>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccbc:	4b06      	ldr	r3, [pc, #24]	@ (800ccd8 <xPortSysTickHandler+0x40>)
 800ccbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f383 8811 	msr	BASEPRI, r3
}
 800ccce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	e000ed04 	.word	0xe000ed04

0800ccdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cce0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd10 <vPortSetupTimerInterrupt+0x34>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cce6:	4b0b      	ldr	r3, [pc, #44]	@ (800cd14 <vPortSetupTimerInterrupt+0x38>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccec:	4b0a      	ldr	r3, [pc, #40]	@ (800cd18 <vPortSetupTimerInterrupt+0x3c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a0a      	ldr	r2, [pc, #40]	@ (800cd1c <vPortSetupTimerInterrupt+0x40>)
 800ccf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf6:	099b      	lsrs	r3, r3, #6
 800ccf8:	4a09      	ldr	r2, [pc, #36]	@ (800cd20 <vPortSetupTimerInterrupt+0x44>)
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccfe:	4b04      	ldr	r3, [pc, #16]	@ (800cd10 <vPortSetupTimerInterrupt+0x34>)
 800cd00:	2207      	movs	r2, #7
 800cd02:	601a      	str	r2, [r3, #0]
}
 800cd04:	bf00      	nop
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	e000e010 	.word	0xe000e010
 800cd14:	e000e018 	.word	0xe000e018
 800cd18:	2000000c 	.word	0x2000000c
 800cd1c:	10624dd3 	.word	0x10624dd3
 800cd20:	e000e014 	.word	0xe000e014

0800cd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cd34 <vPortEnableVFP+0x10>
 800cd28:	6801      	ldr	r1, [r0, #0]
 800cd2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cd2e:	6001      	str	r1, [r0, #0]
 800cd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd32:	bf00      	nop
 800cd34:	e000ed88 	.word	0xe000ed88

0800cd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd3e:	f3ef 8305 	mrs	r3, IPSR
 800cd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b0f      	cmp	r3, #15
 800cd48:	d915      	bls.n	800cd76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd4a:	4a18      	ldr	r2, [pc, #96]	@ (800cdac <vPortValidateInterruptPriority+0x74>)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	4413      	add	r3, r2
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd54:	4b16      	ldr	r3, [pc, #88]	@ (800cdb0 <vPortValidateInterruptPriority+0x78>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	7afa      	ldrb	r2, [r7, #11]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d20b      	bcs.n	800cd76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	607b      	str	r3, [r7, #4]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd76:	4b0f      	ldr	r3, [pc, #60]	@ (800cdb4 <vPortValidateInterruptPriority+0x7c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cd7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cdb8 <vPortValidateInterruptPriority+0x80>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d90b      	bls.n	800cd9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	603b      	str	r3, [r7, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	bf00      	nop
 800cd9c:	e7fd      	b.n	800cd9a <vPortValidateInterruptPriority+0x62>
	}
 800cd9e:	bf00      	nop
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	e000e3f0 	.word	0xe000e3f0
 800cdb0:	20003654 	.word	0x20003654
 800cdb4:	e000ed0c 	.word	0xe000ed0c
 800cdb8:	20003658 	.word	0x20003658

0800cdbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08a      	sub	sp, #40	@ 0x28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdc8:	f7fe fc80 	bl	800b6cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdcc:	4b5c      	ldr	r3, [pc, #368]	@ (800cf40 <pvPortMalloc+0x184>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d101      	bne.n	800cdd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cdd4:	f000 f924 	bl	800d020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cdd8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf44 <pvPortMalloc+0x188>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4013      	ands	r3, r2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f040 8095 	bne.w	800cf10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d01e      	beq.n	800ce2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cdec:	2208      	movs	r2, #8
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d015      	beq.n	800ce2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f023 0307 	bic.w	r3, r3, #7
 800ce04:	3308      	adds	r3, #8
 800ce06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f003 0307 	and.w	r3, r3, #7
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00b      	beq.n	800ce2a <pvPortMalloc+0x6e>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	617b      	str	r3, [r7, #20]
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop
 800ce28:	e7fd      	b.n	800ce26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d06f      	beq.n	800cf10 <pvPortMalloc+0x154>
 800ce30:	4b45      	ldr	r3, [pc, #276]	@ (800cf48 <pvPortMalloc+0x18c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d86a      	bhi.n	800cf10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce3a:	4b44      	ldr	r3, [pc, #272]	@ (800cf4c <pvPortMalloc+0x190>)
 800ce3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce3e:	4b43      	ldr	r3, [pc, #268]	@ (800cf4c <pvPortMalloc+0x190>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce44:	e004      	b.n	800ce50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ce46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d903      	bls.n	800ce62 <pvPortMalloc+0xa6>
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1f1      	bne.n	800ce46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce62:	4b37      	ldr	r3, [pc, #220]	@ (800cf40 <pvPortMalloc+0x184>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d051      	beq.n	800cf10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2208      	movs	r2, #8
 800ce72:	4413      	add	r3, r2
 800ce74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	1ad2      	subs	r2, r2, r3
 800ce86:	2308      	movs	r3, #8
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d920      	bls.n	800ced0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4413      	add	r3, r2
 800ce94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	f003 0307 	and.w	r3, r3, #7
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00b      	beq.n	800ceb8 <pvPortMalloc+0xfc>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	613b      	str	r3, [r7, #16]
}
 800ceb2:	bf00      	nop
 800ceb4:	bf00      	nop
 800ceb6:	e7fd      	b.n	800ceb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ceca:	69b8      	ldr	r0, [r7, #24]
 800cecc:	f000 f90a 	bl	800d0e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ced0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf48 <pvPortMalloc+0x18c>)
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	1ad3      	subs	r3, r2, r3
 800ceda:	4a1b      	ldr	r2, [pc, #108]	@ (800cf48 <pvPortMalloc+0x18c>)
 800cedc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cede:	4b1a      	ldr	r3, [pc, #104]	@ (800cf48 <pvPortMalloc+0x18c>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	4b1b      	ldr	r3, [pc, #108]	@ (800cf50 <pvPortMalloc+0x194>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d203      	bcs.n	800cef2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ceea:	4b17      	ldr	r3, [pc, #92]	@ (800cf48 <pvPortMalloc+0x18c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a18      	ldr	r2, [pc, #96]	@ (800cf50 <pvPortMalloc+0x194>)
 800cef0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	4b13      	ldr	r3, [pc, #76]	@ (800cf44 <pvPortMalloc+0x188>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	431a      	orrs	r2, r3
 800cefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf02:	2200      	movs	r2, #0
 800cf04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf06:	4b13      	ldr	r3, [pc, #76]	@ (800cf54 <pvPortMalloc+0x198>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	4a11      	ldr	r2, [pc, #68]	@ (800cf54 <pvPortMalloc+0x198>)
 800cf0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf10:	f7fe fbea 	bl	800b6e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00b      	beq.n	800cf36 <pvPortMalloc+0x17a>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	60fb      	str	r3, [r7, #12]
}
 800cf30:	bf00      	nop
 800cf32:	bf00      	nop
 800cf34:	e7fd      	b.n	800cf32 <pvPortMalloc+0x176>
	return pvReturn;
 800cf36:	69fb      	ldr	r3, [r7, #28]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3728      	adds	r7, #40	@ 0x28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	2000421c 	.word	0x2000421c
 800cf44:	20004230 	.word	0x20004230
 800cf48:	20004220 	.word	0x20004220
 800cf4c:	20004214 	.word	0x20004214
 800cf50:	20004224 	.word	0x20004224
 800cf54:	20004228 	.word	0x20004228

0800cf58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d04f      	beq.n	800d00a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf6a:	2308      	movs	r3, #8
 800cf6c:	425b      	negs	r3, r3
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	4413      	add	r3, r2
 800cf72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	4b25      	ldr	r3, [pc, #148]	@ (800d014 <vPortFree+0xbc>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4013      	ands	r3, r2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10b      	bne.n	800cf9e <vPortFree+0x46>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60fb      	str	r3, [r7, #12]
}
 800cf98:	bf00      	nop
 800cf9a:	bf00      	nop
 800cf9c:	e7fd      	b.n	800cf9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00b      	beq.n	800cfbe <vPortFree+0x66>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	60bb      	str	r3, [r7, #8]
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	e7fd      	b.n	800cfba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	685a      	ldr	r2, [r3, #4]
 800cfc2:	4b14      	ldr	r3, [pc, #80]	@ (800d014 <vPortFree+0xbc>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d01e      	beq.n	800d00a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d11a      	bne.n	800d00a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	4b0e      	ldr	r3, [pc, #56]	@ (800d014 <vPortFree+0xbc>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	43db      	mvns	r3, r3
 800cfde:	401a      	ands	r2, r3
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfe4:	f7fe fb72 	bl	800b6cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	4b0a      	ldr	r3, [pc, #40]	@ (800d018 <vPortFree+0xc0>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4413      	add	r3, r2
 800cff2:	4a09      	ldr	r2, [pc, #36]	@ (800d018 <vPortFree+0xc0>)
 800cff4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cff6:	6938      	ldr	r0, [r7, #16]
 800cff8:	f000 f874 	bl	800d0e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cffc:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <vPortFree+0xc4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3301      	adds	r3, #1
 800d002:	4a06      	ldr	r2, [pc, #24]	@ (800d01c <vPortFree+0xc4>)
 800d004:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d006:	f7fe fb6f 	bl	800b6e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d00a:	bf00      	nop
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20004230 	.word	0x20004230
 800d018:	20004220 	.word	0x20004220
 800d01c:	2000422c 	.word	0x2000422c

0800d020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d026:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800d02a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d02c:	4b27      	ldr	r3, [pc, #156]	@ (800d0cc <prvHeapInit+0xac>)
 800d02e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f003 0307 	and.w	r3, r3, #7
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00c      	beq.n	800d054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3307      	adds	r3, #7
 800d03e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f023 0307 	bic.w	r3, r3, #7
 800d046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	4a1f      	ldr	r2, [pc, #124]	@ (800d0cc <prvHeapInit+0xac>)
 800d050:	4413      	add	r3, r2
 800d052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d058:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d0 <prvHeapInit+0xb0>)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d05e:	4b1c      	ldr	r3, [pc, #112]	@ (800d0d0 <prvHeapInit+0xb0>)
 800d060:	2200      	movs	r2, #0
 800d062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	4413      	add	r3, r2
 800d06a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d06c:	2208      	movs	r2, #8
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0307 	bic.w	r3, r3, #7
 800d07a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4a15      	ldr	r2, [pc, #84]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d082:	4b14      	ldr	r3, [pc, #80]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2200      	movs	r2, #0
 800d088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d08a:	4b12      	ldr	r3, [pc, #72]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	1ad2      	subs	r2, r2, r3
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d0d8 <prvHeapInit+0xb8>)
 800d0ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	4a09      	ldr	r2, [pc, #36]	@ (800d0dc <prvHeapInit+0xbc>)
 800d0b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0b8:	4b09      	ldr	r3, [pc, #36]	@ (800d0e0 <prvHeapInit+0xc0>)
 800d0ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0be:	601a      	str	r2, [r3, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	2000365c 	.word	0x2000365c
 800d0d0:	20004214 	.word	0x20004214
 800d0d4:	2000421c 	.word	0x2000421c
 800d0d8:	20004224 	.word	0x20004224
 800d0dc:	20004220 	.word	0x20004220
 800d0e0:	20004230 	.word	0x20004230

0800d0e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0ec:	4b28      	ldr	r3, [pc, #160]	@ (800d190 <prvInsertBlockIntoFreeList+0xac>)
 800d0ee:	60fb      	str	r3, [r7, #12]
 800d0f0:	e002      	b.n	800d0f8 <prvInsertBlockIntoFreeList+0x14>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60fb      	str	r3, [r7, #12]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d8f7      	bhi.n	800d0f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	4413      	add	r3, r2
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d108      	bne.n	800d126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	441a      	add	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	441a      	add	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d118      	bne.n	800d16c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	4b15      	ldr	r3, [pc, #84]	@ (800d194 <prvInsertBlockIntoFreeList+0xb0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d00d      	beq.n	800d162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	441a      	add	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	e008      	b.n	800d174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d162:	4b0c      	ldr	r3, [pc, #48]	@ (800d194 <prvInsertBlockIntoFreeList+0xb0>)
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	e003      	b.n	800d174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d002      	beq.n	800d182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d182:	bf00      	nop
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	20004214 	.word	0x20004214
 800d194:	2000421c 	.word	0x2000421c

0800d198 <arm_fir_init_f32>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	9c04      	ldr	r4, [sp, #16]
 800d19c:	6082      	str	r2, [r0, #8]
 800d19e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800d1a2:	3c01      	subs	r4, #1
 800d1a4:	440c      	add	r4, r1
 800d1a6:	8001      	strh	r1, [r0, #0]
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	00a2      	lsls	r2, r4, #2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	f000 fcca 	bl	800db48 <memset>
 800d1b4:	6068      	str	r0, [r5, #4]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}

0800d1b8 <arm_fir_f32>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	ed2d 8b10 	vpush	{d8-d15}
 800d1c0:	b08b      	sub	sp, #44	@ 0x2c
 800d1c2:	f8b0 8000 	ldrh.w	r8, [r0]
 800d1c6:	9003      	str	r0, [sp, #12]
 800d1c8:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800d1cc:	461e      	mov	r6, r3
 800d1ce:	9304      	str	r3, [sp, #16]
 800d1d0:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800d1da:	08f3      	lsrs	r3, r6, #3
 800d1dc:	9002      	str	r0, [sp, #8]
 800d1de:	9500      	str	r5, [sp, #0]
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	f000 81f1 	beq.w	800d5c8 <arm_fir_f32+0x410>
 800d1e6:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800d1ea:	f100 0620 	add.w	r6, r0, #32
 800d1ee:	9405      	str	r4, [sp, #20]
 800d1f0:	0164      	lsls	r4, r4, #5
 800d1f2:	4420      	add	r0, r4
 800d1f4:	f008 0a07 	and.w	sl, r8, #7
 800d1f8:	9607      	str	r6, [sp, #28]
 800d1fa:	9006      	str	r0, [sp, #24]
 800d1fc:	469c      	mov	ip, r3
 800d1fe:	4650      	mov	r0, sl
 800d200:	4623      	mov	r3, r4
 800d202:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d206:	f8cd 8020 	str.w	r8, [sp, #32]
 800d20a:	1937      	adds	r7, r6, r4
 800d20c:	f109 0b1c 	add.w	fp, r9, #28
 800d210:	f8dd e014 	ldr.w	lr, [sp, #20]
 800d214:	9209      	str	r2, [sp, #36]	@ 0x24
 800d216:	f8cd 9014 	str.w	r9, [sp, #20]
 800d21a:	f101 0620 	add.w	r6, r1, #32
 800d21e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800d222:	9106      	str	r1, [sp, #24]
 800d224:	3520      	adds	r5, #32
 800d226:	f102 0420 	add.w	r4, r2, #32
 800d22a:	4698      	mov	r8, r3
 800d22c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800d230:	f845 3c20 	str.w	r3, [r5, #-32]
 800d234:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800d238:	f845 3c1c 	str.w	r3, [r5, #-28]
 800d23c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800d240:	f845 3c18 	str.w	r3, [r5, #-24]
 800d244:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800d248:	f845 3c14 	str.w	r3, [r5, #-20]
 800d24c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800d250:	f845 3c10 	str.w	r3, [r5, #-16]
 800d254:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800d258:	f845 3c0c 	str.w	r3, [r5, #-12]
 800d25c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800d260:	f845 3c08 	str.w	r3, [r5, #-8]
 800d264:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d268:	f845 3c04 	str.w	r3, [r5, #-4]
 800d26c:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 800d270:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800d274:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800d278:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800d27c:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800d280:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800d284:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800d288:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800d660 <arm_fir_f32+0x4a8>
 800d28c:	465a      	mov	r2, fp
 800d28e:	f1be 0f00 	cmp.w	lr, #0
 800d292:	f000 81fe 	beq.w	800d692 <arm_fir_f32+0x4da>
 800d296:	f10b 0120 	add.w	r1, fp, #32
 800d29a:	eef0 ba66 	vmov.f32	s23, s13
 800d29e:	eeb0 6a66 	vmov.f32	s12, s13
 800d2a2:	eeb0 9a66 	vmov.f32	s18, s13
 800d2a6:	eef0 9a66 	vmov.f32	s19, s13
 800d2aa:	eeb0 aa66 	vmov.f32	s20, s13
 800d2ae:	eef0 aa66 	vmov.f32	s21, s13
 800d2b2:	eeb0 ba66 	vmov.f32	s22, s13
 800d2b6:	460a      	mov	r2, r1
 800d2b8:	4653      	mov	r3, sl
 800d2ba:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800d2be:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800d2c2:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800d2c6:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800d2ca:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800d2ce:	ed53 ca04 	vldr	s25, [r3, #-16]
 800d2d2:	ed53 2a03 	vldr	s5, [r3, #-12]
 800d2d6:	ed13 4a02 	vldr	s8, [r3, #-8]
 800d2da:	ed13 5a01 	vldr	s10, [r3, #-4]
 800d2de:	ee67 fa02 	vmul.f32	s31, s14, s4
 800d2e2:	ee27 da21 	vmul.f32	s26, s14, s3
 800d2e6:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800d2ea:	ee27 ca01 	vmul.f32	s24, s14, s2
 800d2ee:	ee27 3a20 	vmul.f32	s6, s14, s1
 800d2f2:	ee67 3a00 	vmul.f32	s7, s14, s0
 800d2f6:	ee67 5a08 	vmul.f32	s11, s14, s16
 800d2fa:	ee27 fa28 	vmul.f32	s30, s14, s17
 800d2fe:	ee67 7a24 	vmul.f32	s15, s14, s9
 800d302:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800d306:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800d30a:	ee6e faa1 	vmul.f32	s31, s29, s3
 800d30e:	ee2e da81 	vmul.f32	s26, s29, s2
 800d312:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800d316:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800d31a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d31e:	ee2e caa0 	vmul.f32	s24, s29, s1
 800d322:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800d326:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d32a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d32e:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800d332:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800d336:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800d33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33e:	ee24 faae 	vmul.f32	s30, s9, s29
 800d342:	ee6e ea82 	vmul.f32	s29, s29, s4
 800d346:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800d34a:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800d34e:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800d352:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800d356:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800d35a:	ee2e da20 	vmul.f32	s26, s28, s1
 800d35e:	ee2e ca00 	vmul.f32	s24, s28, s0
 800d362:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d366:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d36a:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800d36e:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800d372:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d376:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800d37a:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800d37e:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800d382:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800d386:	ee2e ea21 	vmul.f32	s28, s28, s3
 800d38a:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800d38e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800d392:	ed52 0a04 	vldr	s1, [r2, #-16]
 800d396:	ee2d da80 	vmul.f32	s26, s27, s0
 800d39a:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800d39e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800d3a2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d3a6:	ee2d ca88 	vmul.f32	s24, s27, s16
 800d3aa:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800d3ae:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d3b2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d3b6:	ee64 3aad 	vmul.f32	s7, s9, s27
 800d3ba:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800d3be:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800d3c2:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d3c6:	ee21 faad 	vmul.f32	s30, s3, s27
 800d3ca:	ee6d da81 	vmul.f32	s27, s27, s2
 800d3ce:	ee6c fa80 	vmul.f32	s31, s25, s0
 800d3d2:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800d3d6:	ed12 0a03 	vldr	s0, [r2, #-12]
 800d3da:	ee3d da2a 	vadd.f32	s26, s26, s21
 800d3de:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800d3e2:	ee6c aa88 	vmul.f32	s21, s25, s16
 800d3e6:	ee2c caa8 	vmul.f32	s24, s25, s17
 800d3ea:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d3ee:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d3f2:	ee24 3aac 	vmul.f32	s6, s9, s25
 800d3f6:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800d3fa:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d3fe:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800d402:	ee61 5aac 	vmul.f32	s11, s3, s25
 800d406:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800d40a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d40e:	ee6c caa0 	vmul.f32	s25, s25, s1
 800d412:	ee62 ea88 	vmul.f32	s29, s5, s16
 800d416:	ee3a da8d 	vadd.f32	s26, s21, s26
 800d41a:	ed12 8a02 	vldr	s16, [r2, #-8]
 800d41e:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800d422:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800d426:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800d42a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d42e:	ee24 caa2 	vmul.f32	s24, s9, s5
 800d432:	ee22 3a22 	vmul.f32	s6, s4, s5
 800d436:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d43a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d43e:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800d442:	ee61 5a22 	vmul.f32	s11, s2, s5
 800d446:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800d44a:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800d44e:	ee20 faa2 	vmul.f32	s30, s1, s5
 800d452:	ee62 2a80 	vmul.f32	s5, s5, s0
 800d456:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800d45a:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800d45e:	ee24 ba28 	vmul.f32	s22, s8, s17
 800d462:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800d466:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800d46a:	ee24 da84 	vmul.f32	s26, s9, s8
 800d46e:	ee22 ca04 	vmul.f32	s24, s4, s8
 800d472:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d476:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d47a:	ee21 3a84 	vmul.f32	s6, s3, s8
 800d47e:	ee61 3a04 	vmul.f32	s7, s2, s8
 800d482:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d486:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800d48a:	ee60 5a84 	vmul.f32	s11, s1, s8
 800d48e:	ee20 7a04 	vmul.f32	s14, s0, s8
 800d492:	ee64 6a08 	vmul.f32	s13, s8, s16
 800d496:	ed52 8a01 	vldr	s17, [r2, #-4]
 800d49a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d49e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d4a2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d4a6:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800d4aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d4ae:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800d4b2:	ee64 4a85 	vmul.f32	s9, s9, s10
 800d4b6:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800d4ba:	ee22 4a05 	vmul.f32	s8, s4, s10
 800d4be:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800d4c2:	ee61 2a85 	vmul.f32	s5, s3, s10
 800d4c6:	ee21 3a05 	vmul.f32	s6, s2, s10
 800d4ca:	ee60 3a85 	vmul.f32	s7, s1, s10
 800d4ce:	ee60 5a05 	vmul.f32	s11, s0, s10
 800d4d2:	ee68 ba05 	vmul.f32	s23, s16, s10
 800d4d6:	ee65 7a28 	vmul.f32	s15, s10, s17
 800d4da:	3320      	adds	r3, #32
 800d4dc:	429f      	cmp	r7, r3
 800d4de:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800d4e2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800d4e6:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800d4ea:	ee73 9a29 	vadd.f32	s19, s6, s19
 800d4ee:	ee33 9a89 	vadd.f32	s18, s7, s18
 800d4f2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800d4f6:	ee7b ba87 	vadd.f32	s23, s23, s14
 800d4fa:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800d4fe:	f102 0220 	add.w	r2, r2, #32
 800d502:	f47f aeda 	bne.w	800d2ba <arm_fir_f32+0x102>
 800d506:	eb0b 0208 	add.w	r2, fp, r8
 800d50a:	46cb      	mov	fp, r9
 800d50c:	b3a0      	cbz	r0, 800d578 <arm_fir_f32+0x3c0>
 800d50e:	4603      	mov	r3, r0
 800d510:	ecfb 7a01 	vldmia	fp!, {s15}
 800d514:	ecf2 5a01 	vldmia	r2!, {s11}
 800d518:	ee27 2a82 	vmul.f32	s4, s15, s4
 800d51c:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800d520:	ee27 3a81 	vmul.f32	s6, s15, s2
 800d524:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800d528:	ee27 4a80 	vmul.f32	s8, s15, s0
 800d52c:	ee67 4a88 	vmul.f32	s9, s15, s16
 800d530:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800d534:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d538:	3b01      	subs	r3, #1
 800d53a:	ee3b ba02 	vadd.f32	s22, s22, s4
 800d53e:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800d542:	eeb0 2a61 	vmov.f32	s4, s3
 800d546:	ee3a aa03 	vadd.f32	s20, s20, s6
 800d54a:	eef0 1a41 	vmov.f32	s3, s2
 800d54e:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800d552:	eeb0 1a60 	vmov.f32	s2, s1
 800d556:	ee39 9a04 	vadd.f32	s18, s18, s8
 800d55a:	eef0 0a40 	vmov.f32	s1, s0
 800d55e:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d562:	eeb0 0a48 	vmov.f32	s0, s16
 800d566:	ee7b ba85 	vadd.f32	s23, s23, s10
 800d56a:	eeb0 8a68 	vmov.f32	s16, s17
 800d56e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d572:	eef0 8a65 	vmov.f32	s17, s11
 800d576:	d1cb      	bne.n	800d510 <arm_fir_f32+0x358>
 800d578:	f1bc 0c01 	subs.w	ip, ip, #1
 800d57c:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800d580:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800d584:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800d588:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 800d58c:	ed04 9a04 	vstr	s18, [r4, #-16]
 800d590:	ed04 6a03 	vstr	s12, [r4, #-12]
 800d594:	ed44 ba02 	vstr	s23, [r4, #-8]
 800d598:	ed44 6a01 	vstr	s13, [r4, #-4]
 800d59c:	f106 0620 	add.w	r6, r6, #32
 800d5a0:	f105 0520 	add.w	r5, r5, #32
 800d5a4:	f104 0420 	add.w	r4, r4, #32
 800d5a8:	468b      	mov	fp, r1
 800d5aa:	f47f ae3f 	bne.w	800d22c <arm_fir_f32+0x74>
 800d5ae:	9b01      	ldr	r3, [sp, #4]
 800d5b0:	9800      	ldr	r0, [sp, #0]
 800d5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5b8:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800d5bc:	015b      	lsls	r3, r3, #5
 800d5be:	4418      	add	r0, r3
 800d5c0:	4419      	add	r1, r3
 800d5c2:	441a      	add	r2, r3
 800d5c4:	4499      	add	r9, r3
 800d5c6:	9000      	str	r0, [sp, #0]
 800d5c8:	9b04      	ldr	r3, [sp, #16]
 800d5ca:	f013 0707 	ands.w	r7, r3, #7
 800d5ce:	d020      	beq.n	800d612 <arm_fir_f32+0x45a>
 800d5d0:	00bf      	lsls	r7, r7, #2
 800d5d2:	9e00      	ldr	r6, [sp, #0]
 800d5d4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d5d8:	eb01 0c07 	add.w	ip, r1, r7
 800d5dc:	464d      	mov	r5, r9
 800d5de:	f851 3b04 	ldr.w	r3, [r1], #4
 800d5e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d660 <arm_fir_f32+0x4a8>
 800d5e6:	f846 3b04 	str.w	r3, [r6], #4
 800d5ea:	4674      	mov	r4, lr
 800d5ec:	4643      	mov	r3, r8
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	ecf0 7a01 	vldmia	r0!, {s15}
 800d5f4:	ecf4 6a01 	vldmia	r4!, {s13}
 800d5f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d602:	d1f5      	bne.n	800d5f0 <arm_fir_f32+0x438>
 800d604:	4561      	cmp	r1, ip
 800d606:	eca2 7a01 	vstmia	r2!, {s14}
 800d60a:	f105 0504 	add.w	r5, r5, #4
 800d60e:	d1e6      	bne.n	800d5de <arm_fir_f32+0x426>
 800d610:	44b9      	add	r9, r7
 800d612:	f108 38ff 	add.w	r8, r8, #4294967295
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800d61c:	685d      	ldr	r5, [r3, #4]
 800d61e:	d021      	beq.n	800d664 <arm_fir_f32+0x4ac>
 800d620:	f109 0210 	add.w	r2, r9, #16
 800d624:	f105 0310 	add.w	r3, r5, #16
 800d628:	4621      	mov	r1, r4
 800d62a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800d62e:	f843 0c10 	str.w	r0, [r3, #-16]
 800d632:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800d636:	f843 0c0c 	str.w	r0, [r3, #-12]
 800d63a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800d63e:	f843 0c08 	str.w	r0, [r3, #-8]
 800d642:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d646:	f843 0c04 	str.w	r0, [r3, #-4]
 800d64a:	3901      	subs	r1, #1
 800d64c:	f102 0210 	add.w	r2, r2, #16
 800d650:	f103 0310 	add.w	r3, r3, #16
 800d654:	d1e9      	bne.n	800d62a <arm_fir_f32+0x472>
 800d656:	0124      	lsls	r4, r4, #4
 800d658:	44a1      	add	r9, r4
 800d65a:	4425      	add	r5, r4
 800d65c:	e002      	b.n	800d664 <arm_fir_f32+0x4ac>
 800d65e:	bf00      	nop
 800d660:	00000000 	.word	0x00000000
 800d664:	f018 0803 	ands.w	r8, r8, #3
 800d668:	d00e      	beq.n	800d688 <arm_fir_f32+0x4d0>
 800d66a:	f8d9 3000 	ldr.w	r3, [r9]
 800d66e:	602b      	str	r3, [r5, #0]
 800d670:	f1b8 0801 	subs.w	r8, r8, #1
 800d674:	d008      	beq.n	800d688 <arm_fir_f32+0x4d0>
 800d676:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d67a:	606b      	str	r3, [r5, #4]
 800d67c:	f1b8 0f01 	cmp.w	r8, #1
 800d680:	bf1c      	itt	ne
 800d682:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800d686:	60ab      	strne	r3, [r5, #8]
 800d688:	b00b      	add	sp, #44	@ 0x2c
 800d68a:	ecbd 8b10 	vpop	{d8-d15}
 800d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	eef0 ba66 	vmov.f32	s23, s13
 800d696:	eeb0 6a66 	vmov.f32	s12, s13
 800d69a:	eeb0 9a66 	vmov.f32	s18, s13
 800d69e:	eef0 9a66 	vmov.f32	s19, s13
 800d6a2:	eeb0 aa66 	vmov.f32	s20, s13
 800d6a6:	eef0 aa66 	vmov.f32	s21, s13
 800d6aa:	eeb0 ba66 	vmov.f32	s22, s13
 800d6ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d6b2:	f102 0120 	add.w	r1, r2, #32
 800d6b6:	e729      	b.n	800d50c <arm_fir_f32+0x354>

0800d6b8 <rand>:
 800d6b8:	4b16      	ldr	r3, [pc, #88]	@ (800d714 <rand+0x5c>)
 800d6ba:	b510      	push	{r4, lr}
 800d6bc:	681c      	ldr	r4, [r3, #0]
 800d6be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d6c0:	b9b3      	cbnz	r3, 800d6f0 <rand+0x38>
 800d6c2:	2018      	movs	r0, #24
 800d6c4:	f000 fb32 	bl	800dd2c <malloc>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	6320      	str	r0, [r4, #48]	@ 0x30
 800d6cc:	b920      	cbnz	r0, 800d6d8 <rand+0x20>
 800d6ce:	4b12      	ldr	r3, [pc, #72]	@ (800d718 <rand+0x60>)
 800d6d0:	4812      	ldr	r0, [pc, #72]	@ (800d71c <rand+0x64>)
 800d6d2:	2152      	movs	r1, #82	@ 0x52
 800d6d4:	f000 fac2 	bl	800dc5c <__assert_func>
 800d6d8:	4911      	ldr	r1, [pc, #68]	@ (800d720 <rand+0x68>)
 800d6da:	4b12      	ldr	r3, [pc, #72]	@ (800d724 <rand+0x6c>)
 800d6dc:	e9c0 1300 	strd	r1, r3, [r0]
 800d6e0:	4b11      	ldr	r3, [pc, #68]	@ (800d728 <rand+0x70>)
 800d6e2:	6083      	str	r3, [r0, #8]
 800d6e4:	230b      	movs	r3, #11
 800d6e6:	8183      	strh	r3, [r0, #12]
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	2001      	movs	r0, #1
 800d6ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d6f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d6f2:	480e      	ldr	r0, [pc, #56]	@ (800d72c <rand+0x74>)
 800d6f4:	690b      	ldr	r3, [r1, #16]
 800d6f6:	694c      	ldr	r4, [r1, #20]
 800d6f8:	4a0d      	ldr	r2, [pc, #52]	@ (800d730 <rand+0x78>)
 800d6fa:	4358      	muls	r0, r3
 800d6fc:	fb02 0004 	mla	r0, r2, r4, r0
 800d700:	fba3 3202 	umull	r3, r2, r3, r2
 800d704:	3301      	adds	r3, #1
 800d706:	eb40 0002 	adc.w	r0, r0, r2
 800d70a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d70e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d712:	bd10      	pop	{r4, pc}
 800d714:	20000070 	.word	0x20000070
 800d718:	0800e9ec 	.word	0x0800e9ec
 800d71c:	0800ea03 	.word	0x0800ea03
 800d720:	abcd330e 	.word	0xabcd330e
 800d724:	e66d1234 	.word	0xe66d1234
 800d728:	0005deec 	.word	0x0005deec
 800d72c:	5851f42d 	.word	0x5851f42d
 800d730:	4c957f2d 	.word	0x4c957f2d

0800d734 <std>:
 800d734:	2300      	movs	r3, #0
 800d736:	b510      	push	{r4, lr}
 800d738:	4604      	mov	r4, r0
 800d73a:	e9c0 3300 	strd	r3, r3, [r0]
 800d73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d742:	6083      	str	r3, [r0, #8]
 800d744:	8181      	strh	r1, [r0, #12]
 800d746:	6643      	str	r3, [r0, #100]	@ 0x64
 800d748:	81c2      	strh	r2, [r0, #14]
 800d74a:	6183      	str	r3, [r0, #24]
 800d74c:	4619      	mov	r1, r3
 800d74e:	2208      	movs	r2, #8
 800d750:	305c      	adds	r0, #92	@ 0x5c
 800d752:	f000 f9f9 	bl	800db48 <memset>
 800d756:	4b0d      	ldr	r3, [pc, #52]	@ (800d78c <std+0x58>)
 800d758:	6263      	str	r3, [r4, #36]	@ 0x24
 800d75a:	4b0d      	ldr	r3, [pc, #52]	@ (800d790 <std+0x5c>)
 800d75c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d75e:	4b0d      	ldr	r3, [pc, #52]	@ (800d794 <std+0x60>)
 800d760:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d762:	4b0d      	ldr	r3, [pc, #52]	@ (800d798 <std+0x64>)
 800d764:	6323      	str	r3, [r4, #48]	@ 0x30
 800d766:	4b0d      	ldr	r3, [pc, #52]	@ (800d79c <std+0x68>)
 800d768:	6224      	str	r4, [r4, #32]
 800d76a:	429c      	cmp	r4, r3
 800d76c:	d006      	beq.n	800d77c <std+0x48>
 800d76e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d772:	4294      	cmp	r4, r2
 800d774:	d002      	beq.n	800d77c <std+0x48>
 800d776:	33d0      	adds	r3, #208	@ 0xd0
 800d778:	429c      	cmp	r4, r3
 800d77a:	d105      	bne.n	800d788 <std+0x54>
 800d77c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d784:	f000 ba58 	b.w	800dc38 <__retarget_lock_init_recursive>
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	bf00      	nop
 800d78c:	0800d999 	.word	0x0800d999
 800d790:	0800d9bb 	.word	0x0800d9bb
 800d794:	0800d9f3 	.word	0x0800d9f3
 800d798:	0800da17 	.word	0x0800da17
 800d79c:	20004234 	.word	0x20004234

0800d7a0 <stdio_exit_handler>:
 800d7a0:	4a02      	ldr	r2, [pc, #8]	@ (800d7ac <stdio_exit_handler+0xc>)
 800d7a2:	4903      	ldr	r1, [pc, #12]	@ (800d7b0 <stdio_exit_handler+0x10>)
 800d7a4:	4803      	ldr	r0, [pc, #12]	@ (800d7b4 <stdio_exit_handler+0x14>)
 800d7a6:	f000 b869 	b.w	800d87c <_fwalk_sglue>
 800d7aa:	bf00      	nop
 800d7ac:	20000064 	.word	0x20000064
 800d7b0:	0800e541 	.word	0x0800e541
 800d7b4:	20000074 	.word	0x20000074

0800d7b8 <cleanup_stdio>:
 800d7b8:	6841      	ldr	r1, [r0, #4]
 800d7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d7ec <cleanup_stdio+0x34>)
 800d7bc:	4299      	cmp	r1, r3
 800d7be:	b510      	push	{r4, lr}
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	d001      	beq.n	800d7c8 <cleanup_stdio+0x10>
 800d7c4:	f000 febc 	bl	800e540 <_fflush_r>
 800d7c8:	68a1      	ldr	r1, [r4, #8]
 800d7ca:	4b09      	ldr	r3, [pc, #36]	@ (800d7f0 <cleanup_stdio+0x38>)
 800d7cc:	4299      	cmp	r1, r3
 800d7ce:	d002      	beq.n	800d7d6 <cleanup_stdio+0x1e>
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f000 feb5 	bl	800e540 <_fflush_r>
 800d7d6:	68e1      	ldr	r1, [r4, #12]
 800d7d8:	4b06      	ldr	r3, [pc, #24]	@ (800d7f4 <cleanup_stdio+0x3c>)
 800d7da:	4299      	cmp	r1, r3
 800d7dc:	d004      	beq.n	800d7e8 <cleanup_stdio+0x30>
 800d7de:	4620      	mov	r0, r4
 800d7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7e4:	f000 beac 	b.w	800e540 <_fflush_r>
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20004234 	.word	0x20004234
 800d7f0:	2000429c 	.word	0x2000429c
 800d7f4:	20004304 	.word	0x20004304

0800d7f8 <global_stdio_init.part.0>:
 800d7f8:	b510      	push	{r4, lr}
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d828 <global_stdio_init.part.0+0x30>)
 800d7fc:	4c0b      	ldr	r4, [pc, #44]	@ (800d82c <global_stdio_init.part.0+0x34>)
 800d7fe:	4a0c      	ldr	r2, [pc, #48]	@ (800d830 <global_stdio_init.part.0+0x38>)
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	4620      	mov	r0, r4
 800d804:	2200      	movs	r2, #0
 800d806:	2104      	movs	r1, #4
 800d808:	f7ff ff94 	bl	800d734 <std>
 800d80c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d810:	2201      	movs	r2, #1
 800d812:	2109      	movs	r1, #9
 800d814:	f7ff ff8e 	bl	800d734 <std>
 800d818:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d81c:	2202      	movs	r2, #2
 800d81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d822:	2112      	movs	r1, #18
 800d824:	f7ff bf86 	b.w	800d734 <std>
 800d828:	2000436c 	.word	0x2000436c
 800d82c:	20004234 	.word	0x20004234
 800d830:	0800d7a1 	.word	0x0800d7a1

0800d834 <__sfp_lock_acquire>:
 800d834:	4801      	ldr	r0, [pc, #4]	@ (800d83c <__sfp_lock_acquire+0x8>)
 800d836:	f000 ba00 	b.w	800dc3a <__retarget_lock_acquire_recursive>
 800d83a:	bf00      	nop
 800d83c:	20004375 	.word	0x20004375

0800d840 <__sfp_lock_release>:
 800d840:	4801      	ldr	r0, [pc, #4]	@ (800d848 <__sfp_lock_release+0x8>)
 800d842:	f000 b9fb 	b.w	800dc3c <__retarget_lock_release_recursive>
 800d846:	bf00      	nop
 800d848:	20004375 	.word	0x20004375

0800d84c <__sinit>:
 800d84c:	b510      	push	{r4, lr}
 800d84e:	4604      	mov	r4, r0
 800d850:	f7ff fff0 	bl	800d834 <__sfp_lock_acquire>
 800d854:	6a23      	ldr	r3, [r4, #32]
 800d856:	b11b      	cbz	r3, 800d860 <__sinit+0x14>
 800d858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d85c:	f7ff bff0 	b.w	800d840 <__sfp_lock_release>
 800d860:	4b04      	ldr	r3, [pc, #16]	@ (800d874 <__sinit+0x28>)
 800d862:	6223      	str	r3, [r4, #32]
 800d864:	4b04      	ldr	r3, [pc, #16]	@ (800d878 <__sinit+0x2c>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1f5      	bne.n	800d858 <__sinit+0xc>
 800d86c:	f7ff ffc4 	bl	800d7f8 <global_stdio_init.part.0>
 800d870:	e7f2      	b.n	800d858 <__sinit+0xc>
 800d872:	bf00      	nop
 800d874:	0800d7b9 	.word	0x0800d7b9
 800d878:	2000436c 	.word	0x2000436c

0800d87c <_fwalk_sglue>:
 800d87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d880:	4607      	mov	r7, r0
 800d882:	4688      	mov	r8, r1
 800d884:	4614      	mov	r4, r2
 800d886:	2600      	movs	r6, #0
 800d888:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d88c:	f1b9 0901 	subs.w	r9, r9, #1
 800d890:	d505      	bpl.n	800d89e <_fwalk_sglue+0x22>
 800d892:	6824      	ldr	r4, [r4, #0]
 800d894:	2c00      	cmp	r4, #0
 800d896:	d1f7      	bne.n	800d888 <_fwalk_sglue+0xc>
 800d898:	4630      	mov	r0, r6
 800d89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d907      	bls.n	800d8b4 <_fwalk_sglue+0x38>
 800d8a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	d003      	beq.n	800d8b4 <_fwalk_sglue+0x38>
 800d8ac:	4629      	mov	r1, r5
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	47c0      	blx	r8
 800d8b2:	4306      	orrs	r6, r0
 800d8b4:	3568      	adds	r5, #104	@ 0x68
 800d8b6:	e7e9      	b.n	800d88c <_fwalk_sglue+0x10>

0800d8b8 <iprintf>:
 800d8b8:	b40f      	push	{r0, r1, r2, r3}
 800d8ba:	b507      	push	{r0, r1, r2, lr}
 800d8bc:	4906      	ldr	r1, [pc, #24]	@ (800d8d8 <iprintf+0x20>)
 800d8be:	ab04      	add	r3, sp, #16
 800d8c0:	6808      	ldr	r0, [r1, #0]
 800d8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c6:	6881      	ldr	r1, [r0, #8]
 800d8c8:	9301      	str	r3, [sp, #4]
 800d8ca:	f000 fb0f 	bl	800deec <_vfiprintf_r>
 800d8ce:	b003      	add	sp, #12
 800d8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8d4:	b004      	add	sp, #16
 800d8d6:	4770      	bx	lr
 800d8d8:	20000070 	.word	0x20000070

0800d8dc <_puts_r>:
 800d8dc:	6a03      	ldr	r3, [r0, #32]
 800d8de:	b570      	push	{r4, r5, r6, lr}
 800d8e0:	6884      	ldr	r4, [r0, #8]
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	460e      	mov	r6, r1
 800d8e6:	b90b      	cbnz	r3, 800d8ec <_puts_r+0x10>
 800d8e8:	f7ff ffb0 	bl	800d84c <__sinit>
 800d8ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8ee:	07db      	lsls	r3, r3, #31
 800d8f0:	d405      	bmi.n	800d8fe <_puts_r+0x22>
 800d8f2:	89a3      	ldrh	r3, [r4, #12]
 800d8f4:	0598      	lsls	r0, r3, #22
 800d8f6:	d402      	bmi.n	800d8fe <_puts_r+0x22>
 800d8f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8fa:	f000 f99e 	bl	800dc3a <__retarget_lock_acquire_recursive>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	0719      	lsls	r1, r3, #28
 800d902:	d502      	bpl.n	800d90a <_puts_r+0x2e>
 800d904:	6923      	ldr	r3, [r4, #16]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d135      	bne.n	800d976 <_puts_r+0x9a>
 800d90a:	4621      	mov	r1, r4
 800d90c:	4628      	mov	r0, r5
 800d90e:	f000 f8c5 	bl	800da9c <__swsetup_r>
 800d912:	b380      	cbz	r0, 800d976 <_puts_r+0x9a>
 800d914:	f04f 35ff 	mov.w	r5, #4294967295
 800d918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d91a:	07da      	lsls	r2, r3, #31
 800d91c:	d405      	bmi.n	800d92a <_puts_r+0x4e>
 800d91e:	89a3      	ldrh	r3, [r4, #12]
 800d920:	059b      	lsls	r3, r3, #22
 800d922:	d402      	bmi.n	800d92a <_puts_r+0x4e>
 800d924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d926:	f000 f989 	bl	800dc3c <__retarget_lock_release_recursive>
 800d92a:	4628      	mov	r0, r5
 800d92c:	bd70      	pop	{r4, r5, r6, pc}
 800d92e:	2b00      	cmp	r3, #0
 800d930:	da04      	bge.n	800d93c <_puts_r+0x60>
 800d932:	69a2      	ldr	r2, [r4, #24]
 800d934:	429a      	cmp	r2, r3
 800d936:	dc17      	bgt.n	800d968 <_puts_r+0x8c>
 800d938:	290a      	cmp	r1, #10
 800d93a:	d015      	beq.n	800d968 <_puts_r+0x8c>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	6022      	str	r2, [r4, #0]
 800d942:	7019      	strb	r1, [r3, #0]
 800d944:	68a3      	ldr	r3, [r4, #8]
 800d946:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d94a:	3b01      	subs	r3, #1
 800d94c:	60a3      	str	r3, [r4, #8]
 800d94e:	2900      	cmp	r1, #0
 800d950:	d1ed      	bne.n	800d92e <_puts_r+0x52>
 800d952:	2b00      	cmp	r3, #0
 800d954:	da11      	bge.n	800d97a <_puts_r+0x9e>
 800d956:	4622      	mov	r2, r4
 800d958:	210a      	movs	r1, #10
 800d95a:	4628      	mov	r0, r5
 800d95c:	f000 f85f 	bl	800da1e <__swbuf_r>
 800d960:	3001      	adds	r0, #1
 800d962:	d0d7      	beq.n	800d914 <_puts_r+0x38>
 800d964:	250a      	movs	r5, #10
 800d966:	e7d7      	b.n	800d918 <_puts_r+0x3c>
 800d968:	4622      	mov	r2, r4
 800d96a:	4628      	mov	r0, r5
 800d96c:	f000 f857 	bl	800da1e <__swbuf_r>
 800d970:	3001      	adds	r0, #1
 800d972:	d1e7      	bne.n	800d944 <_puts_r+0x68>
 800d974:	e7ce      	b.n	800d914 <_puts_r+0x38>
 800d976:	3e01      	subs	r6, #1
 800d978:	e7e4      	b.n	800d944 <_puts_r+0x68>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	6022      	str	r2, [r4, #0]
 800d980:	220a      	movs	r2, #10
 800d982:	701a      	strb	r2, [r3, #0]
 800d984:	e7ee      	b.n	800d964 <_puts_r+0x88>
	...

0800d988 <puts>:
 800d988:	4b02      	ldr	r3, [pc, #8]	@ (800d994 <puts+0xc>)
 800d98a:	4601      	mov	r1, r0
 800d98c:	6818      	ldr	r0, [r3, #0]
 800d98e:	f7ff bfa5 	b.w	800d8dc <_puts_r>
 800d992:	bf00      	nop
 800d994:	20000070 	.word	0x20000070

0800d998 <__sread>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	460c      	mov	r4, r1
 800d99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a0:	f000 f8fc 	bl	800db9c <_read_r>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	bfab      	itete	ge
 800d9a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d9ac:	181b      	addge	r3, r3, r0
 800d9ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d9b2:	bfac      	ite	ge
 800d9b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d9b6:	81a3      	strhlt	r3, [r4, #12]
 800d9b8:	bd10      	pop	{r4, pc}

0800d9ba <__swrite>:
 800d9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9be:	461f      	mov	r7, r3
 800d9c0:	898b      	ldrh	r3, [r1, #12]
 800d9c2:	05db      	lsls	r3, r3, #23
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	4616      	mov	r6, r2
 800d9ca:	d505      	bpl.n	800d9d8 <__swrite+0x1e>
 800d9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f000 f8d0 	bl	800db78 <_lseek_r>
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	463b      	mov	r3, r7
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ee:	f000 b8e7 	b.w	800dbc0 <_write_r>

0800d9f2 <__sseek>:
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	460c      	mov	r4, r1
 800d9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fa:	f000 f8bd 	bl	800db78 <_lseek_r>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	bf15      	itete	ne
 800da04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da0e:	81a3      	strheq	r3, [r4, #12]
 800da10:	bf18      	it	ne
 800da12:	81a3      	strhne	r3, [r4, #12]
 800da14:	bd10      	pop	{r4, pc}

0800da16 <__sclose>:
 800da16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da1a:	f000 b89d 	b.w	800db58 <_close_r>

0800da1e <__swbuf_r>:
 800da1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da20:	460e      	mov	r6, r1
 800da22:	4614      	mov	r4, r2
 800da24:	4605      	mov	r5, r0
 800da26:	b118      	cbz	r0, 800da30 <__swbuf_r+0x12>
 800da28:	6a03      	ldr	r3, [r0, #32]
 800da2a:	b90b      	cbnz	r3, 800da30 <__swbuf_r+0x12>
 800da2c:	f7ff ff0e 	bl	800d84c <__sinit>
 800da30:	69a3      	ldr	r3, [r4, #24]
 800da32:	60a3      	str	r3, [r4, #8]
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	071a      	lsls	r2, r3, #28
 800da38:	d501      	bpl.n	800da3e <__swbuf_r+0x20>
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	b943      	cbnz	r3, 800da50 <__swbuf_r+0x32>
 800da3e:	4621      	mov	r1, r4
 800da40:	4628      	mov	r0, r5
 800da42:	f000 f82b 	bl	800da9c <__swsetup_r>
 800da46:	b118      	cbz	r0, 800da50 <__swbuf_r+0x32>
 800da48:	f04f 37ff 	mov.w	r7, #4294967295
 800da4c:	4638      	mov	r0, r7
 800da4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	6922      	ldr	r2, [r4, #16]
 800da54:	1a98      	subs	r0, r3, r2
 800da56:	6963      	ldr	r3, [r4, #20]
 800da58:	b2f6      	uxtb	r6, r6
 800da5a:	4283      	cmp	r3, r0
 800da5c:	4637      	mov	r7, r6
 800da5e:	dc05      	bgt.n	800da6c <__swbuf_r+0x4e>
 800da60:	4621      	mov	r1, r4
 800da62:	4628      	mov	r0, r5
 800da64:	f000 fd6c 	bl	800e540 <_fflush_r>
 800da68:	2800      	cmp	r0, #0
 800da6a:	d1ed      	bne.n	800da48 <__swbuf_r+0x2a>
 800da6c:	68a3      	ldr	r3, [r4, #8]
 800da6e:	3b01      	subs	r3, #1
 800da70:	60a3      	str	r3, [r4, #8]
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	1c5a      	adds	r2, r3, #1
 800da76:	6022      	str	r2, [r4, #0]
 800da78:	701e      	strb	r6, [r3, #0]
 800da7a:	6962      	ldr	r2, [r4, #20]
 800da7c:	1c43      	adds	r3, r0, #1
 800da7e:	429a      	cmp	r2, r3
 800da80:	d004      	beq.n	800da8c <__swbuf_r+0x6e>
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	07db      	lsls	r3, r3, #31
 800da86:	d5e1      	bpl.n	800da4c <__swbuf_r+0x2e>
 800da88:	2e0a      	cmp	r6, #10
 800da8a:	d1df      	bne.n	800da4c <__swbuf_r+0x2e>
 800da8c:	4621      	mov	r1, r4
 800da8e:	4628      	mov	r0, r5
 800da90:	f000 fd56 	bl	800e540 <_fflush_r>
 800da94:	2800      	cmp	r0, #0
 800da96:	d0d9      	beq.n	800da4c <__swbuf_r+0x2e>
 800da98:	e7d6      	b.n	800da48 <__swbuf_r+0x2a>
	...

0800da9c <__swsetup_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4b29      	ldr	r3, [pc, #164]	@ (800db44 <__swsetup_r+0xa8>)
 800daa0:	4605      	mov	r5, r0
 800daa2:	6818      	ldr	r0, [r3, #0]
 800daa4:	460c      	mov	r4, r1
 800daa6:	b118      	cbz	r0, 800dab0 <__swsetup_r+0x14>
 800daa8:	6a03      	ldr	r3, [r0, #32]
 800daaa:	b90b      	cbnz	r3, 800dab0 <__swsetup_r+0x14>
 800daac:	f7ff fece 	bl	800d84c <__sinit>
 800dab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dab4:	0719      	lsls	r1, r3, #28
 800dab6:	d422      	bmi.n	800dafe <__swsetup_r+0x62>
 800dab8:	06da      	lsls	r2, r3, #27
 800daba:	d407      	bmi.n	800dacc <__swsetup_r+0x30>
 800dabc:	2209      	movs	r2, #9
 800dabe:	602a      	str	r2, [r5, #0]
 800dac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dac4:	81a3      	strh	r3, [r4, #12]
 800dac6:	f04f 30ff 	mov.w	r0, #4294967295
 800daca:	e033      	b.n	800db34 <__swsetup_r+0x98>
 800dacc:	0758      	lsls	r0, r3, #29
 800dace:	d512      	bpl.n	800daf6 <__swsetup_r+0x5a>
 800dad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dad2:	b141      	cbz	r1, 800dae6 <__swsetup_r+0x4a>
 800dad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dad8:	4299      	cmp	r1, r3
 800dada:	d002      	beq.n	800dae2 <__swsetup_r+0x46>
 800dadc:	4628      	mov	r0, r5
 800dade:	f000 f8db 	bl	800dc98 <_free_r>
 800dae2:	2300      	movs	r3, #0
 800dae4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800daec:	81a3      	strh	r3, [r4, #12]
 800daee:	2300      	movs	r3, #0
 800daf0:	6063      	str	r3, [r4, #4]
 800daf2:	6923      	ldr	r3, [r4, #16]
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	f043 0308 	orr.w	r3, r3, #8
 800dafc:	81a3      	strh	r3, [r4, #12]
 800dafe:	6923      	ldr	r3, [r4, #16]
 800db00:	b94b      	cbnz	r3, 800db16 <__swsetup_r+0x7a>
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db0c:	d003      	beq.n	800db16 <__swsetup_r+0x7a>
 800db0e:	4621      	mov	r1, r4
 800db10:	4628      	mov	r0, r5
 800db12:	f000 fd75 	bl	800e600 <__smakebuf_r>
 800db16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db1a:	f013 0201 	ands.w	r2, r3, #1
 800db1e:	d00a      	beq.n	800db36 <__swsetup_r+0x9a>
 800db20:	2200      	movs	r2, #0
 800db22:	60a2      	str	r2, [r4, #8]
 800db24:	6962      	ldr	r2, [r4, #20]
 800db26:	4252      	negs	r2, r2
 800db28:	61a2      	str	r2, [r4, #24]
 800db2a:	6922      	ldr	r2, [r4, #16]
 800db2c:	b942      	cbnz	r2, 800db40 <__swsetup_r+0xa4>
 800db2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db32:	d1c5      	bne.n	800dac0 <__swsetup_r+0x24>
 800db34:	bd38      	pop	{r3, r4, r5, pc}
 800db36:	0799      	lsls	r1, r3, #30
 800db38:	bf58      	it	pl
 800db3a:	6962      	ldrpl	r2, [r4, #20]
 800db3c:	60a2      	str	r2, [r4, #8]
 800db3e:	e7f4      	b.n	800db2a <__swsetup_r+0x8e>
 800db40:	2000      	movs	r0, #0
 800db42:	e7f7      	b.n	800db34 <__swsetup_r+0x98>
 800db44:	20000070 	.word	0x20000070

0800db48 <memset>:
 800db48:	4402      	add	r2, r0
 800db4a:	4603      	mov	r3, r0
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d100      	bne.n	800db52 <memset+0xa>
 800db50:	4770      	bx	lr
 800db52:	f803 1b01 	strb.w	r1, [r3], #1
 800db56:	e7f9      	b.n	800db4c <memset+0x4>

0800db58 <_close_r>:
 800db58:	b538      	push	{r3, r4, r5, lr}
 800db5a:	4d06      	ldr	r5, [pc, #24]	@ (800db74 <_close_r+0x1c>)
 800db5c:	2300      	movs	r3, #0
 800db5e:	4604      	mov	r4, r0
 800db60:	4608      	mov	r0, r1
 800db62:	602b      	str	r3, [r5, #0]
 800db64:	f7f4 fd4a 	bl	80025fc <_close>
 800db68:	1c43      	adds	r3, r0, #1
 800db6a:	d102      	bne.n	800db72 <_close_r+0x1a>
 800db6c:	682b      	ldr	r3, [r5, #0]
 800db6e:	b103      	cbz	r3, 800db72 <_close_r+0x1a>
 800db70:	6023      	str	r3, [r4, #0]
 800db72:	bd38      	pop	{r3, r4, r5, pc}
 800db74:	20004370 	.word	0x20004370

0800db78 <_lseek_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4d07      	ldr	r5, [pc, #28]	@ (800db98 <_lseek_r+0x20>)
 800db7c:	4604      	mov	r4, r0
 800db7e:	4608      	mov	r0, r1
 800db80:	4611      	mov	r1, r2
 800db82:	2200      	movs	r2, #0
 800db84:	602a      	str	r2, [r5, #0]
 800db86:	461a      	mov	r2, r3
 800db88:	f7f4 fd5f 	bl	800264a <_lseek>
 800db8c:	1c43      	adds	r3, r0, #1
 800db8e:	d102      	bne.n	800db96 <_lseek_r+0x1e>
 800db90:	682b      	ldr	r3, [r5, #0]
 800db92:	b103      	cbz	r3, 800db96 <_lseek_r+0x1e>
 800db94:	6023      	str	r3, [r4, #0]
 800db96:	bd38      	pop	{r3, r4, r5, pc}
 800db98:	20004370 	.word	0x20004370

0800db9c <_read_r>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	4d07      	ldr	r5, [pc, #28]	@ (800dbbc <_read_r+0x20>)
 800dba0:	4604      	mov	r4, r0
 800dba2:	4608      	mov	r0, r1
 800dba4:	4611      	mov	r1, r2
 800dba6:	2200      	movs	r2, #0
 800dba8:	602a      	str	r2, [r5, #0]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	f7f4 fced 	bl	800258a <_read>
 800dbb0:	1c43      	adds	r3, r0, #1
 800dbb2:	d102      	bne.n	800dbba <_read_r+0x1e>
 800dbb4:	682b      	ldr	r3, [r5, #0]
 800dbb6:	b103      	cbz	r3, 800dbba <_read_r+0x1e>
 800dbb8:	6023      	str	r3, [r4, #0]
 800dbba:	bd38      	pop	{r3, r4, r5, pc}
 800dbbc:	20004370 	.word	0x20004370

0800dbc0 <_write_r>:
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	4d07      	ldr	r5, [pc, #28]	@ (800dbe0 <_write_r+0x20>)
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	4608      	mov	r0, r1
 800dbc8:	4611      	mov	r1, r2
 800dbca:	2200      	movs	r2, #0
 800dbcc:	602a      	str	r2, [r5, #0]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	f7f4 fcf8 	bl	80025c4 <_write>
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	d102      	bne.n	800dbde <_write_r+0x1e>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	b103      	cbz	r3, 800dbde <_write_r+0x1e>
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	bd38      	pop	{r3, r4, r5, pc}
 800dbe0:	20004370 	.word	0x20004370

0800dbe4 <__errno>:
 800dbe4:	4b01      	ldr	r3, [pc, #4]	@ (800dbec <__errno+0x8>)
 800dbe6:	6818      	ldr	r0, [r3, #0]
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	20000070 	.word	0x20000070

0800dbf0 <__libc_init_array>:
 800dbf0:	b570      	push	{r4, r5, r6, lr}
 800dbf2:	4d0d      	ldr	r5, [pc, #52]	@ (800dc28 <__libc_init_array+0x38>)
 800dbf4:	4c0d      	ldr	r4, [pc, #52]	@ (800dc2c <__libc_init_array+0x3c>)
 800dbf6:	1b64      	subs	r4, r4, r5
 800dbf8:	10a4      	asrs	r4, r4, #2
 800dbfa:	2600      	movs	r6, #0
 800dbfc:	42a6      	cmp	r6, r4
 800dbfe:	d109      	bne.n	800dc14 <__libc_init_array+0x24>
 800dc00:	4d0b      	ldr	r5, [pc, #44]	@ (800dc30 <__libc_init_array+0x40>)
 800dc02:	4c0c      	ldr	r4, [pc, #48]	@ (800dc34 <__libc_init_array+0x44>)
 800dc04:	f000 fdb6 	bl	800e774 <_init>
 800dc08:	1b64      	subs	r4, r4, r5
 800dc0a:	10a4      	asrs	r4, r4, #2
 800dc0c:	2600      	movs	r6, #0
 800dc0e:	42a6      	cmp	r6, r4
 800dc10:	d105      	bne.n	800dc1e <__libc_init_array+0x2e>
 800dc12:	bd70      	pop	{r4, r5, r6, pc}
 800dc14:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc18:	4798      	blx	r3
 800dc1a:	3601      	adds	r6, #1
 800dc1c:	e7ee      	b.n	800dbfc <__libc_init_array+0xc>
 800dc1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc22:	4798      	blx	r3
 800dc24:	3601      	adds	r6, #1
 800dc26:	e7f2      	b.n	800dc0e <__libc_init_array+0x1e>
 800dc28:	0800ead4 	.word	0x0800ead4
 800dc2c:	0800ead4 	.word	0x0800ead4
 800dc30:	0800ead4 	.word	0x0800ead4
 800dc34:	0800ead8 	.word	0x0800ead8

0800dc38 <__retarget_lock_init_recursive>:
 800dc38:	4770      	bx	lr

0800dc3a <__retarget_lock_acquire_recursive>:
 800dc3a:	4770      	bx	lr

0800dc3c <__retarget_lock_release_recursive>:
 800dc3c:	4770      	bx	lr

0800dc3e <memcpy>:
 800dc3e:	440a      	add	r2, r1
 800dc40:	4291      	cmp	r1, r2
 800dc42:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc46:	d100      	bne.n	800dc4a <memcpy+0xc>
 800dc48:	4770      	bx	lr
 800dc4a:	b510      	push	{r4, lr}
 800dc4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc54:	4291      	cmp	r1, r2
 800dc56:	d1f9      	bne.n	800dc4c <memcpy+0xe>
 800dc58:	bd10      	pop	{r4, pc}
	...

0800dc5c <__assert_func>:
 800dc5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc5e:	4614      	mov	r4, r2
 800dc60:	461a      	mov	r2, r3
 800dc62:	4b09      	ldr	r3, [pc, #36]	@ (800dc88 <__assert_func+0x2c>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4605      	mov	r5, r0
 800dc68:	68d8      	ldr	r0, [r3, #12]
 800dc6a:	b954      	cbnz	r4, 800dc82 <__assert_func+0x26>
 800dc6c:	4b07      	ldr	r3, [pc, #28]	@ (800dc8c <__assert_func+0x30>)
 800dc6e:	461c      	mov	r4, r3
 800dc70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc74:	9100      	str	r1, [sp, #0]
 800dc76:	462b      	mov	r3, r5
 800dc78:	4905      	ldr	r1, [pc, #20]	@ (800dc90 <__assert_func+0x34>)
 800dc7a:	f000 fc89 	bl	800e590 <fiprintf>
 800dc7e:	f000 fd2d 	bl	800e6dc <abort>
 800dc82:	4b04      	ldr	r3, [pc, #16]	@ (800dc94 <__assert_func+0x38>)
 800dc84:	e7f4      	b.n	800dc70 <__assert_func+0x14>
 800dc86:	bf00      	nop
 800dc88:	20000070 	.word	0x20000070
 800dc8c:	0800ea96 	.word	0x0800ea96
 800dc90:	0800ea68 	.word	0x0800ea68
 800dc94:	0800ea5b 	.word	0x0800ea5b

0800dc98 <_free_r>:
 800dc98:	b538      	push	{r3, r4, r5, lr}
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	2900      	cmp	r1, #0
 800dc9e:	d041      	beq.n	800dd24 <_free_r+0x8c>
 800dca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dca4:	1f0c      	subs	r4, r1, #4
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	bfb8      	it	lt
 800dcaa:	18e4      	addlt	r4, r4, r3
 800dcac:	f000 f8e8 	bl	800de80 <__malloc_lock>
 800dcb0:	4a1d      	ldr	r2, [pc, #116]	@ (800dd28 <_free_r+0x90>)
 800dcb2:	6813      	ldr	r3, [r2, #0]
 800dcb4:	b933      	cbnz	r3, 800dcc4 <_free_r+0x2c>
 800dcb6:	6063      	str	r3, [r4, #4]
 800dcb8:	6014      	str	r4, [r2, #0]
 800dcba:	4628      	mov	r0, r5
 800dcbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcc0:	f000 b8e4 	b.w	800de8c <__malloc_unlock>
 800dcc4:	42a3      	cmp	r3, r4
 800dcc6:	d908      	bls.n	800dcda <_free_r+0x42>
 800dcc8:	6820      	ldr	r0, [r4, #0]
 800dcca:	1821      	adds	r1, r4, r0
 800dccc:	428b      	cmp	r3, r1
 800dcce:	bf01      	itttt	eq
 800dcd0:	6819      	ldreq	r1, [r3, #0]
 800dcd2:	685b      	ldreq	r3, [r3, #4]
 800dcd4:	1809      	addeq	r1, r1, r0
 800dcd6:	6021      	streq	r1, [r4, #0]
 800dcd8:	e7ed      	b.n	800dcb6 <_free_r+0x1e>
 800dcda:	461a      	mov	r2, r3
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	b10b      	cbz	r3, 800dce4 <_free_r+0x4c>
 800dce0:	42a3      	cmp	r3, r4
 800dce2:	d9fa      	bls.n	800dcda <_free_r+0x42>
 800dce4:	6811      	ldr	r1, [r2, #0]
 800dce6:	1850      	adds	r0, r2, r1
 800dce8:	42a0      	cmp	r0, r4
 800dcea:	d10b      	bne.n	800dd04 <_free_r+0x6c>
 800dcec:	6820      	ldr	r0, [r4, #0]
 800dcee:	4401      	add	r1, r0
 800dcf0:	1850      	adds	r0, r2, r1
 800dcf2:	4283      	cmp	r3, r0
 800dcf4:	6011      	str	r1, [r2, #0]
 800dcf6:	d1e0      	bne.n	800dcba <_free_r+0x22>
 800dcf8:	6818      	ldr	r0, [r3, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	6053      	str	r3, [r2, #4]
 800dcfe:	4408      	add	r0, r1
 800dd00:	6010      	str	r0, [r2, #0]
 800dd02:	e7da      	b.n	800dcba <_free_r+0x22>
 800dd04:	d902      	bls.n	800dd0c <_free_r+0x74>
 800dd06:	230c      	movs	r3, #12
 800dd08:	602b      	str	r3, [r5, #0]
 800dd0a:	e7d6      	b.n	800dcba <_free_r+0x22>
 800dd0c:	6820      	ldr	r0, [r4, #0]
 800dd0e:	1821      	adds	r1, r4, r0
 800dd10:	428b      	cmp	r3, r1
 800dd12:	bf04      	itt	eq
 800dd14:	6819      	ldreq	r1, [r3, #0]
 800dd16:	685b      	ldreq	r3, [r3, #4]
 800dd18:	6063      	str	r3, [r4, #4]
 800dd1a:	bf04      	itt	eq
 800dd1c:	1809      	addeq	r1, r1, r0
 800dd1e:	6021      	streq	r1, [r4, #0]
 800dd20:	6054      	str	r4, [r2, #4]
 800dd22:	e7ca      	b.n	800dcba <_free_r+0x22>
 800dd24:	bd38      	pop	{r3, r4, r5, pc}
 800dd26:	bf00      	nop
 800dd28:	2000437c 	.word	0x2000437c

0800dd2c <malloc>:
 800dd2c:	4b02      	ldr	r3, [pc, #8]	@ (800dd38 <malloc+0xc>)
 800dd2e:	4601      	mov	r1, r0
 800dd30:	6818      	ldr	r0, [r3, #0]
 800dd32:	f000 b825 	b.w	800dd80 <_malloc_r>
 800dd36:	bf00      	nop
 800dd38:	20000070 	.word	0x20000070

0800dd3c <sbrk_aligned>:
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	4e0f      	ldr	r6, [pc, #60]	@ (800dd7c <sbrk_aligned+0x40>)
 800dd40:	460c      	mov	r4, r1
 800dd42:	6831      	ldr	r1, [r6, #0]
 800dd44:	4605      	mov	r5, r0
 800dd46:	b911      	cbnz	r1, 800dd4e <sbrk_aligned+0x12>
 800dd48:	f000 fcb8 	bl	800e6bc <_sbrk_r>
 800dd4c:	6030      	str	r0, [r6, #0]
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4628      	mov	r0, r5
 800dd52:	f000 fcb3 	bl	800e6bc <_sbrk_r>
 800dd56:	1c43      	adds	r3, r0, #1
 800dd58:	d103      	bne.n	800dd62 <sbrk_aligned+0x26>
 800dd5a:	f04f 34ff 	mov.w	r4, #4294967295
 800dd5e:	4620      	mov	r0, r4
 800dd60:	bd70      	pop	{r4, r5, r6, pc}
 800dd62:	1cc4      	adds	r4, r0, #3
 800dd64:	f024 0403 	bic.w	r4, r4, #3
 800dd68:	42a0      	cmp	r0, r4
 800dd6a:	d0f8      	beq.n	800dd5e <sbrk_aligned+0x22>
 800dd6c:	1a21      	subs	r1, r4, r0
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f000 fca4 	bl	800e6bc <_sbrk_r>
 800dd74:	3001      	adds	r0, #1
 800dd76:	d1f2      	bne.n	800dd5e <sbrk_aligned+0x22>
 800dd78:	e7ef      	b.n	800dd5a <sbrk_aligned+0x1e>
 800dd7a:	bf00      	nop
 800dd7c:	20004378 	.word	0x20004378

0800dd80 <_malloc_r>:
 800dd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd84:	1ccd      	adds	r5, r1, #3
 800dd86:	f025 0503 	bic.w	r5, r5, #3
 800dd8a:	3508      	adds	r5, #8
 800dd8c:	2d0c      	cmp	r5, #12
 800dd8e:	bf38      	it	cc
 800dd90:	250c      	movcc	r5, #12
 800dd92:	2d00      	cmp	r5, #0
 800dd94:	4606      	mov	r6, r0
 800dd96:	db01      	blt.n	800dd9c <_malloc_r+0x1c>
 800dd98:	42a9      	cmp	r1, r5
 800dd9a:	d904      	bls.n	800dda6 <_malloc_r+0x26>
 800dd9c:	230c      	movs	r3, #12
 800dd9e:	6033      	str	r3, [r6, #0]
 800dda0:	2000      	movs	r0, #0
 800dda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dda6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de7c <_malloc_r+0xfc>
 800ddaa:	f000 f869 	bl	800de80 <__malloc_lock>
 800ddae:	f8d8 3000 	ldr.w	r3, [r8]
 800ddb2:	461c      	mov	r4, r3
 800ddb4:	bb44      	cbnz	r4, 800de08 <_malloc_r+0x88>
 800ddb6:	4629      	mov	r1, r5
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f7ff ffbf 	bl	800dd3c <sbrk_aligned>
 800ddbe:	1c43      	adds	r3, r0, #1
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	d158      	bne.n	800de76 <_malloc_r+0xf6>
 800ddc4:	f8d8 4000 	ldr.w	r4, [r8]
 800ddc8:	4627      	mov	r7, r4
 800ddca:	2f00      	cmp	r7, #0
 800ddcc:	d143      	bne.n	800de56 <_malloc_r+0xd6>
 800ddce:	2c00      	cmp	r4, #0
 800ddd0:	d04b      	beq.n	800de6a <_malloc_r+0xea>
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	4639      	mov	r1, r7
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	eb04 0903 	add.w	r9, r4, r3
 800dddc:	f000 fc6e 	bl	800e6bc <_sbrk_r>
 800dde0:	4581      	cmp	r9, r0
 800dde2:	d142      	bne.n	800de6a <_malloc_r+0xea>
 800dde4:	6821      	ldr	r1, [r4, #0]
 800dde6:	1a6d      	subs	r5, r5, r1
 800dde8:	4629      	mov	r1, r5
 800ddea:	4630      	mov	r0, r6
 800ddec:	f7ff ffa6 	bl	800dd3c <sbrk_aligned>
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	d03a      	beq.n	800de6a <_malloc_r+0xea>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	442b      	add	r3, r5
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	f8d8 3000 	ldr.w	r3, [r8]
 800ddfe:	685a      	ldr	r2, [r3, #4]
 800de00:	bb62      	cbnz	r2, 800de5c <_malloc_r+0xdc>
 800de02:	f8c8 7000 	str.w	r7, [r8]
 800de06:	e00f      	b.n	800de28 <_malloc_r+0xa8>
 800de08:	6822      	ldr	r2, [r4, #0]
 800de0a:	1b52      	subs	r2, r2, r5
 800de0c:	d420      	bmi.n	800de50 <_malloc_r+0xd0>
 800de0e:	2a0b      	cmp	r2, #11
 800de10:	d917      	bls.n	800de42 <_malloc_r+0xc2>
 800de12:	1961      	adds	r1, r4, r5
 800de14:	42a3      	cmp	r3, r4
 800de16:	6025      	str	r5, [r4, #0]
 800de18:	bf18      	it	ne
 800de1a:	6059      	strne	r1, [r3, #4]
 800de1c:	6863      	ldr	r3, [r4, #4]
 800de1e:	bf08      	it	eq
 800de20:	f8c8 1000 	streq.w	r1, [r8]
 800de24:	5162      	str	r2, [r4, r5]
 800de26:	604b      	str	r3, [r1, #4]
 800de28:	4630      	mov	r0, r6
 800de2a:	f000 f82f 	bl	800de8c <__malloc_unlock>
 800de2e:	f104 000b 	add.w	r0, r4, #11
 800de32:	1d23      	adds	r3, r4, #4
 800de34:	f020 0007 	bic.w	r0, r0, #7
 800de38:	1ac2      	subs	r2, r0, r3
 800de3a:	bf1c      	itt	ne
 800de3c:	1a1b      	subne	r3, r3, r0
 800de3e:	50a3      	strne	r3, [r4, r2]
 800de40:	e7af      	b.n	800dda2 <_malloc_r+0x22>
 800de42:	6862      	ldr	r2, [r4, #4]
 800de44:	42a3      	cmp	r3, r4
 800de46:	bf0c      	ite	eq
 800de48:	f8c8 2000 	streq.w	r2, [r8]
 800de4c:	605a      	strne	r2, [r3, #4]
 800de4e:	e7eb      	b.n	800de28 <_malloc_r+0xa8>
 800de50:	4623      	mov	r3, r4
 800de52:	6864      	ldr	r4, [r4, #4]
 800de54:	e7ae      	b.n	800ddb4 <_malloc_r+0x34>
 800de56:	463c      	mov	r4, r7
 800de58:	687f      	ldr	r7, [r7, #4]
 800de5a:	e7b6      	b.n	800ddca <_malloc_r+0x4a>
 800de5c:	461a      	mov	r2, r3
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	42a3      	cmp	r3, r4
 800de62:	d1fb      	bne.n	800de5c <_malloc_r+0xdc>
 800de64:	2300      	movs	r3, #0
 800de66:	6053      	str	r3, [r2, #4]
 800de68:	e7de      	b.n	800de28 <_malloc_r+0xa8>
 800de6a:	230c      	movs	r3, #12
 800de6c:	6033      	str	r3, [r6, #0]
 800de6e:	4630      	mov	r0, r6
 800de70:	f000 f80c 	bl	800de8c <__malloc_unlock>
 800de74:	e794      	b.n	800dda0 <_malloc_r+0x20>
 800de76:	6005      	str	r5, [r0, #0]
 800de78:	e7d6      	b.n	800de28 <_malloc_r+0xa8>
 800de7a:	bf00      	nop
 800de7c:	2000437c 	.word	0x2000437c

0800de80 <__malloc_lock>:
 800de80:	4801      	ldr	r0, [pc, #4]	@ (800de88 <__malloc_lock+0x8>)
 800de82:	f7ff beda 	b.w	800dc3a <__retarget_lock_acquire_recursive>
 800de86:	bf00      	nop
 800de88:	20004374 	.word	0x20004374

0800de8c <__malloc_unlock>:
 800de8c:	4801      	ldr	r0, [pc, #4]	@ (800de94 <__malloc_unlock+0x8>)
 800de8e:	f7ff bed5 	b.w	800dc3c <__retarget_lock_release_recursive>
 800de92:	bf00      	nop
 800de94:	20004374 	.word	0x20004374

0800de98 <__sfputc_r>:
 800de98:	6893      	ldr	r3, [r2, #8]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	b410      	push	{r4}
 800dea0:	6093      	str	r3, [r2, #8]
 800dea2:	da08      	bge.n	800deb6 <__sfputc_r+0x1e>
 800dea4:	6994      	ldr	r4, [r2, #24]
 800dea6:	42a3      	cmp	r3, r4
 800dea8:	db01      	blt.n	800deae <__sfputc_r+0x16>
 800deaa:	290a      	cmp	r1, #10
 800deac:	d103      	bne.n	800deb6 <__sfputc_r+0x1e>
 800deae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deb2:	f7ff bdb4 	b.w	800da1e <__swbuf_r>
 800deb6:	6813      	ldr	r3, [r2, #0]
 800deb8:	1c58      	adds	r0, r3, #1
 800deba:	6010      	str	r0, [r2, #0]
 800debc:	7019      	strb	r1, [r3, #0]
 800debe:	4608      	mov	r0, r1
 800dec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <__sfputs_r>:
 800dec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec8:	4606      	mov	r6, r0
 800deca:	460f      	mov	r7, r1
 800decc:	4614      	mov	r4, r2
 800dece:	18d5      	adds	r5, r2, r3
 800ded0:	42ac      	cmp	r4, r5
 800ded2:	d101      	bne.n	800ded8 <__sfputs_r+0x12>
 800ded4:	2000      	movs	r0, #0
 800ded6:	e007      	b.n	800dee8 <__sfputs_r+0x22>
 800ded8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dedc:	463a      	mov	r2, r7
 800dede:	4630      	mov	r0, r6
 800dee0:	f7ff ffda 	bl	800de98 <__sfputc_r>
 800dee4:	1c43      	adds	r3, r0, #1
 800dee6:	d1f3      	bne.n	800ded0 <__sfputs_r+0xa>
 800dee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800deec <_vfiprintf_r>:
 800deec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def0:	460d      	mov	r5, r1
 800def2:	b09d      	sub	sp, #116	@ 0x74
 800def4:	4614      	mov	r4, r2
 800def6:	4698      	mov	r8, r3
 800def8:	4606      	mov	r6, r0
 800defa:	b118      	cbz	r0, 800df04 <_vfiprintf_r+0x18>
 800defc:	6a03      	ldr	r3, [r0, #32]
 800defe:	b90b      	cbnz	r3, 800df04 <_vfiprintf_r+0x18>
 800df00:	f7ff fca4 	bl	800d84c <__sinit>
 800df04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df06:	07d9      	lsls	r1, r3, #31
 800df08:	d405      	bmi.n	800df16 <_vfiprintf_r+0x2a>
 800df0a:	89ab      	ldrh	r3, [r5, #12]
 800df0c:	059a      	lsls	r2, r3, #22
 800df0e:	d402      	bmi.n	800df16 <_vfiprintf_r+0x2a>
 800df10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df12:	f7ff fe92 	bl	800dc3a <__retarget_lock_acquire_recursive>
 800df16:	89ab      	ldrh	r3, [r5, #12]
 800df18:	071b      	lsls	r3, r3, #28
 800df1a:	d501      	bpl.n	800df20 <_vfiprintf_r+0x34>
 800df1c:	692b      	ldr	r3, [r5, #16]
 800df1e:	b99b      	cbnz	r3, 800df48 <_vfiprintf_r+0x5c>
 800df20:	4629      	mov	r1, r5
 800df22:	4630      	mov	r0, r6
 800df24:	f7ff fdba 	bl	800da9c <__swsetup_r>
 800df28:	b170      	cbz	r0, 800df48 <_vfiprintf_r+0x5c>
 800df2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df2c:	07dc      	lsls	r4, r3, #31
 800df2e:	d504      	bpl.n	800df3a <_vfiprintf_r+0x4e>
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	b01d      	add	sp, #116	@ 0x74
 800df36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3a:	89ab      	ldrh	r3, [r5, #12]
 800df3c:	0598      	lsls	r0, r3, #22
 800df3e:	d4f7      	bmi.n	800df30 <_vfiprintf_r+0x44>
 800df40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df42:	f7ff fe7b 	bl	800dc3c <__retarget_lock_release_recursive>
 800df46:	e7f3      	b.n	800df30 <_vfiprintf_r+0x44>
 800df48:	2300      	movs	r3, #0
 800df4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df4c:	2320      	movs	r3, #32
 800df4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df52:	f8cd 800c 	str.w	r8, [sp, #12]
 800df56:	2330      	movs	r3, #48	@ 0x30
 800df58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e108 <_vfiprintf_r+0x21c>
 800df5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df60:	f04f 0901 	mov.w	r9, #1
 800df64:	4623      	mov	r3, r4
 800df66:	469a      	mov	sl, r3
 800df68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df6c:	b10a      	cbz	r2, 800df72 <_vfiprintf_r+0x86>
 800df6e:	2a25      	cmp	r2, #37	@ 0x25
 800df70:	d1f9      	bne.n	800df66 <_vfiprintf_r+0x7a>
 800df72:	ebba 0b04 	subs.w	fp, sl, r4
 800df76:	d00b      	beq.n	800df90 <_vfiprintf_r+0xa4>
 800df78:	465b      	mov	r3, fp
 800df7a:	4622      	mov	r2, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	4630      	mov	r0, r6
 800df80:	f7ff ffa1 	bl	800dec6 <__sfputs_r>
 800df84:	3001      	adds	r0, #1
 800df86:	f000 80a7 	beq.w	800e0d8 <_vfiprintf_r+0x1ec>
 800df8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df8c:	445a      	add	r2, fp
 800df8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800df90:	f89a 3000 	ldrb.w	r3, [sl]
 800df94:	2b00      	cmp	r3, #0
 800df96:	f000 809f 	beq.w	800e0d8 <_vfiprintf_r+0x1ec>
 800df9a:	2300      	movs	r3, #0
 800df9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfa4:	f10a 0a01 	add.w	sl, sl, #1
 800dfa8:	9304      	str	r3, [sp, #16]
 800dfaa:	9307      	str	r3, [sp, #28]
 800dfac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfb2:	4654      	mov	r4, sl
 800dfb4:	2205      	movs	r2, #5
 800dfb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfba:	4853      	ldr	r0, [pc, #332]	@ (800e108 <_vfiprintf_r+0x21c>)
 800dfbc:	f7f2 f910 	bl	80001e0 <memchr>
 800dfc0:	9a04      	ldr	r2, [sp, #16]
 800dfc2:	b9d8      	cbnz	r0, 800dffc <_vfiprintf_r+0x110>
 800dfc4:	06d1      	lsls	r1, r2, #27
 800dfc6:	bf44      	itt	mi
 800dfc8:	2320      	movmi	r3, #32
 800dfca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfce:	0713      	lsls	r3, r2, #28
 800dfd0:	bf44      	itt	mi
 800dfd2:	232b      	movmi	r3, #43	@ 0x2b
 800dfd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfd8:	f89a 3000 	ldrb.w	r3, [sl]
 800dfdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfde:	d015      	beq.n	800e00c <_vfiprintf_r+0x120>
 800dfe0:	9a07      	ldr	r2, [sp, #28]
 800dfe2:	4654      	mov	r4, sl
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	f04f 0c0a 	mov.w	ip, #10
 800dfea:	4621      	mov	r1, r4
 800dfec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dff0:	3b30      	subs	r3, #48	@ 0x30
 800dff2:	2b09      	cmp	r3, #9
 800dff4:	d94b      	bls.n	800e08e <_vfiprintf_r+0x1a2>
 800dff6:	b1b0      	cbz	r0, 800e026 <_vfiprintf_r+0x13a>
 800dff8:	9207      	str	r2, [sp, #28]
 800dffa:	e014      	b.n	800e026 <_vfiprintf_r+0x13a>
 800dffc:	eba0 0308 	sub.w	r3, r0, r8
 800e000:	fa09 f303 	lsl.w	r3, r9, r3
 800e004:	4313      	orrs	r3, r2
 800e006:	9304      	str	r3, [sp, #16]
 800e008:	46a2      	mov	sl, r4
 800e00a:	e7d2      	b.n	800dfb2 <_vfiprintf_r+0xc6>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	1d19      	adds	r1, r3, #4
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	9103      	str	r1, [sp, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	bfbb      	ittet	lt
 800e018:	425b      	neglt	r3, r3
 800e01a:	f042 0202 	orrlt.w	r2, r2, #2
 800e01e:	9307      	strge	r3, [sp, #28]
 800e020:	9307      	strlt	r3, [sp, #28]
 800e022:	bfb8      	it	lt
 800e024:	9204      	strlt	r2, [sp, #16]
 800e026:	7823      	ldrb	r3, [r4, #0]
 800e028:	2b2e      	cmp	r3, #46	@ 0x2e
 800e02a:	d10a      	bne.n	800e042 <_vfiprintf_r+0x156>
 800e02c:	7863      	ldrb	r3, [r4, #1]
 800e02e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e030:	d132      	bne.n	800e098 <_vfiprintf_r+0x1ac>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	1d1a      	adds	r2, r3, #4
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	9203      	str	r2, [sp, #12]
 800e03a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e03e:	3402      	adds	r4, #2
 800e040:	9305      	str	r3, [sp, #20]
 800e042:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e118 <_vfiprintf_r+0x22c>
 800e046:	7821      	ldrb	r1, [r4, #0]
 800e048:	2203      	movs	r2, #3
 800e04a:	4650      	mov	r0, sl
 800e04c:	f7f2 f8c8 	bl	80001e0 <memchr>
 800e050:	b138      	cbz	r0, 800e062 <_vfiprintf_r+0x176>
 800e052:	9b04      	ldr	r3, [sp, #16]
 800e054:	eba0 000a 	sub.w	r0, r0, sl
 800e058:	2240      	movs	r2, #64	@ 0x40
 800e05a:	4082      	lsls	r2, r0
 800e05c:	4313      	orrs	r3, r2
 800e05e:	3401      	adds	r4, #1
 800e060:	9304      	str	r3, [sp, #16]
 800e062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e066:	4829      	ldr	r0, [pc, #164]	@ (800e10c <_vfiprintf_r+0x220>)
 800e068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e06c:	2206      	movs	r2, #6
 800e06e:	f7f2 f8b7 	bl	80001e0 <memchr>
 800e072:	2800      	cmp	r0, #0
 800e074:	d03f      	beq.n	800e0f6 <_vfiprintf_r+0x20a>
 800e076:	4b26      	ldr	r3, [pc, #152]	@ (800e110 <_vfiprintf_r+0x224>)
 800e078:	bb1b      	cbnz	r3, 800e0c2 <_vfiprintf_r+0x1d6>
 800e07a:	9b03      	ldr	r3, [sp, #12]
 800e07c:	3307      	adds	r3, #7
 800e07e:	f023 0307 	bic.w	r3, r3, #7
 800e082:	3308      	adds	r3, #8
 800e084:	9303      	str	r3, [sp, #12]
 800e086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e088:	443b      	add	r3, r7
 800e08a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e08c:	e76a      	b.n	800df64 <_vfiprintf_r+0x78>
 800e08e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e092:	460c      	mov	r4, r1
 800e094:	2001      	movs	r0, #1
 800e096:	e7a8      	b.n	800dfea <_vfiprintf_r+0xfe>
 800e098:	2300      	movs	r3, #0
 800e09a:	3401      	adds	r4, #1
 800e09c:	9305      	str	r3, [sp, #20]
 800e09e:	4619      	mov	r1, r3
 800e0a0:	f04f 0c0a 	mov.w	ip, #10
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0aa:	3a30      	subs	r2, #48	@ 0x30
 800e0ac:	2a09      	cmp	r2, #9
 800e0ae:	d903      	bls.n	800e0b8 <_vfiprintf_r+0x1cc>
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d0c6      	beq.n	800e042 <_vfiprintf_r+0x156>
 800e0b4:	9105      	str	r1, [sp, #20]
 800e0b6:	e7c4      	b.n	800e042 <_vfiprintf_r+0x156>
 800e0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0bc:	4604      	mov	r4, r0
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e7f0      	b.n	800e0a4 <_vfiprintf_r+0x1b8>
 800e0c2:	ab03      	add	r3, sp, #12
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4b12      	ldr	r3, [pc, #72]	@ (800e114 <_vfiprintf_r+0x228>)
 800e0ca:	a904      	add	r1, sp, #16
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	f3af 8000 	nop.w
 800e0d2:	4607      	mov	r7, r0
 800e0d4:	1c78      	adds	r0, r7, #1
 800e0d6:	d1d6      	bne.n	800e086 <_vfiprintf_r+0x19a>
 800e0d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0da:	07d9      	lsls	r1, r3, #31
 800e0dc:	d405      	bmi.n	800e0ea <_vfiprintf_r+0x1fe>
 800e0de:	89ab      	ldrh	r3, [r5, #12]
 800e0e0:	059a      	lsls	r2, r3, #22
 800e0e2:	d402      	bmi.n	800e0ea <_vfiprintf_r+0x1fe>
 800e0e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0e6:	f7ff fda9 	bl	800dc3c <__retarget_lock_release_recursive>
 800e0ea:	89ab      	ldrh	r3, [r5, #12]
 800e0ec:	065b      	lsls	r3, r3, #25
 800e0ee:	f53f af1f 	bmi.w	800df30 <_vfiprintf_r+0x44>
 800e0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0f4:	e71e      	b.n	800df34 <_vfiprintf_r+0x48>
 800e0f6:	ab03      	add	r3, sp, #12
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	462a      	mov	r2, r5
 800e0fc:	4b05      	ldr	r3, [pc, #20]	@ (800e114 <_vfiprintf_r+0x228>)
 800e0fe:	a904      	add	r1, sp, #16
 800e100:	4630      	mov	r0, r6
 800e102:	f000 f879 	bl	800e1f8 <_printf_i>
 800e106:	e7e4      	b.n	800e0d2 <_vfiprintf_r+0x1e6>
 800e108:	0800ea97 	.word	0x0800ea97
 800e10c:	0800eaa1 	.word	0x0800eaa1
 800e110:	00000000 	.word	0x00000000
 800e114:	0800dec7 	.word	0x0800dec7
 800e118:	0800ea9d 	.word	0x0800ea9d

0800e11c <_printf_common>:
 800e11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e120:	4616      	mov	r6, r2
 800e122:	4698      	mov	r8, r3
 800e124:	688a      	ldr	r2, [r1, #8]
 800e126:	690b      	ldr	r3, [r1, #16]
 800e128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e12c:	4293      	cmp	r3, r2
 800e12e:	bfb8      	it	lt
 800e130:	4613      	movlt	r3, r2
 800e132:	6033      	str	r3, [r6, #0]
 800e134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e138:	4607      	mov	r7, r0
 800e13a:	460c      	mov	r4, r1
 800e13c:	b10a      	cbz	r2, 800e142 <_printf_common+0x26>
 800e13e:	3301      	adds	r3, #1
 800e140:	6033      	str	r3, [r6, #0]
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	0699      	lsls	r1, r3, #26
 800e146:	bf42      	ittt	mi
 800e148:	6833      	ldrmi	r3, [r6, #0]
 800e14a:	3302      	addmi	r3, #2
 800e14c:	6033      	strmi	r3, [r6, #0]
 800e14e:	6825      	ldr	r5, [r4, #0]
 800e150:	f015 0506 	ands.w	r5, r5, #6
 800e154:	d106      	bne.n	800e164 <_printf_common+0x48>
 800e156:	f104 0a19 	add.w	sl, r4, #25
 800e15a:	68e3      	ldr	r3, [r4, #12]
 800e15c:	6832      	ldr	r2, [r6, #0]
 800e15e:	1a9b      	subs	r3, r3, r2
 800e160:	42ab      	cmp	r3, r5
 800e162:	dc26      	bgt.n	800e1b2 <_printf_common+0x96>
 800e164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e168:	6822      	ldr	r2, [r4, #0]
 800e16a:	3b00      	subs	r3, #0
 800e16c:	bf18      	it	ne
 800e16e:	2301      	movne	r3, #1
 800e170:	0692      	lsls	r2, r2, #26
 800e172:	d42b      	bmi.n	800e1cc <_printf_common+0xb0>
 800e174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e178:	4641      	mov	r1, r8
 800e17a:	4638      	mov	r0, r7
 800e17c:	47c8      	blx	r9
 800e17e:	3001      	adds	r0, #1
 800e180:	d01e      	beq.n	800e1c0 <_printf_common+0xa4>
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	6922      	ldr	r2, [r4, #16]
 800e186:	f003 0306 	and.w	r3, r3, #6
 800e18a:	2b04      	cmp	r3, #4
 800e18c:	bf02      	ittt	eq
 800e18e:	68e5      	ldreq	r5, [r4, #12]
 800e190:	6833      	ldreq	r3, [r6, #0]
 800e192:	1aed      	subeq	r5, r5, r3
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	bf0c      	ite	eq
 800e198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e19c:	2500      	movne	r5, #0
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	bfc4      	itt	gt
 800e1a2:	1a9b      	subgt	r3, r3, r2
 800e1a4:	18ed      	addgt	r5, r5, r3
 800e1a6:	2600      	movs	r6, #0
 800e1a8:	341a      	adds	r4, #26
 800e1aa:	42b5      	cmp	r5, r6
 800e1ac:	d11a      	bne.n	800e1e4 <_printf_common+0xc8>
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	e008      	b.n	800e1c4 <_printf_common+0xa8>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	4652      	mov	r2, sl
 800e1b6:	4641      	mov	r1, r8
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	47c8      	blx	r9
 800e1bc:	3001      	adds	r0, #1
 800e1be:	d103      	bne.n	800e1c8 <_printf_common+0xac>
 800e1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c8:	3501      	adds	r5, #1
 800e1ca:	e7c6      	b.n	800e15a <_printf_common+0x3e>
 800e1cc:	18e1      	adds	r1, r4, r3
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	2030      	movs	r0, #48	@ 0x30
 800e1d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e1d6:	4422      	add	r2, r4
 800e1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e1dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	e7c7      	b.n	800e174 <_printf_common+0x58>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	4622      	mov	r2, r4
 800e1e8:	4641      	mov	r1, r8
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	47c8      	blx	r9
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	d0e6      	beq.n	800e1c0 <_printf_common+0xa4>
 800e1f2:	3601      	adds	r6, #1
 800e1f4:	e7d9      	b.n	800e1aa <_printf_common+0x8e>
	...

0800e1f8 <_printf_i>:
 800e1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1fc:	7e0f      	ldrb	r7, [r1, #24]
 800e1fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e200:	2f78      	cmp	r7, #120	@ 0x78
 800e202:	4691      	mov	r9, r2
 800e204:	4680      	mov	r8, r0
 800e206:	460c      	mov	r4, r1
 800e208:	469a      	mov	sl, r3
 800e20a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e20e:	d807      	bhi.n	800e220 <_printf_i+0x28>
 800e210:	2f62      	cmp	r7, #98	@ 0x62
 800e212:	d80a      	bhi.n	800e22a <_printf_i+0x32>
 800e214:	2f00      	cmp	r7, #0
 800e216:	f000 80d2 	beq.w	800e3be <_printf_i+0x1c6>
 800e21a:	2f58      	cmp	r7, #88	@ 0x58
 800e21c:	f000 80b9 	beq.w	800e392 <_printf_i+0x19a>
 800e220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e228:	e03a      	b.n	800e2a0 <_printf_i+0xa8>
 800e22a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e22e:	2b15      	cmp	r3, #21
 800e230:	d8f6      	bhi.n	800e220 <_printf_i+0x28>
 800e232:	a101      	add	r1, pc, #4	@ (adr r1, 800e238 <_printf_i+0x40>)
 800e234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e238:	0800e291 	.word	0x0800e291
 800e23c:	0800e2a5 	.word	0x0800e2a5
 800e240:	0800e221 	.word	0x0800e221
 800e244:	0800e221 	.word	0x0800e221
 800e248:	0800e221 	.word	0x0800e221
 800e24c:	0800e221 	.word	0x0800e221
 800e250:	0800e2a5 	.word	0x0800e2a5
 800e254:	0800e221 	.word	0x0800e221
 800e258:	0800e221 	.word	0x0800e221
 800e25c:	0800e221 	.word	0x0800e221
 800e260:	0800e221 	.word	0x0800e221
 800e264:	0800e3a5 	.word	0x0800e3a5
 800e268:	0800e2cf 	.word	0x0800e2cf
 800e26c:	0800e35f 	.word	0x0800e35f
 800e270:	0800e221 	.word	0x0800e221
 800e274:	0800e221 	.word	0x0800e221
 800e278:	0800e3c7 	.word	0x0800e3c7
 800e27c:	0800e221 	.word	0x0800e221
 800e280:	0800e2cf 	.word	0x0800e2cf
 800e284:	0800e221 	.word	0x0800e221
 800e288:	0800e221 	.word	0x0800e221
 800e28c:	0800e367 	.word	0x0800e367
 800e290:	6833      	ldr	r3, [r6, #0]
 800e292:	1d1a      	adds	r2, r3, #4
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	6032      	str	r2, [r6, #0]
 800e298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e29c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e09d      	b.n	800e3e0 <_printf_i+0x1e8>
 800e2a4:	6833      	ldr	r3, [r6, #0]
 800e2a6:	6820      	ldr	r0, [r4, #0]
 800e2a8:	1d19      	adds	r1, r3, #4
 800e2aa:	6031      	str	r1, [r6, #0]
 800e2ac:	0606      	lsls	r6, r0, #24
 800e2ae:	d501      	bpl.n	800e2b4 <_printf_i+0xbc>
 800e2b0:	681d      	ldr	r5, [r3, #0]
 800e2b2:	e003      	b.n	800e2bc <_printf_i+0xc4>
 800e2b4:	0645      	lsls	r5, r0, #25
 800e2b6:	d5fb      	bpl.n	800e2b0 <_printf_i+0xb8>
 800e2b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2bc:	2d00      	cmp	r5, #0
 800e2be:	da03      	bge.n	800e2c8 <_printf_i+0xd0>
 800e2c0:	232d      	movs	r3, #45	@ 0x2d
 800e2c2:	426d      	negs	r5, r5
 800e2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2c8:	4859      	ldr	r0, [pc, #356]	@ (800e430 <_printf_i+0x238>)
 800e2ca:	230a      	movs	r3, #10
 800e2cc:	e011      	b.n	800e2f2 <_printf_i+0xfa>
 800e2ce:	6821      	ldr	r1, [r4, #0]
 800e2d0:	6833      	ldr	r3, [r6, #0]
 800e2d2:	0608      	lsls	r0, r1, #24
 800e2d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e2d8:	d402      	bmi.n	800e2e0 <_printf_i+0xe8>
 800e2da:	0649      	lsls	r1, r1, #25
 800e2dc:	bf48      	it	mi
 800e2de:	b2ad      	uxthmi	r5, r5
 800e2e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e2e2:	4853      	ldr	r0, [pc, #332]	@ (800e430 <_printf_i+0x238>)
 800e2e4:	6033      	str	r3, [r6, #0]
 800e2e6:	bf14      	ite	ne
 800e2e8:	230a      	movne	r3, #10
 800e2ea:	2308      	moveq	r3, #8
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e2f2:	6866      	ldr	r6, [r4, #4]
 800e2f4:	60a6      	str	r6, [r4, #8]
 800e2f6:	2e00      	cmp	r6, #0
 800e2f8:	bfa2      	ittt	ge
 800e2fa:	6821      	ldrge	r1, [r4, #0]
 800e2fc:	f021 0104 	bicge.w	r1, r1, #4
 800e300:	6021      	strge	r1, [r4, #0]
 800e302:	b90d      	cbnz	r5, 800e308 <_printf_i+0x110>
 800e304:	2e00      	cmp	r6, #0
 800e306:	d04b      	beq.n	800e3a0 <_printf_i+0x1a8>
 800e308:	4616      	mov	r6, r2
 800e30a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e30e:	fb03 5711 	mls	r7, r3, r1, r5
 800e312:	5dc7      	ldrb	r7, [r0, r7]
 800e314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e318:	462f      	mov	r7, r5
 800e31a:	42bb      	cmp	r3, r7
 800e31c:	460d      	mov	r5, r1
 800e31e:	d9f4      	bls.n	800e30a <_printf_i+0x112>
 800e320:	2b08      	cmp	r3, #8
 800e322:	d10b      	bne.n	800e33c <_printf_i+0x144>
 800e324:	6823      	ldr	r3, [r4, #0]
 800e326:	07df      	lsls	r7, r3, #31
 800e328:	d508      	bpl.n	800e33c <_printf_i+0x144>
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	6861      	ldr	r1, [r4, #4]
 800e32e:	4299      	cmp	r1, r3
 800e330:	bfde      	ittt	le
 800e332:	2330      	movle	r3, #48	@ 0x30
 800e334:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e33c:	1b92      	subs	r2, r2, r6
 800e33e:	6122      	str	r2, [r4, #16]
 800e340:	f8cd a000 	str.w	sl, [sp]
 800e344:	464b      	mov	r3, r9
 800e346:	aa03      	add	r2, sp, #12
 800e348:	4621      	mov	r1, r4
 800e34a:	4640      	mov	r0, r8
 800e34c:	f7ff fee6 	bl	800e11c <_printf_common>
 800e350:	3001      	adds	r0, #1
 800e352:	d14a      	bne.n	800e3ea <_printf_i+0x1f2>
 800e354:	f04f 30ff 	mov.w	r0, #4294967295
 800e358:	b004      	add	sp, #16
 800e35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	f043 0320 	orr.w	r3, r3, #32
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	4833      	ldr	r0, [pc, #204]	@ (800e434 <_printf_i+0x23c>)
 800e368:	2778      	movs	r7, #120	@ 0x78
 800e36a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	6831      	ldr	r1, [r6, #0]
 800e372:	061f      	lsls	r7, r3, #24
 800e374:	f851 5b04 	ldr.w	r5, [r1], #4
 800e378:	d402      	bmi.n	800e380 <_printf_i+0x188>
 800e37a:	065f      	lsls	r7, r3, #25
 800e37c:	bf48      	it	mi
 800e37e:	b2ad      	uxthmi	r5, r5
 800e380:	6031      	str	r1, [r6, #0]
 800e382:	07d9      	lsls	r1, r3, #31
 800e384:	bf44      	itt	mi
 800e386:	f043 0320 	orrmi.w	r3, r3, #32
 800e38a:	6023      	strmi	r3, [r4, #0]
 800e38c:	b11d      	cbz	r5, 800e396 <_printf_i+0x19e>
 800e38e:	2310      	movs	r3, #16
 800e390:	e7ac      	b.n	800e2ec <_printf_i+0xf4>
 800e392:	4827      	ldr	r0, [pc, #156]	@ (800e430 <_printf_i+0x238>)
 800e394:	e7e9      	b.n	800e36a <_printf_i+0x172>
 800e396:	6823      	ldr	r3, [r4, #0]
 800e398:	f023 0320 	bic.w	r3, r3, #32
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	e7f6      	b.n	800e38e <_printf_i+0x196>
 800e3a0:	4616      	mov	r6, r2
 800e3a2:	e7bd      	b.n	800e320 <_printf_i+0x128>
 800e3a4:	6833      	ldr	r3, [r6, #0]
 800e3a6:	6825      	ldr	r5, [r4, #0]
 800e3a8:	6961      	ldr	r1, [r4, #20]
 800e3aa:	1d18      	adds	r0, r3, #4
 800e3ac:	6030      	str	r0, [r6, #0]
 800e3ae:	062e      	lsls	r6, r5, #24
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	d501      	bpl.n	800e3b8 <_printf_i+0x1c0>
 800e3b4:	6019      	str	r1, [r3, #0]
 800e3b6:	e002      	b.n	800e3be <_printf_i+0x1c6>
 800e3b8:	0668      	lsls	r0, r5, #25
 800e3ba:	d5fb      	bpl.n	800e3b4 <_printf_i+0x1bc>
 800e3bc:	8019      	strh	r1, [r3, #0]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	6123      	str	r3, [r4, #16]
 800e3c2:	4616      	mov	r6, r2
 800e3c4:	e7bc      	b.n	800e340 <_printf_i+0x148>
 800e3c6:	6833      	ldr	r3, [r6, #0]
 800e3c8:	1d1a      	adds	r2, r3, #4
 800e3ca:	6032      	str	r2, [r6, #0]
 800e3cc:	681e      	ldr	r6, [r3, #0]
 800e3ce:	6862      	ldr	r2, [r4, #4]
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7f1 ff04 	bl	80001e0 <memchr>
 800e3d8:	b108      	cbz	r0, 800e3de <_printf_i+0x1e6>
 800e3da:	1b80      	subs	r0, r0, r6
 800e3dc:	6060      	str	r0, [r4, #4]
 800e3de:	6863      	ldr	r3, [r4, #4]
 800e3e0:	6123      	str	r3, [r4, #16]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3e8:	e7aa      	b.n	800e340 <_printf_i+0x148>
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	4632      	mov	r2, r6
 800e3ee:	4649      	mov	r1, r9
 800e3f0:	4640      	mov	r0, r8
 800e3f2:	47d0      	blx	sl
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	d0ad      	beq.n	800e354 <_printf_i+0x15c>
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	079b      	lsls	r3, r3, #30
 800e3fc:	d413      	bmi.n	800e426 <_printf_i+0x22e>
 800e3fe:	68e0      	ldr	r0, [r4, #12]
 800e400:	9b03      	ldr	r3, [sp, #12]
 800e402:	4298      	cmp	r0, r3
 800e404:	bfb8      	it	lt
 800e406:	4618      	movlt	r0, r3
 800e408:	e7a6      	b.n	800e358 <_printf_i+0x160>
 800e40a:	2301      	movs	r3, #1
 800e40c:	4632      	mov	r2, r6
 800e40e:	4649      	mov	r1, r9
 800e410:	4640      	mov	r0, r8
 800e412:	47d0      	blx	sl
 800e414:	3001      	adds	r0, #1
 800e416:	d09d      	beq.n	800e354 <_printf_i+0x15c>
 800e418:	3501      	adds	r5, #1
 800e41a:	68e3      	ldr	r3, [r4, #12]
 800e41c:	9903      	ldr	r1, [sp, #12]
 800e41e:	1a5b      	subs	r3, r3, r1
 800e420:	42ab      	cmp	r3, r5
 800e422:	dcf2      	bgt.n	800e40a <_printf_i+0x212>
 800e424:	e7eb      	b.n	800e3fe <_printf_i+0x206>
 800e426:	2500      	movs	r5, #0
 800e428:	f104 0619 	add.w	r6, r4, #25
 800e42c:	e7f5      	b.n	800e41a <_printf_i+0x222>
 800e42e:	bf00      	nop
 800e430:	0800eaa8 	.word	0x0800eaa8
 800e434:	0800eab9 	.word	0x0800eab9

0800e438 <__sflush_r>:
 800e438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e440:	0716      	lsls	r6, r2, #28
 800e442:	4605      	mov	r5, r0
 800e444:	460c      	mov	r4, r1
 800e446:	d454      	bmi.n	800e4f2 <__sflush_r+0xba>
 800e448:	684b      	ldr	r3, [r1, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	dc02      	bgt.n	800e454 <__sflush_r+0x1c>
 800e44e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e450:	2b00      	cmp	r3, #0
 800e452:	dd48      	ble.n	800e4e6 <__sflush_r+0xae>
 800e454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e456:	2e00      	cmp	r6, #0
 800e458:	d045      	beq.n	800e4e6 <__sflush_r+0xae>
 800e45a:	2300      	movs	r3, #0
 800e45c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e460:	682f      	ldr	r7, [r5, #0]
 800e462:	6a21      	ldr	r1, [r4, #32]
 800e464:	602b      	str	r3, [r5, #0]
 800e466:	d030      	beq.n	800e4ca <__sflush_r+0x92>
 800e468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e46a:	89a3      	ldrh	r3, [r4, #12]
 800e46c:	0759      	lsls	r1, r3, #29
 800e46e:	d505      	bpl.n	800e47c <__sflush_r+0x44>
 800e470:	6863      	ldr	r3, [r4, #4]
 800e472:	1ad2      	subs	r2, r2, r3
 800e474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e476:	b10b      	cbz	r3, 800e47c <__sflush_r+0x44>
 800e478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e47a:	1ad2      	subs	r2, r2, r3
 800e47c:	2300      	movs	r3, #0
 800e47e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e480:	6a21      	ldr	r1, [r4, #32]
 800e482:	4628      	mov	r0, r5
 800e484:	47b0      	blx	r6
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	d106      	bne.n	800e49a <__sflush_r+0x62>
 800e48c:	6829      	ldr	r1, [r5, #0]
 800e48e:	291d      	cmp	r1, #29
 800e490:	d82b      	bhi.n	800e4ea <__sflush_r+0xb2>
 800e492:	4a2a      	ldr	r2, [pc, #168]	@ (800e53c <__sflush_r+0x104>)
 800e494:	410a      	asrs	r2, r1
 800e496:	07d6      	lsls	r6, r2, #31
 800e498:	d427      	bmi.n	800e4ea <__sflush_r+0xb2>
 800e49a:	2200      	movs	r2, #0
 800e49c:	6062      	str	r2, [r4, #4]
 800e49e:	04d9      	lsls	r1, r3, #19
 800e4a0:	6922      	ldr	r2, [r4, #16]
 800e4a2:	6022      	str	r2, [r4, #0]
 800e4a4:	d504      	bpl.n	800e4b0 <__sflush_r+0x78>
 800e4a6:	1c42      	adds	r2, r0, #1
 800e4a8:	d101      	bne.n	800e4ae <__sflush_r+0x76>
 800e4aa:	682b      	ldr	r3, [r5, #0]
 800e4ac:	b903      	cbnz	r3, 800e4b0 <__sflush_r+0x78>
 800e4ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4b2:	602f      	str	r7, [r5, #0]
 800e4b4:	b1b9      	cbz	r1, 800e4e6 <__sflush_r+0xae>
 800e4b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4ba:	4299      	cmp	r1, r3
 800e4bc:	d002      	beq.n	800e4c4 <__sflush_r+0x8c>
 800e4be:	4628      	mov	r0, r5
 800e4c0:	f7ff fbea 	bl	800dc98 <_free_r>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4c8:	e00d      	b.n	800e4e6 <__sflush_r+0xae>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	47b0      	blx	r6
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	1c50      	adds	r0, r2, #1
 800e4d4:	d1c9      	bne.n	800e46a <__sflush_r+0x32>
 800e4d6:	682b      	ldr	r3, [r5, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d0c6      	beq.n	800e46a <__sflush_r+0x32>
 800e4dc:	2b1d      	cmp	r3, #29
 800e4de:	d001      	beq.n	800e4e4 <__sflush_r+0xac>
 800e4e0:	2b16      	cmp	r3, #22
 800e4e2:	d11e      	bne.n	800e522 <__sflush_r+0xea>
 800e4e4:	602f      	str	r7, [r5, #0]
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	e022      	b.n	800e530 <__sflush_r+0xf8>
 800e4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ee:	b21b      	sxth	r3, r3
 800e4f0:	e01b      	b.n	800e52a <__sflush_r+0xf2>
 800e4f2:	690f      	ldr	r7, [r1, #16]
 800e4f4:	2f00      	cmp	r7, #0
 800e4f6:	d0f6      	beq.n	800e4e6 <__sflush_r+0xae>
 800e4f8:	0793      	lsls	r3, r2, #30
 800e4fa:	680e      	ldr	r6, [r1, #0]
 800e4fc:	bf08      	it	eq
 800e4fe:	694b      	ldreq	r3, [r1, #20]
 800e500:	600f      	str	r7, [r1, #0]
 800e502:	bf18      	it	ne
 800e504:	2300      	movne	r3, #0
 800e506:	eba6 0807 	sub.w	r8, r6, r7
 800e50a:	608b      	str	r3, [r1, #8]
 800e50c:	f1b8 0f00 	cmp.w	r8, #0
 800e510:	dde9      	ble.n	800e4e6 <__sflush_r+0xae>
 800e512:	6a21      	ldr	r1, [r4, #32]
 800e514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e516:	4643      	mov	r3, r8
 800e518:	463a      	mov	r2, r7
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b0      	blx	r6
 800e51e:	2800      	cmp	r0, #0
 800e520:	dc08      	bgt.n	800e534 <__sflush_r+0xfc>
 800e522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e52a:	81a3      	strh	r3, [r4, #12]
 800e52c:	f04f 30ff 	mov.w	r0, #4294967295
 800e530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e534:	4407      	add	r7, r0
 800e536:	eba8 0800 	sub.w	r8, r8, r0
 800e53a:	e7e7      	b.n	800e50c <__sflush_r+0xd4>
 800e53c:	dfbffffe 	.word	0xdfbffffe

0800e540 <_fflush_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	690b      	ldr	r3, [r1, #16]
 800e544:	4605      	mov	r5, r0
 800e546:	460c      	mov	r4, r1
 800e548:	b913      	cbnz	r3, 800e550 <_fflush_r+0x10>
 800e54a:	2500      	movs	r5, #0
 800e54c:	4628      	mov	r0, r5
 800e54e:	bd38      	pop	{r3, r4, r5, pc}
 800e550:	b118      	cbz	r0, 800e55a <_fflush_r+0x1a>
 800e552:	6a03      	ldr	r3, [r0, #32]
 800e554:	b90b      	cbnz	r3, 800e55a <_fflush_r+0x1a>
 800e556:	f7ff f979 	bl	800d84c <__sinit>
 800e55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0f3      	beq.n	800e54a <_fflush_r+0xa>
 800e562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e564:	07d0      	lsls	r0, r2, #31
 800e566:	d404      	bmi.n	800e572 <_fflush_r+0x32>
 800e568:	0599      	lsls	r1, r3, #22
 800e56a:	d402      	bmi.n	800e572 <_fflush_r+0x32>
 800e56c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e56e:	f7ff fb64 	bl	800dc3a <__retarget_lock_acquire_recursive>
 800e572:	4628      	mov	r0, r5
 800e574:	4621      	mov	r1, r4
 800e576:	f7ff ff5f 	bl	800e438 <__sflush_r>
 800e57a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e57c:	07da      	lsls	r2, r3, #31
 800e57e:	4605      	mov	r5, r0
 800e580:	d4e4      	bmi.n	800e54c <_fflush_r+0xc>
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	059b      	lsls	r3, r3, #22
 800e586:	d4e1      	bmi.n	800e54c <_fflush_r+0xc>
 800e588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e58a:	f7ff fb57 	bl	800dc3c <__retarget_lock_release_recursive>
 800e58e:	e7dd      	b.n	800e54c <_fflush_r+0xc>

0800e590 <fiprintf>:
 800e590:	b40e      	push	{r1, r2, r3}
 800e592:	b503      	push	{r0, r1, lr}
 800e594:	4601      	mov	r1, r0
 800e596:	ab03      	add	r3, sp, #12
 800e598:	4805      	ldr	r0, [pc, #20]	@ (800e5b0 <fiprintf+0x20>)
 800e59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59e:	6800      	ldr	r0, [r0, #0]
 800e5a0:	9301      	str	r3, [sp, #4]
 800e5a2:	f7ff fca3 	bl	800deec <_vfiprintf_r>
 800e5a6:	b002      	add	sp, #8
 800e5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5ac:	b003      	add	sp, #12
 800e5ae:	4770      	bx	lr
 800e5b0:	20000070 	.word	0x20000070

0800e5b4 <__swhatbuf_r>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5bc:	2900      	cmp	r1, #0
 800e5be:	b096      	sub	sp, #88	@ 0x58
 800e5c0:	4615      	mov	r5, r2
 800e5c2:	461e      	mov	r6, r3
 800e5c4:	da0d      	bge.n	800e5e2 <__swhatbuf_r+0x2e>
 800e5c6:	89a3      	ldrh	r3, [r4, #12]
 800e5c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5cc:	f04f 0100 	mov.w	r1, #0
 800e5d0:	bf14      	ite	ne
 800e5d2:	2340      	movne	r3, #64	@ 0x40
 800e5d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5d8:	2000      	movs	r0, #0
 800e5da:	6031      	str	r1, [r6, #0]
 800e5dc:	602b      	str	r3, [r5, #0]
 800e5de:	b016      	add	sp, #88	@ 0x58
 800e5e0:	bd70      	pop	{r4, r5, r6, pc}
 800e5e2:	466a      	mov	r2, sp
 800e5e4:	f000 f848 	bl	800e678 <_fstat_r>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	dbec      	blt.n	800e5c6 <__swhatbuf_r+0x12>
 800e5ec:	9901      	ldr	r1, [sp, #4]
 800e5ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5f6:	4259      	negs	r1, r3
 800e5f8:	4159      	adcs	r1, r3
 800e5fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5fe:	e7eb      	b.n	800e5d8 <__swhatbuf_r+0x24>

0800e600 <__smakebuf_r>:
 800e600:	898b      	ldrh	r3, [r1, #12]
 800e602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e604:	079d      	lsls	r5, r3, #30
 800e606:	4606      	mov	r6, r0
 800e608:	460c      	mov	r4, r1
 800e60a:	d507      	bpl.n	800e61c <__smakebuf_r+0x1c>
 800e60c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e610:	6023      	str	r3, [r4, #0]
 800e612:	6123      	str	r3, [r4, #16]
 800e614:	2301      	movs	r3, #1
 800e616:	6163      	str	r3, [r4, #20]
 800e618:	b003      	add	sp, #12
 800e61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e61c:	ab01      	add	r3, sp, #4
 800e61e:	466a      	mov	r2, sp
 800e620:	f7ff ffc8 	bl	800e5b4 <__swhatbuf_r>
 800e624:	9f00      	ldr	r7, [sp, #0]
 800e626:	4605      	mov	r5, r0
 800e628:	4639      	mov	r1, r7
 800e62a:	4630      	mov	r0, r6
 800e62c:	f7ff fba8 	bl	800dd80 <_malloc_r>
 800e630:	b948      	cbnz	r0, 800e646 <__smakebuf_r+0x46>
 800e632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e636:	059a      	lsls	r2, r3, #22
 800e638:	d4ee      	bmi.n	800e618 <__smakebuf_r+0x18>
 800e63a:	f023 0303 	bic.w	r3, r3, #3
 800e63e:	f043 0302 	orr.w	r3, r3, #2
 800e642:	81a3      	strh	r3, [r4, #12]
 800e644:	e7e2      	b.n	800e60c <__smakebuf_r+0xc>
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	6020      	str	r0, [r4, #0]
 800e64a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e64e:	81a3      	strh	r3, [r4, #12]
 800e650:	9b01      	ldr	r3, [sp, #4]
 800e652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e656:	b15b      	cbz	r3, 800e670 <__smakebuf_r+0x70>
 800e658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e65c:	4630      	mov	r0, r6
 800e65e:	f000 f81d 	bl	800e69c <_isatty_r>
 800e662:	b128      	cbz	r0, 800e670 <__smakebuf_r+0x70>
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	f023 0303 	bic.w	r3, r3, #3
 800e66a:	f043 0301 	orr.w	r3, r3, #1
 800e66e:	81a3      	strh	r3, [r4, #12]
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	431d      	orrs	r5, r3
 800e674:	81a5      	strh	r5, [r4, #12]
 800e676:	e7cf      	b.n	800e618 <__smakebuf_r+0x18>

0800e678 <_fstat_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	4d07      	ldr	r5, [pc, #28]	@ (800e698 <_fstat_r+0x20>)
 800e67c:	2300      	movs	r3, #0
 800e67e:	4604      	mov	r4, r0
 800e680:	4608      	mov	r0, r1
 800e682:	4611      	mov	r1, r2
 800e684:	602b      	str	r3, [r5, #0]
 800e686:	f7f3 ffc5 	bl	8002614 <_fstat>
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	d102      	bne.n	800e694 <_fstat_r+0x1c>
 800e68e:	682b      	ldr	r3, [r5, #0]
 800e690:	b103      	cbz	r3, 800e694 <_fstat_r+0x1c>
 800e692:	6023      	str	r3, [r4, #0]
 800e694:	bd38      	pop	{r3, r4, r5, pc}
 800e696:	bf00      	nop
 800e698:	20004370 	.word	0x20004370

0800e69c <_isatty_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4d06      	ldr	r5, [pc, #24]	@ (800e6b8 <_isatty_r+0x1c>)
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	4608      	mov	r0, r1
 800e6a6:	602b      	str	r3, [r5, #0]
 800e6a8:	f7f3 ffc4 	bl	8002634 <_isatty>
 800e6ac:	1c43      	adds	r3, r0, #1
 800e6ae:	d102      	bne.n	800e6b6 <_isatty_r+0x1a>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	b103      	cbz	r3, 800e6b6 <_isatty_r+0x1a>
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	20004370 	.word	0x20004370

0800e6bc <_sbrk_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4d06      	ldr	r5, [pc, #24]	@ (800e6d8 <_sbrk_r+0x1c>)
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	4608      	mov	r0, r1
 800e6c6:	602b      	str	r3, [r5, #0]
 800e6c8:	f7f3 ffcc 	bl	8002664 <_sbrk>
 800e6cc:	1c43      	adds	r3, r0, #1
 800e6ce:	d102      	bne.n	800e6d6 <_sbrk_r+0x1a>
 800e6d0:	682b      	ldr	r3, [r5, #0]
 800e6d2:	b103      	cbz	r3, 800e6d6 <_sbrk_r+0x1a>
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}
 800e6d8:	20004370 	.word	0x20004370

0800e6dc <abort>:
 800e6dc:	b508      	push	{r3, lr}
 800e6de:	2006      	movs	r0, #6
 800e6e0:	f000 f82c 	bl	800e73c <raise>
 800e6e4:	2001      	movs	r0, #1
 800e6e6:	f7f3 ff45 	bl	8002574 <_exit>

0800e6ea <_raise_r>:
 800e6ea:	291f      	cmp	r1, #31
 800e6ec:	b538      	push	{r3, r4, r5, lr}
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	460c      	mov	r4, r1
 800e6f2:	d904      	bls.n	800e6fe <_raise_r+0x14>
 800e6f4:	2316      	movs	r3, #22
 800e6f6:	6003      	str	r3, [r0, #0]
 800e6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6fc:	bd38      	pop	{r3, r4, r5, pc}
 800e6fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e700:	b112      	cbz	r2, 800e708 <_raise_r+0x1e>
 800e702:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e706:	b94b      	cbnz	r3, 800e71c <_raise_r+0x32>
 800e708:	4628      	mov	r0, r5
 800e70a:	f000 f831 	bl	800e770 <_getpid_r>
 800e70e:	4622      	mov	r2, r4
 800e710:	4601      	mov	r1, r0
 800e712:	4628      	mov	r0, r5
 800e714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e718:	f000 b818 	b.w	800e74c <_kill_r>
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d00a      	beq.n	800e736 <_raise_r+0x4c>
 800e720:	1c59      	adds	r1, r3, #1
 800e722:	d103      	bne.n	800e72c <_raise_r+0x42>
 800e724:	2316      	movs	r3, #22
 800e726:	6003      	str	r3, [r0, #0]
 800e728:	2001      	movs	r0, #1
 800e72a:	e7e7      	b.n	800e6fc <_raise_r+0x12>
 800e72c:	2100      	movs	r1, #0
 800e72e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e732:	4620      	mov	r0, r4
 800e734:	4798      	blx	r3
 800e736:	2000      	movs	r0, #0
 800e738:	e7e0      	b.n	800e6fc <_raise_r+0x12>
	...

0800e73c <raise>:
 800e73c:	4b02      	ldr	r3, [pc, #8]	@ (800e748 <raise+0xc>)
 800e73e:	4601      	mov	r1, r0
 800e740:	6818      	ldr	r0, [r3, #0]
 800e742:	f7ff bfd2 	b.w	800e6ea <_raise_r>
 800e746:	bf00      	nop
 800e748:	20000070 	.word	0x20000070

0800e74c <_kill_r>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	4d07      	ldr	r5, [pc, #28]	@ (800e76c <_kill_r+0x20>)
 800e750:	2300      	movs	r3, #0
 800e752:	4604      	mov	r4, r0
 800e754:	4608      	mov	r0, r1
 800e756:	4611      	mov	r1, r2
 800e758:	602b      	str	r3, [r5, #0]
 800e75a:	f7f3 fefb 	bl	8002554 <_kill>
 800e75e:	1c43      	adds	r3, r0, #1
 800e760:	d102      	bne.n	800e768 <_kill_r+0x1c>
 800e762:	682b      	ldr	r3, [r5, #0]
 800e764:	b103      	cbz	r3, 800e768 <_kill_r+0x1c>
 800e766:	6023      	str	r3, [r4, #0]
 800e768:	bd38      	pop	{r3, r4, r5, pc}
 800e76a:	bf00      	nop
 800e76c:	20004370 	.word	0x20004370

0800e770 <_getpid_r>:
 800e770:	f7f3 bee8 	b.w	8002544 <_getpid>

0800e774 <_init>:
 800e774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e776:	bf00      	nop
 800e778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e77a:	bc08      	pop	{r3}
 800e77c:	469e      	mov	lr, r3
 800e77e:	4770      	bx	lr

0800e780 <_fini>:
 800e780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e782:	bf00      	nop
 800e784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e786:	bc08      	pop	{r3}
 800e788:	469e      	mov	lr, r3
 800e78a:	4770      	bx	lr
