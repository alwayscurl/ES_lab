
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e22c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800e3bc  0800e3bc  0000f3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e63c  0800e63c  00010abc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e63c  0800e63c  0000f63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e644  0800e644  00010abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e644  0800e644  0000f644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e648  0800e648  0000f648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000abc  20000000  0800e64c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000462c  20000abc  0800f108  00010abc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050e8  0800f108  000110e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010abc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000352fa  00000000  00000000  00010aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000728e  00000000  00000000  00045de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e00  00000000  00000000  0004d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002369  00000000  00000000  0004fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031c7b  00000000  00000000  000521e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038f2e  00000000  00000000  00083e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001194df  00000000  00000000  000bcd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001d6269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf98  00000000  00000000  001d6324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001e32bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  001e3310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001e401a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000abc 	.word	0x20000abc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e3a4 	.word	0x0800e3a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000ac0 	.word	0x20000ac0
 80001cc:	0800e3a4 	.word	0x0800e3a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000eee:	4b4e      	ldr	r3, [pc, #312]	@ (8001028 <MX_BlueNRG_MS_Init+0x140>)
 8000ef0:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000ef2:	f000 f8a5 	bl	8001040 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f001 ffa0 	bl	8002e3c <BSP_PB_GetState>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b4a      	ldr	r3, [pc, #296]	@ (800102c <MX_BlueNRG_MS_Init+0x144>)
 8000f02:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f04:	2100      	movs	r1, #0
 8000f06:	484a      	ldr	r0, [pc, #296]	@ (8001030 <MX_BlueNRG_MS_Init+0x148>)
 8000f08:	f008 fc56 	bl	80097b8 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f0c:	1dba      	adds	r2, r7, #6
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f008 fb05 	bl	8009524 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000f1a:	f008 fb47 	bl	80095ac <hci_reset>
  HAL_Delay(100);
 8000f1e:	2064      	movs	r0, #100	@ 0x64
 8000f20:	f002 fcf8 	bl	8003914 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
 8000f26:	2b30      	cmp	r3, #48	@ 0x30
 8000f28:	d902      	bls.n	8000f30 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000f2a:	4b42      	ldr	r3, [pc, #264]	@ (8001034 <MX_BlueNRG_MS_Init+0x14c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000f30:	f107 0209 	add.w	r2, r7, #9
 8000f34:	4b40      	ldr	r3, [pc, #256]	@ (8001038 <MX_BlueNRG_MS_Init+0x150>)
 8000f36:	2106      	movs	r1, #6
 8000f38:	2080      	movs	r0, #128	@ 0x80
 8000f3a:	f008 fa6d 	bl	8009418 <aci_hal_read_config_data>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000f42:	4b3d      	ldr	r3, [pc, #244]	@ (8001038 <MX_BlueNRG_MS_Init+0x150>)
 8000f44:	795b      	ldrb	r3, [r3, #5]
 8000f46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f4c:	d001      	beq.n	8000f52 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000f4e:	bf00      	nop
 8000f50:	e7fd      	b.n	8000f4e <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000f52:	f008 f82d 	bl	8008fb0 <aci_gatt_init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000f5a:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <MX_BlueNRG_MS_Init+0x14c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d110      	bne.n	8000f84 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000f62:	f107 020e 	add.w	r2, r7, #14
 8000f66:	f107 030a 	add.w	r3, r7, #10
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	2207      	movs	r2, #7
 8000f76:	2100      	movs	r1, #0
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f007 ff28 	bl	8008dce <aci_gap_init_IDB05A1>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	e00a      	b.n	8000f9a <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000f84:	f107 030a 	add.w	r3, r7, #10
 8000f88:	f107 020c 	add.w	r2, r7, #12
 8000f8c:	f107 010e 	add.w	r1, r7, #14
 8000f90:	2001      	movs	r0, #1
 8000f92:	f007 ff6c 	bl	8008e6e <aci_gap_init_IDB04A1>
 8000f96:	4603      	mov	r3, r0
 8000f98:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000f9a:	89fc      	ldrh	r4, [r7, #14]
 8000f9c:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff f916 	bl	80001d0 <strlen>
 8000fa4:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4613      	mov	r3, r2
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f008 f973 	bl	800929e <aci_gatt_update_char_value>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000fc2:	bf00      	nop
 8000fc4:	e7fd      	b.n	8000fc2 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9303      	str	r3, [sp, #12]
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_BlueNRG_MS_Init+0x154>)
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f007 ff90 	bl	8008f02 <aci_gap_set_auth_requirement>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000ff0:	f000 f844 	bl	800107c <Add_HWServW2ST_Service>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000ffe:	bf00      	nop
 8001000:	e7fd      	b.n	8000ffe <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8001002:	f000 f90d 	bl	8001220 <Add_SWServW2ST_Service>
 8001006:	4603      	mov	r3, r0
 8001008:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8001014:	2104      	movs	r1, #4
 8001016:	2001      	movs	r0, #1
 8001018:	f008 fa53 	bl	80094c2 <aci_hal_set_tx_power_level>
 800101c:	4603      	mov	r3, r0
 800101e:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bdb0      	pop	{r4, r5, r7, pc}
 8001028:	0800e3bc 	.word	0x0800e3bc
 800102c:	20000000 	.word	0x20000000
 8001030:	08001671 	.word	0x08001671
 8001034:	20000ad8 	.word	0x20000ad8
 8001038:	20000adc 	.word	0x20000adc
 800103c:	0001e240 	.word	0x0001e240

08001040 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001044:	2101      	movs	r1, #1
 8001046:	2000      	movs	r0, #0
 8001048:	f001 fea4 	bl	8002d94 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800104c:	2000      	movs	r0, #0
 800104e:	f001 fe4f 	bl	8002cf0 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8001052:	2000      	movs	r0, #0
 8001054:	f001 ff50 	bl	8002ef8 <BSP_COM_Init>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <BSP_PB_Callback+0x1c>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000ae2 	.word	0x20000ae2

0800107c <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b08d      	sub	sp, #52	@ 0x34
 8001080:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001082:	231b      	movs	r3, #27
 8001084:	713b      	strb	r3, [r7, #4]
 8001086:	23c5      	movs	r3, #197	@ 0xc5
 8001088:	717b      	strb	r3, [r7, #5]
 800108a:	23d5      	movs	r3, #213	@ 0xd5
 800108c:	71bb      	strb	r3, [r7, #6]
 800108e:	23a5      	movs	r3, #165	@ 0xa5
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	2302      	movs	r3, #2
 8001094:	723b      	strb	r3, [r7, #8]
 8001096:	2300      	movs	r3, #0
 8001098:	727b      	strb	r3, [r7, #9]
 800109a:	23b4      	movs	r3, #180	@ 0xb4
 800109c:	72bb      	strb	r3, [r7, #10]
 800109e:	239a      	movs	r3, #154	@ 0x9a
 80010a0:	72fb      	strb	r3, [r7, #11]
 80010a2:	23e1      	movs	r3, #225	@ 0xe1
 80010a4:	733b      	strb	r3, [r7, #12]
 80010a6:	2311      	movs	r3, #17
 80010a8:	737b      	strb	r3, [r7, #13]
 80010aa:	2301      	movs	r3, #1
 80010ac:	73bb      	strb	r3, [r7, #14]
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	2300      	movs	r3, #0
 80010b4:	743b      	strb	r3, [r7, #16]
 80010b6:	2300      	movs	r3, #0
 80010b8:	747b      	strb	r3, [r7, #17]
 80010ba:	2300      	movs	r3, #0
 80010bc:	74bb      	strb	r3, [r7, #18]
 80010be:	2300      	movs	r3, #0
 80010c0:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80010c2:	4b52      	ldr	r3, [pc, #328]	@ (800120c <Add_HWServW2ST_Service+0x190>)
 80010c4:	461c      	mov	r4, r3
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80010ce:	4b50      	ldr	r3, [pc, #320]	@ (8001210 <Add_HWServW2ST_Service+0x194>)
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2310      	movs	r3, #16
 80010d4:	2201      	movs	r2, #1
 80010d6:	494d      	ldr	r1, [pc, #308]	@ (800120c <Add_HWServW2ST_Service+0x190>)
 80010d8:	2002      	movs	r0, #2
 80010da:	f007 ff8c 	bl	8008ff6 <aci_gatt_add_serv>
 80010de:	4603      	mov	r3, r0
 80010e0:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80010e8:	2347      	movs	r3, #71	@ 0x47
 80010ea:	e08a      	b.n	8001202 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80010ec:	231b      	movs	r3, #27
 80010ee:	713b      	strb	r3, [r7, #4]
 80010f0:	23c5      	movs	r3, #197	@ 0xc5
 80010f2:	717b      	strb	r3, [r7, #5]
 80010f4:	23d5      	movs	r3, #213	@ 0xd5
 80010f6:	71bb      	strb	r3, [r7, #6]
 80010f8:	23a5      	movs	r3, #165	@ 0xa5
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	2302      	movs	r3, #2
 80010fe:	723b      	strb	r3, [r7, #8]
 8001100:	2300      	movs	r3, #0
 8001102:	727b      	strb	r3, [r7, #9]
 8001104:	2336      	movs	r3, #54	@ 0x36
 8001106:	72bb      	strb	r3, [r7, #10]
 8001108:	23ac      	movs	r3, #172	@ 0xac
 800110a:	72fb      	strb	r3, [r7, #11]
 800110c:	23e1      	movs	r3, #225	@ 0xe1
 800110e:	733b      	strb	r3, [r7, #12]
 8001110:	2311      	movs	r3, #17
 8001112:	737b      	strb	r3, [r7, #13]
 8001114:	2301      	movs	r3, #1
 8001116:	73bb      	strb	r3, [r7, #14]
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	2300      	movs	r3, #0
 800111e:	743b      	strb	r3, [r7, #16]
 8001120:	2300      	movs	r3, #0
 8001122:	747b      	strb	r3, [r7, #17]
 8001124:	2300      	movs	r3, #0
 8001126:	74bb      	strb	r3, [r7, #18]
 8001128:	2300      	movs	r3, #0
 800112a:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 800112c:	7cbb      	ldrb	r3, [r7, #18]
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	b2db      	uxtb	r3, r3
 8001134:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8001136:	7cbb      	ldrb	r3, [r7, #18]
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	b2db      	uxtb	r3, r3
 800113e:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001140:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <Add_HWServW2ST_Service+0x198>)
 8001142:	461c      	mov	r4, r3
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800114c:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <Add_HWServW2ST_Service+0x194>)
 800114e:	8818      	ldrh	r0, [r3, #0]
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <Add_HWServW2ST_Service+0x19c>)
 8001152:	9305      	str	r3, [sp, #20]
 8001154:	2300      	movs	r3, #0
 8001156:	9304      	str	r3, [sp, #16]
 8001158:	2310      	movs	r3, #16
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	2304      	movs	r3, #4
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2300      	movs	r3, #0
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2312      	movs	r3, #18
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2308      	movs	r3, #8
 800116a:	4a2a      	ldr	r2, [pc, #168]	@ (8001214 <Add_HWServW2ST_Service+0x198>)
 800116c:	2102      	movs	r1, #2
 800116e:	f007 ffcb 	bl	8009108 <aci_gatt_add_char>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 800117c:	2347      	movs	r3, #71	@ 0x47
 800117e:	e040      	b.n	8001202 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001180:	231b      	movs	r3, #27
 8001182:	713b      	strb	r3, [r7, #4]
 8001184:	23c5      	movs	r3, #197	@ 0xc5
 8001186:	717b      	strb	r3, [r7, #5]
 8001188:	23d5      	movs	r3, #213	@ 0xd5
 800118a:	71bb      	strb	r3, [r7, #6]
 800118c:	23a5      	movs	r3, #165	@ 0xa5
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	2302      	movs	r3, #2
 8001192:	723b      	strb	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	727b      	strb	r3, [r7, #9]
 8001198:	2336      	movs	r3, #54	@ 0x36
 800119a:	72bb      	strb	r3, [r7, #10]
 800119c:	23ac      	movs	r3, #172	@ 0xac
 800119e:	72fb      	strb	r3, [r7, #11]
 80011a0:	23e1      	movs	r3, #225	@ 0xe1
 80011a2:	733b      	strb	r3, [r7, #12]
 80011a4:	2311      	movs	r3, #17
 80011a6:	737b      	strb	r3, [r7, #13]
 80011a8:	2301      	movs	r3, #1
 80011aa:	73bb      	strb	r3, [r7, #14]
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	2300      	movs	r3, #0
 80011b2:	743b      	strb	r3, [r7, #16]
 80011b4:	2300      	movs	r3, #0
 80011b6:	747b      	strb	r3, [r7, #17]
 80011b8:	23e0      	movs	r3, #224	@ 0xe0
 80011ba:	74bb      	strb	r3, [r7, #18]
 80011bc:	2300      	movs	r3, #0
 80011be:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <Add_HWServW2ST_Service+0x198>)
 80011c2:	461c      	mov	r4, r3
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <Add_HWServW2ST_Service+0x194>)
 80011ce:	8818      	ldrh	r0, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <Add_HWServW2ST_Service+0x1a0>)
 80011d2:	9305      	str	r3, [sp, #20]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9304      	str	r3, [sp, #16]
 80011d8:	2310      	movs	r3, #16
 80011da:	9303      	str	r3, [sp, #12]
 80011dc:	2304      	movs	r3, #4
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2310      	movs	r3, #16
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2314      	movs	r3, #20
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <Add_HWServW2ST_Service+0x198>)
 80011ec:	2102      	movs	r1, #2
 80011ee:	f007 ff8b 	bl	8009108 <aci_gatt_add_char>
 80011f2:	4603      	mov	r3, r0
 80011f4:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 80011fc:	2347      	movs	r3, #71	@ 0x47
 80011fe:	e000      	b.n	8001202 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	bf00      	nop
 800120c:	20000af0 	.word	0x20000af0
 8001210:	20000ae4 	.word	0x20000ae4
 8001214:	20000b00 	.word	0x20000b00
 8001218:	20000ae6 	.word	0x20000ae6
 800121c:	20000ae8 	.word	0x20000ae8

08001220 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b08d      	sub	sp, #52	@ 0x34
 8001224:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 8001226:	2301      	movs	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800122a:	231b      	movs	r3, #27
 800122c:	703b      	strb	r3, [r7, #0]
 800122e:	23c5      	movs	r3, #197	@ 0xc5
 8001230:	707b      	strb	r3, [r7, #1]
 8001232:	23d5      	movs	r3, #213	@ 0xd5
 8001234:	70bb      	strb	r3, [r7, #2]
 8001236:	23a5      	movs	r3, #165	@ 0xa5
 8001238:	70fb      	strb	r3, [r7, #3]
 800123a:	2302      	movs	r3, #2
 800123c:	713b      	strb	r3, [r7, #4]
 800123e:	2300      	movs	r3, #0
 8001240:	717b      	strb	r3, [r7, #5]
 8001242:	23b4      	movs	r3, #180	@ 0xb4
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	239a      	movs	r3, #154	@ 0x9a
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	23e1      	movs	r3, #225	@ 0xe1
 800124c:	723b      	strb	r3, [r7, #8]
 800124e:	2311      	movs	r3, #17
 8001250:	727b      	strb	r3, [r7, #9]
 8001252:	2302      	movs	r3, #2
 8001254:	72bb      	strb	r3, [r7, #10]
 8001256:	2300      	movs	r3, #0
 8001258:	72fb      	strb	r3, [r7, #11]
 800125a:	2300      	movs	r3, #0
 800125c:	733b      	strb	r3, [r7, #12]
 800125e:	2300      	movs	r3, #0
 8001260:	737b      	strb	r3, [r7, #13]
 8001262:	2300      	movs	r3, #0
 8001264:	73bb      	strb	r3, [r7, #14]
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800126a:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <Add_SWServW2ST_Service+0x110>)
 800126c:	461c      	mov	r4, r3
 800126e:	463b      	mov	r3, r7
 8001270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	0052      	lsls	r2, r2, #1
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3301      	adds	r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4a2b      	ldr	r2, [pc, #172]	@ (8001334 <Add_SWServW2ST_Service+0x114>)
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4928      	ldr	r1, [pc, #160]	@ (8001330 <Add_SWServW2ST_Service+0x110>)
 800128e:	2002      	movs	r0, #2
 8001290:	f007 feb1 	bl	8008ff6 <aci_gatt_add_serv>
 8001294:	4603      	mov	r3, r0
 8001296:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d13f      	bne.n	800131e <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 800129e:	231b      	movs	r3, #27
 80012a0:	703b      	strb	r3, [r7, #0]
 80012a2:	23c5      	movs	r3, #197	@ 0xc5
 80012a4:	707b      	strb	r3, [r7, #1]
 80012a6:	23d5      	movs	r3, #213	@ 0xd5
 80012a8:	70bb      	strb	r3, [r7, #2]
 80012aa:	23a5      	movs	r3, #165	@ 0xa5
 80012ac:	70fb      	strb	r3, [r7, #3]
 80012ae:	2302      	movs	r3, #2
 80012b0:	713b      	strb	r3, [r7, #4]
 80012b2:	2300      	movs	r3, #0
 80012b4:	717b      	strb	r3, [r7, #5]
 80012b6:	2336      	movs	r3, #54	@ 0x36
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	23ac      	movs	r3, #172	@ 0xac
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	23e1      	movs	r3, #225	@ 0xe1
 80012c0:	723b      	strb	r3, [r7, #8]
 80012c2:	2311      	movs	r3, #17
 80012c4:	727b      	strb	r3, [r7, #9]
 80012c6:	2301      	movs	r3, #1
 80012c8:	72bb      	strb	r3, [r7, #10]
 80012ca:	2300      	movs	r3, #0
 80012cc:	72fb      	strb	r3, [r7, #11]
 80012ce:	2300      	movs	r3, #0
 80012d0:	733b      	strb	r3, [r7, #12]
 80012d2:	2301      	movs	r3, #1
 80012d4:	737b      	strb	r3, [r7, #13]
 80012d6:	2300      	movs	r3, #0
 80012d8:	73bb      	strb	r3, [r7, #14]
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <Add_SWServW2ST_Service+0x118>)
 80012e0:	461c      	mov	r4, r3
 80012e2:	463b      	mov	r3, r7
 80012e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <Add_SWServW2ST_Service+0x114>)
 80012ec:	8818      	ldrh	r0, [r3, #0]
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <Add_SWServW2ST_Service+0x11c>)
 80012f0:	9305      	str	r3, [sp, #20]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9304      	str	r3, [sp, #16]
 80012f6:	2310      	movs	r3, #16
 80012f8:	9303      	str	r3, [sp, #12]
 80012fa:	2304      	movs	r3, #4
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2300      	movs	r3, #0
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2310      	movs	r3, #16
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2308      	movs	r3, #8
 8001308:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <Add_SWServW2ST_Service+0x118>)
 800130a:	2102      	movs	r1, #2
 800130c:	f007 fefc 	bl	8009108 <aci_gatt_add_char>
 8001310:	4603      	mov	r3, r0
 8001312:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001314:	7cfb      	ldrb	r3, [r7, #19]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d103      	bne.n	8001322 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 800131a:	2300      	movs	r3, #0
 800131c:	e003      	b.n	8001326 <Add_SWServW2ST_Service+0x106>
    goto fail;
 800131e:	bf00      	nop
 8001320:	e000      	b.n	8001324 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8001322:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8001324:	2347      	movs	r3, #71	@ 0x47
}
 8001326:	4618      	mov	r0, r3
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	bf00      	nop
 8001330:	20000af0 	.word	0x20000af0
 8001334:	20000aea 	.word	0x20000aea
 8001338:	20000b00 	.word	0x20000b00
 800133c:	20000aec 	.word	0x20000aec

08001340 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 800134c:	f002 fad6 	bl	80038fc <HAL_GetTick>
 8001350:	4603      	mov	r3, r0
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	743b      	strb	r3, [r7, #16]
 8001358:	f002 fad0 	bl	80038fc <HAL_GetTick>
 800135c:	4603      	mov	r3, r0
 800135e:	0adb      	lsrs	r3, r3, #11
 8001360:	b2db      	uxtb	r3, r3
 8001362:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	425b      	negs	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	74bb      	strb	r3, [r7, #18]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	425b      	negs	r3, r3
 8001376:	121b      	asrs	r3, r3, #8
 8001378:	b2db      	uxtb	r3, r3
 800137a:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	753b      	strb	r3, [r7, #20]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	121b      	asrs	r3, r3, #8
 800138a:	b2db      	uxtb	r3, r3
 800138c:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	425b      	negs	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	75bb      	strb	r3, [r7, #22]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	425b      	negs	r3, r3
 80013a0:	121b      	asrs	r3, r3, #8
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	763b      	strb	r3, [r7, #24]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	121b      	asrs	r3, r3, #8
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	76bb      	strb	r3, [r7, #26]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	121b      	asrs	r3, r3, #8
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	773b      	strb	r3, [r7, #28]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	121b      	asrs	r3, r3, #8
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	77bb      	strb	r3, [r7, #30]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	121b      	asrs	r3, r3, #8
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f887 3020 	strb.w	r3, [r7, #32]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	121b      	asrs	r3, r3, #8
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	121b      	asrs	r3, r3, #8
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <Acc_Update+0x10c>)
 800141c:	8818      	ldrh	r0, [r3, #0]
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <Acc_Update+0x110>)
 8001420:	8819      	ldrh	r1, [r3, #0]
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2314      	movs	r3, #20
 800142a:	2200      	movs	r2, #0
 800142c:	f007 ff37 	bl	800929e <aci_gatt_update_char_value>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800143e:	2347      	movs	r3, #71	@ 0x47
 8001440:	e000      	b.n	8001444 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3728      	adds	r7, #40	@ 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000ae4 	.word	0x20000ae4
 8001450:	20000ae8 	.word	0x20000ae8

08001454 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001458:	b08e      	sub	sp, #56	@ 0x38
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001460:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001462:	4b57      	ldr	r3, [pc, #348]	@ (80015c0 <Read_Request_CB+0x16c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	429a      	cmp	r2, r3
 800146a:	d105      	bne.n	8001478 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 800146c:	4a55      	ldr	r2, [pc, #340]	@ (80015c4 <Read_Request_CB+0x170>)
 800146e:	4956      	ldr	r1, [pc, #344]	@ (80015c8 <Read_Request_CB+0x174>)
 8001470:	4856      	ldr	r0, [pc, #344]	@ (80015cc <Read_Request_CB+0x178>)
 8001472:	f7ff ff65 	bl	8001340 <Acc_Update>
 8001476:	e091      	b.n	800159c <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001478:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800147a:	4b55      	ldr	r3, [pc, #340]	@ (80015d0 <Read_Request_CB+0x17c>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 808b 	bne.w	800159c <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001486:	f00b fcb7 	bl	800cdf8 <rand>
 800148a:	4603      	mov	r3, r0
 800148c:	17da      	asrs	r2, r3, #31
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	61fa      	str	r2, [r7, #28]
 8001492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	0099      	lsls	r1, r3, #2
 80014a0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014a4:	0090      	lsls	r0, r2, #2
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	1851      	adds	r1, r2, r1
 80014ae:	6139      	str	r1, [r7, #16]
 80014b0:	69f9      	ldr	r1, [r7, #28]
 80014b2:	eb43 0101 	adc.w	r1, r3, r1
 80014b6:	6179      	str	r1, [r7, #20]
 80014b8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014c4:	f7ff fb98 	bl	8000bf8 <__aeabi_uldivmod>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff f85c 	bl	800058c <__aeabi_ul2d>
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <Read_Request_CB+0x180>)
 80014da:	f7fe fed7 	bl	800028c <__adddf3>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fb37 	bl	8000b58 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80014ee:	f00b fc83 	bl	800cdf8 <rand>
 80014f2:	4603      	mov	r3, r0
 80014f4:	17da      	asrs	r2, r3, #31
 80014f6:	4698      	mov	r8, r3
 80014f8:	4691      	mov	r9, r2
 80014fa:	4642      	mov	r2, r8
 80014fc:	464b      	mov	r3, r9
 80014fe:	1891      	adds	r1, r2, r2
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	415b      	adcs	r3, r3
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800150a:	eb12 0408 	adds.w	r4, r2, r8
 800150e:	eb43 0509 	adc.w	r5, r3, r9
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	016b      	lsls	r3, r5, #5
 800151c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001520:	0162      	lsls	r2, r4, #5
 8001522:	eb14 0a02 	adds.w	sl, r4, r2
 8001526:	eb45 0b03 	adc.w	fp, r5, r3
 800152a:	eb1a 0308 	adds.w	r3, sl, r8
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	eb4b 0309 	adc.w	r3, fp, r9
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001542:	f7ff fb59 	bl	8000bf8 <__aeabi_uldivmod>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff f81d 	bl	800058c <__aeabi_ul2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <Read_Request_CB+0x184>)
 8001558:	f7fe fe98 	bl	800028c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff faf8 	bl	8000b58 <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800156c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001570:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80015dc <Read_Request_CB+0x188>
 8001574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001578:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800157c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001580:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158c:	ee17 3a90 	vmov	r3, s15
 8001590:	b21b      	sxth	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	ee16 0a90 	vmov	r0, s13
 8001598:	f000 f824 	bl	80015e4 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <Read_Request_CB+0x18c>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <Read_Request_CB+0x18c>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f007 ff08 	bl	80093be <aci_gatt_allow_read>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	@ 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015be:	bf00      	nop
 80015c0:	20000ae8 	.word	0x20000ae8
 80015c4:	20000b30 	.word	0x20000b30
 80015c8:	20000b24 	.word	0x20000b24
 80015cc:	20000b18 	.word	0x20000b18
 80015d0:	20000ae6 	.word	0x20000ae6
 80015d4:	403b0000 	.word	0x403b0000
 80015d8:	408f4000 	.word	0x408f4000
 80015dc:	42c80000 	.word	0x42c80000
 80015e0:	20000b10 	.word	0x20000b10

080015e4 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80015f0:	f002 f984 	bl	80038fc <HAL_GetTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	733b      	strb	r3, [r7, #12]
 80015fc:	f002 f97e 	bl	80038fc <HAL_GetTick>
 8001600:	4603      	mov	r3, r0
 8001602:	0adb      	lsrs	r3, r3, #11
 8001604:	b2db      	uxtb	r3, r3
 8001606:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	73bb      	strb	r3, [r7, #14]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	121b      	asrs	r3, r3, #8
 8001612:	b2db      	uxtb	r3, r3
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	141b      	asrs	r3, r3, #16
 800161a:	b2db      	uxtb	r3, r3
 800161c:	743b      	strb	r3, [r7, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	161b      	asrs	r3, r3, #24
 8001622:	b2db      	uxtb	r3, r3
 8001624:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	74bb      	strb	r3, [r7, #18]
 800162c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001630:	121b      	asrs	r3, r3, #8
 8001632:	b21b      	sxth	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <BlueMS_Environmental_Update+0x84>)
 800163a:	8818      	ldrh	r0, [r3, #0]
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <BlueMS_Environmental_Update+0x88>)
 800163e:	8819      	ldrh	r1, [r3, #0]
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2308      	movs	r3, #8
 8001648:	2200      	movs	r2, #0
 800164a:	f007 fe28 	bl	800929e <aci_gatt_update_char_value>
 800164e:	4603      	mov	r3, r0
 8001650:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001658:	2347      	movs	r3, #71	@ 0x47
 800165a:	e000      	b.n	800165e <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000ae4 	.word	0x20000ae4
 800166c:	20000ae6 	.word	0x20000ae6

08001670 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3301      	adds	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b04      	cmp	r3, #4
 8001688:	d139      	bne.n	80016fe <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2bff      	cmp	r3, #255	@ 0xff
 8001690:	d01f      	beq.n	80016d2 <user_notify+0x62>
 8001692:	2bff      	cmp	r3, #255	@ 0xff
 8001694:	dc38      	bgt.n	8001708 <user_notify+0x98>
 8001696:	2b05      	cmp	r3, #5
 8001698:	d002      	beq.n	80016a0 <user_notify+0x30>
 800169a:	2b3e      	cmp	r3, #62	@ 0x3e
 800169c:	d003      	beq.n	80016a6 <user_notify+0x36>
 800169e:	e033      	b.n	8001708 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80016a0:	f000 f836 	bl	8001710 <GAP_DisconnectionComplete_CB>
    }
    break;
 80016a4:	e030      	b.n	8001708 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	3302      	adds	r3, #2
 80016aa:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d126      	bne.n	8001702 <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1d5a      	adds	r2, r3, #5
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	4610      	mov	r0, r2
 80016ca:	f000 f837 	bl	800173c <GAP_ConnectionComplete_CB>
        }
        break;
 80016ce:	bf00      	nop
      }
    }
    break;
 80016d0:	e017      	b.n	8001702 <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	3302      	adds	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	f640 4314 	movw	r3, #3092	@ 0xc14
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10e      	bne.n	8001706 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3302      	adds	r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fead 	bl	8001454 <Read_Request_CB>
        }
        break;
 80016fa:	bf00      	nop
      }

    }
    break;
 80016fc:	e003      	b.n	8001706 <user_notify+0x96>
    return;
 80016fe:	bf00      	nop
 8001700:	e002      	b.n	8001708 <user_notify+0x98>
    break;
 8001702:	bf00      	nop
 8001704:	e000      	b.n	8001708 <user_notify+0x98>
    break;
 8001706:	bf00      	nop
  }
}
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <GAP_DisconnectionComplete_CB+0x20>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <GAP_DisconnectionComplete_CB+0x24>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <GAP_DisconnectionComplete_CB+0x28>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20000b14 	.word	0x20000b14
 8001734:	20000001 	.word	0x20000001
 8001738:	20000b12 	.word	0x20000b12

0800173c <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <GAP_ConnectionComplete_CB+0x38>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <GAP_ConnectionComplete_CB+0x3c>)
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8001754:	2305      	movs	r3, #5
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e002      	b.n	8001760 <GAP_ConnectionComplete_CB+0x24>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3b01      	subs	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	20000b14 	.word	0x20000b14
 8001778:	20000b10 	.word	0x20000b10

0800177c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <HCI_TL_SPI_Init+0x88>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001788:	4a1e      	ldr	r2, [pc, #120]	@ (8001804 <HCI_TL_SPI_Init+0x88>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <HCI_TL_SPI_Init+0x88>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800179c:	2340      	movs	r3, #64	@ 0x40
 800179e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4815      	ldr	r0, [pc, #84]	@ (8001808 <HCI_TL_SPI_Init+0x8c>)
 80017b2:	f002 fb4f 	bl	8003e54 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80017b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d2:	f002 fb3f 	bl	8003e54 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80017d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4807      	ldr	r0, [pc, #28]	@ (800180c <HCI_TL_SPI_Init+0x90>)
 80017f0:	f002 fb30 	bl	8003e54 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80017f4:	f001 fdbc 	bl	8003370 <BSP_SPI3_Init>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	48001000 	.word	0x48001000
 800180c:	48000c00 	.word	0x48000c00

08001810 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001814:	2140      	movs	r1, #64	@ 0x40
 8001816:	4808      	ldr	r0, [pc, #32]	@ (8001838 <HCI_TL_SPI_DeInit+0x28>)
 8001818:	f002 fcc6 	bl	80041a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800181c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001820:	4806      	ldr	r0, [pc, #24]	@ (800183c <HCI_TL_SPI_DeInit+0x2c>)
 8001822:	f002 fcc1 	bl	80041a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001826:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f002 fcbb 	bl	80041a8 <HAL_GPIO_DeInit>
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	48001000 	.word	0x48001000
 800183c:	48000c00 	.word	0x48000c00

08001840 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800184a:	480d      	ldr	r0, [pc, #52]	@ (8001880 <HCI_TL_SPI_Reset+0x40>)
 800184c:	f002 fdb8 	bl	80043c0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185a:	f002 fdb1 	bl	80043c0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800185e:	2005      	movs	r0, #5
 8001860:	f002 f858 	bl	8003914 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800186a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186e:	f002 fda7 	bl	80043c0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001872:	2005      	movs	r0, #5
 8001874:	f002 f84e 	bl	8003914 <HAL_Delay>
  return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	48000c00 	.word	0x48000c00

08001884 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001894:	23ff      	movs	r3, #255	@ 0xff
 8001896:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001898:	4a26      	ldr	r2, [pc, #152]	@ (8001934 <HCI_TL_SPI_Receive+0xb0>)
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a2:	6018      	str	r0, [r3, #0]
 80018a4:	3304      	adds	r3, #4
 80018a6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ae:	4822      	ldr	r0, [pc, #136]	@ (8001938 <HCI_TL_SPI_Receive+0xb4>)
 80018b0:	f002 fd86 	bl	80043c0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018b4:	f107 010c 	add.w	r1, r7, #12
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2205      	movs	r2, #5
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fd86 	bl	80033d0 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80018c4:	7b3b      	ldrb	r3, [r7, #12]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d129      	bne.n	800191e <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80018ca:	7c3b      	ldrb	r3, [r7, #16]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80018da:	8bfb      	ldrh	r3, [r7, #30]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01e      	beq.n	800191e <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80018e0:	8bfa      	ldrh	r2, [r7, #30]
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d901      	bls.n	80018ec <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	777b      	strb	r3, [r7, #29]
 80018f0:	e010      	b.n	8001914 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80018f2:	f107 011b 	add.w	r1, r7, #27
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	2201      	movs	r2, #1
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fd67 	bl	80033d0 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001902:	7f7b      	ldrb	r3, [r7, #29]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	7efa      	ldrb	r2, [r7, #27]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800190e:	7f7b      	ldrb	r3, [r7, #29]
 8001910:	3301      	adds	r3, #1
 8001912:	777b      	strb	r3, [r7, #29]
 8001914:	7f7b      	ldrb	r3, [r7, #29]
 8001916:	b29b      	uxth	r3, r3
 8001918:	8bfa      	ldrh	r2, [r7, #30]
 800191a:	429a      	cmp	r2, r3
 800191c:	d8e9      	bhi.n	80018f2 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <HCI_TL_SPI_Receive+0xb4>)
 8001926:	f002 fd4b 	bl	80043c0 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800192a:	7f7b      	ldrb	r3, [r7, #29]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	0800e3c4 	.word	0x0800e3c4
 8001938:	48000c00 	.word	0x48000c00

0800193c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001948:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <HCI_TL_SPI_Send+0xa0>)
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001952:	6018      	str	r0, [r3, #0]
 8001954:	3304      	adds	r3, #4
 8001956:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001958:	f001 ffd0 	bl	80038fc <HAL_GetTick>
 800195c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001968:	481d      	ldr	r0, [pc, #116]	@ (80019e0 <HCI_TL_SPI_Send+0xa4>)
 800196a:	f002 fd29 	bl	80043c0 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800196e:	f107 0108 	add.w	r1, r7, #8
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	2205      	movs	r2, #5
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fd29 	bl	80033d0 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 800197e:	7a3b      	ldrb	r3, [r7, #8]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d10f      	bne.n	80019a4 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001984:	7a7b      	ldrb	r3, [r7, #9]
 8001986:	461a      	mov	r2, r3
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	4293      	cmp	r3, r2
 800198c:	d806      	bhi.n	800199c <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	461a      	mov	r2, r3
 8001992:	4914      	ldr	r1, [pc, #80]	@ (80019e4 <HCI_TL_SPI_Send+0xa8>)
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f001 fd1b 	bl	80033d0 <BSP_SPI3_SendRecv>
 800199a:	e006      	b.n	80019aa <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 800199c:	f06f 0301 	mvn.w	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e002      	b.n	80019aa <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019b0:	480b      	ldr	r0, [pc, #44]	@ (80019e0 <HCI_TL_SPI_Send+0xa4>)
 80019b2:	f002 fd05 	bl	80043c0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80019b6:	f001 ffa1 	bl	80038fc <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d903      	bls.n	80019cc <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80019c4:	f06f 0302 	mvn.w	r3, #2
 80019c8:	61fb      	str	r3, [r7, #28]
      break;
 80019ca:	e002      	b.n	80019d2 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dbc5      	blt.n	800195e <HCI_TL_SPI_Send+0x22>

  return result;
 80019d2:	69fb      	ldr	r3, [r7, #28]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0800e3cc 	.word	0x0800e3cc
 80019e0:	48000c00 	.word	0x48000c00
 80019e4:	20000b44 	.word	0x20000b44

080019e8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80019ec:	2140      	movs	r1, #64	@ 0x40
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <IsDataAvailable+0x1c>)
 80019f0:	f002 fcce 	bl	8004390 <HAL_GPIO_ReadPin>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	bf0c      	ite	eq
 80019fa:	2301      	moveq	r3, #1
 80019fc:	2300      	movne	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	48001000 	.word	0x48001000

08001a08 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <hci_tl_lowlevel_init+0x50>)
 8001a10:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <hci_tl_lowlevel_init+0x54>)
 8001a14:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <hci_tl_lowlevel_init+0x58>)
 8001a18:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <hci_tl_lowlevel_init+0x5c>)
 8001a1c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <hci_tl_lowlevel_init+0x60>)
 8001a20:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <hci_tl_lowlevel_init+0x64>)
 8001a24:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f007 ff07 	bl	800983c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001a2e:	4910      	ldr	r1, [pc, #64]	@ (8001a70 <hci_tl_lowlevel_init+0x68>)
 8001a30:	4810      	ldr	r0, [pc, #64]	@ (8001a74 <hci_tl_lowlevel_init+0x6c>)
 8001a32:	f002 f9cb 	bl	8003dcc <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001a36:	4a10      	ldr	r2, [pc, #64]	@ (8001a78 <hci_tl_lowlevel_init+0x70>)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	480e      	ldr	r0, [pc, #56]	@ (8001a74 <hci_tl_lowlevel_init+0x6c>)
 8001a3c:	f002 f9ac 	bl	8003d98 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2017      	movs	r0, #23
 8001a46:	f002 f864 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a4a:	2017      	movs	r0, #23
 8001a4c:	f002 f87d 	bl	8003b4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0800177d 	.word	0x0800177d
 8001a5c:	08001811 	.word	0x08001811
 8001a60:	0800193d 	.word	0x0800193d
 8001a64:	08001885 	.word	0x08001885
 8001a68:	08001841 	.word	0x08001841
 8001a6c:	08003411 	.word	0x08003411
 8001a70:	16000006 	.word	0x16000006
 8001a74:	20000b3c 	.word	0x20000b3c
 8001a78:	08001a7d 	.word	0x08001a7d

08001a7c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001a80:	e005      	b.n	8001a8e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001a82:	2000      	movs	r0, #0
 8001a84:	f008 f812 	bl	8009aac <hci_notify_asynch_evt>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001a8e:	f7ff ffab 	bl	80019e8 <IsDataAvailable>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f4      	bne.n	8001a82 <hci_tl_lowlevel_isr+0x6>
 8001a98:	e000      	b.n	8001a9c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001a9a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	@ 0x28
 8001aa4:	af02      	add	r7, sp, #8
  uint32_t i;
  arm_fir_instance_f32 S;
  arm_status status;
  float32_t  *inputF32, *outputF32;

  inputF32 = &testInput_f32_1kHz_15kHz[0];
 8001aa6:	4b46      	ldr	r3, [pc, #280]	@ (8001bc0 <main+0x120>)
 8001aa8:	617b      	str	r3, [r7, #20]
  outputF32 = &testOutput[0];
 8001aaa:	4b46      	ldr	r3, [pc, #280]	@ (8001bc4 <main+0x124>)
 8001aac:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aae:	f001 febd 	bl	800382c <HAL_Init>

  /* USER CODE BEGIN Init */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 8001ab2:	4b45      	ldr	r3, [pc, #276]	@ (8001bc8 <main+0x128>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1d38      	adds	r0, r7, #4
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4b44      	ldr	r3, [pc, #272]	@ (8001bcc <main+0x12c>)
 8001abc:	4a44      	ldr	r2, [pc, #272]	@ (8001bd0 <main+0x130>)
 8001abe:	211d      	movs	r1, #29
 8001ac0:	f00a ff0a 	bl	800c8d8 <arm_fir_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac4:	f000 f8a6 	bl	8001c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac8:	f000 faa4 	bl	8002014 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001acc:	f000 f904 	bl	8001cd8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001ad0:	f000 f93a 	bl	8001d48 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001ad4:	f000 f978 	bl	8001dc8 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8001ad8:	f000 fa3e 	bl	8001f58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001adc:	f000 fa6c 	bl	8001fb8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001ae0:	f000 f998 	bl	8001e14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ae4:	f000 f9ea 	bl	8001ebc <MX_TIM2_Init>
  MX_BlueNRG_MS_Init();
 8001ae8:	f7ff f9fe 	bl	8000ee8 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8001aec:	f001 fd32 	bl	8003554 <BSP_ACCELERO_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001af0:	4838      	ldr	r0, [pc, #224]	@ (8001bd4 <main+0x134>)
 8001af2:	f005 fcc7 	bl	8007484 <HAL_TIM_Base_Start_IT>
  for(i=0; i < numBlocks; i++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e017      	b.n	8001b2c <main+0x8c>
  {
	arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001afc:	4b32      	ldr	r3, [pc, #200]	@ (8001bc8 <main+0x128>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	18d1      	adds	r1, r2, r3
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <main+0x128>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	441a      	add	r2, r3
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <main+0x128>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	1d38      	adds	r0, r7, #4
 8001b22:	f00a fee9 	bl	800c8f8 <arm_fir_f32>
  for(i=0; i < numBlocks; i++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <main+0x138>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d3e2      	bcc.n	8001afc <main+0x5c>
  }
  //  printf("before snr\n");
  snr = arm_snr_f32(&refOutput[0], &testOutput[0], TEST_LENGTH_SAMPLES);
 8001b36:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b3a:	4922      	ldr	r1, [pc, #136]	@ (8001bc4 <main+0x124>)
 8001b3c:	4827      	ldr	r0, [pc, #156]	@ (8001bdc <main+0x13c>)
 8001b3e:	f000 fc29 	bl	8002394 <arm_snr_f32>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
 8001b46:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <main+0x140>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
  //  printf("%d\r\n", snr);
  if (snr < SNR_THRESHOLD_F32)
 8001b4c:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <main+0x140>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001be4 <main+0x144>
 8001b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	d505      	bpl.n	8001b6c <main+0xcc>
  {
	status = ARM_MATH_TEST_FAILURE;
 8001b60:	23fa      	movs	r3, #250	@ 0xfa
 8001b62:	76fb      	strb	r3, [r7, #27]
	printf("failure\r\n");
 8001b64:	4820      	ldr	r0, [pc, #128]	@ (8001be8 <main+0x148>)
 8001b66:	f00b fa9d 	bl	800d0a4 <puts>
 8001b6a:	e004      	b.n	8001b76 <main+0xd6>
  }
  else
  {
	status = ARM_MATH_SUCCESS;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	76fb      	strb	r3, [r7, #27]
	printf("success\r\n");
 8001b70:	481e      	ldr	r0, [pc, #120]	@ (8001bec <main+0x14c>)
 8001b72:	f00b fa97 	bl	800d0a4 <puts>
  }

  if (status != ARM_MATH_SUCCESS)
 8001b76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <main+0xe2>
  {
    while (1);
 8001b7e:	bf00      	nop
 8001b80:	e7fd      	b.n	8001b7e <main+0xde>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b82:	f008 f92b 	bl	8009ddc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskAcc */
  TaskAccHandle = osThreadNew(StartTaskAcc, NULL, &TaskAcc_attributes);
 8001b86:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf0 <main+0x150>)
 8001b88:	2100      	movs	r1, #0
 8001b8a:	481a      	ldr	r0, [pc, #104]	@ (8001bf4 <main+0x154>)
 8001b8c:	f008 f970 	bl	8009e70 <osThreadNew>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a19      	ldr	r2, [pc, #100]	@ (8001bf8 <main+0x158>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* creation of TaskFilter */
  TaskFilterHandle = osThreadNew(StartTaskFilter, NULL, &TaskFilter_attributes);
 8001b96:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <main+0x15c>)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4819      	ldr	r0, [pc, #100]	@ (8001c00 <main+0x160>)
 8001b9c:	f008 f968 	bl	8009e70 <osThreadNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a18      	ldr	r2, [pc, #96]	@ (8001c04 <main+0x164>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* creation of TaskVis */
  TaskVisHandle = osThreadNew(StartTaskVis, NULL, &TaskVis_attributes);
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <main+0x168>)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4818      	ldr	r0, [pc, #96]	@ (8001c0c <main+0x16c>)
 8001bac:	f008 f960 	bl	8009e70 <osThreadNew>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <main+0x170>)
 8001bb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bb6:	f008 f935 	bl	8009e24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bba:	bf00      	nop
 8001bbc:	e7fd      	b.n	8001bba <main+0x11a>
 8001bbe:	bf00      	nop
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	20002c38 	.word	0x20002c38
 8001bc8:	20000a04 	.word	0x20000a04
 8001bcc:	20003138 	.word	0x20003138
 8001bd0:	0800e48c 	.word	0x0800e48c
 8001bd4:	20000d60 	.word	0x20000d60
 8001bd8:	20000a08 	.word	0x20000a08
 8001bdc:	20000504 	.word	0x20000504
 8001be0:	20003228 	.word	0x20003228
 8001be4:	430c0000 	.word	0x430c0000
 8001be8:	0800e3f0 	.word	0x0800e3f0
 8001bec:	0800e3fc 	.word	0x0800e3fc
 8001bf0:	0800e420 	.word	0x0800e420
 8001bf4:	08002359 	.word	0x08002359
 8001bf8:	20001318 	.word	0x20001318
 8001bfc:	0800e444 	.word	0x0800e444
 8001c00:	08002369 	.word	0x08002369
 8001c04:	20001b78 	.word	0x20001b78
 8001c08:	0800e468 	.word	0x0800e468
 8001c0c:	08002379 	.word	0x08002379
 8001c10:	200023d8 	.word	0x200023d8

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b096      	sub	sp, #88	@ 0x58
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	2244      	movs	r2, #68	@ 0x44
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00b fb1e 	bl	800d264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c3a:	f003 fb9f 	bl	800537c <HAL_PWREx_ControlVoltageScaling>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c44:	f000 fba0 	bl	8002388 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c48:	f003 fb7a 	bl	8005340 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <SystemClock_Config+0xc0>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	4a20      	ldr	r2, [pc, #128]	@ (8001cd4 <SystemClock_Config+0xc0>)
 8001c54:	f023 0318 	bic.w	r3, r3, #24
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001c5c:	2314      	movs	r3, #20
 8001c5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c64:	2301      	movs	r3, #1
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c6c:	2360      	movs	r3, #96	@ 0x60
 8001c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c74:	2301      	movs	r3, #1
 8001c76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c7c:	2328      	movs	r3, #40	@ 0x28
 8001c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c80:	2307      	movs	r3, #7
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fc95 	bl	80055c0 <HAL_RCC_OscConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001c9c:	f000 fb74 	bl	8002388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f85d 	bl	8005d78 <HAL_RCC_ClockConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001cc4:	f000 fb60 	bl	8002388 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001cc8:	f004 fd64 	bl	8006794 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ccc:	bf00      	nop
 8001cce:	3758      	adds	r7, #88	@ 0x58
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001cde:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <MX_DFSDM1_Init+0x6c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d06:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001d08:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d10:	2204      	movs	r2, #4
 8001d12:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001d20:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <MX_DFSDM1_Init+0x68>)
 8001d2e:	f001 ff27 	bl	8003b80 <HAL_DFSDM_ChannelInit>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001d38:	f000 fb26 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000c44 	.word	0x20000c44
 8001d44:	40016020 	.word	0x40016020

08001d48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <MX_I2C2_Init+0x78>)
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d54:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <MX_I2C2_Init+0x7c>)
 8001d56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d58:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d82:	480e      	ldr	r0, [pc, #56]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d84:	f002 fb57 	bl	8004436 <HAL_I2C_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d8e:	f000 fafb 	bl	8002388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4809      	ldr	r0, [pc, #36]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001d96:	f003 f909 	bl	8004fac <HAL_I2CEx_ConfigAnalogFilter>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001da0:	f000 faf2 	bl	8002388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001da4:	2100      	movs	r1, #0
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_I2C2_Init+0x74>)
 8001da8:	f003 f94b 	bl	8005042 <HAL_I2CEx_ConfigDigitalFilter>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001db2:	f000 fae9 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000c7c 	.word	0x20000c7c
 8001dc0:	40005800 	.word	0x40005800
 8001dc4:	10d19ce4 	.word	0x10d19ce4

08001dc8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <MX_QUADSPI_Init+0x48>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001dda:	2204      	movs	r2, #4
 8001ddc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001de0:	2210      	movs	r2, #16
 8001de2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001de6:	2217      	movs	r2, #23
 8001de8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_QUADSPI_Init+0x44>)
 8001df8:	f003 fb26 	bl	8005448 <HAL_QSPI_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001e02:	f000 fac1 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000cd0 	.word	0x20000cd0
 8001e10:	a0001000 	.word	0xa0001000

08001e14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e34:	4a20      	ldr	r2, [pc, #128]	@ (8001eb8 <MX_TIM1_Init+0xa4>)
 8001e36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e3a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001e3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e48:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e60:	4814      	ldr	r0, [pc, #80]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e62:	f005 fab7 	bl	80073d4 <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001e6c:	f000 fa8c 	bl	8002388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e7e:	f005 fc78 	bl	8007772 <HAL_TIM_ConfigClockSource>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001e88:	f000 fa7e 	bl	8002388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_TIM1_Init+0xa0>)
 8001e9e:	f005 fe99 	bl	8007bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ea8:	f000 fa6e 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000d14 	.word	0x20000d14
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001edc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ee0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001ee4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001ee8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001ef2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ef6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f04:	4813      	ldr	r0, [pc, #76]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001f06:	f005 fa65 	bl	80073d4 <HAL_TIM_Base_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f10:	f000 fa3a 	bl	8002388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001f22:	f005 fc26 	bl	8007772 <HAL_TIM_ConfigClockSource>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f2c:	f000 fa2c 	bl	8002388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f30:	2320      	movs	r3, #32
 8001f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_TIM2_Init+0x98>)
 8001f3e:	f005 fe49 	bl	8007bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f48:	f000 fa1e 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000d60 	.word	0x20000d60

08001f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f5e:	4a15      	ldr	r2, [pc, #84]	@ (8001fb4 <MX_USART3_UART_Init+0x5c>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_USART3_UART_Init+0x58>)
 8001f9c:	f005 fec0 	bl	8007d20 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001fa6:	f000 f9ef 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000dac 	.word	0x20000dac
 8001fb4:	40004800 	.word	0x40004800

08001fb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001fc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc6:	2206      	movs	r2, #6
 8001fc8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fca:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fcc:	2202      	movs	r2, #2
 8001fce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ffc:	f003 f86d 	bl	80050da <HAL_PCD_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002006:	f000 f9bf 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000e34 	.word	0x20000e34

08002014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800202a:	4bbc      	ldr	r3, [pc, #752]	@ (800231c <MX_GPIO_Init+0x308>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	4abb      	ldr	r2, [pc, #748]	@ (800231c <MX_GPIO_Init+0x308>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002036:	4bb9      	ldr	r3, [pc, #740]	@ (800231c <MX_GPIO_Init+0x308>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	4bb6      	ldr	r3, [pc, #728]	@ (800231c <MX_GPIO_Init+0x308>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	4ab5      	ldr	r2, [pc, #724]	@ (800231c <MX_GPIO_Init+0x308>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204e:	4bb3      	ldr	r3, [pc, #716]	@ (800231c <MX_GPIO_Init+0x308>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4bb0      	ldr	r3, [pc, #704]	@ (800231c <MX_GPIO_Init+0x308>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	4aaf      	ldr	r2, [pc, #700]	@ (800231c <MX_GPIO_Init+0x308>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002066:	4bad      	ldr	r3, [pc, #692]	@ (800231c <MX_GPIO_Init+0x308>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4baa      	ldr	r3, [pc, #680]	@ (800231c <MX_GPIO_Init+0x308>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4aa9      	ldr	r2, [pc, #676]	@ (800231c <MX_GPIO_Init+0x308>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207e:	4ba7      	ldr	r3, [pc, #668]	@ (800231c <MX_GPIO_Init+0x308>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208a:	4ba4      	ldr	r3, [pc, #656]	@ (800231c <MX_GPIO_Init+0x308>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	4aa3      	ldr	r2, [pc, #652]	@ (800231c <MX_GPIO_Init+0x308>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002096:	4ba1      	ldr	r3, [pc, #644]	@ (800231c <MX_GPIO_Init+0x308>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80020a8:	489d      	ldr	r0, [pc, #628]	@ (8002320 <MX_GPIO_Init+0x30c>)
 80020aa:	f002 f989 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b8:	f002 f982 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80020bc:	2200      	movs	r2, #0
 80020be:	f24b 0114 	movw	r1, #45076	@ 0xb014
 80020c2:	4898      	ldr	r0, [pc, #608]	@ (8002324 <MX_GPIO_Init+0x310>)
 80020c4:	f002 f97c 	bl	80043c0 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80020c8:	2200      	movs	r2, #0
 80020ca:	f241 0181 	movw	r1, #4225	@ 0x1081
 80020ce:	4896      	ldr	r0, [pc, #600]	@ (8002328 <MX_GPIO_Init+0x314>)
 80020d0:	f002 f976 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020da:	4893      	ldr	r0, [pc, #588]	@ (8002328 <MX_GPIO_Init+0x314>)
 80020dc:	f002 f970 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80020e6:	4891      	ldr	r0, [pc, #580]	@ (800232c <MX_GPIO_Init+0x318>)
 80020e8:	f002 f96a 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	2120      	movs	r1, #32
 80020f0:	488c      	ldr	r0, [pc, #560]	@ (8002324 <MX_GPIO_Init+0x310>)
 80020f2:	f002 f965 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2101      	movs	r1, #1
 80020fa:	4889      	ldr	r0, [pc, #548]	@ (8002320 <MX_GPIO_Init+0x30c>)
 80020fc:	f002 f960 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002100:	f240 1315 	movw	r3, #277	@ 0x115
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4881      	ldr	r0, [pc, #516]	@ (8002320 <MX_GPIO_Init+0x30c>)
 800211a:	f001 fe9b 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800211e:	236a      	movs	r3, #106	@ 0x6a
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002122:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	487b      	ldr	r0, [pc, #492]	@ (8002320 <MX_GPIO_Init+0x30c>)
 8002134:	f001 fe8e 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002138:	233f      	movs	r3, #63	@ 0x3f
 800213a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800213c:	230b      	movs	r3, #11
 800213e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4878      	ldr	r0, [pc, #480]	@ (800232c <MX_GPIO_Init+0x318>)
 800214c:	f001 fe82 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002150:	2303      	movs	r3, #3
 8002152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002160:	2308      	movs	r3, #8
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216e:	f001 fe71 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002172:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218e:	f001 fe61 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002192:	2310      	movs	r3, #16
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002196:	230b      	movs	r3, #11
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a8:	f001 fe54 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80021ac:	23e0      	movs	r3, #224	@ 0xe0
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021bc:	2305      	movs	r3, #5
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ca:	f001 fe43 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80021ce:	2301      	movs	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4850      	ldr	r0, [pc, #320]	@ (8002324 <MX_GPIO_Init+0x310>)
 80021e4:	f001 fe36 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80021e8:	2302      	movs	r3, #2
 80021ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021ec:	230b      	movs	r3, #11
 80021ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	484a      	ldr	r0, [pc, #296]	@ (8002324 <MX_GPIO_Init+0x310>)
 80021fc:	f001 fe2a 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002200:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002204:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4842      	ldr	r0, [pc, #264]	@ (8002324 <MX_GPIO_Init+0x310>)
 800221a:	f001 fe1b 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800221e:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002222:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002224:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	483c      	ldr	r0, [pc, #240]	@ (8002328 <MX_GPIO_Init+0x314>)
 8002236:	f001 fe0d 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800223a:	f243 0381 	movw	r3, #12417	@ 0x3081
 800223e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4835      	ldr	r0, [pc, #212]	@ (8002328 <MX_GPIO_Init+0x314>)
 8002254:	f001 fdfe 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002258:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800225c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	482e      	ldr	r0, [pc, #184]	@ (800232c <MX_GPIO_Init+0x318>)
 8002272:	f001 fdef 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002276:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800227c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4827      	ldr	r0, [pc, #156]	@ (800232c <MX_GPIO_Init+0x318>)
 800228e:	f001 fde1 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002292:	2302      	movs	r3, #2
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022a2:	2305      	movs	r3, #5
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	481e      	ldr	r0, [pc, #120]	@ (8002328 <MX_GPIO_Init+0x314>)
 80022ae:	f001 fdd1 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80022b2:	2378      	movs	r3, #120	@ 0x78
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c2:	2307      	movs	r3, #7
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	4816      	ldr	r0, [pc, #88]	@ (8002328 <MX_GPIO_Init+0x314>)
 80022ce:	f001 fdc1 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80022d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d8:	2312      	movs	r3, #18
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022e4:	2304      	movs	r3, #4
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <MX_GPIO_Init+0x310>)
 80022f0:	f001 fdb0 	bl	8003e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2105      	movs	r1, #5
 80022f8:	2017      	movs	r0, #23
 80022fa:	f001 fc0a 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022fe:	2017      	movs	r0, #23
 8002300:	f001 fc23 	bl	8003b4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2105      	movs	r1, #5
 8002308:	2028      	movs	r0, #40	@ 0x28
 800230a:	f001 fc02 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800230e:	2028      	movs	r0, #40	@ 0x28
 8002310:	f001 fc1b 	bl	8003b4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002314:	bf00      	nop
 8002316:	3728      	adds	r7, #40	@ 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	48001000 	.word	0x48001000
 8002324:	48000400 	.word	0x48000400
 8002328:	48000c00 	.word	0x48000c00
 800232c:	48000800 	.word	0x48000800

08002330 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a06      	ldr	r2, [pc, #24]	@ (8002354 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d104      	bne.n	800234a <HAL_TIM_PeriodElapsedCallback+0x1a>
		int16_t pDataXYZ[3];
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4618      	mov	r0, r3
 8002346:	f001 f943 	bl	80035d0 <BSP_ACCELERO_AccGetXYZ>
	}
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000d60 	.word	0x20000d60

08002358 <StartTaskAcc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskAcc */
void StartTaskAcc(void *argument)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002360:	2001      	movs	r0, #1
 8002362:	f007 fe17 	bl	8009f94 <osDelay>
 8002366:	e7fb      	b.n	8002360 <StartTaskAcc+0x8>

08002368 <StartTaskFilter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskFilter */
void StartTaskFilter(void *argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskFilter */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002370:	2001      	movs	r0, #1
 8002372:	f007 fe0f 	bl	8009f94 <osDelay>
 8002376:	e7fb      	b.n	8002370 <StartTaskFilter+0x8>

08002378 <StartTaskVis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskVis */
void StartTaskVis(void *argument)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskVis */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002380:	2001      	movs	r0, #1
 8002382:	f007 fe07 	bl	8009f94 <osDelay>
 8002386:	e7fb      	b.n	8002380 <StartTaskVis+0x8>

08002388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
}
 800238e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <Error_Handler+0x8>

08002394 <arm_snr_f32>:
 * The function Caluclates signal to noise ratio for the reference output
 * and test output
 */

float arm_snr_f32(float *pRef, float *pTest, uint32_t buffSize)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	@ 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  float EnergySignal = 0.0, EnergyError = 0.0;
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  uint32_t i;
  float SNR;
  int temp;
  int *test;

  for (i = 0; i < buffSize; i++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	e058      	b.n	8002464 <arm_snr_f32+0xd0>
    {
 	  /* Checking for a NAN value in pRef array */
	  test =   (int *)(&pRef[i]);
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4a43      	ldr	r2, [pc, #268]	@ (80024d4 <arm_snr_f32+0x140>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d102      	bne.n	80023d0 <arm_snr_f32+0x3c>
	  {
	  		return(0);
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e07a      	b.n	80024c6 <arm_snr_f32+0x132>
	  }

	  /* Checking for a NAN value in pTest array */
	  test =   (int *)(&pTest[i]);
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	4413      	add	r3, r2
 80023d8:	61fb      	str	r3, [r7, #28]
      temp =  *test;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61bb      	str	r3, [r7, #24]

	  if (temp == 0x7FC00000)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4a3c      	ldr	r2, [pc, #240]	@ (80024d4 <arm_snr_f32+0x140>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d102      	bne.n	80023ee <arm_snr_f32+0x5a>
	  {
	  		return(0);
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e06b      	b.n	80024c6 <arm_snr_f32+0x132>
	  }
      EnergySignal += pRef[i] * pRef[i];
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	ed93 7a00 	vldr	s14, [r3]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800240e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002412:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      EnergyError += (pRef[i] - pTest[i]) * (pRef[i] - pTest[i]);
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4413      	add	r3, r2
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	edd3 6a00 	vldr	s13, [r3]
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4413      	add	r3, r2
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800244e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002452:	edd7 7a04 	vldr	s15, [r7, #16]
 8002456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245a:	edc7 7a04 	vstr	s15, [r7, #16]
  for (i = 0; i < buffSize; i++)
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	3301      	adds	r3, #1
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3a2      	bcc.n	80023b2 <arm_snr_f32+0x1e>
    }

	/* Checking for a NAN value in EnergyError */
	test =   (int *)(&EnergyError);
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	61fb      	str	r3, [r7, #28]
    temp =  *test;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]

    if (temp == 0x7FC00000)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4a16      	ldr	r2, [pc, #88]	@ (80024d4 <arm_snr_f32+0x140>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d102      	bne.n	8002486 <arm_snr_f32+0xf2>
    {
  		return(0);
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e01f      	b.n	80024c6 <arm_snr_f32+0x132>
    }


  SNR = 10 * log10 (EnergySignal / EnergyError);
 8002486:	edd7 7a04 	vldr	s15, [r7, #16]
 800248a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800248e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002492:	ee16 0a90 	vmov	r0, s13
 8002496:	f7fe f857 	bl	8000548 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	ec43 2b10 	vmov	d0, r2, r3
 80024a2:	f00b fcf5 	bl	800de90 <log10>
 80024a6:	ec51 0b10 	vmov	r0, r1, d0
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <arm_snr_f32+0x144>)
 80024b0:	f7fe f8a2 	bl	80005f8 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb4c 	bl	8000b58 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	617b      	str	r3, [r7, #20]

  return (SNR);
 80024c4:	697b      	ldr	r3, [r7, #20]

}
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	3728      	adds	r7, #40	@ 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	7fc00000 	.word	0x7fc00000
 80024d8:	40240000 	.word	0x40240000

080024dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_MspInit+0x4c>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e6:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <HAL_MspInit+0x4c>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_MspInit+0x4c>)
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_MspInit+0x4c>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <HAL_MspInit+0x4c>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	@ 0x58
 8002506:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <HAL_MspInit+0x4c>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	210f      	movs	r1, #15
 8002516:	f06f 0001 	mvn.w	r0, #1
 800251a:	f001 fafa 	bl	8003b12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0ac      	sub	sp, #176	@ 0xb0
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2288      	movs	r2, #136	@ 0x88
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f00a fe89 	bl	800d264 <memset>
  if(DFSDM1_Init == 0)
 8002552:	4b25      	ldr	r3, [pc, #148]	@ (80025e8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d142      	bne.n	80025e0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800255a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800255e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4618      	mov	r0, r3
 800256c:	f003 fe28 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002576:	f7ff ff07 	bl	8002388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800257a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257e:	4a1b      	ldr	r2, [pc, #108]	@ (80025ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002584:	6613      	str	r3, [r2, #96]	@ 0x60
 8002586:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002592:	4b16      	ldr	r3, [pc, #88]	@ (80025ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	4a15      	ldr	r2, [pc, #84]	@ (80025ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002598:	f043 0310 	orr.w	r3, r3, #16
 800259c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259e:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_DFSDM_ChannelMspInit+0xc0>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80025aa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80025ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80025c4:	2306      	movs	r3, #6
 80025c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025ce:	4619      	mov	r1, r3
 80025d0:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80025d2:	f001 fc3f 	bl	8003e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	4a02      	ldr	r2, [pc, #8]	@ (80025e8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80025de:	6013      	str	r3, [r2, #0]
  }

}
 80025e0:	bf00      	nop
 80025e2:	37b0      	adds	r7, #176	@ 0xb0
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000322c 	.word	0x2000322c
 80025ec:	40021000 	.word	0x40021000
 80025f0:	48001000 	.word	0x48001000

080025f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b0ac      	sub	sp, #176	@ 0xb0
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2288      	movs	r2, #136	@ 0x88
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f00a fe25 	bl	800d264 <memset>
  if(hi2c->Instance==I2C2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <HAL_I2C_MspInit+0xb0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d13b      	bne.n	800269c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002628:	2300      	movs	r3, #0
 800262a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4618      	mov	r0, r3
 8002632:	f003 fdc5 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800263c:	f7ff fea4 	bl	8002388 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_I2C_MspInit+0xb4>)
 8002642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002644:	4a18      	ldr	r2, [pc, #96]	@ (80026a8 <HAL_I2C_MspInit+0xb4>)
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264c:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <HAL_I2C_MspInit+0xb4>)
 800264e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002658:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800265c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002660:	2312      	movs	r3, #18
 8002662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002666:	2301      	movs	r3, #1
 8002668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002672:	2304      	movs	r3, #4
 8002674:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800267c:	4619      	mov	r1, r3
 800267e:	480b      	ldr	r0, [pc, #44]	@ (80026ac <HAL_I2C_MspInit+0xb8>)
 8002680:	f001 fbe8 	bl	8003e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_I2C_MspInit+0xb4>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <HAL_I2C_MspInit+0xb4>)
 800268a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800268e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_I2C_MspInit+0xb4>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800269c:	bf00      	nop
 800269e:	37b0      	adds	r7, #176	@ 0xb0
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40005800 	.word	0x40005800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000400 	.word	0x48000400

080026b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0b      	ldr	r2, [pc, #44]	@ (80026ec <HAL_I2C_MspDeInit+0x3c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10f      	bne.n	80026e2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_I2C_MspDeInit+0x40>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <HAL_I2C_MspDeInit+0x40>)
 80026c8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80026cc:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80026ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026d2:	4808      	ldr	r0, [pc, #32]	@ (80026f4 <HAL_I2C_MspDeInit+0x44>)
 80026d4:	f001 fd68 	bl	80041a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80026d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_I2C_MspDeInit+0x44>)
 80026de:	f001 fd63 	bl	80041a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40005800 	.word	0x40005800
 80026f0:	40021000 	.word	0x40021000
 80026f4:	48000400 	.word	0x48000400

080026f8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <HAL_QSPI_MspInit+0x7c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d128      	bne.n	800276c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800271a:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <HAL_QSPI_MspInit+0x80>)
 800271c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800271e:	4a16      	ldr	r2, [pc, #88]	@ (8002778 <HAL_QSPI_MspInit+0x80>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002724:	6513      	str	r3, [r2, #80]	@ 0x50
 8002726:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <HAL_QSPI_MspInit+0x80>)
 8002728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002732:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <HAL_QSPI_MspInit+0x80>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <HAL_QSPI_MspInit+0x80>)
 8002738:	f043 0310 	orr.w	r3, r3, #16
 800273c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273e:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <HAL_QSPI_MspInit+0x80>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800274a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800274e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800275c:	230a      	movs	r3, #10
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	4805      	ldr	r0, [pc, #20]	@ (800277c <HAL_QSPI_MspInit+0x84>)
 8002768:	f001 fb74 	bl	8003e54 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800276c:	bf00      	nop
 800276e:	3728      	adds	r7, #40	@ 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	a0001000 	.word	0xa0001000
 8002778:	40021000 	.word	0x40021000
 800277c:	48001000 	.word	0x48001000

08002780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a24      	ldr	r2, [pc, #144]	@ (8002830 <HAL_TIM_Base_MspInit+0xb0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10c      	bne.n	80027bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a2:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a6:	4a23      	ldr	r2, [pc, #140]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ae:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027ba:	e035      	b.n	8002828 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c4:	d130      	bne.n	8002828 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d2:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	4a14      	ldr	r2, [pc, #80]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_TIM_Base_MspInit+0xb4>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 80027f6:	2308      	movs	r3, #8
 80027f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002806:	2301      	movs	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002814:	f001 fb1e 	bl	8003e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2105      	movs	r1, #5
 800281c:	201c      	movs	r0, #28
 800281e:	f001 f978 	bl	8003b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002822:	201c      	movs	r0, #28
 8002824:	f001 f991 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	@ 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0ac      	sub	sp, #176	@ 0xb0
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2288      	movs	r2, #136	@ 0x88
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f00a fd03 	bl	800d264 <memset>
  if(huart->Instance==USART3)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a21      	ldr	r2, [pc, #132]	@ (80028e8 <HAL_UART_MspInit+0xb0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d13b      	bne.n	80028e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002868:	2304      	movs	r3, #4
 800286a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800286c:	2300      	movs	r3, #0
 800286e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fca3 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002880:	f7ff fd82 	bl	8002388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002884:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_UART_MspInit+0xb4>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <HAL_UART_MspInit+0xb4>)
 800288a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800288e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002890:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <HAL_UART_MspInit+0xb4>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <HAL_UART_MspInit+0xb4>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <HAL_UART_MspInit+0xb4>)
 80028a2:	f043 0308 	orr.w	r3, r3, #8
 80028a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a8:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_UART_MspInit+0xb4>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80028b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028ce:	2307      	movs	r3, #7
 80028d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028d8:	4619      	mov	r1, r3
 80028da:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <HAL_UART_MspInit+0xb8>)
 80028dc:	f001 faba 	bl	8003e54 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80028e0:	bf00      	nop
 80028e2:	37b0      	adds	r7, #176	@ 0xb0
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40004800 	.word	0x40004800
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000c00 	.word	0x48000c00

080028f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0ac      	sub	sp, #176	@ 0xb0
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	2288      	movs	r2, #136	@ 0x88
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f00a fca5 	bl	800d264 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002922:	d17c      	bne.n	8002a1e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002928:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800292a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800292e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800293a:	2318      	movs	r3, #24
 800293c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800293e:	2307      	movs	r3, #7
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002942:	2302      	movs	r3, #2
 8002944:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002946:	2302      	movs	r3, #2
 8002948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800294a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800294e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4618      	mov	r0, r3
 8002956:	f003 fc33 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002960:	f7ff fd12 	bl	8002388 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	4b30      	ldr	r3, [pc, #192]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	4a2f      	ldr	r2, [pc, #188]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002970:	4b2d      	ldr	r3, [pc, #180]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800297c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002994:	4619      	mov	r1, r3
 8002996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800299a:	f001 fa5b 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800299e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80029a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029b8:	230a      	movs	r3, #10
 80029ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c8:	f001 fa44 	bl	8003e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d0:	4a15      	ldr	r2, [pc, #84]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 80029d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d8:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e4:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d114      	bne.n	8002a1a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 80029f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002a08:	f002 fd0e 	bl	8005428 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <HAL_PCD_MspInit+0x134>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002a18:	e001      	b.n	8002a1e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002a1a:	f002 fd05 	bl	8005428 <HAL_PWREx_EnableVddUSB>
}
 8002a1e:	bf00      	nop
 8002a20:	37b0      	adds	r7, #176	@ 0xb0
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <NMI_Handler+0x4>

08002a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <MemManage_Handler+0x4>

08002a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a66:	f000 ff35 	bl	80038d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002a6a:	f008 febb 	bl	800b7e4 <xTaskGetSchedulerState>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d001      	beq.n	8002a78 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a74:	f009 fcb0 	bl	800c3d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002a80:	2020      	movs	r0, #32
 8002a82:	f001 fcb5 	bl	80043f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002a86:	4806      	ldr	r0, [pc, #24]	@ (8002aa0 <EXTI9_5_IRQHandler+0x24>)
 8002a88:	f001 f9b4 	bl	8003df4 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002a8c:	2080      	movs	r0, #128	@ 0x80
 8002a8e:	f001 fcaf 	bl	80043f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002a92:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a96:	f001 fcab 	bl	80043f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000b3c 	.word	0x20000b3c

08002aa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002aa8:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <TIM2_IRQHandler+0x10>)
 8002aaa:	f004 fd5b 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000d60 	.word	0x20000d60

08002ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002abc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002ac0:	f001 fc96 	bl	80043f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002ac4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002ac8:	f001 fc92 	bl	80043f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002acc:	4806      	ldr	r0, [pc, #24]	@ (8002ae8 <EXTI15_10_IRQHandler+0x30>)
 8002ace:	f001 f991 	bl	8003df4 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002ad2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ad6:	f001 fc8b 	bl	80043f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002ada:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002ade:	f001 fc87 	bl	80043f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000a14 	.word	0x20000a14

08002aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return 1;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_kill>:

int _kill(int pid, int sig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b06:	f00a fbfb 	bl	800d300 <__errno>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2216      	movs	r2, #22
 8002b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_exit>:

void _exit (int status)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe7 	bl	8002afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b2e:	bf00      	nop
 8002b30:	e7fd      	b.n	8002b2e <_exit+0x12>

08002b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e00a      	b.n	8002b5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b44:	f3af 8000 	nop.w
 8002b48:	4601      	mov	r1, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	b2ca      	uxtb	r2, r1
 8002b52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	dbf0      	blt.n	8002b44 <_read+0x12>
  }

  return len;
 8002b62:	687b      	ldr	r3, [r7, #4]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e009      	b.n	8002b92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fb78 	bl	800327c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbf1      	blt.n	8002b7e <_write+0x12>
  }
  return len;
 8002b9a:	687b      	ldr	r3, [r7, #4]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_close>:

int _close(int file)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bcc:	605a      	str	r2, [r3, #4]
  return 0;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_isatty>:

int _isatty(int file)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <_sbrk+0x5c>)
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <_sbrk+0x60>)
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c20:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c28:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <_sbrk+0x64>)
 8002c2a:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <_sbrk+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c3c:	f00a fb60 	bl	800d300 <__errno>
 8002c40:	4603      	mov	r3, r0
 8002c42:	220c      	movs	r2, #12
 8002c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e009      	b.n	8002c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <_sbrk+0x64>)
 8002c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20018000 	.word	0x20018000
 8002c6c:	00000400 	.word	0x00000400
 8002c70:	20003230 	.word	0x20003230
 8002c74:	200050e8 	.word	0x200050e8

08002c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <SystemInit+0x20>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <SystemInit+0x20>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca0:	f7ff ffea 	bl	8002c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ca6:	490d      	ldr	r1, [pc, #52]	@ (8002cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <LoopForever+0xe>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce8 <LoopForever+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cca:	f00a fb1f 	bl	800d30c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cce:	f7fe fee7 	bl	8001aa0 <main>

08002cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd2:	e7fe      	b.n	8002cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000abc 	.word	0x20000abc
  ldr r2, =_sidata
 8002ce0:	0800e64c 	.word	0x0800e64c
  ldr r2, =_sbss
 8002ce4:	20000abc 	.word	0x20000abc
  ldr r4, =_ebss
 8002ce8:	200050e8 	.word	0x200050e8

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>
	...

08002cf0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <BSP_LED_Init+0x20>)
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	0800e548 	.word	0x0800e548

08002d14 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d8c <LED_USER_GPIO_Init+0x78>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <LED_USER_GPIO_Init+0x78>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d26:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <LED_USER_GPIO_Init+0x78>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <LED_USER_GPIO_Init+0x78>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	4a11      	ldr	r2, [pc, #68]	@ (8002d8c <LED_USER_GPIO_Init+0x78>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <LED_USER_GPIO_Init+0x78>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d60:	480b      	ldr	r0, [pc, #44]	@ (8002d90 <LED_USER_GPIO_Init+0x7c>)
 8002d62:	f001 fb2d 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002d66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4804      	ldr	r0, [pc, #16]	@ (8002d90 <LED_USER_GPIO_Init+0x7c>)
 8002d80:	f001 f868 	bl	8003e54 <HAL_GPIO_Init>

}
 8002d84:	bf00      	nop
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	48000400 	.word	0x48000400

08002d94 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	460a      	mov	r2, r1
 8002d9e:	71fb      	strb	r3, [r7, #7]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	4a1f      	ldr	r2, [pc, #124]	@ (8002e28 <BSP_PB_Init+0x94>)
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002db2:	79bb      	ldrb	r3, [r7, #6]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d132      	bne.n	8002e1e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e2c <BSP_PB_Init+0x98>)
 8002dbe:	441a      	add	r2, r3
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	491b      	ldr	r1, [pc, #108]	@ (8002e30 <BSP_PB_Init+0x9c>)
 8002dc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f000 fffe 	bl	8003dcc <HAL_EXTI_GetHandle>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002dd6:	f06f 0303 	mvn.w	r3, #3
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e01f      	b.n	8002e1e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4a12      	ldr	r2, [pc, #72]	@ (8002e2c <BSP_PB_Init+0x98>)
 8002de4:	1898      	adds	r0, r3, r2
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <BSP_PB_Init+0xa0>)
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	461a      	mov	r2, r3
 8002df0:	2100      	movs	r1, #0
 8002df2:	f000 ffd1 	bl	8003d98 <HAL_EXTI_RegisterCallback>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002dfc:	f06f 0303 	mvn.w	r3, #3
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e00c      	b.n	8002e1e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002e04:	2028      	movs	r0, #40	@ 0x28
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	4a0b      	ldr	r2, [pc, #44]	@ (8002e38 <BSP_PB_Init+0xa4>)
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	4619      	mov	r1, r3
 8002e12:	f000 fe7e 	bl	8003b12 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002e16:	2328      	movs	r3, #40	@ 0x28
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fe96 	bl	8003b4a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0800e54c 	.word	0x0800e54c
 8002e2c:	20000a14 	.word	0x20000a14
 8002e30:	0800e550 	.word	0x0800e550
 8002e34:	0800e554 	.word	0x0800e554
 8002e38:	0800e558 	.word	0x0800e558

08002e3c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <BSP_PB_GetState+0x34>)
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fa9b 	bl	8004390 <HAL_GPIO_ReadPin>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000a10 	.word	0x20000a10

08002e74 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe f8ef 	bl	800105c <BSP_PB_Callback>
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ef0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e96:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea2:	f107 030c 	add.w	r3, r7, #12
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002eca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ed0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4804      	ldr	r0, [pc, #16]	@ (8002ef4 <BUTTON_USER_GPIO_Init+0x70>)
 8002ee2:	f000 ffb7 	bl	8003e54 <HAL_GPIO_Init>

}
 8002ee6:	bf00      	nop
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	48000800 	.word	0x48000800

08002ef8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d903      	bls.n	8002f14 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f0c:	f06f 0301 	mvn.w	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e025      	b.n	8002f60 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	79fa      	ldrb	r2, [r7, #7]
 8002f18:	4914      	ldr	r1, [pc, #80]	@ (8002f6c <BSP_COM_Init+0x74>)
 8002f1a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002f1e:	4814      	ldr	r0, [pc, #80]	@ (8002f70 <BSP_COM_Init+0x78>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4403      	add	r3, r0
 8002f2a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002f2c:	79fa      	ldrb	r2, [r7, #7]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4a0e      	ldr	r2, [pc, #56]	@ (8002f70 <BSP_COM_Init+0x78>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f9ba 	bl	80032b4 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002f40:	79fa      	ldrb	r2, [r7, #7]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <BSP_COM_Init+0x78>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f960 	bl	8003214 <MX_USART1_UART_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002f5a:	f06f 0303 	mvn.w	r3, #3
 8002f5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002f60:	68fb      	ldr	r3, [r7, #12]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000a1c 	.word	0x20000a1c
 8002f70:	20003234 	.word	0x20003234

08002f74 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f7c:	4b27      	ldr	r3, [pc, #156]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f80:	4a26      	ldr	r2, [pc, #152]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f88:	4b24      	ldr	r3, [pc, #144]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002f94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f98:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f9a:	2312      	movs	r3, #18
 8002f9c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	481b      	ldr	r0, [pc, #108]	@ (8003020 <I2Cx_MspInit+0xac>)
 8002fb2:	f000 ff4f 	bl	8003e54 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4818      	ldr	r0, [pc, #96]	@ (8003020 <I2Cx_MspInit+0xac>)
 8002fbe:	f000 ff49 	bl	8003e54 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002fc2:	4b16      	ldr	r3, [pc, #88]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	4a15      	ldr	r2, [pc, #84]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002fc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	4a0f      	ldr	r2, [pc, #60]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fe4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	4a0c      	ldr	r2, [pc, #48]	@ (800301c <I2Cx_MspInit+0xa8>)
 8002fec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002ff0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	2021      	movs	r0, #33	@ 0x21
 8002ff8:	f000 fd8b 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002ffc:	2021      	movs	r0, #33	@ 0x21
 8002ffe:	f000 fda4 	bl	8003b4a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	210f      	movs	r1, #15
 8003006:	2022      	movs	r0, #34	@ 0x22
 8003008:	f000 fd83 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800300c:	2022      	movs	r0, #34	@ 0x22
 800300e:	f000 fd9c 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 8003012:	bf00      	nop
 8003014:	3728      	adds	r7, #40	@ 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	48000400 	.word	0x48000400

08003024 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a12      	ldr	r2, [pc, #72]	@ (8003078 <I2Cx_Init+0x54>)
 8003030:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a11      	ldr	r2, [pc, #68]	@ (800307c <I2Cx_Init+0x58>)
 8003036:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff89 	bl	8002f74 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 f9e7 	bl	8004436 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8003068:	2100      	movs	r1, #0
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f001 ff9e 	bl	8004fac <HAL_I2CEx_ConfigAnalogFilter>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40005800 	.word	0x40005800
 800307c:	00702681 	.word	0x00702681

08003080 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af04      	add	r7, sp, #16
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	72fb      	strb	r3, [r7, #11]
 8003092:	460b      	mov	r3, r1
 8003094:	813b      	strh	r3, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	b299      	uxth	r1, r3
 80030a2:	88f8      	ldrh	r0, [r7, #6]
 80030a4:	893a      	ldrh	r2, [r7, #8]
 80030a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030aa:	9302      	str	r3, [sp, #8]
 80030ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4603      	mov	r3, r0
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f001 fb9c 	bl	80047f4 <HAL_I2C_Mem_Read>
 80030bc:	4603      	mov	r3, r0
 80030be:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	4619      	mov	r1, r3
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f832 	bl	8003134 <I2Cx_Error>
  }
  return status;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b08a      	sub	sp, #40	@ 0x28
 80030de:	af04      	add	r7, sp, #16
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	4608      	mov	r0, r1
 80030e4:	4611      	mov	r1, r2
 80030e6:	461a      	mov	r2, r3
 80030e8:	4603      	mov	r3, r0
 80030ea:	72fb      	strb	r3, [r7, #11]
 80030ec:	460b      	mov	r3, r1
 80030ee:	813b      	strh	r3, [r7, #8]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	b299      	uxth	r1, r3
 80030fc:	88f8      	ldrh	r0, [r7, #6]
 80030fe:	893a      	ldrh	r2, [r7, #8]
 8003100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003104:	9302      	str	r3, [sp, #8]
 8003106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	4603      	mov	r3, r0
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f001 fa5b 	bl	80045cc <HAL_I2C_Mem_Write>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	4619      	mov	r1, r3
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f805 	bl	8003134 <I2Cx_Error>
  }
  return status;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f001 fa13 	bl	800456c <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff6c 	bl	8003024 <I2Cx_Init>
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003158:	4802      	ldr	r0, [pc, #8]	@ (8003164 <SENSOR_IO_Init+0x10>)
 800315a:	f7ff ff63 	bl	8003024 <I2Cx_Init>
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200032c0 	.word	0x200032c0

08003168 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af02      	add	r7, sp, #8
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
 8003172:	460b      	mov	r3, r1
 8003174:	71bb      	strb	r3, [r7, #6]
 8003176:	4613      	mov	r3, r2
 8003178:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800317a:	79bb      	ldrb	r3, [r7, #6]
 800317c:	b29a      	uxth	r2, r3
 800317e:	79f9      	ldrb	r1, [r7, #7]
 8003180:	2301      	movs	r3, #1
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	1d7b      	adds	r3, r7, #5
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2301      	movs	r3, #1
 800318a:	4803      	ldr	r0, [pc, #12]	@ (8003198 <SENSOR_IO_Write+0x30>)
 800318c:	f7ff ffa5 	bl	80030da <I2Cx_WriteMultiple>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	200032c0 	.word	0x200032c0

0800319c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	4603      	mov	r3, r0
 80031a4:	460a      	mov	r2, r1
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	4613      	mov	r3, r2
 80031aa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80031b0:	79bb      	ldrb	r3, [r7, #6]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	79f9      	ldrb	r1, [r7, #7]
 80031b6:	2301      	movs	r3, #1
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	f107 030f 	add.w	r3, r7, #15
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2301      	movs	r3, #1
 80031c2:	4804      	ldr	r0, [pc, #16]	@ (80031d4 <SENSOR_IO_Read+0x38>)
 80031c4:	f7ff ff5c 	bl	8003080 <I2Cx_ReadMultiple>

  return read_value;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200032c0 	.word	0x200032c0

080031d8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af02      	add	r7, sp, #8
 80031de:	603a      	str	r2, [r7, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
 80031e6:	460b      	mov	r3, r1
 80031e8:	71bb      	strb	r3, [r7, #6]
 80031ea:	4613      	mov	r3, r2
 80031ec:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	79f9      	ldrb	r1, [r7, #7]
 80031f4:	88bb      	ldrh	r3, [r7, #4]
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2301      	movs	r3, #1
 80031fe:	4804      	ldr	r0, [pc, #16]	@ (8003210 <SENSOR_IO_ReadMultiple+0x38>)
 8003200:	f7ff ff3e 	bl	8003080 <I2Cx_ReadMultiple>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200032c0 	.word	0x200032c0

08003214 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <MX_USART1_UART_Init+0x64>)
 8003224:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800322c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	220c      	movs	r2, #12
 8003244:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f004 fd5e 	bl	8007d20 <HAL_UART_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40013800 	.word	0x40013800

0800327c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003284:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <__io_putchar+0x30>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4a07      	ldr	r2, [pc, #28]	@ (80032b0 <__io_putchar+0x34>)
 8003294:	1898      	adds	r0, r3, r2
 8003296:	1d39      	adds	r1, r7, #4
 8003298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800329c:	2201      	movs	r2, #1
 800329e:	f004 fd8d 	bl	8007dbc <HAL_UART_Transmit>
  return ch;
 80032a2:	687b      	ldr	r3, [r7, #4]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200032bc 	.word	0x200032bc
 80032b0:	20003234 	.word	0x20003234

080032b4 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b0ac      	sub	sp, #176	@ 0xb0
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2288      	movs	r2, #136	@ 0x88
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f009 ffcd 	bl	800d264 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032ce:	2300      	movs	r3, #0
 80032d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 ff72 	bl	80061c0 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032dc:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <USART1_MspInit+0xb4>)
 80032de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e0:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <USART1_MspInit+0xb4>)
 80032e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80032e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003368 <USART1_MspInit+0xb4>)
 80032ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <USART1_MspInit+0xb4>)
 80032f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003368 <USART1_MspInit+0xb4>)
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <USART1_MspInit+0xb4>)
 8003302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 800330c:	2340      	movs	r3, #64	@ 0x40
 800330e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	2302      	movs	r3, #2
 8003314:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003324:	2307      	movs	r3, #7
 8003326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 800332a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800332e:	4619      	mov	r1, r3
 8003330:	480e      	ldr	r0, [pc, #56]	@ (800336c <USART1_MspInit+0xb8>)
 8003332:	f000 fd8f 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800334e:	2307      	movs	r3, #7
 8003350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8003354:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003358:	4619      	mov	r1, r3
 800335a:	4804      	ldr	r0, [pc, #16]	@ (800336c <USART1_MspInit+0xb8>)
 800335c:	f000 fd7a 	bl	8003e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003360:	bf00      	nop
 8003362:	37b0      	adds	r7, #176	@ 0xb0
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	48000400 	.word	0x48000400

08003370 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <BSP_SPI3_Init+0x54>)
 800337c:	4a12      	ldr	r2, [pc, #72]	@ (80033c8 <BSP_SPI3_Init+0x58>)
 800337e:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003380:	4b12      	ldr	r3, [pc, #72]	@ (80033cc <BSP_SPI3_Init+0x5c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	4911      	ldr	r1, [pc, #68]	@ (80033cc <BSP_SPI3_Init+0x5c>)
 8003388:	600a      	str	r2, [r1, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d114      	bne.n	80033b8 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800338e:	480d      	ldr	r0, [pc, #52]	@ (80033c4 <BSP_SPI3_Init+0x54>)
 8003390:	f003 feae 	bl	80070f0 <HAL_SPI_GetState>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10e      	bne.n	80033b8 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 800339a:	480a      	ldr	r0, [pc, #40]	@ (80033c4 <BSP_SPI3_Init+0x54>)
 800339c:	f000 f882 	bl	80034a4 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80033a6:	4807      	ldr	r0, [pc, #28]	@ (80033c4 <BSP_SPI3_Init+0x54>)
 80033a8:	f000 f83a 	bl	8003420 <MX_SPI3_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80033b2:	f06f 0307 	mvn.w	r3, #7
 80033b6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80033b8:	687b      	ldr	r3, [r7, #4]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20003314 	.word	0x20003314
 80033c8:	40003c00 	.word	0x40003c00
 80033cc:	20003378 	.word	0x20003378

080033d0 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033e8:	9200      	str	r2, [sp, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	4807      	ldr	r0, [pc, #28]	@ (800340c <BSP_SPI3_SendRecv+0x3c>)
 80033f0:	f003 fc5f 	bl	8006cb2 <HAL_SPI_TransmitReceive>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80033fa:	f06f 0305 	mvn.w	r3, #5
 80033fe:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003400:	697b      	ldr	r3, [r7, #20]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20003314 	.word	0x20003314

08003410 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003414:	f000 fa72 	bl	80038fc <HAL_GetTick>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <MX_SPI3_Init+0x80>)
 8003430:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003438:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003446:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2207      	movs	r2, #7
 8003478:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2208      	movs	r2, #8
 8003484:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f003 fb66 	bl	8006b58 <HAL_SPI_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40003c00 	.word	0x40003c00

080034a4 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	@ 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <SPI3_MspInit+0xa8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b0:	4a26      	ldr	r2, [pc, #152]	@ (800354c <SPI3_MspInit+0xa8>)
 80034b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b8:	4b24      	ldr	r3, [pc, #144]	@ (800354c <SPI3_MspInit+0xa8>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c4:	4b21      	ldr	r3, [pc, #132]	@ (800354c <SPI3_MspInit+0xa8>)
 80034c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c8:	4a20      	ldr	r2, [pc, #128]	@ (800354c <SPI3_MspInit+0xa8>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034d0:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <SPI3_MspInit+0xa8>)
 80034d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80034dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80034ee:	2306      	movs	r3, #6
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4815      	ldr	r0, [pc, #84]	@ (8003550 <SPI3_MspInit+0xac>)
 80034fa:	f000 fcab 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80034fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	2303      	movs	r3, #3
 800350e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003510:	2306      	movs	r3, #6
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4619      	mov	r1, r3
 800351a:	480d      	ldr	r0, [pc, #52]	@ (8003550 <SPI3_MspInit+0xac>)
 800351c:	f000 fc9a 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352e:	2303      	movs	r3, #3
 8003530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8003532:	2306      	movs	r3, #6
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4619      	mov	r1, r3
 800353c:	4804      	ldr	r0, [pc, #16]	@ (8003550 <SPI3_MspInit+0xac>)
 800353e:	f000 fc89 	bl	8003e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8003542:	bf00      	nop
 8003544:	3728      	adds	r7, #40	@ 0x28
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	48000800 	.word	0x48000800

08003554 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800355e:	2300      	movs	r3, #0
 8003560:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003562:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <BSP_ACCELERO_Init+0x74>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4798      	blx	r3
 8003568:	4603      	mov	r3, r0
 800356a:	2b6a      	cmp	r3, #106	@ 0x6a
 800356c:	d002      	beq.n	8003574 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e024      	b.n	80035be <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003574:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <BSP_ACCELERO_Init+0x78>)
 8003576:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <BSP_ACCELERO_Init+0x74>)
 8003578:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800357a:	2330      	movs	r3, #48	@ 0x30
 800357c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003582:	2300      	movs	r3, #0
 8003584:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003586:	2340      	movs	r3, #64	@ 0x40
 8003588:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003592:	797a      	ldrb	r2, [r7, #5]
 8003594:	7abb      	ldrb	r3, [r7, #10]
 8003596:	4313      	orrs	r3, r2
 8003598:	b2db      	uxtb	r3, r3
 800359a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800359c:	7a3b      	ldrb	r3, [r7, #8]
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	b21b      	sxth	r3, r3
 80035b0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <BSP_ACCELERO_Init+0x78>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	89ba      	ldrh	r2, [r7, #12]
 80035ba:	4610      	mov	r0, r2
 80035bc:	4798      	blx	r3
  }  

  return ret;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000a20 	.word	0x20000a20
 80035cc:	2000337c 	.word	0x2000337c

080035d0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80035d8:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80035e0:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80035ea:	4b04      	ldr	r3, [pc, #16]	@ (80035fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
    }
  }
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	2000337c 	.word	0x2000337c

08003600 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800360e:	2110      	movs	r1, #16
 8003610:	20d4      	movs	r0, #212	@ 0xd4
 8003612:	f7ff fdc3 	bl	800319c <SENSOR_IO_Read>
 8003616:	4603      	mov	r3, r0
 8003618:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800361e:	7bbb      	ldrb	r3, [r7, #14]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003626:	7bba      	ldrb	r2, [r7, #14]
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	4313      	orrs	r3, r2
 800362c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	461a      	mov	r2, r3
 8003632:	2110      	movs	r1, #16
 8003634:	20d4      	movs	r0, #212	@ 0xd4
 8003636:	f7ff fd97 	bl	8003168 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800363a:	2112      	movs	r1, #18
 800363c:	20d4      	movs	r0, #212	@ 0xd4
 800363e:	f7ff fdad 	bl	800319c <SENSOR_IO_Read>
 8003642:	4603      	mov	r3, r0
 8003644:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	b29b      	uxth	r3, r3
 800364c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800364e:	7bbb      	ldrb	r3, [r7, #14]
 8003650:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003654:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003656:	7bba      	ldrb	r2, [r7, #14]
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	4313      	orrs	r3, r2
 800365c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800365e:	7bbb      	ldrb	r3, [r7, #14]
 8003660:	461a      	mov	r2, r3
 8003662:	2112      	movs	r1, #18
 8003664:	20d4      	movs	r0, #212	@ 0xd4
 8003666:	f7ff fd7f 	bl	8003168 <SENSOR_IO_Write>
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003678:	2300      	movs	r3, #0
 800367a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800367c:	2110      	movs	r1, #16
 800367e:	20d4      	movs	r0, #212	@ 0xd4
 8003680:	f7ff fd8c 	bl	800319c <SENSOR_IO_Read>
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	461a      	mov	r2, r3
 8003694:	2110      	movs	r1, #16
 8003696:	20d4      	movs	r0, #212	@ 0xd4
 8003698:	f7ff fd66 	bl	8003168 <SENSOR_IO_Write>
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80036a8:	f7ff fd54 	bl	8003154 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80036ac:	210f      	movs	r1, #15
 80036ae:	20d4      	movs	r0, #212	@ 0xd4
 80036b0:	f7ff fd74 	bl	800319c <SENSOR_IO_Read>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	bd80      	pop	{r7, pc}

080036ba <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80036c8:	2115      	movs	r1, #21
 80036ca:	20d4      	movs	r0, #212	@ 0xd4
 80036cc:	f7ff fd66 	bl	800319c <SENSOR_IO_Read>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	f043 0310 	orr.w	r3, r3, #16
 80036e8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	461a      	mov	r2, r3
 80036ee:	2115      	movs	r1, #21
 80036f0:	20d4      	movs	r0, #212	@ 0xd4
 80036f2:	f7ff fd39 	bl	8003168 <SENSOR_IO_Write>
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003708:	2300      	movs	r3, #0
 800370a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003716:	2110      	movs	r1, #16
 8003718:	20d4      	movs	r0, #212	@ 0xd4
 800371a:	f7ff fd3f 	bl	800319c <SENSOR_IO_Read>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003722:	f107 0208 	add.w	r2, r7, #8
 8003726:	2306      	movs	r3, #6
 8003728:	2128      	movs	r1, #40	@ 0x28
 800372a:	20d4      	movs	r0, #212	@ 0xd4
 800372c:	f7ff fd54 	bl	80031d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e01a      	b.n	800376c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003736:	7ffb      	ldrb	r3, [r7, #31]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	3301      	adds	r3, #1
 800373c:	3320      	adds	r3, #32
 800373e:	443b      	add	r3, r7
 8003740:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	7ffa      	ldrb	r2, [r7, #31]
 800374a:	0052      	lsls	r2, r2, #1
 800374c:	3220      	adds	r2, #32
 800374e:	443a      	add	r2, r7
 8003750:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003754:	4413      	add	r3, r2
 8003756:	b29a      	uxth	r2, r3
 8003758:	7ffb      	ldrb	r3, [r7, #31]
 800375a:	b212      	sxth	r2, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	3320      	adds	r3, #32
 8003760:	443b      	add	r3, r7
 8003762:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003766:	7ffb      	ldrb	r3, [r7, #31]
 8003768:	3301      	adds	r3, #1
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d9e1      	bls.n	8003736 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d829      	bhi.n	80037d0 <LSM6DSL_AccReadXYZ+0xd0>
 800377c:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <LSM6DSL_AccReadXYZ+0x84>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080037d1 	.word	0x080037d1
 800378c:	080037d1 	.word	0x080037d1
 8003790:	080037d1 	.word	0x080037d1
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037bf 	.word	0x080037bf
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037d1 	.word	0x080037d1
 80037b4:	080037c5 	.word	0x080037c5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80037b8:	4b18      	ldr	r3, [pc, #96]	@ (800381c <LSM6DSL_AccReadXYZ+0x11c>)
 80037ba:	61bb      	str	r3, [r7, #24]
    break;
 80037bc:	e008      	b.n	80037d0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80037be:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <LSM6DSL_AccReadXYZ+0x120>)
 80037c0:	61bb      	str	r3, [r7, #24]
    break;
 80037c2:	e005      	b.n	80037d0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80037c4:	4b17      	ldr	r3, [pc, #92]	@ (8003824 <LSM6DSL_AccReadXYZ+0x124>)
 80037c6:	61bb      	str	r3, [r7, #24]
    break;
 80037c8:	e002      	b.n	80037d0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80037ca:	4b17      	ldr	r3, [pc, #92]	@ (8003828 <LSM6DSL_AccReadXYZ+0x128>)
 80037cc:	61bb      	str	r3, [r7, #24]
    break;    
 80037ce:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e01a      	b.n	800380c <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	3320      	adds	r3, #32
 80037dc:	443b      	add	r3, r7
 80037de:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	7ffb      	ldrb	r3, [r7, #31]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037fe:	ee17 2a90 	vmov	r2, s15
 8003802:	b212      	sxth	r2, r2
 8003804:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	3301      	adds	r3, #1
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d9e1      	bls.n	80037d6 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	3d79db23 	.word	0x3d79db23
 8003820:	3df9db23 	.word	0x3df9db23
 8003824:	3e79db23 	.word	0x3e79db23
 8003828:	3ef9db23 	.word	0x3ef9db23

0800382c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003836:	2003      	movs	r0, #3
 8003838:	f000 f960 	bl	8003afc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800383c:	200f      	movs	r0, #15
 800383e:	f000 f80d 	bl	800385c <HAL_InitTick>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	71fb      	strb	r3, [r7, #7]
 800384c:	e001      	b.n	8003852 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800384e:	f7fe fe45 	bl	80024dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003852:	79fb      	ldrb	r3, [r7, #7]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003868:	4b17      	ldr	r3, [pc, #92]	@ (80038c8 <HAL_InitTick+0x6c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d023      	beq.n	80038b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <HAL_InitTick+0x70>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <HAL_InitTick+0x6c>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4619      	mov	r1, r3
 800387a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800387e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f96d 	bl	8003b66 <HAL_SYSTICK_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d809      	bhi.n	80038ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003898:	2200      	movs	r2, #0
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f000 f937 	bl	8003b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038a4:	4a0a      	ldr	r2, [pc, #40]	@ (80038d0 <HAL_InitTick+0x74>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e007      	b.n	80038bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	e004      	b.n	80038bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
 80038b6:	e001      	b.n	80038bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000a58 	.word	0x20000a58
 80038cc:	20000a0c 	.word	0x20000a0c
 80038d0:	20000a54 	.word	0x20000a54

080038d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_IncTick+0x20>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <HAL_IncTick+0x24>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4413      	add	r3, r2
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <HAL_IncTick+0x24>)
 80038e6:	6013      	str	r3, [r2, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000a58 	.word	0x20000a58
 80038f8:	20003380 	.word	0x20003380

080038fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003900:	4b03      	ldr	r3, [pc, #12]	@ (8003910 <HAL_GetTick+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20003380 	.word	0x20003380

08003914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800391c:	f7ff ffee 	bl	80038fc <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d005      	beq.n	800393a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_Delay+0x44>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800393a:	bf00      	nop
 800393c:	f7ff ffde 	bl	80038fc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	429a      	cmp	r2, r3
 800394a:	d8f7      	bhi.n	800393c <HAL_Delay+0x28>
  {
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000a58 	.word	0x20000a58

0800395c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800396c:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398e:	4a04      	ldr	r2, [pc, #16]	@ (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	60d3      	str	r3, [r2, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <__NVIC_GetPriorityGrouping+0x18>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 0307 	and.w	r3, r3, #7
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db0b      	blt.n	80039ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	4907      	ldr	r1, [pc, #28]	@ (80039f8 <__NVIC_EnableIRQ+0x38>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2001      	movs	r0, #1
 80039e2:	fa00 f202 	lsl.w	r2, r0, r2
 80039e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db0a      	blt.n	8003a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	490c      	ldr	r1, [pc, #48]	@ (8003a48 <__NVIC_SetPriority+0x4c>)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a24:	e00a      	b.n	8003a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4908      	ldr	r1, [pc, #32]	@ (8003a4c <__NVIC_SetPriority+0x50>)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3b04      	subs	r3, #4
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	440b      	add	r3, r1
 8003a3a:	761a      	strb	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f1c3 0307 	rsb	r3, r3, #7
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf28      	it	cs
 8003a6e:	2304      	movcs	r3, #4
 8003a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d902      	bls.n	8003a80 <NVIC_EncodePriority+0x30>
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b03      	subs	r3, #3
 8003a7e:	e000      	b.n	8003a82 <NVIC_EncodePriority+0x32>
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	401a      	ands	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a98:	f04f 31ff 	mov.w	r1, #4294967295
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	4313      	orrs	r3, r2
         );
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	@ 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac8:	d301      	bcc.n	8003ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00f      	b.n	8003aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ace:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <SysTick_Config+0x40>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	f7ff ff8e 	bl	80039fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <SysTick_Config+0x40>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae6:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <SysTick_Config+0x40>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	e000e010 	.word	0xe000e010

08003afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff29 	bl	800395c <__NVIC_SetPriorityGrouping>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b24:	f7ff ff3e 	bl	80039a4 <__NVIC_GetPriorityGrouping>
 8003b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff8e 	bl	8003a50 <NVIC_EncodePriority>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff5d 	bl	80039fc <__NVIC_SetPriority>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff31 	bl	80039c0 <__NVIC_EnableIRQ>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffa2 	bl	8003ab8 <SysTick_Config>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e0ac      	b.n	8003cec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f8b2 	bl	8003d00 <DFSDM_GetChannelFromInstance>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4a55      	ldr	r2, [pc, #340]	@ (8003cf4 <HAL_DFSDM_ChannelInit+0x174>)
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e09f      	b.n	8003cec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fe fcbd 	bl	800252c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003bb2:	4b51      	ldr	r3, [pc, #324]	@ (8003cf8 <HAL_DFSDM_ChannelInit+0x178>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8003cf8 <HAL_DFSDM_ChannelInit+0x178>)
 8003bba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf8 <HAL_DFSDM_ChannelInit+0x178>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d125      	bne.n	8003c10 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bce:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4948      	ldr	r1, [pc, #288]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003bde:	4b47      	ldr	r3, [pc, #284]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a46      	ldr	r2, [pc, #280]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003be4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003be8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	791b      	ldrb	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d108      	bne.n	8003c04 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003bf2:	4b42      	ldr	r3, [pc, #264]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	493f      	ldr	r1, [pc, #252]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003c04:	4b3d      	ldr	r3, [pc, #244]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a3c      	ldr	r2, [pc, #240]	@ (8003cfc <HAL_DFSDM_ChannelInit+0x17c>)
 8003c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c0e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003c1e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c2e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c34:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 020f 	bic.w	r2, r2, #15
 8003c4c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003c74:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6899      	ldr	r1, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f002 0207 	and.w	r2, r2, #7
 8003ca0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f810 	bl	8003d00 <DFSDM_GetChannelFromInstance>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4904      	ldr	r1, [pc, #16]	@ (8003cf4 <HAL_DFSDM_ChannelInit+0x174>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20003388 	.word	0x20003388
 8003cf8:	20003384 	.word	0x20003384
 8003cfc:	40016000 	.word	0x40016000

08003d00 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d7c <DFSDM_GetChannelFromInstance+0x7c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d102      	bne.n	8003d16 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e02b      	b.n	8003d6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <DFSDM_GetChannelFromInstance+0x80>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d102      	bne.n	8003d24 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e024      	b.n	8003d6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a17      	ldr	r2, [pc, #92]	@ (8003d84 <DFSDM_GetChannelFromInstance+0x84>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d102      	bne.n	8003d32 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e01d      	b.n	8003d6e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a14      	ldr	r2, [pc, #80]	@ (8003d88 <DFSDM_GetChannelFromInstance+0x88>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d102      	bne.n	8003d40 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e016      	b.n	8003d6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a12      	ldr	r2, [pc, #72]	@ (8003d8c <DFSDM_GetChannelFromInstance+0x8c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d102      	bne.n	8003d4e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003d48:	2305      	movs	r3, #5
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e00f      	b.n	8003d6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a0f      	ldr	r2, [pc, #60]	@ (8003d90 <DFSDM_GetChannelFromInstance+0x90>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d102      	bne.n	8003d5c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003d56:	2306      	movs	r3, #6
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e008      	b.n	8003d6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d94 <DFSDM_GetChannelFromInstance+0x94>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d102      	bne.n	8003d6a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003d64:	2307      	movs	r3, #7
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e001      	b.n	8003d6e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40016000 	.word	0x40016000
 8003d80:	40016020 	.word	0x40016020
 8003d84:	40016040 	.word	0x40016040
 8003d88:	40016080 	.word	0x40016080
 8003d8c:	400160a0 	.word	0x400160a0
 8003d90:	400160c0 	.word	0x400160c0
 8003d94:	400160e0 	.word	0x400160e0

08003d98 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	460b      	mov	r3, r1
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003daa:	7afb      	ldrb	r3, [r7, #11]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbc:	bf00      	nop
  }

  return status;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e003      	b.n	8003de8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <HAL_EXTI_IRQHandler+0x5c>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4798      	blx	r3
    }
  }
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40010414 	.word	0x40010414

08003e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e62:	e17f      	b.n	8004164 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2101      	movs	r1, #1
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8171 	beq.w	800415e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d005      	beq.n	8003e94 <HAL_GPIO_Init+0x40>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d130      	bne.n	8003ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eca:	2201      	movs	r2, #1
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	f003 0201 	and.w	r2, r3, #1
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d118      	bne.n	8003f34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	08db      	lsrs	r3, r3, #3
 8003f1e:	f003 0201 	and.w	r2, r3, #1
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d017      	beq.n	8003f70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d123      	bne.n	8003fc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	220f      	movs	r2, #15
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	08da      	lsrs	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3208      	adds	r2, #8
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0203 	and.w	r2, r3, #3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80ac 	beq.w	800415e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004006:	4b5f      	ldr	r3, [pc, #380]	@ (8004184 <HAL_GPIO_Init+0x330>)
 8004008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400a:	4a5e      	ldr	r2, [pc, #376]	@ (8004184 <HAL_GPIO_Init+0x330>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6613      	str	r3, [r2, #96]	@ 0x60
 8004012:	4b5c      	ldr	r3, [pc, #368]	@ (8004184 <HAL_GPIO_Init+0x330>)
 8004014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800401e:	4a5a      	ldr	r2, [pc, #360]	@ (8004188 <HAL_GPIO_Init+0x334>)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	3302      	adds	r3, #2
 8004026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	220f      	movs	r2, #15
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004048:	d025      	beq.n	8004096 <HAL_GPIO_Init+0x242>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4f      	ldr	r2, [pc, #316]	@ (800418c <HAL_GPIO_Init+0x338>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01f      	beq.n	8004092 <HAL_GPIO_Init+0x23e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4e      	ldr	r2, [pc, #312]	@ (8004190 <HAL_GPIO_Init+0x33c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d019      	beq.n	800408e <HAL_GPIO_Init+0x23a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4d      	ldr	r2, [pc, #308]	@ (8004194 <HAL_GPIO_Init+0x340>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_GPIO_Init+0x236>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4c      	ldr	r2, [pc, #304]	@ (8004198 <HAL_GPIO_Init+0x344>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00d      	beq.n	8004086 <HAL_GPIO_Init+0x232>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4b      	ldr	r2, [pc, #300]	@ (800419c <HAL_GPIO_Init+0x348>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <HAL_GPIO_Init+0x22e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4a      	ldr	r2, [pc, #296]	@ (80041a0 <HAL_GPIO_Init+0x34c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_GPIO_Init+0x22a>
 800407a:	2306      	movs	r3, #6
 800407c:	e00c      	b.n	8004098 <HAL_GPIO_Init+0x244>
 800407e:	2307      	movs	r3, #7
 8004080:	e00a      	b.n	8004098 <HAL_GPIO_Init+0x244>
 8004082:	2305      	movs	r3, #5
 8004084:	e008      	b.n	8004098 <HAL_GPIO_Init+0x244>
 8004086:	2304      	movs	r3, #4
 8004088:	e006      	b.n	8004098 <HAL_GPIO_Init+0x244>
 800408a:	2303      	movs	r3, #3
 800408c:	e004      	b.n	8004098 <HAL_GPIO_Init+0x244>
 800408e:	2302      	movs	r3, #2
 8004090:	e002      	b.n	8004098 <HAL_GPIO_Init+0x244>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_GPIO_Init+0x244>
 8004096:	2300      	movs	r3, #0
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	f002 0203 	and.w	r2, r2, #3
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	4093      	lsls	r3, r2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040a8:	4937      	ldr	r1, [pc, #220]	@ (8004188 <HAL_GPIO_Init+0x334>)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	3302      	adds	r3, #2
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040b6:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	43db      	mvns	r3, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040da:	4a32      	ldr	r2, [pc, #200]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040e0:	4b30      	ldr	r3, [pc, #192]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004104:	4a27      	ldr	r2, [pc, #156]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800410a:	4b26      	ldr	r3, [pc, #152]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800412e:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004134:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	43db      	mvns	r3, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4013      	ands	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004158:	4a12      	ldr	r2, [pc, #72]	@ (80041a4 <HAL_GPIO_Init+0x350>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3301      	adds	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fa22 f303 	lsr.w	r3, r2, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f47f ae78 	bne.w	8003e64 <HAL_GPIO_Init+0x10>
  }
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	40010000 	.word	0x40010000
 800418c:	48000400 	.word	0x48000400
 8004190:	48000800 	.word	0x48000800
 8004194:	48000c00 	.word	0x48000c00
 8004198:	48001000 	.word	0x48001000
 800419c:	48001400 	.word	0x48001400
 80041a0:	48001800 	.word	0x48001800
 80041a4:	40010400 	.word	0x40010400

080041a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80041b6:	e0cd      	b.n	8004354 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80041b8:	2201      	movs	r2, #1
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80c0 	beq.w	800434e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80041ce:	4a68      	ldr	r2, [pc, #416]	@ (8004370 <HAL_GPIO_DeInit+0x1c8>)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	3302      	adds	r3, #2
 80041d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041da:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041f6:	d025      	beq.n	8004244 <HAL_GPIO_DeInit+0x9c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a5e      	ldr	r2, [pc, #376]	@ (8004374 <HAL_GPIO_DeInit+0x1cc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d01f      	beq.n	8004240 <HAL_GPIO_DeInit+0x98>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a5d      	ldr	r2, [pc, #372]	@ (8004378 <HAL_GPIO_DeInit+0x1d0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d019      	beq.n	800423c <HAL_GPIO_DeInit+0x94>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a5c      	ldr	r2, [pc, #368]	@ (800437c <HAL_GPIO_DeInit+0x1d4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_GPIO_DeInit+0x90>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a5b      	ldr	r2, [pc, #364]	@ (8004380 <HAL_GPIO_DeInit+0x1d8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00d      	beq.n	8004234 <HAL_GPIO_DeInit+0x8c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a5a      	ldr	r2, [pc, #360]	@ (8004384 <HAL_GPIO_DeInit+0x1dc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <HAL_GPIO_DeInit+0x88>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a59      	ldr	r2, [pc, #356]	@ (8004388 <HAL_GPIO_DeInit+0x1e0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <HAL_GPIO_DeInit+0x84>
 8004228:	2306      	movs	r3, #6
 800422a:	e00c      	b.n	8004246 <HAL_GPIO_DeInit+0x9e>
 800422c:	2307      	movs	r3, #7
 800422e:	e00a      	b.n	8004246 <HAL_GPIO_DeInit+0x9e>
 8004230:	2305      	movs	r3, #5
 8004232:	e008      	b.n	8004246 <HAL_GPIO_DeInit+0x9e>
 8004234:	2304      	movs	r3, #4
 8004236:	e006      	b.n	8004246 <HAL_GPIO_DeInit+0x9e>
 8004238:	2303      	movs	r3, #3
 800423a:	e004      	b.n	8004246 <HAL_GPIO_DeInit+0x9e>
 800423c:	2302      	movs	r3, #2
 800423e:	e002      	b.n	8004246 <HAL_GPIO_DeInit+0x9e>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <HAL_GPIO_DeInit+0x9e>
 8004244:	2300      	movs	r3, #0
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	f002 0203 	and.w	r2, r2, #3
 800424c:	0092      	lsls	r2, r2, #2
 800424e:	4093      	lsls	r3, r2
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	429a      	cmp	r2, r3
 8004254:	d132      	bne.n	80042bc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004256:	4b4d      	ldr	r3, [pc, #308]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	494b      	ldr	r1, [pc, #300]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 8004260:	4013      	ands	r3, r2
 8004262:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004264:	4b49      	ldr	r3, [pc, #292]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	43db      	mvns	r3, r3
 800426c:	4947      	ldr	r1, [pc, #284]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 800426e:	4013      	ands	r3, r2
 8004270:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004272:	4b46      	ldr	r3, [pc, #280]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	43db      	mvns	r3, r3
 800427a:	4944      	ldr	r1, [pc, #272]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 800427c:	4013      	ands	r3, r2
 800427e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004280:	4b42      	ldr	r3, [pc, #264]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	43db      	mvns	r3, r3
 8004288:	4940      	ldr	r1, [pc, #256]	@ (800438c <HAL_GPIO_DeInit+0x1e4>)
 800428a:	4013      	ands	r3, r2
 800428c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800429e:	4a34      	ldr	r2, [pc, #208]	@ (8004370 <HAL_GPIO_DeInit+0x1c8>)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	3302      	adds	r3, #2
 80042a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	43da      	mvns	r2, r3
 80042ae:	4830      	ldr	r0, [pc, #192]	@ (8004370 <HAL_GPIO_DeInit+0x1c8>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	400a      	ands	r2, r1
 80042b6:	3302      	adds	r3, #2
 80042b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2103      	movs	r1, #3
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	08da      	lsrs	r2, r3, #3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3208      	adds	r2, #8
 80042d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	220f      	movs	r2, #15
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	08d2      	lsrs	r2, r2, #3
 80042f0:	4019      	ands	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3208      	adds	r2, #8
 80042f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	2103      	movs	r1, #3
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	401a      	ands	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	2101      	movs	r1, #1
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2103      	movs	r1, #3
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	401a      	ands	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433e:	2101      	movs	r1, #1
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	401a      	ands	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f af2b 	bne.w	80041b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40010000 	.word	0x40010000
 8004374:	48000400 	.word	0x48000400
 8004378:	48000800 	.word	0x48000800
 800437c:	48000c00 	.word	0x48000c00
 8004380:	48001000 	.word	0x48001000
 8004384:	48001400 	.word	0x48001400
 8004388:	48001800 	.word	0x48001800
 800438c:	40010400 	.word	0x40010400

08004390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043dc:	e002      	b.n	80043e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043fa:	4b08      	ldr	r3, [pc, #32]	@ (800441c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004406:	4a05      	ldr	r2, [pc, #20]	@ (800441c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f806 	bl	8004420 <HAL_GPIO_EXTI_Callback>
  }
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40010400 	.word	0x40010400

08004420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e08d      	b.n	8004564 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fe f8c9 	bl	80025f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2224      	movs	r2, #36	@ 0x24
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004486:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004496:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	e006      	b.n	80044be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80044bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d108      	bne.n	80044d8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	e007      	b.n	80044e8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800450a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69d9      	ldr	r1, [r3, #28]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1a      	ldr	r2, [r3, #32]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e021      	b.n	80045c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2224      	movs	r2, #36	@ 0x24
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fe f88a 	bl	80026b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	817b      	strh	r3, [r7, #10]
 80045de:	460b      	mov	r3, r1
 80045e0:	813b      	strh	r3, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	f040 80f9 	bne.w	80047e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_I2C_Mem_Write+0x34>
 80045fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004606:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0ed      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_I2C_Mem_Write+0x4e>
 8004616:	2302      	movs	r3, #2
 8004618:	e0e6      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004622:	f7ff f96b 	bl	80038fc <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2319      	movs	r3, #25
 800462e:	2201      	movs	r2, #1
 8004630:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fac3 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0d1      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2221      	movs	r2, #33	@ 0x21
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2240      	movs	r2, #64	@ 0x40
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800466c:	88f8      	ldrh	r0, [r7, #6]
 800466e:	893a      	ldrh	r2, [r7, #8]
 8004670:	8979      	ldrh	r1, [r7, #10]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4603      	mov	r3, r0
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f9d3 	bl	8004a28 <I2C_RequestMemoryWrite>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0a9      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2bff      	cmp	r3, #255	@ 0xff
 800469c:	d90e      	bls.n	80046bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22ff      	movs	r2, #255	@ 0xff
 80046a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	8979      	ldrh	r1, [r7, #10]
 80046ac:	2300      	movs	r3, #0
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fc47 	bl	8004f48 <I2C_TransferConfig>
 80046ba:	e00f      	b.n	80046dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	8979      	ldrh	r1, [r7, #10]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fc36 	bl	8004f48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fac6 	bl	8004c72 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e07b      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d034      	beq.n	8004794 <HAL_I2C_Mem_Write+0x1c8>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d130      	bne.n	8004794 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	2200      	movs	r2, #0
 800473a:	2180      	movs	r1, #128	@ 0x80
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fa3f 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04d      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2bff      	cmp	r3, #255	@ 0xff
 8004754:	d90e      	bls.n	8004774 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	22ff      	movs	r2, #255	@ 0xff
 800475a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004760:	b2da      	uxtb	r2, r3
 8004762:	8979      	ldrh	r1, [r7, #10]
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fbeb 	bl	8004f48 <I2C_TransferConfig>
 8004772:	e00f      	b.n	8004794 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004782:	b2da      	uxtb	r2, r3
 8004784:	8979      	ldrh	r1, [r7, #10]
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fbda 	bl	8004f48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d19e      	bne.n	80046dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 faac 	bl	8004d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e01a      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2220      	movs	r2, #32
 80047b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <HAL_I2C_Mem_Write+0x224>)
 80047c6:	400b      	ands	r3, r1
 80047c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
  }
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	fe00e800 	.word	0xfe00e800

080047f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b20      	cmp	r3, #32
 8004818:	f040 80fd 	bne.w	8004a16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_I2C_Mem_Read+0x34>
 8004822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800482e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0f1      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Mem_Read+0x4e>
 800483e:	2302      	movs	r3, #2
 8004840:	e0ea      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800484a:	f7ff f857 	bl	80038fc <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2319      	movs	r3, #25
 8004856:	2201      	movs	r2, #1
 8004858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f9af 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0d5      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2222      	movs	r2, #34	@ 0x22
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2240      	movs	r2, #64	@ 0x40
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800488c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004894:	88f8      	ldrh	r0, [r7, #6]
 8004896:	893a      	ldrh	r2, [r7, #8]
 8004898:	8979      	ldrh	r1, [r7, #10]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	4603      	mov	r3, r0
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f913 	bl	8004ad0 <I2C_RequestMemoryRead>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0ad      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2bff      	cmp	r3, #255	@ 0xff
 80048c4:	d90e      	bls.n	80048e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	4b52      	ldr	r3, [pc, #328]	@ (8004a20 <HAL_I2C_Mem_Read+0x22c>)
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fb33 	bl	8004f48 <I2C_TransferConfig>
 80048e2:	e00f      	b.n	8004904 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	8979      	ldrh	r1, [r7, #10]
 80048f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004a20 <HAL_I2C_Mem_Read+0x22c>)
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fb22 	bl	8004f48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	2200      	movs	r2, #0
 800490c:	2104      	movs	r1, #4
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f956 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07c      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d034      	beq.n	80049c4 <HAL_I2C_Mem_Read+0x1d0>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d130      	bne.n	80049c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004968:	2200      	movs	r2, #0
 800496a:	2180      	movs	r1, #128	@ 0x80
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f927 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e04d      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2bff      	cmp	r3, #255	@ 0xff
 8004984:	d90e      	bls.n	80049a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004990:	b2da      	uxtb	r2, r3
 8004992:	8979      	ldrh	r1, [r7, #10]
 8004994:	2300      	movs	r3, #0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fad3 	bl	8004f48 <I2C_TransferConfig>
 80049a2:	e00f      	b.n	80049c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	8979      	ldrh	r1, [r7, #10]
 80049b6:	2300      	movs	r3, #0
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fac2 	bl	8004f48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d19a      	bne.n	8004904 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f994 	bl	8004d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e01a      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_I2C_Mem_Read+0x230>)
 80049f6:	400b      	ands	r3, r1
 80049f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	80002400 	.word	0x80002400
 8004a24:	fe00e800 	.word	0xfe00e800

08004a28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	813b      	strh	r3, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	8979      	ldrh	r1, [r7, #10]
 8004a48:	4b20      	ldr	r3, [pc, #128]	@ (8004acc <I2C_RequestMemoryWrite+0xa4>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa79 	bl	8004f48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	69b9      	ldr	r1, [r7, #24]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f909 	bl	8004c72 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e02c      	b.n	8004ac4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d105      	bne.n	8004a7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a70:	893b      	ldrh	r3, [r7, #8]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a7a:	e015      	b.n	8004aa8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a7c:	893b      	ldrh	r3, [r7, #8]
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8ef 	bl	8004c72 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e012      	b.n	8004ac4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9e:	893b      	ldrh	r3, [r7, #8]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2180      	movs	r1, #128	@ 0x80
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f884 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	80002000 	.word	0x80002000

08004ad0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	8979      	ldrh	r1, [r7, #10]
 8004af0:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <I2C_RequestMemoryRead+0xa4>)
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fa26 	bl	8004f48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f8b6 	bl	8004c72 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e02c      	b.n	8004b6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b16:	893b      	ldrh	r3, [r7, #8]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b20:	e015      	b.n	8004b4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b22:	893b      	ldrh	r3, [r7, #8]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f89c 	bl	8004c72 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e012      	b.n	8004b6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2140      	movs	r1, #64	@ 0x40
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f831 	bl	8004bc0 <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	80002000 	.word	0x80002000

08004b78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d103      	bne.n	8004b96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d007      	beq.n	8004bb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	619a      	str	r2, [r3, #24]
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd0:	e03b      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f8d6 	bl	8004d88 <I2C_IsErrorOccurred>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e041      	b.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d02d      	beq.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fe fe85 	bl	80038fc <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d122      	bne.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	bf0c      	ite	eq
 8004c14:	2301      	moveq	r3, #1
 8004c16:	2300      	movne	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d113      	bne.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	f043 0220 	orr.w	r2, r3, #32
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e00f      	b.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d0b4      	beq.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c7e:	e033      	b.n	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f87f 	bl	8004d88 <I2C_IsErrorOccurred>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e031      	b.n	8004cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9a:	d025      	beq.n	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9c:	f7fe fe2e 	bl	80038fc <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11a      	bne.n	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d013      	beq.n	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e007      	b.n	8004cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d1c4      	bne.n	8004c80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d0c:	e02f      	b.n	8004d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f838 	bl	8004d88 <I2C_IsErrorOccurred>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e02d      	b.n	8004d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fe fdeb 	bl	80038fc <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11a      	bne.n	8004d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d013      	beq.n	8004d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f043 0220 	orr.w	r2, r3, #32
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e007      	b.n	8004d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d1c8      	bne.n	8004d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d068      	beq.n	8004e86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2210      	movs	r2, #16
 8004dba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dbc:	e049      	b.n	8004e52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d045      	beq.n	8004e52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fe fd99 	bl	80038fc <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_IsErrorOccurred+0x54>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d13a      	bne.n	8004e52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004de6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfe:	d121      	bne.n	8004e44 <I2C_IsErrorOccurred+0xbc>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e06:	d01d      	beq.n	8004e44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d01a      	beq.n	8004e44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e1e:	f7fe fd6d 	bl	80038fc <HAL_GetTick>
 8004e22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e24:	e00e      	b.n	8004e44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e26:	f7fe fd69 	bl	80038fc <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b19      	cmp	r3, #25
 8004e32:	d907      	bls.n	8004e44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f043 0320 	orr.w	r3, r3, #32
 8004e3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e42:	e006      	b.n	8004e52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d1e9      	bne.n	8004e26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d003      	beq.n	8004e68 <I2C_IsErrorOccurred+0xe0>
 8004e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0aa      	beq.n	8004dbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2220      	movs	r2, #32
 8004e76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00b      	beq.n	8004eb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ea8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f043 0308 	orr.w	r3, r3, #8
 8004ec0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004eca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fe3b 	bl	8004b78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <I2C_IsErrorOccurred+0x1bc>)
 8004f0e:	400b      	ands	r3, r1
 8004f10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3728      	adds	r7, #40	@ 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	fe00e800 	.word	0xfe00e800

08004f48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	817b      	strh	r3, [r7, #10]
 8004f56:	4613      	mov	r3, r2
 8004f58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f5a:	897b      	ldrh	r3, [r7, #10]
 8004f5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f60:	7a7b      	ldrb	r3, [r7, #9]
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	0d5b      	lsrs	r3, r3, #21
 8004f82:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f86:	4b08      	ldr	r3, [pc, #32]	@ (8004fa8 <I2C_TransferConfig+0x60>)
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	ea02 0103 	and.w	r1, r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	03ff63ff 	.word	0x03ff63ff

08004fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d138      	bne.n	8005034 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e032      	b.n	8005036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	@ 0x24
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6819      	ldr	r1, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b20      	cmp	r3, #32
 8005056:	d139      	bne.n	80050cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005062:	2302      	movs	r3, #2
 8005064:	e033      	b.n	80050ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2224      	movs	r2, #36	@ 0x24
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005094:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af02      	add	r7, sp, #8
 80050e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e101      	b.n	80052f0 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fd fbf7 	bl	80028f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2203      	movs	r2, #3
 800510a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f003 fbd9 	bl	80088d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	7c1a      	ldrb	r2, [r3, #16]
 8005126:	f88d 2000 	strb.w	r2, [sp]
 800512a:	3304      	adds	r3, #4
 800512c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800512e:	f003 fba2 	bl	8008876 <USB_CoreInit>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0d5      	b.n	80052f0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f003 fbd1 	bl	80088f2 <USB_SetCurrentMode>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0c6      	b.n	80052f0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
 8005166:	e04a      	b.n	80051fe <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	3315      	adds	r3, #21
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3314      	adds	r3, #20
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	b298      	uxth	r0, r3
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	332e      	adds	r3, #46	@ 0x2e
 80051a4:	4602      	mov	r2, r0
 80051a6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3318      	adds	r3, #24
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	331c      	adds	r3, #28
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	3320      	adds	r3, #32
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051e4:	7bfa      	ldrb	r2, [r7, #15]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	3324      	adds	r3, #36	@ 0x24
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	3301      	adds	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	791b      	ldrb	r3, [r3, #4]
 8005202:	7bfa      	ldrb	r2, [r7, #15]
 8005204:	429a      	cmp	r2, r3
 8005206:	d3af      	bcc.n	8005168 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005208:	2300      	movs	r3, #0
 800520a:	73fb      	strb	r3, [r7, #15]
 800520c:	e044      	b.n	8005298 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005236:	7bfa      	ldrb	r2, [r7, #15]
 8005238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	3301      	adds	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	791b      	ldrb	r3, [r3, #4]
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d3b5      	bcc.n	800520e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	7c1a      	ldrb	r2, [r3, #16]
 80052aa:	f88d 2000 	strb.w	r2, [sp]
 80052ae:	3304      	adds	r3, #4
 80052b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052b2:	f003 fb6b 	bl	800898c <USB_DevInit>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e013      	b.n	80052f0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7b1b      	ldrb	r3, [r3, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d102      	bne.n	80052e4 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f80a 	bl	80052f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f003 fd10 	bl	8008d0e <USB_DevDisconnect>

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800532a:	f043 0303 	orr.w	r3, r3, #3
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a04      	ldr	r2, [pc, #16]	@ (800535c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800534a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534e:	6013      	str	r3, [r2, #0]
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40007000 	.word	0x40007000

08005360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005364:	4b04      	ldr	r3, [pc, #16]	@ (8005378 <HAL_PWREx_GetVoltageRange+0x18>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40007000 	.word	0x40007000

0800537c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538a:	d130      	bne.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800538c:	4b23      	ldr	r3, [pc, #140]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005398:	d038      	beq.n	800540c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800539a:	4b20      	ldr	r3, [pc, #128]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053a2:	4a1e      	ldr	r2, [pc, #120]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005420 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2232      	movs	r2, #50	@ 0x32
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	0c9b      	lsrs	r3, r3, #18
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c0:	e002      	b.n	80053c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c8:	4b14      	ldr	r3, [pc, #80]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d4:	d102      	bne.n	80053dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f2      	bne.n	80053c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053dc:	4b0f      	ldr	r3, [pc, #60]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e8:	d110      	bne.n	800540c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e00f      	b.n	800540e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ee:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053fa:	d007      	beq.n	800540c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053fc:	4b07      	ldr	r3, [pc, #28]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005404:	4a05      	ldr	r2, [pc, #20]	@ (800541c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800540a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40007000 	.word	0x40007000
 8005420:	20000a0c 	.word	0x20000a0c
 8005424:	431bde83 	.word	0x431bde83

08005428 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_PWREx_EnableVddUSB+0x1c>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005436:	6053      	str	r3, [r2, #4]
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40007000 	.word	0x40007000

08005448 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af02      	add	r7, sp, #8
 800544e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005450:	f7fe fa54 	bl	80038fc <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e063      	b.n	8005528 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fd f93f 	bl	80026f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800547a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f858 	bl	8005534 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	3b01      	subs	r3, #1
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2120      	movs	r1, #32
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f850 	bl	8005550 <QSPI_WaitFlagStateUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054b4:	7afb      	ldrb	r3, [r7, #11]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d131      	bne.n	800551e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054c4:	f023 0310 	bic.w	r3, r3, #16
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6852      	ldr	r2, [r2, #4]
 80054cc:	0611      	lsls	r1, r2, #24
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68d2      	ldr	r2, [r2, #12]
 80054d2:	4311      	orrs	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	4b13      	ldr	r3, [pc, #76]	@ (8005530 <HAL_QSPI_Init+0xe8>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6912      	ldr	r2, [r2, #16]
 80054ea:	0411      	lsls	r1, r2, #16
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6952      	ldr	r2, [r2, #20]
 80054f0:	4311      	orrs	r1, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6992      	ldr	r2, [r2, #24]
 80054f6:	4311      	orrs	r1, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005526:	7afb      	ldrb	r3, [r7, #11]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	ffe0f8fe 	.word	0xffe0f8fe

08005534 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005560:	e01a      	b.n	8005598 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d016      	beq.n	8005598 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7fe f9c7 	bl	80038fc <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2204      	movs	r2, #4
 8005584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	f043 0201 	orr.w	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e00e      	b.n	80055b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1d6      	bne.n	8005562 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e3ca      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055d2:	4b97      	ldr	r3, [pc, #604]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055dc:	4b94      	ldr	r3, [pc, #592]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80e4 	beq.w	80057bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_RCC_OscConfig+0x4a>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	f040 808b 	bne.w	8005718 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b01      	cmp	r3, #1
 8005606:	f040 8087 	bne.w	8005718 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800560a:	4b89      	ldr	r3, [pc, #548]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_RCC_OscConfig+0x62>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e3a2      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1a      	ldr	r2, [r3, #32]
 8005626:	4b82      	ldr	r3, [pc, #520]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <HAL_RCC_OscConfig+0x7c>
 8005632:	4b7f      	ldr	r3, [pc, #508]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800563a:	e005      	b.n	8005648 <HAL_RCC_OscConfig+0x88>
 800563c:	4b7c      	ldr	r3, [pc, #496]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800563e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005642:	091b      	lsrs	r3, r3, #4
 8005644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005648:	4293      	cmp	r3, r2
 800564a:	d223      	bcs.n	8005694 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fd55 	bl	8006100 <RCC_SetFlashLatencyFromMSIRange>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e383      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005660:	4b73      	ldr	r3, [pc, #460]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a72      	ldr	r2, [pc, #456]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005666:	f043 0308 	orr.w	r3, r3, #8
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	4b70      	ldr	r3, [pc, #448]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	496d      	ldr	r1, [pc, #436]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800567e:	4b6c      	ldr	r3, [pc, #432]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	4968      	ldr	r1, [pc, #416]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800568e:	4313      	orrs	r3, r2
 8005690:	604b      	str	r3, [r1, #4]
 8005692:	e025      	b.n	80056e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005694:	4b66      	ldr	r3, [pc, #408]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a65      	ldr	r2, [pc, #404]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800569a:	f043 0308 	orr.w	r3, r3, #8
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	4b63      	ldr	r3, [pc, #396]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	4960      	ldr	r1, [pc, #384]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	495b      	ldr	r1, [pc, #364]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fd15 	bl	8006100 <RCC_SetFlashLatencyFromMSIRange>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e343      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056e0:	f000 fc4a 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b52      	ldr	r3, [pc, #328]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	091b      	lsrs	r3, r3, #4
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	4950      	ldr	r1, [pc, #320]	@ (8005834 <HAL_RCC_OscConfig+0x274>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
 80056fc:	4a4e      	ldr	r2, [pc, #312]	@ (8005838 <HAL_RCC_OscConfig+0x278>)
 80056fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005700:	4b4e      	ldr	r3, [pc, #312]	@ (800583c <HAL_RCC_OscConfig+0x27c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe f8a9 	bl	800385c <HAL_InitTick>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d052      	beq.n	80057ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	e327      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d032      	beq.n	8005786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005720:	4b43      	ldr	r3, [pc, #268]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a42      	ldr	r2, [pc, #264]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800572c:	f7fe f8e6 	bl	80038fc <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005734:	f7fe f8e2 	bl	80038fc <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e310      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005746:	4b3a      	ldr	r3, [pc, #232]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005752:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a36      	ldr	r2, [pc, #216]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005758:	f043 0308 	orr.w	r3, r3, #8
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4b34      	ldr	r3, [pc, #208]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	4931      	ldr	r1, [pc, #196]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005770:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	492c      	ldr	r1, [pc, #176]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]
 8005784:	e01a      	b.n	80057bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005786:	4b2a      	ldr	r3, [pc, #168]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a29      	ldr	r2, [pc, #164]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005792:	f7fe f8b3 	bl	80038fc <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800579a:	f7fe f8af 	bl	80038fc <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e2dd      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057ac:	4b20      	ldr	r3, [pc, #128]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1f0      	bne.n	800579a <HAL_RCC_OscConfig+0x1da>
 80057b8:	e000      	b.n	80057bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d074      	beq.n	80058b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d005      	beq.n	80057da <HAL_RCC_OscConfig+0x21a>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b0c      	cmp	r3, #12
 80057d2:	d10e      	bne.n	80057f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d10b      	bne.n	80057f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057da:	4b15      	ldr	r3, [pc, #84]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d064      	beq.n	80058b0 <HAL_RCC_OscConfig+0x2f0>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d160      	bne.n	80058b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e2ba      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0x24a>
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0b      	ldr	r2, [pc, #44]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e026      	b.n	8005858 <HAL_RCC_OscConfig+0x298>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005812:	d115      	bne.n	8005840 <HAL_RCC_OscConfig+0x280>
 8005814:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a05      	ldr	r2, [pc, #20]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 800581a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4b03      	ldr	r3, [pc, #12]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a02      	ldr	r2, [pc, #8]	@ (8005830 <HAL_RCC_OscConfig+0x270>)
 8005826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e014      	b.n	8005858 <HAL_RCC_OscConfig+0x298>
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
 8005834:	0800e500 	.word	0x0800e500
 8005838:	20000a0c 	.word	0x20000a0c
 800583c:	20000a54 	.word	0x20000a54
 8005840:	4ba0      	ldr	r3, [pc, #640]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a9f      	ldr	r2, [pc, #636]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a9c      	ldr	r2, [pc, #624]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d013      	beq.n	8005888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fe f84c 	bl	80038fc <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fe f848 	bl	80038fc <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	@ 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e276      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800587a:	4b92      	ldr	r3, [pc, #584]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x2a8>
 8005886:	e014      	b.n	80058b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fe f838 	bl	80038fc <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005890:	f7fe f834 	bl	80038fc <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	@ 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e262      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058a2:	4b88      	ldr	r3, [pc, #544]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x2d0>
 80058ae:	e000      	b.n	80058b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d060      	beq.n	8005980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_OscConfig+0x310>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b0c      	cmp	r3, #12
 80058c8:	d119      	bne.n	80058fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d116      	bne.n	80058fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058d0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_OscConfig+0x328>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e23f      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e8:	4b76      	ldr	r3, [pc, #472]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	4973      	ldr	r1, [pc, #460]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058fc:	e040      	b.n	8005980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d023      	beq.n	800594e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005906:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6e      	ldr	r2, [pc, #440]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005912:	f7fd fff3 	bl	80038fc <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591a:	f7fd ffef 	bl	80038fc <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e21d      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800592c:	4b65      	ldr	r3, [pc, #404]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005938:	4b62      	ldr	r3, [pc, #392]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	495f      	ldr	r1, [pc, #380]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]
 800594c:	e018      	b.n	8005980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800594e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5c      	ldr	r2, [pc, #368]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fd ffcf 	bl	80038fc <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005962:	f7fd ffcb 	bl	80038fc <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e1f9      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005974:	4b53      	ldr	r3, [pc, #332]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f0      	bne.n	8005962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03c      	beq.n	8005a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01c      	beq.n	80059ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005994:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800599a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fd ffaa 	bl	80038fc <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ac:	f7fd ffa6 	bl	80038fc <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e1d4      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059be:	4b41      	ldr	r3, [pc, #260]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ef      	beq.n	80059ac <HAL_RCC_OscConfig+0x3ec>
 80059cc:	e01b      	b.n	8005a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ce:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fd ff8d 	bl	80038fc <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e6:	f7fd ff89 	bl	80038fc <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e1b7      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059f8:	4b32      	ldr	r3, [pc, #200]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 80059fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ef      	bne.n	80059e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80a6 	beq.w	8005b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a14:	2300      	movs	r3, #0
 8005a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a18:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10d      	bne.n	8005a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a24:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a28:	4a26      	ldr	r2, [pc, #152]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a30:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a38:	60bb      	str	r3, [r7, #8]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a40:	4b21      	ldr	r3, [pc, #132]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d118      	bne.n	8005a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a58:	f7fd ff50 	bl	80038fc <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a60:	f7fd ff4c 	bl	80038fc <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e17a      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a72:	4b15      	ldr	r3, [pc, #84]	@ (8005ac8 <HAL_RCC_OscConfig+0x508>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d108      	bne.n	8005a98 <HAL_RCC_OscConfig+0x4d8>
 8005a86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a96:	e029      	b.n	8005aec <HAL_RCC_OscConfig+0x52c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b05      	cmp	r3, #5
 8005a9e:	d115      	bne.n	8005acc <HAL_RCC_OscConfig+0x50c>
 8005aa0:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa6:	4a07      	ldr	r2, [pc, #28]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005aa8:	f043 0304 	orr.w	r3, r3, #4
 8005aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ab0:	4b04      	ldr	r3, [pc, #16]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	4a03      	ldr	r2, [pc, #12]	@ (8005ac4 <HAL_RCC_OscConfig+0x504>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ac0:	e014      	b.n	8005aec <HAL_RCC_OscConfig+0x52c>
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40007000 	.word	0x40007000
 8005acc:	4b9c      	ldr	r3, [pc, #624]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad2:	4a9b      	ldr	r2, [pc, #620]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005adc:	4b98      	ldr	r3, [pc, #608]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae2:	4a97      	ldr	r2, [pc, #604]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d016      	beq.n	8005b22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7fd ff02 	bl	80038fc <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afc:	f7fd fefe 	bl	80038fc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e12a      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b12:	4b8b      	ldr	r3, [pc, #556]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ed      	beq.n	8005afc <HAL_RCC_OscConfig+0x53c>
 8005b20:	e015      	b.n	8005b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b22:	f7fd feeb 	bl	80038fc <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b28:	e00a      	b.n	8005b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2a:	f7fd fee7 	bl	80038fc <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e113      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b40:	4b7f      	ldr	r3, [pc, #508]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ed      	bne.n	8005b2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b4e:	7ffb      	ldrb	r3, [r7, #31]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d105      	bne.n	8005b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b54:	4b7a      	ldr	r3, [pc, #488]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b58:	4a79      	ldr	r2, [pc, #484]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b5e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80fe 	beq.w	8005d66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	f040 80d0 	bne.w	8005d14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b74:	4b72      	ldr	r3, [pc, #456]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 0203 	and.w	r2, r3, #3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d130      	bne.n	8005bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	3b01      	subs	r3, #1
 8005b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d127      	bne.n	8005bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d11f      	bne.n	8005bea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bb4:	2a07      	cmp	r2, #7
 8005bb6:	bf14      	ite	ne
 8005bb8:	2201      	movne	r2, #1
 8005bba:	2200      	moveq	r2, #0
 8005bbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d113      	bne.n	8005bea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d109      	bne.n	8005bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	3b01      	subs	r3, #1
 8005be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d06e      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d069      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bf0:	4b53      	ldr	r3, [pc, #332]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bfc:	4b50      	ldr	r3, [pc, #320]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0ad      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a4b      	ldr	r2, [pc, #300]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c18:	f7fd fe70 	bl	80038fc <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c20:	f7fd fe6c 	bl	80038fc <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e09a      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c32:	4b43      	ldr	r3, [pc, #268]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c3e:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	4b40      	ldr	r3, [pc, #256]	@ (8005d44 <HAL_RCC_OscConfig+0x784>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c4e:	3a01      	subs	r2, #1
 8005c50:	0112      	lsls	r2, r2, #4
 8005c52:	4311      	orrs	r1, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c58:	0212      	lsls	r2, r2, #8
 8005c5a:	4311      	orrs	r1, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c60:	0852      	lsrs	r2, r2, #1
 8005c62:	3a01      	subs	r2, #1
 8005c64:	0552      	lsls	r2, r2, #21
 8005c66:	4311      	orrs	r1, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c6c:	0852      	lsrs	r2, r2, #1
 8005c6e:	3a01      	subs	r2, #1
 8005c70:	0652      	lsls	r2, r2, #25
 8005c72:	4311      	orrs	r1, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c78:	0912      	lsrs	r2, r2, #4
 8005c7a:	0452      	lsls	r2, r2, #17
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	4930      	ldr	r1, [pc, #192]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c84:	4b2e      	ldr	r3, [pc, #184]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a2d      	ldr	r2, [pc, #180]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c90:	4b2b      	ldr	r3, [pc, #172]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4a2a      	ldr	r2, [pc, #168]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c9c:	f7fd fe2e 	bl	80038fc <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca4:	f7fd fe2a 	bl	80038fc <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e058      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cb6:	4b22      	ldr	r3, [pc, #136]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cc2:	e050      	b.n	8005d66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e04f      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d148      	bne.n	8005d66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a19      	ldr	r2, [pc, #100]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ce0:	4b17      	ldr	r3, [pc, #92]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4a16      	ldr	r2, [pc, #88]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cec:	f7fd fe06 	bl	80038fc <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fd fe02 	bl	80038fc <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e030      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	4b0e      	ldr	r3, [pc, #56]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x734>
 8005d12:	e028      	b.n	8005d66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b0c      	cmp	r3, #12
 8005d18:	d023      	beq.n	8005d62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1a:	4b09      	ldr	r3, [pc, #36]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a08      	ldr	r2, [pc, #32]	@ (8005d40 <HAL_RCC_OscConfig+0x780>)
 8005d20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d26:	f7fd fde9 	bl	80038fc <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d2c:	e00c      	b.n	8005d48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7fd fde5 	bl	80038fc <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d905      	bls.n	8005d48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e013      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d48:	4b09      	ldr	r3, [pc, #36]	@ (8005d70 <HAL_RCC_OscConfig+0x7b0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1ec      	bne.n	8005d2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d54:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <HAL_RCC_OscConfig+0x7b0>)
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	4905      	ldr	r1, [pc, #20]	@ (8005d70 <HAL_RCC_OscConfig+0x7b0>)
 8005d5a:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <HAL_RCC_OscConfig+0x7b4>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60cb      	str	r3, [r1, #12]
 8005d60:	e001      	b.n	8005d66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40021000 	.word	0x40021000
 8005d74:	feeefffc 	.word	0xfeeefffc

08005d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0e7      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b75      	ldr	r3, [pc, #468]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d910      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b72      	ldr	r3, [pc, #456]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 0207 	bic.w	r2, r3, #7
 8005da2:	4970      	ldr	r1, [pc, #448]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b6e      	ldr	r3, [pc, #440]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0cf      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d010      	beq.n	8005dea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	4b66      	ldr	r3, [pc, #408]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d908      	bls.n	8005dea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd8:	4b63      	ldr	r3, [pc, #396]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	4960      	ldr	r1, [pc, #384]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d04c      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d107      	bne.n	8005e0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d121      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0a6      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d107      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e16:	4b54      	ldr	r3, [pc, #336]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d115      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e09a      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e08e      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e086      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e4e:	4b46      	ldr	r3, [pc, #280]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f023 0203 	bic.w	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4943      	ldr	r1, [pc, #268]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e60:	f7fd fd4c 	bl	80038fc <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e66:	e00a      	b.n	8005e7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e68:	f7fd fd48 	bl	80038fc <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e06e      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 020c 	and.w	r2, r3, #12
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d1eb      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b31      	ldr	r3, [pc, #196]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d208      	bcs.n	8005ebe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eac:	4b2e      	ldr	r3, [pc, #184]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	492b      	ldr	r1, [pc, #172]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ebe:	4b29      	ldr	r3, [pc, #164]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d210      	bcs.n	8005eee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ecc:	4b25      	ldr	r3, [pc, #148]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f023 0207 	bic.w	r2, r3, #7
 8005ed4:	4923      	ldr	r1, [pc, #140]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005edc:	4b21      	ldr	r3, [pc, #132]	@ (8005f64 <HAL_RCC_ClockConfig+0x1ec>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d001      	beq.n	8005eee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e036      	b.n	8005f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efa:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	4918      	ldr	r1, [pc, #96]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f18:	4b13      	ldr	r3, [pc, #76]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4910      	ldr	r1, [pc, #64]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f2c:	f000 f824 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 8005f30:	4602      	mov	r2, r0
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <HAL_RCC_ClockConfig+0x1f0>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	490b      	ldr	r1, [pc, #44]	@ (8005f6c <HAL_RCC_ClockConfig+0x1f4>)
 8005f3e:	5ccb      	ldrb	r3, [r1, r3]
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	4a09      	ldr	r2, [pc, #36]	@ (8005f70 <HAL_RCC_ClockConfig+0x1f8>)
 8005f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f4c:	4b09      	ldr	r3, [pc, #36]	@ (8005f74 <HAL_RCC_ClockConfig+0x1fc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fd fc83 	bl	800385c <HAL_InitTick>
 8005f56:	4603      	mov	r3, r0
 8005f58:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40022000 	.word	0x40022000
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	0800e500 	.word	0x0800e500
 8005f70:	20000a0c 	.word	0x20000a0c
 8005f74:	20000a54 	.word	0x20000a54

08005f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b089      	sub	sp, #36	@ 0x24
 8005f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f86:	4b3e      	ldr	r3, [pc, #248]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f90:	4b3b      	ldr	r3, [pc, #236]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x34>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b0c      	cmp	r3, #12
 8005fa4:	d121      	bne.n	8005fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d11e      	bne.n	8005fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fac:	4b34      	ldr	r3, [pc, #208]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d107      	bne.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fb8:	4b31      	ldr	r3, [pc, #196]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	e005      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8006084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fe8:	e00a      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d102      	bne.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ff0:	4b25      	ldr	r3, [pc, #148]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	e004      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ffc:	4b23      	ldr	r3, [pc, #140]	@ (800608c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b0c      	cmp	r3, #12
 8006004:	d134      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006006:	4b1e      	ldr	r3, [pc, #120]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d003      	beq.n	800601e <HAL_RCC_GetSysClockFreq+0xa6>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b03      	cmp	r3, #3
 800601a:	d003      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0xac>
 800601c:	e005      	b.n	800602a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800601e:	4b1a      	ldr	r3, [pc, #104]	@ (8006088 <HAL_RCC_GetSysClockFreq+0x110>)
 8006020:	617b      	str	r3, [r7, #20]
      break;
 8006022:	e005      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006024:	4b19      	ldr	r3, [pc, #100]	@ (800608c <HAL_RCC_GetSysClockFreq+0x114>)
 8006026:	617b      	str	r3, [r7, #20]
      break;
 8006028:	e002      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	617b      	str	r3, [r7, #20]
      break;
 800602e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006030:	4b13      	ldr	r3, [pc, #76]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	3301      	adds	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800603e:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	fb03 f202 	mul.w	r2, r3, r2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	0e5b      	lsrs	r3, r3, #25
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	3301      	adds	r3, #1
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006070:	69bb      	ldr	r3, [r7, #24]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3724      	adds	r7, #36	@ 0x24
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	0800e518 	.word	0x0800e518
 8006088:	00f42400 	.word	0x00f42400
 800608c:	007a1200 	.word	0x007a1200

08006090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006094:	4b03      	ldr	r3, [pc, #12]	@ (80060a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006096:	681b      	ldr	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000a0c 	.word	0x20000a0c

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060ac:	f7ff fff0 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4904      	ldr	r1, [pc, #16]	@ (80060d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800e510 	.word	0x0800e510

080060d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060d8:	f7ff ffda 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0adb      	lsrs	r3, r3, #11
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4904      	ldr	r1, [pc, #16]	@ (80060fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000
 80060fc:	0800e510 	.word	0x0800e510

08006100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800610c:	4b2a      	ldr	r3, [pc, #168]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800610e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006118:	f7ff f922 	bl	8005360 <HAL_PWREx_GetVoltageRange>
 800611c:	6178      	str	r0, [r7, #20]
 800611e:	e014      	b.n	800614a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006120:	4b25      	ldr	r3, [pc, #148]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800612a:	6593      	str	r3, [r2, #88]	@ 0x58
 800612c:	4b22      	ldr	r3, [pc, #136]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800612e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006138:	f7ff f912 	bl	8005360 <HAL_PWREx_GetVoltageRange>
 800613c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800613e:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	4a1d      	ldr	r2, [pc, #116]	@ (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006148:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006150:	d10b      	bne.n	800616a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d919      	bls.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2ba0      	cmp	r3, #160	@ 0xa0
 800615c:	d902      	bls.n	8006164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800615e:	2302      	movs	r3, #2
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	e013      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006164:	2301      	movs	r3, #1
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	e010      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b80      	cmp	r3, #128	@ 0x80
 800616e:	d902      	bls.n	8006176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006170:	2303      	movs	r3, #3
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	e00a      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b80      	cmp	r3, #128	@ 0x80
 800617a:	d102      	bne.n	8006182 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800617c:	2302      	movs	r3, #2
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	e004      	b.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b70      	cmp	r3, #112	@ 0x70
 8006186:	d101      	bne.n	800618c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006188:	2301      	movs	r3, #1
 800618a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800618c:	4b0b      	ldr	r3, [pc, #44]	@ (80061bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 0207 	bic.w	r2, r3, #7
 8006194:	4909      	ldr	r1, [pc, #36]	@ (80061bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d001      	beq.n	80061ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40022000 	.word	0x40022000

080061c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061c8:	2300      	movs	r3, #0
 80061ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061cc:	2300      	movs	r3, #0
 80061ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d041      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061e4:	d02a      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061ea:	d824      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f0:	d008      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f6:	d81e      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006200:	d010      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006202:	e018      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006204:	4b86      	ldr	r3, [pc, #536]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4a85      	ldr	r2, [pc, #532]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006210:	e015      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3304      	adds	r3, #4
 8006216:	2100      	movs	r1, #0
 8006218:	4618      	mov	r0, r3
 800621a:	f000 facb 	bl	80067b4 <RCCEx_PLLSAI1_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006222:	e00c      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3320      	adds	r3, #32
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fbb6 	bl	800699c <RCCEx_PLLSAI2_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006234:	e003      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	74fb      	strb	r3, [r7, #19]
      break;
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800623c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800623e:	7cfb      	ldrb	r3, [r7, #19]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006244:	4b76      	ldr	r3, [pc, #472]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006252:	4973      	ldr	r1, [pc, #460]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800625a:	e001      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	7cfb      	ldrb	r3, [r7, #19]
 800625e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d041      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006270:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006274:	d02a      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006276:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800627a:	d824      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800627c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006280:	d008      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006286:	d81e      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800628c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006290:	d010      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006292:	e018      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006294:	4b62      	ldr	r3, [pc, #392]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4a61      	ldr	r2, [pc, #388]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800629a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062a0:	e015      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3304      	adds	r3, #4
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fa83 	bl	80067b4 <RCCEx_PLLSAI1_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062b2:	e00c      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3320      	adds	r3, #32
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fb6e 	bl	800699c <RCCEx_PLLSAI2_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062c4:	e003      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	74fb      	strb	r3, [r7, #19]
      break;
 80062ca:	e000      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80062cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062d4:	4b52      	ldr	r3, [pc, #328]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062e2:	494f      	ldr	r1, [pc, #316]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80062ea:	e001      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80a0 	beq.w	800643e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062fe:	2300      	movs	r3, #0
 8006300:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006302:	4b47      	ldr	r3, [pc, #284]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006312:	2300      	movs	r3, #0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00d      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006318:	4b41      	ldr	r3, [pc, #260]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631c:	4a40      	ldr	r2, [pc, #256]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006322:	6593      	str	r3, [r2, #88]	@ 0x58
 8006324:	4b3e      	ldr	r3, [pc, #248]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006330:	2301      	movs	r3, #1
 8006332:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006334:	4b3b      	ldr	r3, [pc, #236]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a3a      	ldr	r2, [pc, #232]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800633a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800633e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006340:	f7fd fadc 	bl	80038fc <HAL_GetTick>
 8006344:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006346:	e009      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006348:	f7fd fad8 	bl	80038fc <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d902      	bls.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	74fb      	strb	r3, [r7, #19]
        break;
 800635a:	e005      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800635c:	4b31      	ldr	r3, [pc, #196]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0ef      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006368:	7cfb      	ldrb	r3, [r7, #19]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d15c      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800636e:	4b2c      	ldr	r3, [pc, #176]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006378:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01f      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	429a      	cmp	r2, r3
 800638a:	d019      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800638c:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006396:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006398:	4b21      	ldr	r3, [pc, #132]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	4a20      	ldr	r2, [pc, #128]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063b8:	4a19      	ldr	r2, [pc, #100]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fd fa97 	bl	80038fc <HAL_GetTick>
 80063ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d0:	e00b      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d2:	f7fd fa93 	bl	80038fc <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d902      	bls.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	74fb      	strb	r3, [r7, #19]
            break;
 80063e8:	e006      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0ec      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063fe:	4b08      	ldr	r3, [pc, #32]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800640e:	4904      	ldr	r1, [pc, #16]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006416:	e009      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006418:	7cfb      	ldrb	r3, [r7, #19]
 800641a:	74bb      	strb	r3, [r7, #18]
 800641c:	e006      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800641e:	bf00      	nop
 8006420:	40021000 	.word	0x40021000
 8006424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800642c:	7c7b      	ldrb	r3, [r7, #17]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d105      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006432:	4b9e      	ldr	r3, [pc, #632]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006436:	4a9d      	ldr	r2, [pc, #628]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800643c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800644a:	4b98      	ldr	r3, [pc, #608]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	f023 0203 	bic.w	r2, r3, #3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	4994      	ldr	r1, [pc, #592]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800646c:	4b8f      	ldr	r3, [pc, #572]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006472:	f023 020c 	bic.w	r2, r3, #12
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647a:	498c      	ldr	r1, [pc, #560]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800648e:	4b87      	ldr	r3, [pc, #540]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006494:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	4983      	ldr	r1, [pc, #524]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064b0:	4b7e      	ldr	r3, [pc, #504]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	497b      	ldr	r1, [pc, #492]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064d2:	4b76      	ldr	r3, [pc, #472]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e0:	4972      	ldr	r1, [pc, #456]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f4:	4b6d      	ldr	r3, [pc, #436]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006502:	496a      	ldr	r1, [pc, #424]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006516:	4b65      	ldr	r3, [pc, #404]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006524:	4961      	ldr	r1, [pc, #388]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006538:	4b5c      	ldr	r3, [pc, #368]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006546:	4959      	ldr	r1, [pc, #356]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800655a:	4b54      	ldr	r3, [pc, #336]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006560:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006568:	4950      	ldr	r1, [pc, #320]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800657c:	4b4b      	ldr	r3, [pc, #300]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006582:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658a:	4948      	ldr	r1, [pc, #288]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800659e:	4b43      	ldr	r3, [pc, #268]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ac:	493f      	ldr	r1, [pc, #252]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d028      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065c0:	4b3a      	ldr	r3, [pc, #232]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ce:	4937      	ldr	r1, [pc, #220]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065de:	d106      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e0:	4b32      	ldr	r3, [pc, #200]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4a31      	ldr	r2, [pc, #196]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ea:	60d3      	str	r3, [r2, #12]
 80065ec:	e011      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065f6:	d10c      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	2101      	movs	r1, #1
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f8d8 	bl	80067b4 <RCCEx_PLLSAI1_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006608:	7cfb      	ldrb	r3, [r7, #19]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d028      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800661e:	4b23      	ldr	r3, [pc, #140]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006624:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662c:	491f      	ldr	r1, [pc, #124]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800663c:	d106      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800663e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	4a1a      	ldr	r2, [pc, #104]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006648:	60d3      	str	r3, [r2, #12]
 800664a:	e011      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006654:	d10c      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3304      	adds	r3, #4
 800665a:	2101      	movs	r1, #1
 800665c:	4618      	mov	r0, r3
 800665e:	f000 f8a9 	bl	80067b4 <RCCEx_PLLSAI1_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006666:	7cfb      	ldrb	r3, [r7, #19]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800666c:	7cfb      	ldrb	r3, [r7, #19]
 800666e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02b      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800667c:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668a:	4908      	ldr	r1, [pc, #32]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800669a:	d109      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800669c:	4b03      	ldr	r3, [pc, #12]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4a02      	ldr	r2, [pc, #8]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066a6:	60d3      	str	r3, [r2, #12]
 80066a8:	e014      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80066aa:	bf00      	nop
 80066ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066b8:	d10c      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3304      	adds	r3, #4
 80066be:	2101      	movs	r1, #1
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f877 	bl	80067b4 <RCCEx_PLLSAI1_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80066d0:	7cfb      	ldrb	r3, [r7, #19]
 80066d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d02f      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ee:	4928      	ldr	r1, [pc, #160]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066fe:	d10d      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2102      	movs	r1, #2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f854 	bl	80067b4 <RCCEx_PLLSAI1_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006710:	7cfb      	ldrb	r3, [r7, #19]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d014      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006716:	7cfb      	ldrb	r3, [r7, #19]
 8006718:	74bb      	strb	r3, [r7, #18]
 800671a:	e011      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006724:	d10c      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3320      	adds	r3, #32
 800672a:	2102      	movs	r1, #2
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f935 	bl	800699c <RCCEx_PLLSAI2_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006736:	7cfb      	ldrb	r3, [r7, #19]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800674c:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800675a:	490d      	ldr	r1, [pc, #52]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800676e:	4b08      	ldr	r3, [pc, #32]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006774:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800677e:	4904      	ldr	r1, [pc, #16]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006786:	7cbb      	ldrb	r3, [r7, #18]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40021000 	.word	0x40021000

08006794 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006798:	4b05      	ldr	r3, [pc, #20]	@ (80067b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a04      	ldr	r2, [pc, #16]	@ (80067b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800679e:	f043 0304 	orr.w	r3, r3, #4
 80067a2:	6013      	str	r3, [r2, #0]
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40021000 	.word	0x40021000

080067b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067c2:	4b75      	ldr	r3, [pc, #468]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d018      	beq.n	8006800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067ce:	4b72      	ldr	r3, [pc, #456]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f003 0203 	and.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d10d      	bne.n	80067fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
       ||
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067e6:	4b6c      	ldr	r3, [pc, #432]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
       ||
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d047      	beq.n	800688a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
 80067fe:	e044      	b.n	800688a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d018      	beq.n	800683a <RCCEx_PLLSAI1_Config+0x86>
 8006808:	2b03      	cmp	r3, #3
 800680a:	d825      	bhi.n	8006858 <RCCEx_PLLSAI1_Config+0xa4>
 800680c:	2b01      	cmp	r3, #1
 800680e:	d002      	beq.n	8006816 <RCCEx_PLLSAI1_Config+0x62>
 8006810:	2b02      	cmp	r3, #2
 8006812:	d009      	beq.n	8006828 <RCCEx_PLLSAI1_Config+0x74>
 8006814:	e020      	b.n	8006858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006816:	4b60      	ldr	r3, [pc, #384]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d11d      	bne.n	800685e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006826:	e01a      	b.n	800685e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006828:	4b5b      	ldr	r3, [pc, #364]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006830:	2b00      	cmp	r3, #0
 8006832:	d116      	bne.n	8006862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006838:	e013      	b.n	8006862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800683a:	4b57      	ldr	r3, [pc, #348]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10f      	bne.n	8006866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006846:	4b54      	ldr	r3, [pc, #336]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006856:	e006      	b.n	8006866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	e004      	b.n	8006868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006866:	bf00      	nop
    }

    if(status == HAL_OK)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800686e:	4b4a      	ldr	r3, [pc, #296]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6819      	ldr	r1, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	3b01      	subs	r3, #1
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	430b      	orrs	r3, r1
 8006884:	4944      	ldr	r1, [pc, #272]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006886:	4313      	orrs	r3, r2
 8006888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d17d      	bne.n	800698c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006890:	4b41      	ldr	r3, [pc, #260]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a40      	ldr	r2, [pc, #256]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800689a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689c:	f7fd f82e 	bl	80038fc <HAL_GetTick>
 80068a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068a2:	e009      	b.n	80068b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068a4:	f7fd f82a 	bl	80038fc <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d902      	bls.n	80068b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	73fb      	strb	r3, [r7, #15]
        break;
 80068b6:	e005      	b.n	80068c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068b8:	4b37      	ldr	r3, [pc, #220]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1ef      	bne.n	80068a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d160      	bne.n	800698c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d111      	bne.n	80068f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068d0:	4b31      	ldr	r3, [pc, #196]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80068d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6892      	ldr	r2, [r2, #8]
 80068e0:	0211      	lsls	r1, r2, #8
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	68d2      	ldr	r2, [r2, #12]
 80068e6:	0912      	lsrs	r2, r2, #4
 80068e8:	0452      	lsls	r2, r2, #17
 80068ea:	430a      	orrs	r2, r1
 80068ec:	492a      	ldr	r1, [pc, #168]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	610b      	str	r3, [r1, #16]
 80068f2:	e027      	b.n	8006944 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d112      	bne.n	8006920 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068fa:	4b27      	ldr	r3, [pc, #156]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006902:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6892      	ldr	r2, [r2, #8]
 800690a:	0211      	lsls	r1, r2, #8
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6912      	ldr	r2, [r2, #16]
 8006910:	0852      	lsrs	r2, r2, #1
 8006912:	3a01      	subs	r2, #1
 8006914:	0552      	lsls	r2, r2, #21
 8006916:	430a      	orrs	r2, r1
 8006918:	491f      	ldr	r1, [pc, #124]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800691a:	4313      	orrs	r3, r2
 800691c:	610b      	str	r3, [r1, #16]
 800691e:	e011      	b.n	8006944 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006920:	4b1d      	ldr	r3, [pc, #116]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006928:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6892      	ldr	r2, [r2, #8]
 8006930:	0211      	lsls	r1, r2, #8
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6952      	ldr	r2, [r2, #20]
 8006936:	0852      	lsrs	r2, r2, #1
 8006938:	3a01      	subs	r2, #1
 800693a:	0652      	lsls	r2, r2, #25
 800693c:	430a      	orrs	r2, r1
 800693e:	4916      	ldr	r1, [pc, #88]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006940:	4313      	orrs	r3, r2
 8006942:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006944:	4b14      	ldr	r3, [pc, #80]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a13      	ldr	r2, [pc, #76]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800694a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800694e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fc ffd4 	bl	80038fc <HAL_GetTick>
 8006954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006956:	e009      	b.n	800696c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006958:	f7fc ffd0 	bl	80038fc <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d902      	bls.n	800696c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	73fb      	strb	r3, [r7, #15]
          break;
 800696a:	e005      	b.n	8006978 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ef      	beq.n	8006958 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	4904      	ldr	r1, [pc, #16]	@ (8006998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006988:	4313      	orrs	r3, r2
 800698a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000

0800699c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d018      	beq.n	80069e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069b6:	4b67      	ldr	r3, [pc, #412]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0203 	and.w	r2, r3, #3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d10d      	bne.n	80069e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
       ||
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80069ce:	4b61      	ldr	r3, [pc, #388]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	091b      	lsrs	r3, r3, #4
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
       ||
 80069de:	429a      	cmp	r2, r3
 80069e0:	d047      	beq.n	8006a72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]
 80069e6:	e044      	b.n	8006a72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d018      	beq.n	8006a22 <RCCEx_PLLSAI2_Config+0x86>
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d825      	bhi.n	8006a40 <RCCEx_PLLSAI2_Config+0xa4>
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d002      	beq.n	80069fe <RCCEx_PLLSAI2_Config+0x62>
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d009      	beq.n	8006a10 <RCCEx_PLLSAI2_Config+0x74>
 80069fc:	e020      	b.n	8006a40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069fe:	4b55      	ldr	r3, [pc, #340]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11d      	bne.n	8006a46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a0e:	e01a      	b.n	8006a46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a10:	4b50      	ldr	r3, [pc, #320]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d116      	bne.n	8006a4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a20:	e013      	b.n	8006a4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a22:	4b4c      	ldr	r3, [pc, #304]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10f      	bne.n	8006a4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a2e:	4b49      	ldr	r3, [pc, #292]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a3e:	e006      	b.n	8006a4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
      break;
 8006a44:	e004      	b.n	8006a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a46:	bf00      	nop
 8006a48:	e002      	b.n	8006a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a4a:	bf00      	nop
 8006a4c:	e000      	b.n	8006a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10d      	bne.n	8006a72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a56:	4b3f      	ldr	r3, [pc, #252]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6819      	ldr	r1, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	4939      	ldr	r1, [pc, #228]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d167      	bne.n	8006b48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a78:	4b36      	ldr	r3, [pc, #216]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a35      	ldr	r2, [pc, #212]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a84:	f7fc ff3a 	bl	80038fc <HAL_GetTick>
 8006a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a8a:	e009      	b.n	8006aa0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a8c:	f7fc ff36 	bl	80038fc <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d902      	bls.n	8006aa0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a9e:	e005      	b.n	8006aac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ef      	bne.n	8006a8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d14a      	bne.n	8006b48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d111      	bne.n	8006adc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ab8:	4b26      	ldr	r3, [pc, #152]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6892      	ldr	r2, [r2, #8]
 8006ac8:	0211      	lsls	r1, r2, #8
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68d2      	ldr	r2, [r2, #12]
 8006ace:	0912      	lsrs	r2, r2, #4
 8006ad0:	0452      	lsls	r2, r2, #17
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	491f      	ldr	r1, [pc, #124]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	614b      	str	r3, [r1, #20]
 8006ada:	e011      	b.n	8006b00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006adc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006ae4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6892      	ldr	r2, [r2, #8]
 8006aec:	0211      	lsls	r1, r2, #8
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6912      	ldr	r2, [r2, #16]
 8006af2:	0852      	lsrs	r2, r2, #1
 8006af4:	3a01      	subs	r2, #1
 8006af6:	0652      	lsls	r2, r2, #25
 8006af8:	430a      	orrs	r2, r1
 8006afa:	4916      	ldr	r1, [pc, #88]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b00:	4b14      	ldr	r3, [pc, #80]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a13      	ldr	r2, [pc, #76]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fc fef6 	bl	80038fc <HAL_GetTick>
 8006b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b12:	e009      	b.n	8006b28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b14:	f7fc fef2 	bl	80038fc <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d902      	bls.n	8006b28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	73fb      	strb	r3, [r7, #15]
          break;
 8006b26:	e005      	b.n	8006b34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b28:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ef      	beq.n	8006b14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b3a:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	4904      	ldr	r1, [pc, #16]	@ (8006b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000

08006b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e095      	b.n	8006c96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d108      	bne.n	8006b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b7a:	d009      	beq.n	8006b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	61da      	str	r2, [r3, #28]
 8006b82:	e005      	b.n	8006b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f877 	bl	8006c9e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bd0:	d902      	bls.n	8006bd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e002      	b.n	8006bde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006be6:	d007      	beq.n	8006bf8 <HAL_SPI_Init+0xa0>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bf0:	d002      	beq.n	8006bf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3a:	ea42 0103 	orr.w	r1, r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	0c1b      	lsrs	r3, r3, #16
 8006c54:	f003 0204 	and.w	r2, r3, #4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c74:	ea42 0103 	orr.w	r1, r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b08a      	sub	sp, #40	@ 0x28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cc4:	f7fc fe1a 	bl	80038fc <HAL_GetTick>
 8006cc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006cd8:	887b      	ldrh	r3, [r7, #2]
 8006cda:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006cdc:	887b      	ldrh	r3, [r7, #2]
 8006cde:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ce0:	7ffb      	ldrb	r3, [r7, #31]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d00c      	beq.n	8006d00 <HAL_SPI_TransmitReceive+0x4e>
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cec:	d106      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x4a>
 8006cf6:	7ffb      	ldrb	r3, [r7, #31]
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d001      	beq.n	8006d00 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e1f3      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x60>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x60>
 8006d0c:	887b      	ldrh	r3, [r7, #2]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e1e8      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x72>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e1e1      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x436>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d003      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2205      	movs	r2, #5
 8006d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	887a      	ldrh	r2, [r7, #2]
 8006d50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	887a      	ldrh	r2, [r7, #2]
 8006d58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	887a      	ldrh	r2, [r7, #2]
 8006d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	887a      	ldrh	r2, [r7, #2]
 8006d6c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d82:	d802      	bhi.n	8006d8a <HAL_SPI_TransmitReceive+0xd8>
 8006d84:	8abb      	ldrh	r3, [r7, #20]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d908      	bls.n	8006d9c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	e007      	b.n	8006dac <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006daa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db6:	2b40      	cmp	r3, #64	@ 0x40
 8006db8:	d007      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006dd2:	f240 8083 	bls.w	8006edc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x132>
 8006dde:	8afb      	ldrh	r3, [r7, #22]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d16f      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	881a      	ldrh	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	1c9a      	adds	r2, r3, #2
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e08:	e05c      	b.n	8006ec4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d11b      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x19e>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <HAL_SPI_TransmitReceive+0x19e>
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d113      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	881a      	ldrh	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	1c9a      	adds	r2, r3, #2
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d11c      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x1e6>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d016      	beq.n	8006e98 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e74:	b292      	uxth	r2, r2
 8006e76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e94:	2301      	movs	r3, #1
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e98:	f7fc fd30 	bl	80038fc <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d80d      	bhi.n	8006ec4 <HAL_SPI_TransmitReceive+0x212>
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d009      	beq.n	8006ec4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e111      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d19d      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x158>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d197      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x158>
 8006eda:	e0e5      	b.n	80070a8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x23a>
 8006ee4:	8afb      	ldrh	r3, [r7, #22]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	f040 80d1 	bne.w	800708e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d912      	bls.n	8006f1c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	881a      	ldrh	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	1c9a      	adds	r2, r3, #2
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b02      	subs	r3, #2
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f1a:	e0b8      	b.n	800708e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	330c      	adds	r3, #12
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f42:	e0a4      	b.n	800708e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d134      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x30a>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d02f      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x30a>
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d12c      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d912      	bls.n	8006f92 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f70:	881a      	ldrh	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7c:	1c9a      	adds	r2, r3, #2
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b02      	subs	r3, #2
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f90:	e012      	b.n	8006fb8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d148      	bne.n	800705c <HAL_SPI_TransmitReceive+0x3aa>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d042      	beq.n	800705c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d923      	bls.n	800702a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fec:	b292      	uxth	r2, r2
 8006fee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff4:	1c9a      	adds	r2, r3, #2
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b02      	subs	r3, #2
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d81f      	bhi.n	8007058 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007026:	605a      	str	r2, [r3, #4]
 8007028:	e016      	b.n	8007058 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f103 020c 	add.w	r2, r3, #12
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007058:	2301      	movs	r3, #1
 800705a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800705c:	f7fc fc4e 	bl	80038fc <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007068:	429a      	cmp	r2, r3
 800706a:	d803      	bhi.n	8007074 <HAL_SPI_TransmitReceive+0x3c2>
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d102      	bne.n	800707a <HAL_SPI_TransmitReceive+0x3c8>
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e02c      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	f47f af55 	bne.w	8006f44 <HAL_SPI_TransmitReceive+0x292>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f47f af4e 	bne.w	8006f44 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f94b 	bl	8007348 <SPI_EndRxTxTransaction>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e00e      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80070e6:	2300      	movs	r3, #0
  }
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	@ 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070fe:	b2db      	uxtb	r3, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800711c:	f7fc fbee 	bl	80038fc <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	4413      	add	r3, r2
 800712a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800712c:	f7fc fbe6 	bl	80038fc <HAL_GetTick>
 8007130:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007132:	4b39      	ldr	r3, [pc, #228]	@ (8007218 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	015b      	lsls	r3, r3, #5
 8007138:	0d1b      	lsrs	r3, r3, #20
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	fb02 f303 	mul.w	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007142:	e054      	b.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d050      	beq.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800714c:	f7fc fbd6 	bl	80038fc <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	429a      	cmp	r2, r3
 800715a:	d902      	bls.n	8007162 <SPI_WaitFlagStateUntilTimeout+0x56>
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d13d      	bne.n	80071de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800717a:	d111      	bne.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007184:	d004      	beq.n	8007190 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718e:	d107      	bne.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800719e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a8:	d10f      	bne.n	80071ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e017      	b.n	800720e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4013      	ands	r3, r2
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	bf0c      	ite	eq
 80071fe:	2301      	moveq	r3, #1
 8007200:	2300      	movne	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	429a      	cmp	r2, r3
 800720a:	d19b      	bne.n	8007144 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000a0c 	.word	0x20000a0c

0800721c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	@ 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800722e:	f7fc fb65 	bl	80038fc <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	4413      	add	r3, r2
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800723e:	f7fc fb5d 	bl	80038fc <HAL_GetTick>
 8007242:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800724c:	4b3d      	ldr	r3, [pc, #244]	@ (8007344 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	00da      	lsls	r2, r3, #3
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	0d1b      	lsrs	r3, r3, #20
 800725c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800725e:	fb02 f303 	mul.w	r3, r2, r3
 8007262:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007264:	e060      	b.n	8007328 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800726c:	d107      	bne.n	800727e <SPI_WaitFifoStateUntilTimeout+0x62>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800727c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d050      	beq.n	8007328 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007286:	f7fc fb39 	bl	80038fc <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007292:	429a      	cmp	r2, r3
 8007294:	d902      	bls.n	800729c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	2b00      	cmp	r3, #0
 800729a:	d13d      	bne.n	8007318 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072b4:	d111      	bne.n	80072da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072be:	d004      	beq.n	80072ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c8:	d107      	bne.n	80072da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e2:	d10f      	bne.n	8007304 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007302:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e010      	b.n	800733a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	3b01      	subs	r3, #1
 8007326:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	4013      	ands	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d196      	bne.n	8007266 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3728      	adds	r7, #40	@ 0x28
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000a0c 	.word	0x20000a0c

08007348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af02      	add	r7, sp, #8
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff ff5b 	bl	800721c <SPI_WaitFifoStateUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e027      	b.n	80073cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	2180      	movs	r1, #128	@ 0x80
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fec0 	bl	800710c <SPI_WaitFlagStateUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007396:	f043 0220 	orr.w	r2, r3, #32
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e014      	b.n	80073cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff ff34 	bl	800721c <SPI_WaitFifoStateUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073be:	f043 0220 	orr.w	r2, r3, #32
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e000      	b.n	80073cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e049      	b.n	800747a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fb f9c0 	bl	8002780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f000 fa9e 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	d001      	beq.n	800749c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e04f      	b.n	800753c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a23      	ldr	r2, [pc, #140]	@ (8007548 <HAL_TIM_Base_Start_IT+0xc4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01d      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c6:	d018      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1f      	ldr	r2, [pc, #124]	@ (800754c <HAL_TIM_Base_Start_IT+0xc8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007550 <HAL_TIM_Base_Start_IT+0xcc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007554 <HAL_TIM_Base_Start_IT+0xd0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007558 <HAL_TIM_Base_Start_IT+0xd4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a19      	ldr	r2, [pc, #100]	@ (800755c <HAL_TIM_Base_Start_IT+0xd8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d115      	bne.n	8007526 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	4b17      	ldr	r3, [pc, #92]	@ (8007560 <HAL_TIM_Base_Start_IT+0xdc>)
 8007502:	4013      	ands	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d015      	beq.n	8007538 <HAL_TIM_Base_Start_IT+0xb4>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007512:	d011      	beq.n	8007538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007524:	e008      	b.n	8007538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e000      	b.n	800753a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	40012c00 	.word	0x40012c00
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40013400 	.word	0x40013400
 800755c:	40014000 	.word	0x40014000
 8007560:	00010007 	.word	0x00010007

08007564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d020      	beq.n	80075c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01b      	beq.n	80075c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0202 	mvn.w	r2, #2
 8007598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f9b2 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 80075b4:	e005      	b.n	80075c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f9a4 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f9b5 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d020      	beq.n	8007614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01b      	beq.n	8007614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0204 	mvn.w	r2, #4
 80075e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f98c 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 8007600:	e005      	b.n	800760e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f97e 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f98f 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d020      	beq.n	8007660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01b      	beq.n	8007660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0208 	mvn.w	r2, #8
 8007630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f966 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 800764c:	e005      	b.n	800765a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f958 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f969 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b00      	cmp	r3, #0
 8007668:	d020      	beq.n	80076ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01b      	beq.n	80076ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0210 	mvn.w	r2, #16
 800767c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2208      	movs	r2, #8
 8007682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f940 	bl	8007918 <HAL_TIM_IC_CaptureCallback>
 8007698:	e005      	b.n	80076a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f932 	bl	8007904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f943 	bl	800792c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00c      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0201 	mvn.w	r2, #1
 80076c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fa fe30 	bl	8002330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fafd 	bl	8007cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00c      	beq.n	8007722 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800771a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 faf5 	bl	8007d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00c      	beq.n	8007746 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800773e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f8fd 	bl	8007940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00c      	beq.n	800776a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f06f 0220 	mvn.w	r2, #32
 8007762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fabd 	bl	8007ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_TIM_ConfigClockSource+0x1c>
 800778a:	2302      	movs	r3, #2
 800778c:	e0b6      	b.n	80078fc <HAL_TIM_ConfigClockSource+0x18a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2202      	movs	r2, #2
 800779a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ca:	d03e      	beq.n	800784a <HAL_TIM_ConfigClockSource+0xd8>
 80077cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d0:	f200 8087 	bhi.w	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 80077d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d8:	f000 8086 	beq.w	80078e8 <HAL_TIM_ConfigClockSource+0x176>
 80077dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e0:	d87f      	bhi.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 80077e2:	2b70      	cmp	r3, #112	@ 0x70
 80077e4:	d01a      	beq.n	800781c <HAL_TIM_ConfigClockSource+0xaa>
 80077e6:	2b70      	cmp	r3, #112	@ 0x70
 80077e8:	d87b      	bhi.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 80077ea:	2b60      	cmp	r3, #96	@ 0x60
 80077ec:	d050      	beq.n	8007890 <HAL_TIM_ConfigClockSource+0x11e>
 80077ee:	2b60      	cmp	r3, #96	@ 0x60
 80077f0:	d877      	bhi.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 80077f2:	2b50      	cmp	r3, #80	@ 0x50
 80077f4:	d03c      	beq.n	8007870 <HAL_TIM_ConfigClockSource+0xfe>
 80077f6:	2b50      	cmp	r3, #80	@ 0x50
 80077f8:	d873      	bhi.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 80077fa:	2b40      	cmp	r3, #64	@ 0x40
 80077fc:	d058      	beq.n	80078b0 <HAL_TIM_ConfigClockSource+0x13e>
 80077fe:	2b40      	cmp	r3, #64	@ 0x40
 8007800:	d86f      	bhi.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 8007802:	2b30      	cmp	r3, #48	@ 0x30
 8007804:	d064      	beq.n	80078d0 <HAL_TIM_ConfigClockSource+0x15e>
 8007806:	2b30      	cmp	r3, #48	@ 0x30
 8007808:	d86b      	bhi.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 800780a:	2b20      	cmp	r3, #32
 800780c:	d060      	beq.n	80078d0 <HAL_TIM_ConfigClockSource+0x15e>
 800780e:	2b20      	cmp	r3, #32
 8007810:	d867      	bhi.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d05c      	beq.n	80078d0 <HAL_TIM_ConfigClockSource+0x15e>
 8007816:	2b10      	cmp	r3, #16
 8007818:	d05a      	beq.n	80078d0 <HAL_TIM_ConfigClockSource+0x15e>
 800781a:	e062      	b.n	80078e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800782c:	f000 f9b2 	bl	8007b94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800783e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	609a      	str	r2, [r3, #8]
      break;
 8007848:	e04f      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800785a:	f000 f99b 	bl	8007b94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800786c:	609a      	str	r2, [r3, #8]
      break;
 800786e:	e03c      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787c:	461a      	mov	r2, r3
 800787e:	f000 f90f 	bl	8007aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2150      	movs	r1, #80	@ 0x50
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f968 	bl	8007b5e <TIM_ITRx_SetConfig>
      break;
 800788e:	e02c      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800789c:	461a      	mov	r2, r3
 800789e:	f000 f92e 	bl	8007afe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2160      	movs	r1, #96	@ 0x60
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 f958 	bl	8007b5e <TIM_ITRx_SetConfig>
      break;
 80078ae:	e01c      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078bc:	461a      	mov	r2, r3
 80078be:	f000 f8ef 	bl	8007aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2140      	movs	r1, #64	@ 0x40
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f948 	bl	8007b5e <TIM_ITRx_SetConfig>
      break;
 80078ce:	e00c      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f000 f93f 	bl	8007b5e <TIM_ITRx_SetConfig>
      break;
 80078e0:	e003      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	73fb      	strb	r3, [r7, #15]
      break;
 80078e6:	e000      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80078e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a46      	ldr	r2, [pc, #280]	@ (8007a80 <TIM_Base_SetConfig+0x12c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007972:	d00f      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a43      	ldr	r2, [pc, #268]	@ (8007a84 <TIM_Base_SetConfig+0x130>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00b      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a42      	ldr	r2, [pc, #264]	@ (8007a88 <TIM_Base_SetConfig+0x134>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d007      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a41      	ldr	r2, [pc, #260]	@ (8007a8c <TIM_Base_SetConfig+0x138>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a40      	ldr	r2, [pc, #256]	@ (8007a90 <TIM_Base_SetConfig+0x13c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d108      	bne.n	80079a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a35      	ldr	r2, [pc, #212]	@ (8007a80 <TIM_Base_SetConfig+0x12c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01f      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b4:	d01b      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a32      	ldr	r2, [pc, #200]	@ (8007a84 <TIM_Base_SetConfig+0x130>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d017      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a31      	ldr	r2, [pc, #196]	@ (8007a88 <TIM_Base_SetConfig+0x134>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a30      	ldr	r2, [pc, #192]	@ (8007a8c <TIM_Base_SetConfig+0x138>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00f      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007a90 <TIM_Base_SetConfig+0x13c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00b      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007a94 <TIM_Base_SetConfig+0x140>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d007      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <TIM_Base_SetConfig+0x144>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d003      	beq.n	80079ee <TIM_Base_SetConfig+0x9a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2c      	ldr	r2, [pc, #176]	@ (8007a9c <TIM_Base_SetConfig+0x148>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d108      	bne.n	8007a00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a16      	ldr	r2, [pc, #88]	@ (8007a80 <TIM_Base_SetConfig+0x12c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00f      	beq.n	8007a4c <TIM_Base_SetConfig+0xf8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a18      	ldr	r2, [pc, #96]	@ (8007a90 <TIM_Base_SetConfig+0x13c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00b      	beq.n	8007a4c <TIM_Base_SetConfig+0xf8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a17      	ldr	r2, [pc, #92]	@ (8007a94 <TIM_Base_SetConfig+0x140>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d007      	beq.n	8007a4c <TIM_Base_SetConfig+0xf8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a16      	ldr	r2, [pc, #88]	@ (8007a98 <TIM_Base_SetConfig+0x144>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d003      	beq.n	8007a4c <TIM_Base_SetConfig+0xf8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a15      	ldr	r2, [pc, #84]	@ (8007a9c <TIM_Base_SetConfig+0x148>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d103      	bne.n	8007a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d105      	bne.n	8007a72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f023 0201 	bic.w	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	611a      	str	r2, [r3, #16]
  }
}
 8007a72:	bf00      	nop
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40012c00 	.word	0x40012c00
 8007a84:	40000400 	.word	0x40000400
 8007a88:	40000800 	.word	0x40000800
 8007a8c:	40000c00 	.word	0x40000c00
 8007a90:	40013400 	.word	0x40013400
 8007a94:	40014000 	.word	0x40014000
 8007a98:	40014400 	.word	0x40014400
 8007a9c:	40014800 	.word	0x40014800

08007aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	f023 0201 	bic.w	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f023 030a 	bic.w	r3, r3, #10
 8007adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b087      	sub	sp, #28
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	f023 0210 	bic.w	r2, r3, #16
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	031b      	lsls	r3, r3, #12
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	621a      	str	r2, [r3, #32]
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f043 0307 	orr.w	r3, r3, #7
 8007b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	609a      	str	r2, [r3, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	021a      	lsls	r2, r3, #8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	609a      	str	r2, [r3, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	371c      	adds	r7, #28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e068      	b.n	8007cbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a2e      	ldr	r2, [pc, #184]	@ (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d004      	beq.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d108      	bne.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1e      	ldr	r2, [pc, #120]	@ (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01d      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5e:	d018      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a18      	ldr	r2, [pc, #96]	@ (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d009      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a13      	ldr	r2, [pc, #76]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a14      	ldr	r2, [pc, #80]	@ (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d10c      	bne.n	8007cac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40012c00 	.word	0x40012c00
 8007cd0:	40013400 	.word	0x40013400
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800
 8007cdc:	40000c00 	.word	0x40000c00
 8007ce0:	40014000 	.word	0x40014000

08007ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e040      	b.n	8007db4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fa fd78 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2224      	movs	r2, #36	@ 0x24
 8007d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0201 	bic.w	r2, r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fb6a 	bl	8008440 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f8af 	bl	8007ed0 <UART_SetConfig>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e01b      	b.n	8007db4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fbe9 	bl	8008584 <UART_CheckIdleState>
 8007db2:	4603      	mov	r3, r0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	@ 0x28
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	d177      	bne.n	8007ec4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <HAL_UART_Transmit+0x24>
 8007dda:	88fb      	ldrh	r3, [r7, #6]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e070      	b.n	8007ec6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2221      	movs	r2, #33	@ 0x21
 8007df0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007df2:	f7fb fd83 	bl	80038fc <HAL_GetTick>
 8007df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	88fa      	ldrh	r2, [r7, #6]
 8007dfc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e10:	d108      	bne.n	8007e24 <HAL_UART_Transmit+0x68>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d104      	bne.n	8007e24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	e003      	b.n	8007e2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e2c:	e02f      	b.n	8007e8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2200      	movs	r2, #0
 8007e36:	2180      	movs	r1, #128	@ 0x80
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 fc4b 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e03b      	b.n	8007ec6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10b      	bne.n	8007e6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	881a      	ldrh	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e60:	b292      	uxth	r2, r2
 8007e62:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	3302      	adds	r3, #2
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e007      	b.n	8007e7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	781a      	ldrb	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1c9      	bne.n	8007e2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2140      	movs	r1, #64	@ 0x40
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fc15 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e005      	b.n	8007ec6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e000      	b.n	8007ec6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007ec4:	2302      	movs	r3, #2
  }
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed4:	b08a      	sub	sp, #40	@ 0x28
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4ba4      	ldr	r3, [pc, #656]	@ (8008190 <UART_SetConfig+0x2c0>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	6812      	ldr	r2, [r2, #0]
 8007f06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a99      	ldr	r2, [pc, #612]	@ (8008194 <UART_SetConfig+0x2c4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a90      	ldr	r2, [pc, #576]	@ (8008198 <UART_SetConfig+0x2c8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d126      	bne.n	8007fa8 <UART_SetConfig+0xd8>
 8007f5a:	4b90      	ldr	r3, [pc, #576]	@ (800819c <UART_SetConfig+0x2cc>)
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d81b      	bhi.n	8007fa0 <UART_SetConfig+0xd0>
 8007f68:	a201      	add	r2, pc, #4	@ (adr r2, 8007f70 <UART_SetConfig+0xa0>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	08007f89 	.word	0x08007f89
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f86:	e116      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f8e:	e112      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007f90:	2304      	movs	r3, #4
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f96:	e10e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f9e:	e10a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fa6:	e106      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a7c      	ldr	r2, [pc, #496]	@ (80081a0 <UART_SetConfig+0x2d0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d138      	bne.n	8008024 <UART_SetConfig+0x154>
 8007fb2:	4b7a      	ldr	r3, [pc, #488]	@ (800819c <UART_SetConfig+0x2cc>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb8:	f003 030c 	and.w	r3, r3, #12
 8007fbc:	2b0c      	cmp	r3, #12
 8007fbe:	d82d      	bhi.n	800801c <UART_SetConfig+0x14c>
 8007fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc8 <UART_SetConfig+0xf8>)
 8007fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc6:	bf00      	nop
 8007fc8:	08007ffd 	.word	0x08007ffd
 8007fcc:	0800801d 	.word	0x0800801d
 8007fd0:	0800801d 	.word	0x0800801d
 8007fd4:	0800801d 	.word	0x0800801d
 8007fd8:	0800800d 	.word	0x0800800d
 8007fdc:	0800801d 	.word	0x0800801d
 8007fe0:	0800801d 	.word	0x0800801d
 8007fe4:	0800801d 	.word	0x0800801d
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	0800801d 	.word	0x0800801d
 8007ff0:	0800801d 	.word	0x0800801d
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008002:	e0d8      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008004:	2302      	movs	r3, #2
 8008006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800800a:	e0d4      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800800c:	2304      	movs	r3, #4
 800800e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008012:	e0d0      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008014:	2308      	movs	r3, #8
 8008016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800801a:	e0cc      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800801c:	2310      	movs	r3, #16
 800801e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008022:	e0c8      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a5e      	ldr	r2, [pc, #376]	@ (80081a4 <UART_SetConfig+0x2d4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d125      	bne.n	800807a <UART_SetConfig+0x1aa>
 800802e:	4b5b      	ldr	r3, [pc, #364]	@ (800819c <UART_SetConfig+0x2cc>)
 8008030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008034:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008038:	2b30      	cmp	r3, #48	@ 0x30
 800803a:	d016      	beq.n	800806a <UART_SetConfig+0x19a>
 800803c:	2b30      	cmp	r3, #48	@ 0x30
 800803e:	d818      	bhi.n	8008072 <UART_SetConfig+0x1a2>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d00a      	beq.n	800805a <UART_SetConfig+0x18a>
 8008044:	2b20      	cmp	r3, #32
 8008046:	d814      	bhi.n	8008072 <UART_SetConfig+0x1a2>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <UART_SetConfig+0x182>
 800804c:	2b10      	cmp	r3, #16
 800804e:	d008      	beq.n	8008062 <UART_SetConfig+0x192>
 8008050:	e00f      	b.n	8008072 <UART_SetConfig+0x1a2>
 8008052:	2300      	movs	r3, #0
 8008054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008058:	e0ad      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800805a:	2302      	movs	r3, #2
 800805c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008060:	e0a9      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008062:	2304      	movs	r3, #4
 8008064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008068:	e0a5      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800806a:	2308      	movs	r3, #8
 800806c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008070:	e0a1      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008072:	2310      	movs	r3, #16
 8008074:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008078:	e09d      	b.n	80081b6 <UART_SetConfig+0x2e6>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a4a      	ldr	r2, [pc, #296]	@ (80081a8 <UART_SetConfig+0x2d8>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d125      	bne.n	80080d0 <UART_SetConfig+0x200>
 8008084:	4b45      	ldr	r3, [pc, #276]	@ (800819c <UART_SetConfig+0x2cc>)
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800808e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008090:	d016      	beq.n	80080c0 <UART_SetConfig+0x1f0>
 8008092:	2bc0      	cmp	r3, #192	@ 0xc0
 8008094:	d818      	bhi.n	80080c8 <UART_SetConfig+0x1f8>
 8008096:	2b80      	cmp	r3, #128	@ 0x80
 8008098:	d00a      	beq.n	80080b0 <UART_SetConfig+0x1e0>
 800809a:	2b80      	cmp	r3, #128	@ 0x80
 800809c:	d814      	bhi.n	80080c8 <UART_SetConfig+0x1f8>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <UART_SetConfig+0x1d8>
 80080a2:	2b40      	cmp	r3, #64	@ 0x40
 80080a4:	d008      	beq.n	80080b8 <UART_SetConfig+0x1e8>
 80080a6:	e00f      	b.n	80080c8 <UART_SetConfig+0x1f8>
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080ae:	e082      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080b6:	e07e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080be:	e07a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080c6:	e076      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080ce:	e072      	b.n	80081b6 <UART_SetConfig+0x2e6>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a35      	ldr	r2, [pc, #212]	@ (80081ac <UART_SetConfig+0x2dc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d12a      	bne.n	8008130 <UART_SetConfig+0x260>
 80080da:	4b30      	ldr	r3, [pc, #192]	@ (800819c <UART_SetConfig+0x2cc>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080e8:	d01a      	beq.n	8008120 <UART_SetConfig+0x250>
 80080ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ee:	d81b      	bhi.n	8008128 <UART_SetConfig+0x258>
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f4:	d00c      	beq.n	8008110 <UART_SetConfig+0x240>
 80080f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080fa:	d815      	bhi.n	8008128 <UART_SetConfig+0x258>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <UART_SetConfig+0x238>
 8008100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008104:	d008      	beq.n	8008118 <UART_SetConfig+0x248>
 8008106:	e00f      	b.n	8008128 <UART_SetConfig+0x258>
 8008108:	2300      	movs	r3, #0
 800810a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800810e:	e052      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008110:	2302      	movs	r3, #2
 8008112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008116:	e04e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800811e:	e04a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008126:	e046      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800812e:	e042      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a17      	ldr	r2, [pc, #92]	@ (8008194 <UART_SetConfig+0x2c4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d13a      	bne.n	80081b0 <UART_SetConfig+0x2e0>
 800813a:	4b18      	ldr	r3, [pc, #96]	@ (800819c <UART_SetConfig+0x2cc>)
 800813c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008140:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008144:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008148:	d01a      	beq.n	8008180 <UART_SetConfig+0x2b0>
 800814a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800814e:	d81b      	bhi.n	8008188 <UART_SetConfig+0x2b8>
 8008150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008154:	d00c      	beq.n	8008170 <UART_SetConfig+0x2a0>
 8008156:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800815a:	d815      	bhi.n	8008188 <UART_SetConfig+0x2b8>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <UART_SetConfig+0x298>
 8008160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008164:	d008      	beq.n	8008178 <UART_SetConfig+0x2a8>
 8008166:	e00f      	b.n	8008188 <UART_SetConfig+0x2b8>
 8008168:	2300      	movs	r3, #0
 800816a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800816e:	e022      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008170:	2302      	movs	r3, #2
 8008172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008176:	e01e      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008178:	2304      	movs	r3, #4
 800817a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800817e:	e01a      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008180:	2308      	movs	r3, #8
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008186:	e016      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008188:	2310      	movs	r3, #16
 800818a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800818e:	e012      	b.n	80081b6 <UART_SetConfig+0x2e6>
 8008190:	efff69f3 	.word	0xefff69f3
 8008194:	40008000 	.word	0x40008000
 8008198:	40013800 	.word	0x40013800
 800819c:	40021000 	.word	0x40021000
 80081a0:	40004400 	.word	0x40004400
 80081a4:	40004800 	.word	0x40004800
 80081a8:	40004c00 	.word	0x40004c00
 80081ac:	40005000 	.word	0x40005000
 80081b0:	2310      	movs	r3, #16
 80081b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a9f      	ldr	r2, [pc, #636]	@ (8008438 <UART_SetConfig+0x568>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d17a      	bne.n	80082b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d824      	bhi.n	8008212 <UART_SetConfig+0x342>
 80081c8:	a201      	add	r2, pc, #4	@ (adr r2, 80081d0 <UART_SetConfig+0x300>)
 80081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ce:	bf00      	nop
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	08008213 	.word	0x08008213
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	08008213 	.word	0x08008213
 80081e0:	08008203 	.word	0x08008203
 80081e4:	08008213 	.word	0x08008213
 80081e8:	08008213 	.word	0x08008213
 80081ec:	08008213 	.word	0x08008213
 80081f0:	0800820b 	.word	0x0800820b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fd ff58 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80081f8:	61f8      	str	r0, [r7, #28]
        break;
 80081fa:	e010      	b.n	800821e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081fc:	4b8f      	ldr	r3, [pc, #572]	@ (800843c <UART_SetConfig+0x56c>)
 80081fe:	61fb      	str	r3, [r7, #28]
        break;
 8008200:	e00d      	b.n	800821e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008202:	f7fd feb9 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 8008206:	61f8      	str	r0, [r7, #28]
        break;
 8008208:	e009      	b.n	800821e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800820e:	61fb      	str	r3, [r7, #28]
        break;
 8008210:	e005      	b.n	800821e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800821c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80fb 	beq.w	800841c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4413      	add	r3, r2
 8008230:	69fa      	ldr	r2, [r7, #28]
 8008232:	429a      	cmp	r2, r3
 8008234:	d305      	bcc.n	8008242 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	429a      	cmp	r2, r3
 8008240:	d903      	bls.n	800824a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008248:	e0e8      	b.n	800841c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2200      	movs	r2, #0
 800824e:	461c      	mov	r4, r3
 8008250:	4615      	mov	r5, r2
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	022b      	lsls	r3, r5, #8
 800825c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008260:	0222      	lsls	r2, r4, #8
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	6849      	ldr	r1, [r1, #4]
 8008266:	0849      	lsrs	r1, r1, #1
 8008268:	2000      	movs	r0, #0
 800826a:	4688      	mov	r8, r1
 800826c:	4681      	mov	r9, r0
 800826e:	eb12 0a08 	adds.w	sl, r2, r8
 8008272:	eb43 0b09 	adc.w	fp, r3, r9
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008284:	4650      	mov	r0, sl
 8008286:	4659      	mov	r1, fp
 8008288:	f7f8 fcb6 	bl	8000bf8 <__aeabi_uldivmod>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4613      	mov	r3, r2
 8008292:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800829a:	d308      	bcc.n	80082ae <UART_SetConfig+0x3de>
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082a2:	d204      	bcs.n	80082ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	60da      	str	r2, [r3, #12]
 80082ac:	e0b6      	b.n	800841c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80082b4:	e0b2      	b.n	800841c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082be:	d15e      	bne.n	800837e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80082c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d828      	bhi.n	800831a <UART_SetConfig+0x44a>
 80082c8:	a201      	add	r2, pc, #4	@ (adr r2, 80082d0 <UART_SetConfig+0x400>)
 80082ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ce:	bf00      	nop
 80082d0:	080082f5 	.word	0x080082f5
 80082d4:	080082fd 	.word	0x080082fd
 80082d8:	08008305 	.word	0x08008305
 80082dc:	0800831b 	.word	0x0800831b
 80082e0:	0800830b 	.word	0x0800830b
 80082e4:	0800831b 	.word	0x0800831b
 80082e8:	0800831b 	.word	0x0800831b
 80082ec:	0800831b 	.word	0x0800831b
 80082f0:	08008313 	.word	0x08008313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f4:	f7fd fed8 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80082f8:	61f8      	str	r0, [r7, #28]
        break;
 80082fa:	e014      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082fc:	f7fd feea 	bl	80060d4 <HAL_RCC_GetPCLK2Freq>
 8008300:	61f8      	str	r0, [r7, #28]
        break;
 8008302:	e010      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008304:	4b4d      	ldr	r3, [pc, #308]	@ (800843c <UART_SetConfig+0x56c>)
 8008306:	61fb      	str	r3, [r7, #28]
        break;
 8008308:	e00d      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800830a:	f7fd fe35 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 800830e:	61f8      	str	r0, [r7, #28]
        break;
 8008310:	e009      	b.n	8008326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008316:	61fb      	str	r3, [r7, #28]
        break;
 8008318:	e005      	b.n	8008326 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d077      	beq.n	800841c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	005a      	lsls	r2, r3, #1
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	085b      	lsrs	r3, r3, #1
 8008336:	441a      	add	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b0f      	cmp	r3, #15
 8008346:	d916      	bls.n	8008376 <UART_SetConfig+0x4a6>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800834e:	d212      	bcs.n	8008376 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	b29b      	uxth	r3, r3
 8008354:	f023 030f 	bic.w	r3, r3, #15
 8008358:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	b29b      	uxth	r3, r3
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	b29a      	uxth	r2, r3
 8008366:	8afb      	ldrh	r3, [r7, #22]
 8008368:	4313      	orrs	r3, r2
 800836a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	8afa      	ldrh	r2, [r7, #22]
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	e052      	b.n	800841c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800837c:	e04e      	b.n	800841c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800837e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008382:	2b08      	cmp	r3, #8
 8008384:	d827      	bhi.n	80083d6 <UART_SetConfig+0x506>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <UART_SetConfig+0x4bc>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083b1 	.word	0x080083b1
 8008390:	080083b9 	.word	0x080083b9
 8008394:	080083c1 	.word	0x080083c1
 8008398:	080083d7 	.word	0x080083d7
 800839c:	080083c7 	.word	0x080083c7
 80083a0:	080083d7 	.word	0x080083d7
 80083a4:	080083d7 	.word	0x080083d7
 80083a8:	080083d7 	.word	0x080083d7
 80083ac:	080083cf 	.word	0x080083cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083b0:	f7fd fe7a 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 80083b4:	61f8      	str	r0, [r7, #28]
        break;
 80083b6:	e014      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083b8:	f7fd fe8c 	bl	80060d4 <HAL_RCC_GetPCLK2Freq>
 80083bc:	61f8      	str	r0, [r7, #28]
        break;
 80083be:	e010      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c0:	4b1e      	ldr	r3, [pc, #120]	@ (800843c <UART_SetConfig+0x56c>)
 80083c2:	61fb      	str	r3, [r7, #28]
        break;
 80083c4:	e00d      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083c6:	f7fd fdd7 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 80083ca:	61f8      	str	r0, [r7, #28]
        break;
 80083cc:	e009      	b.n	80083e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083d2:	61fb      	str	r3, [r7, #28]
        break;
 80083d4:	e005      	b.n	80083e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80083e0:	bf00      	nop
    }

    if (pclk != 0U)
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d019      	beq.n	800841c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	085a      	lsrs	r2, r3, #1
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	441a      	add	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b0f      	cmp	r3, #15
 8008400:	d909      	bls.n	8008416 <UART_SetConfig+0x546>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008408:	d205      	bcs.n	8008416 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60da      	str	r2, [r3, #12]
 8008414:	e002      	b.n	800841c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008428:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800842c:	4618      	mov	r0, r3
 800842e:	3728      	adds	r7, #40	@ 0x28
 8008430:	46bd      	mov	sp, r7
 8008432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008436:	bf00      	nop
 8008438:	40008000 	.word	0x40008000
 800843c:	00f42400 	.word	0x00f42400

08008440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	f003 0308 	and.w	r3, r3, #8
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800853e:	d10a      	bne.n	8008556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]
  }
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b098      	sub	sp, #96	@ 0x60
 8008588:	af02      	add	r7, sp, #8
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008594:	f7fb f9b2 	bl	80038fc <HAL_GetTick>
 8008598:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0308 	and.w	r3, r3, #8
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d12e      	bne.n	8008606 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085b0:	2200      	movs	r2, #0
 80085b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f88c 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d021      	beq.n	8008606 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e6      	bne.n	80085c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e062      	b.n	80086cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b04      	cmp	r3, #4
 8008612:	d149      	bne.n	80086a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800861c:	2200      	movs	r2, #0
 800861e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f856 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d03c      	beq.n	80086a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	623b      	str	r3, [r7, #32]
   return(result);
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800864c:	633b      	str	r3, [r7, #48]	@ 0x30
 800864e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e6      	bne.n	800862e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0301 	bic.w	r3, r3, #1
 8008676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008680:	61fa      	str	r2, [r7, #28]
 8008682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	617b      	str	r3, [r7, #20]
   return(result);
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e5      	bne.n	8008660 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e011      	b.n	80086cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3758      	adds	r7, #88	@ 0x58
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	4613      	mov	r3, r2
 80086e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e4:	e04f      	b.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ec:	d04b      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ee:	f7fb f905 	bl	80038fc <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <UART_WaitOnFlagUntilTimeout+0x30>
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e04e      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d037      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b80      	cmp	r3, #128	@ 0x80
 800871a:	d034      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b40      	cmp	r3, #64	@ 0x40
 8008720:	d031      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b08      	cmp	r3, #8
 800872e:	d110      	bne.n	8008752 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2208      	movs	r2, #8
 8008736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f838 	bl	80087ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2208      	movs	r2, #8
 8008742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e029      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800875c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008760:	d111      	bne.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800876a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f81e 	bl	80087ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2220      	movs	r2, #32
 8008776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e00f      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69da      	ldr	r2, [r3, #28]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4013      	ands	r3, r2
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	bf0c      	ite	eq
 8008796:	2301      	moveq	r3, #1
 8008798:	2300      	movne	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d0a0      	beq.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b095      	sub	sp, #84	@ 0x54
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80087d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e6      	bne.n	80087b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	e853 3f00 	ldrex	r3, [r3]
 80087f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	f023 0301 	bic.w	r3, r3, #1
 80087fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3308      	adds	r3, #8
 8008806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800880a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800880e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e5      	bne.n	80087e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008820:	2b01      	cmp	r3, #1
 8008822:	d118      	bne.n	8008856 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	60bb      	str	r3, [r7, #8]
   return(result);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f023 0310 	bic.w	r3, r3, #16
 8008838:	647b      	str	r3, [r7, #68]	@ 0x44
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008842:	61bb      	str	r3, [r7, #24]
 8008844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	6979      	ldr	r1, [r7, #20]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	613b      	str	r3, [r7, #16]
   return(result);
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e6      	bne.n	8008824 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800886a:	bf00      	nop
 800886c:	3754      	adds	r7, #84	@ 0x54
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008876:	b084      	sub	sp, #16
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	f107 001c 	add.w	r0, r7, #28
 8008884:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fa69 	bl	8008d6c <USB_CoreReset>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800889e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80088b2:	e005      	b.n	80088c0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088cc:	b004      	add	sp, #16
 80088ce:	4770      	bx	lr

080088d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f023 0201 	bic.w	r2, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d115      	bne.n	8008940 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008920:	200a      	movs	r0, #10
 8008922:	f7fa fff7 	bl	8003914 <HAL_Delay>
      ms += 10U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	330a      	adds	r3, #10
 800892a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa0f 	bl	8008d50 <USB_GetMode>
 8008932:	4603      	mov	r3, r0
 8008934:	2b01      	cmp	r3, #1
 8008936:	d01e      	beq.n	8008976 <USB_SetCurrentMode+0x84>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2bc7      	cmp	r3, #199	@ 0xc7
 800893c:	d9f0      	bls.n	8008920 <USB_SetCurrentMode+0x2e>
 800893e:	e01a      	b.n	8008976 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d115      	bne.n	8008972 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008952:	200a      	movs	r0, #10
 8008954:	f7fa ffde 	bl	8003914 <HAL_Delay>
      ms += 10U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	330a      	adds	r3, #10
 800895c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9f6 	bl	8008d50 <USB_GetMode>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <USB_SetCurrentMode+0x84>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2bc7      	cmp	r3, #199	@ 0xc7
 800896e:	d9f0      	bls.n	8008952 <USB_SetCurrentMode+0x60>
 8008970:	e001      	b.n	8008976 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e005      	b.n	8008982 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2bc8      	cmp	r3, #200	@ 0xc8
 800897a:	d101      	bne.n	8008980 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800898c:	b084      	sub	sp, #16
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800899a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	e009      	b.n	80089c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	3340      	adds	r3, #64	@ 0x40
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3301      	adds	r3, #1
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b0e      	cmp	r3, #14
 80089c4:	d9f2      	bls.n	80089ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d11c      	bne.n	8008a08 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	e005      	b.n	8008a14 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a20:	2103      	movs	r1, #3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f95a 	bl	8008cdc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a28:	2110      	movs	r1, #16
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8f6 	bl	8008c1c <USB_FlushTxFifo>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f920 	bl	8008c80 <USB_FlushRxFifo>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a50:	461a      	mov	r2, r3
 8008a52:	2300      	movs	r3, #0
 8008a54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a6e:	2300      	movs	r3, #0
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	e043      	b.n	8008afc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a8a:	d118      	bne.n	8008abe <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e013      	b.n	8008ad0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	e008      	b.n	8008ad0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aca:	461a      	mov	r2, r3
 8008acc:	2300      	movs	r3, #0
 8008ace:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008adc:	461a      	mov	r2, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aee:	461a      	mov	r2, r3
 8008af0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008af4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b00:	461a      	mov	r2, r3
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d3b5      	bcc.n	8008a74 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	e043      	b.n	8008b96 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b24:	d118      	bne.n	8008b58 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	e013      	b.n	8008b6a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	e008      	b.n	8008b6a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b64:	461a      	mov	r2, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b76:	461a      	mov	r2, r3
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	3301      	adds	r3, #1
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d3b5      	bcc.n	8008b0e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bb4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008bc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f043 0210 	orr.w	r2, r3, #16
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	699a      	ldr	r2, [r3, #24]
 8008bd4:	4b10      	ldr	r3, [pc, #64]	@ (8008c18 <USB_DevInit+0x28c>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008bdc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	f043 0208 	orr.w	r2, r3, #8
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bf0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d107      	bne.n	8008c08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c00:	f043 0304 	orr.w	r3, r3, #4
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c14:	b004      	add	sp, #16
 8008c16:	4770      	bx	lr
 8008c18:	803c3800 	.word	0x803c3800

08008c1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c36:	d901      	bls.n	8008c3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e01b      	b.n	8008c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	daf2      	bge.n	8008c2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	019b      	lsls	r3, r3, #6
 8008c4c:	f043 0220 	orr.w	r2, r3, #32
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3301      	adds	r3, #1
 8008c58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c60:	d901      	bls.n	8008c66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e006      	b.n	8008c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0320 	and.w	r3, r3, #32
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	d0f0      	beq.n	8008c54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c98:	d901      	bls.n	8008c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e018      	b.n	8008cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	daf2      	bge.n	8008c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2210      	movs	r2, #16
 8008cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cbc:	d901      	bls.n	8008cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e006      	b.n	8008cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b10      	cmp	r3, #16
 8008ccc:	d0f0      	beq.n	8008cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d3c:	f043 0302 	orr.w	r3, r3, #2
 8008d40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d84:	d901      	bls.n	8008d8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e01b      	b.n	8008dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	daf2      	bge.n	8008d78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f043 0201 	orr.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008dae:	d901      	bls.n	8008db4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e006      	b.n	8008dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d0f0      	beq.n	8008da2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b08c      	sub	sp, #48	@ 0x30
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	603b      	str	r3, [r7, #0]
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	71fb      	strb	r3, [r7, #7]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	71bb      	strb	r3, [r7, #6]
 8008dde:	4613      	mov	r3, r2
 8008de0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8008de6:	79bb      	ldrb	r3, [r7, #6]
 8008de8:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8008dea:	797b      	ldrb	r3, [r7, #5]
 8008dec:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008dee:	f107 030c 	add.w	r3, r7, #12
 8008df2:	2207      	movs	r2, #7
 8008df4:	2100      	movs	r1, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f004 fa34 	bl	800d264 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dfc:	f107 0318 	add.w	r3, r7, #24
 8008e00:	2218      	movs	r2, #24
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f004 fa2d 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e0a:	233f      	movs	r3, #63	@ 0x3f
 8008e0c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008e0e:	238a      	movs	r3, #138	@ 0x8a
 8008e10:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008e12:	f107 0314 	add.w	r3, r7, #20
 8008e16:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008e18:	2303      	movs	r3, #3
 8008e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008e22:	2307      	movs	r3, #7
 8008e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008e26:	f107 0318 	add.w	r3, r7, #24
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fd25 	bl	800987c <hci_send_req>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	da01      	bge.n	8008e3c <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8008e38:	23ff      	movs	r3, #255	@ 0xff
 8008e3a:	e014      	b.n	8008e66 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008e3c:	7b3b      	ldrb	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008e42:	7b3b      	ldrb	r3, [r7, #12]
 8008e44:	e00f      	b.n	8008e66 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008e46:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008e50:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e58:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008e5a:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e62:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3730      	adds	r7, #48	@ 0x30
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b08e      	sub	sp, #56	@ 0x38
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008e82:	f107 0314 	add.w	r3, r7, #20
 8008e86:	2207      	movs	r2, #7
 8008e88:	2100      	movs	r1, #0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f004 f9ea 	bl	800d264 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e90:	f107 0320 	add.w	r3, r7, #32
 8008e94:	2218      	movs	r2, #24
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f004 f9e3 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e9e:	233f      	movs	r3, #63	@ 0x3f
 8008ea0:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8008ea2:	238a      	movs	r3, #138	@ 0x8a
 8008ea4:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8008ea6:	f107 031c 	add.w	r3, r7, #28
 8008eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8008eac:	2301      	movs	r3, #1
 8008eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8008eb6:	2307      	movs	r3, #7
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008eba:	f107 0320 	add.w	r3, r7, #32
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fcdb 	bl	800987c <hci_send_req>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	da01      	bge.n	8008ed0 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008ecc:	23ff      	movs	r3, #255	@ 0xff
 8008ece:	e014      	b.n	8008efa <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8008ed0:	7d3b      	ldrb	r3, [r7, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8008ed6:	7d3b      	ldrb	r3, [r7, #20]
 8008ed8:	e00f      	b.n	8008efa <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008eda:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008ee4:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008eee:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3738      	adds	r7, #56	@ 0x38
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008f02:	b590      	push	{r4, r7, lr}
 8008f04:	b091      	sub	sp, #68	@ 0x44
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	603a      	str	r2, [r7, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	71fb      	strb	r3, [r7, #7]
 8008f10:	460b      	mov	r3, r1
 8008f12:	71bb      	strb	r3, [r7, #6]
 8008f14:	4613      	mov	r3, r2
 8008f16:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008f18:	79fb      	ldrb	r3, [r7, #7]
 8008f1a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008f1c:	79bb      	ldrb	r3, [r7, #6]
 8008f1e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008f20:	79bb      	ldrb	r3, [r7, #6]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	f107 030e 	add.w	r3, r7, #14
 8008f2c:	6814      	ldr	r4, [r2, #0]
 8008f2e:	6850      	ldr	r0, [r2, #4]
 8008f30:	6891      	ldr	r1, [r2, #8]
 8008f32:	68d2      	ldr	r2, [r2, #12]
 8008f34:	601c      	str	r4, [r3, #0]
 8008f36:	6058      	str	r0, [r3, #4]
 8008f38:	6099      	str	r1, [r3, #8]
 8008f3a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008f3c:	797b      	ldrb	r3, [r7, #5]
 8008f3e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008f40:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8008f44:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008f46:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008f4a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f50:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8008f54:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8008f58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008f60:	2218      	movs	r2, #24
 8008f62:	2100      	movs	r1, #0
 8008f64:	4618      	mov	r0, r3
 8008f66:	f004 f97d 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f6a:	233f      	movs	r3, #63	@ 0x3f
 8008f6c:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008f6e:	2386      	movs	r3, #134	@ 0x86
 8008f70:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8008f72:	f107 030c 	add.w	r3, r7, #12
 8008f76:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008f78:	231a      	movs	r3, #26
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8008f7c:	f107 030b 	add.w	r3, r7, #11
 8008f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8008f82:	2301      	movs	r3, #1
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fc75 	bl	800987c <hci_send_req>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	da01      	bge.n	8008f9c <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008f98:	23ff      	movs	r3, #255	@ 0xff
 8008f9a:	e005      	b.n	8008fa8 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008f9c:	7afb      	ldrb	r3, [r7, #11]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	e000      	b.n	8008fa8 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3744      	adds	r7, #68	@ 0x44
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd90      	pop	{r4, r7, pc}

08008fb0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008fb6:	f107 0308 	add.w	r3, r7, #8
 8008fba:	2218      	movs	r2, #24
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f004 f950 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008fc4:	233f      	movs	r3, #63	@ 0x3f
 8008fc6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008fc8:	f240 1301 	movw	r3, #257	@ 0x101
 8008fcc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008fce:	1dfb      	adds	r3, r7, #7
 8008fd0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008fd6:	f107 0308 	add.w	r3, r7, #8
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fc4d 	bl	800987c <hci_send_req>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	da01      	bge.n	8008fec <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008fe8:	23ff      	movs	r3, #255	@ 0xff
 8008fea:	e000      	b.n	8008fee <aci_gatt_init+0x3e>

  return status;
 8008fec:	79fb      	ldrb	r3, [r7, #7]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3720      	adds	r7, #32
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b090      	sub	sp, #64	@ 0x40
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	4611      	mov	r1, r2
 8009000:	461a      	mov	r2, r3
 8009002:	4603      	mov	r3, r0
 8009004:	71fb      	strb	r3, [r7, #7]
 8009006:	460b      	mov	r3, r1
 8009008:	71bb      	strb	r3, [r7, #6]
 800900a:	4613      	mov	r3, r2
 800900c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8009014:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009018:	3340      	adds	r3, #64	@ 0x40
 800901a:	443b      	add	r3, r7
 800901c:	79fa      	ldrb	r2, [r7, #7]
 800901e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009022:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009026:	3301      	adds	r3, #1
 8009028:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d103      	bne.n	800903a <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009032:	2302      	movs	r3, #2
 8009034:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009038:	e002      	b.n	8009040 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800903a:	2310      	movs	r3, #16
 800903c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009040:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009044:	f107 020c 	add.w	r2, r7, #12
 8009048:	4413      	add	r3, r2
 800904a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	4618      	mov	r0, r3
 8009052:	f004 f982 	bl	800d35a <memcpy>
  indx +=  uuid_len;
 8009056:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800905a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800905e:	4413      	add	r3, r2
 8009060:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8009064:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009068:	3340      	adds	r3, #64	@ 0x40
 800906a:	443b      	add	r3, r7
 800906c:	79ba      	ldrb	r2, [r7, #6]
 800906e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009072:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009076:	3301      	adds	r3, #1
 8009078:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800907c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009080:	3340      	adds	r3, #64	@ 0x40
 8009082:	443b      	add	r3, r7
 8009084:	797a      	ldrb	r2, [r7, #5]
 8009086:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800908a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800908e:	3301      	adds	r3, #1
 8009090:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009094:	f107 0320 	add.w	r3, r7, #32
 8009098:	2203      	movs	r2, #3
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f004 f8e1 	bl	800d264 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80090a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090a6:	2218      	movs	r2, #24
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f004 f8da 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80090b0:	233f      	movs	r3, #63	@ 0x3f
 80090b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80090b4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80090b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 80090ba:	f107 030c 	add.w	r3, r7, #12
 80090be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 80090c0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80090c4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 80090c6:	f107 0320 	add.w	r3, r7, #32
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80090cc:	2303      	movs	r3, #3
 80090ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80090d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090d4:	2100      	movs	r1, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fbd0 	bl	800987c <hci_send_req>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da01      	bge.n	80090e6 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80090e2:	23ff      	movs	r3, #255	@ 0xff
 80090e4:	e00c      	b.n	8009100 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80090e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <aci_gatt_add_serv+0xfe>
    return resp.status;
 80090ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090f2:	e005      	b.n	8009100 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80090f4:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090fc:	801a      	strh	r2, [r3, #0]

  return 0;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3740      	adds	r7, #64	@ 0x40
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b092      	sub	sp, #72	@ 0x48
 800910c:	af00      	add	r7, sp, #0
 800910e:	603a      	str	r2, [r7, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	4603      	mov	r3, r0
 8009114:	80fb      	strh	r3, [r7, #6]
 8009116:	460b      	mov	r3, r1
 8009118:	717b      	strb	r3, [r7, #5]
 800911a:	4613      	mov	r3, r2
 800911c:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8009124:	88fb      	ldrh	r3, [r7, #6]
 8009126:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009128:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800912c:	f107 020c 	add.w	r2, r7, #12
 8009130:	4413      	add	r3, r2
 8009132:	88fa      	ldrh	r2, [r7, #6]
 8009134:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009136:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800913a:	3302      	adds	r3, #2
 800913c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8009140:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009144:	3348      	adds	r3, #72	@ 0x48
 8009146:	443b      	add	r3, r7
 8009148:	797a      	ldrb	r2, [r7, #5]
 800914a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800914e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009152:	3301      	adds	r3, #1
 8009154:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8009158:	797b      	ldrb	r3, [r7, #5]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d103      	bne.n	8009166 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 800915e:	2302      	movs	r3, #2
 8009160:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009164:	e002      	b.n	800916c <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8009166:	2310      	movs	r3, #16
 8009168:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800916c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009170:	f107 020c 	add.w	r2, r7, #12
 8009174:	4413      	add	r3, r2
 8009176:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f004 f8ec 	bl	800d35a <memcpy>
  indx +=  uuid_len;
 8009182:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009186:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800918a:	4413      	add	r3, r2
 800918c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8009190:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009194:	3348      	adds	r3, #72	@ 0x48
 8009196:	443b      	add	r3, r7
 8009198:	793a      	ldrb	r2, [r7, #4]
 800919a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800919e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091a2:	3301      	adds	r3, #1
 80091a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 80091a8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091ac:	3348      	adds	r3, #72	@ 0x48
 80091ae:	443b      	add	r3, r7
 80091b0:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80091b4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80091b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091bc:	3301      	adds	r3, #1
 80091be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 80091c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091c6:	3348      	adds	r3, #72	@ 0x48
 80091c8:	443b      	add	r3, r7
 80091ca:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80091ce:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80091d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091d6:	3301      	adds	r3, #1
 80091d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 80091dc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091e0:	3348      	adds	r3, #72	@ 0x48
 80091e2:	443b      	add	r3, r7
 80091e4:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80091e8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80091ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091f0:	3301      	adds	r3, #1
 80091f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 80091f6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80091fa:	3348      	adds	r3, #72	@ 0x48
 80091fc:	443b      	add	r3, r7
 80091fe:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8009202:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009206:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800920a:	3301      	adds	r3, #1
 800920c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8009210:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009214:	3348      	adds	r3, #72	@ 0x48
 8009216:	443b      	add	r3, r7
 8009218:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800921c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009220:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009224:	3301      	adds	r3, #1
 8009226:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800922a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800922e:	2203      	movs	r2, #3
 8009230:	2100      	movs	r1, #0
 8009232:	4618      	mov	r0, r3
 8009234:	f004 f816 	bl	800d264 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009238:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800923c:	2218      	movs	r2, #24
 800923e:	2100      	movs	r1, #0
 8009240:	4618      	mov	r0, r3
 8009242:	f004 f80f 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009246:	233f      	movs	r3, #63	@ 0x3f
 8009248:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800924a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800924e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009250:	f107 030c 	add.w	r3, r7, #12
 8009254:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009256:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800925a:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800925c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009260:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009262:	2303      	movs	r3, #3
 8009264:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8009266:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fb05 	bl	800987c <hci_send_req>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	da01      	bge.n	800927c <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009278:	23ff      	movs	r3, #255	@ 0xff
 800927a:	e00c      	b.n	8009296 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 800927c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <aci_gatt_add_char+0x182>
    return resp.status;
 8009284:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009288:	e005      	b.n	8009296 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800928a:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 800928e:	b29a      	uxth	r2, r3
 8009290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009292:	801a      	strh	r2, [r3, #0]

  return 0;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3748      	adds	r7, #72	@ 0x48
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800929e:	b590      	push	{r4, r7, lr}
 80092a0:	b0ab      	sub	sp, #172	@ 0xac
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	4604      	mov	r4, r0
 80092a6:	4608      	mov	r0, r1
 80092a8:	4611      	mov	r1, r2
 80092aa:	461a      	mov	r2, r3
 80092ac:	4623      	mov	r3, r4
 80092ae:	80fb      	strh	r3, [r7, #6]
 80092b0:	4603      	mov	r3, r0
 80092b2:	80bb      	strh	r3, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
 80092b8:	4613      	mov	r3, r2
 80092ba:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80092c2:	78bb      	ldrb	r3, [r7, #2]
 80092c4:	2b7a      	cmp	r3, #122	@ 0x7a
 80092c6:	d901      	bls.n	80092cc <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80092c8:	2342      	movs	r3, #66	@ 0x42
 80092ca:	e074      	b.n	80093b6 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 80092cc:	88fb      	ldrh	r3, [r7, #6]
 80092ce:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80092d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80092d4:	f107 0208 	add.w	r2, r7, #8
 80092d8:	4413      	add	r3, r2
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80092de:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80092e2:	3302      	adds	r3, #2
 80092e4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 80092e8:	88bb      	ldrh	r3, [r7, #4]
 80092ea:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80092ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80092f0:	f107 0208 	add.w	r2, r7, #8
 80092f4:	4413      	add	r3, r2
 80092f6:	88ba      	ldrh	r2, [r7, #4]
 80092f8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80092fa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80092fe:	3302      	adds	r3, #2
 8009300:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8009304:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009308:	33a8      	adds	r3, #168	@ 0xa8
 800930a:	443b      	add	r3, r7
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009312:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009316:	3301      	adds	r3, #1
 8009318:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 800931c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009320:	33a8      	adds	r3, #168	@ 0xa8
 8009322:	443b      	add	r3, r7
 8009324:	78ba      	ldrb	r2, [r7, #2]
 8009326:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800932a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800932e:	3301      	adds	r3, #1
 8009330:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009334:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009338:	f107 0208 	add.w	r2, r7, #8
 800933c:	4413      	add	r3, r2
 800933e:	78ba      	ldrb	r2, [r7, #2]
 8009340:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8009344:	4618      	mov	r0, r3
 8009346:	f004 f808 	bl	800d35a <memcpy>
  indx +=  charValueLen;
 800934a:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800934e:	78bb      	ldrb	r3, [r7, #2]
 8009350:	4413      	add	r3, r2
 8009352:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009356:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800935a:	2218      	movs	r2, #24
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f003 ff80 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009364:	233f      	movs	r3, #63	@ 0x3f
 8009366:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800936a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800936e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8009372:	f107 0308 	add.w	r3, r7, #8
 8009376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800937a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800937e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8009382:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8009386:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800938a:	2301      	movs	r3, #1
 800938c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8009390:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009394:	2100      	movs	r1, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fa70 	bl	800987c <hci_send_req>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	da01      	bge.n	80093a6 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 80093a2:	23ff      	movs	r3, #255	@ 0xff
 80093a4:	e007      	b.n	80093b6 <aci_gatt_update_char_value+0x118>

  if (status) {
 80093a6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <aci_gatt_update_char_value+0x116>
    return status;
 80093ae:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80093b2:	e000      	b.n	80093b6 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	37ac      	adds	r7, #172	@ 0xac
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd90      	pop	{r4, r7, pc}

080093be <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b08a      	sub	sp, #40	@ 0x28
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	4603      	mov	r3, r0
 80093c6:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80093cc:	f107 0310 	add.w	r3, r7, #16
 80093d0:	2218      	movs	r2, #24
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f003 ff45 	bl	800d264 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 80093da:	233f      	movs	r3, #63	@ 0x3f
 80093dc:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 80093de:	f240 1327 	movw	r3, #295	@ 0x127
 80093e2:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 80093e4:	f107 030c 	add.w	r3, r7, #12
 80093e8:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80093ea:	2302      	movs	r3, #2
 80093ec:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 80093ee:	f107 030b 	add.w	r3, r7, #11
 80093f2:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 80093f4:	2301      	movs	r3, #1
 80093f6:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 80093f8:	f107 0310 	add.w	r3, r7, #16
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fa3c 	bl	800987c <hci_send_req>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	da01      	bge.n	800940e <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800940a:	23ff      	movs	r3, #255	@ 0xff
 800940c:	e000      	b.n	8009410 <aci_gatt_allow_read+0x52>

    return status;
 800940e:	7afb      	ldrb	r3, [r7, #11]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3728      	adds	r7, #40	@ 0x28
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b0ac      	sub	sp, #176	@ 0xb0
 800941c:	af00      	add	r7, sp, #0
 800941e:	60ba      	str	r2, [r7, #8]
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
 8009426:	460b      	mov	r3, r1
 8009428:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009430:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009434:	2218      	movs	r2, #24
 8009436:	2100      	movs	r1, #0
 8009438:	4618      	mov	r0, r3
 800943a:	f003 ff13 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800943e:	233f      	movs	r3, #63	@ 0x3f
 8009440:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8009444:	230d      	movs	r3, #13
 8009446:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 800944a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800944e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8009452:	2301      	movs	r3, #1
 8009454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8009458:	f107 0314 	add.w	r3, r7, #20
 800945c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8009460:	2380      	movs	r3, #128	@ 0x80
 8009462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009466:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fa05 	bl	800987c <hci_send_req>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	da01      	bge.n	800947c <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8009478:	23ff      	movs	r3, #255	@ 0xff
 800947a:	e01e      	b.n	80094ba <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800947c:	7d3b      	ldrb	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8009482:	7d3b      	ldrb	r3, [r7, #20]
 8009484:	e019      	b.n	80094ba <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8009486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800948a:	b2db      	uxtb	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b2da      	uxtb	r2, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	89bb      	ldrh	r3, [r7, #12]
 800949c:	4293      	cmp	r3, r2
 800949e:	d201      	bcs.n	80094a4 <aci_hal_read_config_data+0x8c>
 80094a0:	89ba      	ldrh	r2, [r7, #12]
 80094a2:	e002      	b.n	80094aa <aci_hal_read_config_data+0x92>
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	f107 0314 	add.w	r3, r7, #20
 80094ae:	3301      	adds	r3, #1
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f003 ff51 	bl	800d35a <memcpy>
  
  return 0;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	37b0      	adds	r7, #176	@ 0xb0
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b08a      	sub	sp, #40	@ 0x28
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	4603      	mov	r3, r0
 80094ca:	460a      	mov	r2, r1
 80094cc:	71fb      	strb	r3, [r7, #7]
 80094ce:	4613      	mov	r3, r2
 80094d0:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80094d6:	79bb      	ldrb	r3, [r7, #6]
 80094d8:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094da:	f107 0310 	add.w	r3, r7, #16
 80094de:	2218      	movs	r2, #24
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f003 febe 	bl	800d264 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80094e8:	233f      	movs	r3, #63	@ 0x3f
 80094ea:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80094ec:	230f      	movs	r3, #15
 80094ee:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80094f0:	f107 030c 	add.w	r3, r7, #12
 80094f4:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80094f6:	2302      	movs	r3, #2
 80094f8:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80094fa:	f107 030b 	add.w	r3, r7, #11
 80094fe:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8009500:	2301      	movs	r3, #1
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8009504:	f107 0310 	add.w	r3, r7, #16
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f9b6 	bl	800987c <hci_send_req>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	da01      	bge.n	800951a <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8009516:	23ff      	movs	r3, #255	@ 0xff
 8009518:	e000      	b.n	800951c <aci_hal_set_tx_power_level+0x5a>

  return status;
 800951a:	7afb      	ldrb	r3, [r7, #11]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3728      	adds	r7, #40	@ 0x28
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009524:	b590      	push	{r4, r7, lr}
 8009526:	b089      	sub	sp, #36	@ 0x24
 8009528:	af02      	add	r7, sp, #8
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800952e:	f107 0410 	add.w	r4, r7, #16
 8009532:	f107 0215 	add.w	r2, r7, #21
 8009536:	f107 0112 	add.w	r1, r7, #18
 800953a:	f107 0016 	add.w	r0, r7, #22
 800953e:	f107 030e 	add.w	r3, r7, #14
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	4623      	mov	r3, r4
 8009546:	f000 f853 	bl	80095f0 <hci_le_read_local_version>
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d126      	bne.n	80095a2 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8009554:	8a7b      	ldrh	r3, [r7, #18]
 8009556:	0a1b      	lsrs	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	b2da      	uxtb	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8009560:	8a7b      	ldrh	r3, [r7, #18]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	b29a      	uxth	r2, r3
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	b21a      	sxth	r2, r3
 8009570:	89fb      	ldrh	r3, [r7, #14]
 8009572:	091b      	lsrs	r3, r3, #4
 8009574:	b29b      	uxth	r3, r3
 8009576:	011b      	lsls	r3, r3, #4
 8009578:	b21b      	sxth	r3, r3
 800957a:	b2db      	uxtb	r3, r3
 800957c:	b21b      	sxth	r3, r3
 800957e:	4313      	orrs	r3, r2
 8009580:	b21b      	sxth	r3, r3
 8009582:	b29a      	uxth	r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b21a      	sxth	r2, r3
 800958e:	89fb      	ldrh	r3, [r7, #14]
 8009590:	b21b      	sxth	r3, r3
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	b21b      	sxth	r3, r3
 8009598:	4313      	orrs	r3, r2
 800959a:	b21b      	sxth	r3, r3
 800959c:	b29a      	uxth	r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd90      	pop	{r4, r7, pc}

080095ac <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095b2:	f107 0308 	add.w	r3, r7, #8
 80095b6:	2218      	movs	r2, #24
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f003 fe52 	bl	800d264 <memset>
  rq.ogf = OGF_HOST_CTL;
 80095c0:	2303      	movs	r3, #3
 80095c2:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80095c4:	2303      	movs	r3, #3
 80095c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80095c8:	1dfb      	adds	r3, r7, #7
 80095ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80095d0:	f107 0308 	add.w	r3, r7, #8
 80095d4:	2100      	movs	r1, #0
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f950 	bl	800987c <hci_send_req>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da01      	bge.n	80095e6 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80095e2:	23ff      	movs	r3, #255	@ 0xff
 80095e4:	e000      	b.n	80095e8 <hci_reset+0x3c>
  
  return status;  
 80095e6:	79fb      	ldrb	r3, [r7, #7]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08e      	sub	sp, #56	@ 0x38
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80095fe:	f107 0314 	add.w	r3, r7, #20
 8009602:	2209      	movs	r2, #9
 8009604:	2100      	movs	r1, #0
 8009606:	4618      	mov	r0, r3
 8009608:	f003 fe2c 	bl	800d264 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800960c:	f107 0320 	add.w	r3, r7, #32
 8009610:	2218      	movs	r2, #24
 8009612:	2100      	movs	r1, #0
 8009614:	4618      	mov	r0, r3
 8009616:	f003 fe25 	bl	800d264 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800961a:	2304      	movs	r3, #4
 800961c:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800961e:	2301      	movs	r3, #1
 8009620:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8009622:	2300      	movs	r3, #0
 8009624:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800962a:	f107 0314 	add.w	r3, r7, #20
 800962e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8009630:	2309      	movs	r3, #9
 8009632:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009634:	f107 0320 	add.w	r3, r7, #32
 8009638:	2100      	movs	r1, #0
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f91e 	bl	800987c <hci_send_req>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	da01      	bge.n	800964a <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009646:	23ff      	movs	r3, #255	@ 0xff
 8009648:	e018      	b.n	800967c <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800964a:	7d3b      	ldrb	r3, [r7, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <hci_le_read_local_version+0x64>
    return resp.status;
 8009650:	7d3b      	ldrb	r3, [r7, #20]
 8009652:	e013      	b.n	800967c <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8009654:	7d7a      	ldrb	r2, [r7, #21]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800965a:	8afa      	ldrh	r2, [r7, #22]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009660:	7e3a      	ldrb	r2, [r7, #24]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009666:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800966a:	b29a      	uxth	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009670:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8009674:	b29a      	uxth	r2, r3
 8009676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009678:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3738      	adds	r7, #56	@ 0x38
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3308      	adds	r3, #8
 8009690:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b04      	cmp	r3, #4
 8009698:	d001      	beq.n	800969e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800969a:	2301      	movs	r3, #1
 800969c:	e00c      	b.n	80096b8 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3302      	adds	r3, #2
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80096ac:	3b03      	subs	r3, #3
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d001      	beq.n	80096b6 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80096b2:	2302      	movs	r3, #2
 80096b4:	e000      	b.n	80096b8 <verify_packet+0x34>
  
  return 0;      
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b0a6      	sub	sp, #152	@ 0x98
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	4603      	mov	r3, r0
 80096ce:	81fb      	strh	r3, [r7, #14]
 80096d0:	460b      	mov	r3, r1
 80096d2:	81bb      	strh	r3, [r7, #12]
 80096d4:	4613      	mov	r3, r2
 80096d6:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80096d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80096dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096e0:	b21a      	sxth	r2, r3
 80096e2:	89fb      	ldrh	r3, [r7, #14]
 80096e4:	029b      	lsls	r3, r3, #10
 80096e6:	b21b      	sxth	r3, r3
 80096e8:	4313      	orrs	r3, r2
 80096ea:	b21b      	sxth	r3, r3
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80096f4:	2301      	movs	r3, #1
 80096f6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80096f8:	f107 0318 	add.w	r3, r7, #24
 80096fc:	3301      	adds	r3, #1
 80096fe:	461a      	mov	r2, r3
 8009700:	f107 0314 	add.w	r3, r7, #20
 8009704:	8819      	ldrh	r1, [r3, #0]
 8009706:	789b      	ldrb	r3, [r3, #2]
 8009708:	8011      	strh	r1, [r2, #0]
 800970a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800970c:	f107 0318 	add.w	r3, r7, #24
 8009710:	3304      	adds	r3, #4
 8009712:	7afa      	ldrb	r2, [r7, #11]
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4618      	mov	r0, r3
 8009718:	f003 fe1f 	bl	800d35a <memcpy>
  
  if (hciContext.io.Send)
 800971c:	4b08      	ldr	r3, [pc, #32]	@ (8009740 <send_cmd+0x7c>)
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d009      	beq.n	8009738 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009724:	4b06      	ldr	r3, [pc, #24]	@ (8009740 <send_cmd+0x7c>)
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	7afa      	ldrb	r2, [r7, #11]
 800972a:	b292      	uxth	r2, r2
 800972c:	3204      	adds	r2, #4
 800972e:	b291      	uxth	r1, r2
 8009730:	f107 0218 	add.w	r2, r7, #24
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
  }
}
 8009738:	bf00      	nop
 800973a:	3798      	adds	r7, #152	@ 0x98
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20003674 	.word	0x20003674

08009744 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800974e:	e00a      	b.n	8009766 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	4619      	mov	r1, r3
 8009756:	6838      	ldr	r0, [r7, #0]
 8009758:	f000 fabc 	bl	8009cd4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fa23 	bl	8009bac <list_insert_head>
  while (!list_is_empty(src_list))
 8009766:	6838      	ldr	r0, [r7, #0]
 8009768:	f000 f9fe 	bl	8009b68 <list_is_empty>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0ee      	beq.n	8009750 <move_list+0xc>
  }
}
 8009772:	bf00      	nop
 8009774:	bf00      	nop
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009782:	e009      	b.n	8009798 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009784:	1d3b      	adds	r3, r7, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4809      	ldr	r0, [pc, #36]	@ (80097b0 <free_event_list+0x34>)
 800978a:	f000 fa7c 	bl	8009c86 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4619      	mov	r1, r3
 8009792:	4808      	ldr	r0, [pc, #32]	@ (80097b4 <free_event_list+0x38>)
 8009794:	f000 fa30 	bl	8009bf8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009798:	4806      	ldr	r0, [pc, #24]	@ (80097b4 <free_event_list+0x38>)
 800979a:	f000 fac2 	bl	8009d22 <list_get_size>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	ddef      	ble.n	8009784 <free_event_list+0x8>
  }
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	200033b0 	.word	0x200033b0
 80097b4:	200033a8 	.word	0x200033a8

080097b8 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80097c8:	4a18      	ldr	r2, [pc, #96]	@ (800982c <hci_init+0x74>)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80097ce:	4818      	ldr	r0, [pc, #96]	@ (8009830 <hci_init+0x78>)
 80097d0:	f000 f9ba 	bl	8009b48 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 80097d4:	4817      	ldr	r0, [pc, #92]	@ (8009834 <hci_init+0x7c>)
 80097d6:	f000 f9b7 	bl	8009b48 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 80097da:	f7f8 f915 	bl	8001a08 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]
 80097e2:	e00c      	b.n	80097fe <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	228c      	movs	r2, #140	@ 0x8c
 80097e8:	fb02 f303 	mul.w	r3, r2, r3
 80097ec:	4a12      	ldr	r2, [pc, #72]	@ (8009838 <hci_init+0x80>)
 80097ee:	4413      	add	r3, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	480f      	ldr	r0, [pc, #60]	@ (8009830 <hci_init+0x78>)
 80097f4:	f000 fa00 	bl	8009bf8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	3301      	adds	r3, #1
 80097fc:	73fb      	strb	r3, [r7, #15]
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	2b04      	cmp	r3, #4
 8009802:	d9ef      	bls.n	80097e4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009804:	4b09      	ldr	r3, [pc, #36]	@ (800982c <hci_init+0x74>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <hci_init+0x5c>
 800980c:	4b07      	ldr	r3, [pc, #28]	@ (800982c <hci_init+0x74>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2000      	movs	r0, #0
 8009812:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009814:	4b05      	ldr	r3, [pc, #20]	@ (800982c <hci_init+0x74>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <hci_init+0x6a>
 800981c:	4b03      	ldr	r3, [pc, #12]	@ (800982c <hci_init+0x74>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	4798      	blx	r3
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20003674 	.word	0x20003674
 8009830:	200033a8 	.word	0x200033a8
 8009834:	200033b0 	.word	0x200033b0
 8009838:	200033b8 	.word	0x200033b8

0800983c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a0b      	ldr	r2, [pc, #44]	@ (8009878 <hci_register_io_bus+0x3c>)
 800984a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	4a09      	ldr	r2, [pc, #36]	@ (8009878 <hci_register_io_bus+0x3c>)
 8009852:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	4a07      	ldr	r2, [pc, #28]	@ (8009878 <hci_register_io_bus+0x3c>)
 800985a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	4a05      	ldr	r2, [pc, #20]	@ (8009878 <hci_register_io_bus+0x3c>)
 8009862:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	4a03      	ldr	r2, [pc, #12]	@ (8009878 <hci_register_io_bus+0x3c>)
 800986a:	6093      	str	r3, [r2, #8]
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	20003674 	.word	0x20003674

0800987c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	@ 0x38
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	885b      	ldrh	r3, [r3, #2]
 800988c:	b21b      	sxth	r3, r3
 800988e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009892:	b21a      	sxth	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	029b      	lsls	r3, r3, #10
 800989a:	b21b      	sxth	r3, r3
 800989c:	4313      	orrs	r3, r2
 800989e:	b21b      	sxth	r3, r3
 80098a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 f94c 	bl	8009b48 <list_init_head>

  free_event_list();
 80098b0:	f7ff ff64 	bl	800977c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8818      	ldrh	r0, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8859      	ldrh	r1, [r3, #2]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f7ff fefd 	bl	80096c4 <send_cmd>
  
  if (async)
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <hci_send_req+0x58>
  {
    return 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	e0e2      	b.n	8009a9a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80098d4:	f7fa f812 	bl	80038fc <HAL_GetTick>
 80098d8:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80098da:	f7fa f80f 	bl	80038fc <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098e8:	f200 80b3 	bhi.w	8009a52 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80098ec:	486d      	ldr	r0, [pc, #436]	@ (8009aa4 <hci_send_req+0x228>)
 80098ee:	f000 f93b 	bl	8009b68 <list_is_empty>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d000      	beq.n	80098fa <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80098f8:	e7ef      	b.n	80098da <hci_send_req+0x5e>
      {
        break;
 80098fa:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80098fc:	f107 0310 	add.w	r3, r7, #16
 8009900:	4619      	mov	r1, r3
 8009902:	4868      	ldr	r0, [pc, #416]	@ (8009aa4 <hci_send_req+0x228>)
 8009904:	f000 f9bf 	bl	8009c86 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	3308      	adds	r3, #8
 800990c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800990e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b04      	cmp	r3, #4
 8009914:	d17f      	bne.n	8009a16 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009918:	3301      	adds	r3, #1
 800991a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	3308      	adds	r3, #8
 8009920:	3303      	adds	r3, #3
 8009922:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800992a:	3b03      	subs	r3, #3
 800992c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b3e      	cmp	r3, #62	@ 0x3e
 8009934:	d04c      	beq.n	80099d0 <hci_send_req+0x154>
 8009936:	2b3e      	cmp	r3, #62	@ 0x3e
 8009938:	dc68      	bgt.n	8009a0c <hci_send_req+0x190>
 800993a:	2b10      	cmp	r3, #16
 800993c:	f000 808b 	beq.w	8009a56 <hci_send_req+0x1da>
 8009940:	2b10      	cmp	r3, #16
 8009942:	dc63      	bgt.n	8009a0c <hci_send_req+0x190>
 8009944:	2b0e      	cmp	r3, #14
 8009946:	d023      	beq.n	8009990 <hci_send_req+0x114>
 8009948:	2b0f      	cmp	r3, #15
 800994a:	d15f      	bne.n	8009a0c <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	885b      	ldrh	r3, [r3, #2]
 8009954:	b29b      	uxth	r3, r3
 8009956:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009958:	429a      	cmp	r2, r3
 800995a:	d17e      	bne.n	8009a5a <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b0f      	cmp	r3, #15
 8009962:	d004      	beq.n	800996e <hci_send_req+0xf2>
          if (cs->status) {
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d051      	beq.n	8009a10 <hci_send_req+0x194>
            goto failed;
 800996c:	e078      	b.n	8009a60 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695a      	ldr	r2, [r3, #20]
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	429a      	cmp	r2, r3
 8009976:	bf28      	it	cs
 8009978:	461a      	movcs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6918      	ldr	r0, [r3, #16]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	461a      	mov	r2, r3
 8009988:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800998a:	f003 fce6 	bl	800d35a <memcpy>
        goto done;
 800998e:	e078      	b.n	8009a82 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800999a:	b29b      	uxth	r3, r3
 800999c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800999e:	429a      	cmp	r2, r3
 80099a0:	d15d      	bne.n	8009a5e <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	3303      	adds	r3, #3
 80099a6:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	3b03      	subs	r3, #3
 80099ac:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	bf28      	it	cs
 80099b8:	461a      	movcs	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6918      	ldr	r0, [r3, #16]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	461a      	mov	r2, r3
 80099c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099ca:	f003 fcc6 	bl	800d35a <memcpy>
        goto done;
 80099ce:	e058      	b.n	8009a82 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d2:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	461a      	mov	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d118      	bne.n	8009a14 <hci_send_req+0x198>
          break;
      
        len -= 1;
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695a      	ldr	r2, [r3, #20]
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	bf28      	it	cs
 80099f2:	461a      	movcs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6918      	ldr	r0, [r3, #16]
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	1c59      	adds	r1, r3, #1
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	461a      	mov	r2, r3
 8009a06:	f003 fca8 	bl	800d35a <memcpy>
        goto done;
 8009a0a:	e03a      	b.n	8009a82 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009a0c:	bf00      	nop
 8009a0e:	e002      	b.n	8009a16 <hci_send_req+0x19a>
          break;
 8009a10:	bf00      	nop
 8009a12:	e000      	b.n	8009a16 <hci_send_req+0x19a>
          break;
 8009a14:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009a16:	4824      	ldr	r0, [pc, #144]	@ (8009aa8 <hci_send_req+0x22c>)
 8009a18:	f000 f8a6 	bl	8009b68 <list_is_empty>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00d      	beq.n	8009a3e <hci_send_req+0x1c2>
 8009a22:	4820      	ldr	r0, [pc, #128]	@ (8009aa4 <hci_send_req+0x228>)
 8009a24:	f000 f8a0 	bl	8009b68 <list_is_empty>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	4619      	mov	r1, r3
 8009a32:	481d      	ldr	r0, [pc, #116]	@ (8009aa8 <hci_send_req+0x22c>)
 8009a34:	f000 f8e0 	bl	8009bf8 <list_insert_tail>
      hciReadPacket=NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	e008      	b.n	8009a50 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	f107 0308 	add.w	r3, r7, #8
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f8d6 	bl	8009bf8 <list_insert_tail>
      hciReadPacket=NULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	613b      	str	r3, [r7, #16]
  {
 8009a50:	e740      	b.n	80098d4 <hci_send_req+0x58>
        goto failed;
 8009a52:	bf00      	nop
 8009a54:	e004      	b.n	8009a60 <hci_send_req+0x1e4>
        goto failed;
 8009a56:	bf00      	nop
 8009a58:	e002      	b.n	8009a60 <hci_send_req+0x1e4>
          goto failed;
 8009a5a:	bf00      	nop
 8009a5c:	e000      	b.n	8009a60 <hci_send_req+0x1e4>
          goto failed;
 8009a5e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	480f      	ldr	r0, [pc, #60]	@ (8009aa8 <hci_send_req+0x22c>)
 8009a6c:	f000 f89e 	bl	8009bac <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009a70:	f107 0308 	add.w	r3, r7, #8
 8009a74:	4619      	mov	r1, r3
 8009a76:	480b      	ldr	r0, [pc, #44]	@ (8009aa4 <hci_send_req+0x228>)
 8009a78:	f7ff fe64 	bl	8009744 <move_list>

  return -1;
 8009a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a80:	e00b      	b.n	8009a9a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	4619      	mov	r1, r3
 8009a86:	4808      	ldr	r0, [pc, #32]	@ (8009aa8 <hci_send_req+0x22c>)
 8009a88:	f000 f890 	bl	8009bac <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009a8c:	f107 0308 	add.w	r3, r7, #8
 8009a90:	4619      	mov	r1, r3
 8009a92:	4804      	ldr	r0, [pc, #16]	@ (8009aa4 <hci_send_req+0x228>)
 8009a94:	f7ff fe56 	bl	8009744 <move_list>

  return 0;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3738      	adds	r7, #56	@ 0x38
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	200033b0 	.word	0x200033b0
 8009aa8:	200033a8 	.word	0x200033a8

08009aac <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009abc:	481f      	ldr	r0, [pc, #124]	@ (8009b3c <hci_notify_asynch_evt+0x90>)
 8009abe:	f000 f853 	bl	8009b68 <list_is_empty>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d132      	bne.n	8009b2e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009ac8:	f107 030c 	add.w	r3, r7, #12
 8009acc:	4619      	mov	r1, r3
 8009ace:	481b      	ldr	r0, [pc, #108]	@ (8009b3c <hci_notify_asynch_evt+0x90>)
 8009ad0:	f000 f8d9 	bl	8009c86 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b40 <hci_notify_asynch_evt+0x94>)
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d02a      	beq.n	8009b32 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009adc:	4b18      	ldr	r3, [pc, #96]	@ (8009b40 <hci_notify_asynch_evt+0x94>)
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	3208      	adds	r2, #8
 8009ae4:	2180      	movs	r1, #128	@ 0x80
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4798      	blx	r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009aee:	7cfb      	ldrb	r3, [r7, #19]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d016      	beq.n	8009b22 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	7cfa      	ldrb	r2, [r7, #19]
 8009af8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fdc0 	bl	8009684 <verify_packet>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	480d      	ldr	r0, [pc, #52]	@ (8009b44 <hci_notify_asynch_evt+0x98>)
 8009b10:	f000 f872 	bl	8009bf8 <list_insert_tail>
 8009b14:	e00d      	b.n	8009b32 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4808      	ldr	r0, [pc, #32]	@ (8009b3c <hci_notify_asynch_evt+0x90>)
 8009b1c:	f000 f846 	bl	8009bac <list_insert_head>
 8009b20:	e007      	b.n	8009b32 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4619      	mov	r1, r3
 8009b26:	4805      	ldr	r0, [pc, #20]	@ (8009b3c <hci_notify_asynch_evt+0x90>)
 8009b28:	f000 f840 	bl	8009bac <list_insert_head>
 8009b2c:	e001      	b.n	8009b32 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009b32:	697b      	ldr	r3, [r7, #20]

}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200033a8 	.word	0x200033a8
 8009b40:	20003674 	.word	0x20003674
 8009b44:	200033b0 	.word	0x200033b0

08009b48 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	605a      	str	r2, [r3, #4]
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b70:	f3ef 8310 	mrs	r3, PRIMASK
 8009b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b76:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b7a:	b672      	cpsid	i
}
 8009b7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d102      	bne.n	8009b8e <list_is_empty+0x26>
  {
    return_value = 1;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	75fb      	strb	r3, [r7, #23]
 8009b8c:	e001      	b.n	8009b92 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	f383 8810 	msr	PRIMASK, r3
}
 8009b9c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8009bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bc0:	b672      	cpsid	i
}
 8009bc2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	605a      	str	r2, [r3, #4]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f383 8810 	msr	PRIMASK, r3
}
 8009bea:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009bec:	bf00      	nop
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c02:	f3ef 8310 	mrs	r3, PRIMASK
 8009c06:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c08:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c0c:	b672      	cpsid	i
}
 8009c0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f383 8810 	msr	PRIMASK, r3
}
 8009c36:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009c38:	bf00      	nop
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c52:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c56:	b672      	cpsid	i
}
 8009c58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6852      	ldr	r2, [r2, #4]
 8009c6c:	605a      	str	r2, [r3, #4]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f383 8810 	msr	PRIMASK, r3
}
 8009c78:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009c7a:	bf00      	nop
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c90:	f3ef 8310 	mrs	r3, PRIMASK
 8009c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c96:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c9a:	b672      	cpsid	i
}
 8009c9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff ffca 	bl	8009c44 <list_remove_node>
  (*node)->next = NULL;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	605a      	str	r2, [r3, #4]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f383 8810 	msr	PRIMASK, r3
}
 8009cca:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009ccc:	bf00      	nop
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cde:	f3ef 8310 	mrs	r3, PRIMASK
 8009ce2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ce8:	b672      	cpsid	i
}
 8009cea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7ff ffa3 	bl	8009c44 <list_remove_node>
  (*node)->next = NULL;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	605a      	str	r2, [r3, #4]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f383 8810 	msr	PRIMASK, r3
}
 8009d18:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009d1a:	bf00      	nop
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b089      	sub	sp, #36	@ 0x24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  int size = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8009d32:	613b      	str	r3, [r7, #16]
  return(result);
 8009d34:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d38:	b672      	cpsid	i
}
 8009d3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009d42:	e005      	b.n	8009d50 <list_get_size+0x2e>
  {
    size++;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	3301      	adds	r3, #1
 8009d48:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009d50:	69ba      	ldr	r2, [r7, #24]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d1f5      	bne.n	8009d44 <list_get_size+0x22>
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f383 8810 	msr	PRIMASK, r3
}
 8009d62:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8009d64:	69fb      	ldr	r3, [r7, #28]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3724      	adds	r7, #36	@ 0x24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
	...

08009d74 <__NVIC_SetPriority>:
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	6039      	str	r1, [r7, #0]
 8009d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	db0a      	blt.n	8009d9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	490c      	ldr	r1, [pc, #48]	@ (8009dc0 <__NVIC_SetPriority+0x4c>)
 8009d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d92:	0112      	lsls	r2, r2, #4
 8009d94:	b2d2      	uxtb	r2, r2
 8009d96:	440b      	add	r3, r1
 8009d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d9c:	e00a      	b.n	8009db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	4908      	ldr	r1, [pc, #32]	@ (8009dc4 <__NVIC_SetPriority+0x50>)
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	f003 030f 	and.w	r3, r3, #15
 8009daa:	3b04      	subs	r3, #4
 8009dac:	0112      	lsls	r2, r2, #4
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	440b      	add	r3, r1
 8009db2:	761a      	strb	r2, [r3, #24]
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	e000e100 	.word	0xe000e100
 8009dc4:	e000ed00 	.word	0xe000ed00

08009dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009dcc:	2100      	movs	r1, #0
 8009dce:	f06f 0004 	mvn.w	r0, #4
 8009dd2:	f7ff ffcf 	bl	8009d74 <__NVIC_SetPriority>
#endif
}
 8009dd6:	bf00      	nop
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de2:	f3ef 8305 	mrs	r3, IPSR
 8009de6:	603b      	str	r3, [r7, #0]
  return(result);
 8009de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009dee:	f06f 0305 	mvn.w	r3, #5
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	e00c      	b.n	8009e10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009df6:	4b0a      	ldr	r3, [pc, #40]	@ (8009e20 <osKernelInitialize+0x44>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d105      	bne.n	8009e0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009dfe:	4b08      	ldr	r3, [pc, #32]	@ (8009e20 <osKernelInitialize+0x44>)
 8009e00:	2201      	movs	r2, #1
 8009e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	607b      	str	r3, [r7, #4]
 8009e08:	e002      	b.n	8009e10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e10:	687b      	ldr	r3, [r7, #4]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20003694 	.word	0x20003694

08009e24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e2a:	f3ef 8305 	mrs	r3, IPSR
 8009e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8009e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d003      	beq.n	8009e3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e36:	f06f 0305 	mvn.w	r3, #5
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	e010      	b.n	8009e60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e6c <osKernelStart+0x48>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d109      	bne.n	8009e5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e46:	f7ff ffbf 	bl	8009dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e4a:	4b08      	ldr	r3, [pc, #32]	@ (8009e6c <osKernelStart+0x48>)
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e50:	f001 f87a 	bl	800af48 <vTaskStartScheduler>
      stat = osOK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	607b      	str	r3, [r7, #4]
 8009e58:	e002      	b.n	8009e60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e60:	687b      	ldr	r3, [r7, #4]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20003694 	.word	0x20003694

08009e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08e      	sub	sp, #56	@ 0x38
 8009e74:	af04      	add	r7, sp, #16
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e80:	f3ef 8305 	mrs	r3, IPSR
 8009e84:	617b      	str	r3, [r7, #20]
  return(result);
 8009e86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d17e      	bne.n	8009f8a <osThreadNew+0x11a>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d07b      	beq.n	8009f8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e92:	2380      	movs	r3, #128	@ 0x80
 8009e94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e96:	2318      	movs	r3, #24
 8009e98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d045      	beq.n	8009f36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <osThreadNew+0x48>
        name = attr->name;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d008      	beq.n	8009ede <osThreadNew+0x6e>
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	2b38      	cmp	r3, #56	@ 0x38
 8009ed0:	d805      	bhi.n	8009ede <osThreadNew+0x6e>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <osThreadNew+0x72>
        return (NULL);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e054      	b.n	8009f8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	089b      	lsrs	r3, r3, #2
 8009ef0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00e      	beq.n	8009f18 <osThreadNew+0xa8>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	2b5b      	cmp	r3, #91	@ 0x5b
 8009f00:	d90a      	bls.n	8009f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d006      	beq.n	8009f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <osThreadNew+0xa8>
        mem = 1;
 8009f12:	2301      	movs	r3, #1
 8009f14:	61bb      	str	r3, [r7, #24]
 8009f16:	e010      	b.n	8009f3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10c      	bne.n	8009f3a <osThreadNew+0xca>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <osThreadNew+0xca>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <osThreadNew+0xca>
          mem = 0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	61bb      	str	r3, [r7, #24]
 8009f34:	e001      	b.n	8009f3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d110      	bne.n	8009f62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f48:	9202      	str	r2, [sp, #8]
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6a3a      	ldr	r2, [r7, #32]
 8009f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 fe1a 	bl	800ab90 <xTaskCreateStatic>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	613b      	str	r3, [r7, #16]
 8009f60:	e013      	b.n	8009f8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d110      	bne.n	8009f8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	f107 0310 	add.w	r3, r7, #16
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fe68 	bl	800ac50 <xTaskCreate>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d001      	beq.n	8009f8a <osThreadNew+0x11a>
            hTask = NULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f8a:	693b      	ldr	r3, [r7, #16]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3728      	adds	r7, #40	@ 0x28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f9c:	f3ef 8305 	mrs	r3, IPSR
 8009fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <osDelay+0x1c>
    stat = osErrorISR;
 8009fa8:	f06f 0305 	mvn.w	r3, #5
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e007      	b.n	8009fc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 ff8e 	bl	800aedc <vTaskDelay>
    }
  }

  return (stat);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4a07      	ldr	r2, [pc, #28]	@ (8009ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	4a06      	ldr	r2, [pc, #24]	@ (8009ffc <vApplicationGetIdleTaskMemory+0x30>)
 8009fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2280      	movs	r2, #128	@ 0x80
 8009fe8:	601a      	str	r2, [r3, #0]
}
 8009fea:	bf00      	nop
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20003698 	.word	0x20003698
 8009ffc:	200036f4 	.word	0x200036f4

0800a000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a07      	ldr	r2, [pc, #28]	@ (800a02c <vApplicationGetTimerTaskMemory+0x2c>)
 800a010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	4a06      	ldr	r2, [pc, #24]	@ (800a030 <vApplicationGetTimerTaskMemory+0x30>)
 800a016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a01e:	601a      	str	r2, [r3, #0]
}
 800a020:	bf00      	nop
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	200038f4 	.word	0x200038f4
 800a030:	20003950 	.word	0x20003950

0800a034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f103 0208 	add.w	r2, r3, #8
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f04f 32ff 	mov.w	r2, #4294967295
 800a04c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f103 0208 	add.w	r2, r3, #8
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f103 0208 	add.w	r2, r3, #8
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	689a      	ldr	r2, [r3, #8]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
}
 800a0ca:	bf00      	nop
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d103      	bne.n	800a0f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	e00c      	b.n	800a110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	e002      	b.n	800a104 <vListInsert+0x2e>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d2f6      	bcs.n	800a0fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	601a      	str	r2, [r3, #0]
}
 800a13c:	bf00      	nop
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	6892      	ldr	r2, [r2, #8]
 800a15e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	6852      	ldr	r2, [r2, #4]
 800a168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d103      	bne.n	800a17c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	1e5a      	subs	r2, r3, #1
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10b      	bne.n	800a1c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1c2:	bf00      	nop
 800a1c4:	bf00      	nop
 800a1c6:	e7fd      	b.n	800a1c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a1c8:	f002 f876 	bl	800c2b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d4:	68f9      	ldr	r1, [r7, #12]
 800a1d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a1d8:	fb01 f303 	mul.w	r3, r1, r3
 800a1dc:	441a      	add	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a1fe:	fb01 f303 	mul.w	r3, r1, r3
 800a202:	441a      	add	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	22ff      	movs	r2, #255	@ 0xff
 800a20c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	22ff      	movs	r2, #255	@ 0xff
 800a214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d114      	bne.n	800a248 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d01a      	beq.n	800a25c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3310      	adds	r3, #16
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 f91a 	bl	800b464 <xTaskRemoveFromEventList>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d012      	beq.n	800a25c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a236:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <xQueueGenericReset+0xd0>)
 800a238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	e009      	b.n	800a25c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3310      	adds	r3, #16
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff fef1 	bl	800a034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3324      	adds	r3, #36	@ 0x24
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff feec 	bl	800a034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a25c:	f002 f85e 	bl	800c31c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a260:	2301      	movs	r3, #1
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08e      	sub	sp, #56	@ 0x38
 800a274:	af02      	add	r7, sp, #8
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10b      	bne.n	800a29c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a296:	bf00      	nop
 800a298:	bf00      	nop
 800a29a:	e7fd      	b.n	800a298 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10b      	bne.n	800a2ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	e7fd      	b.n	800a2b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <xQueueGenericCreateStatic+0x56>
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <xQueueGenericCreateStatic+0x5a>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <xQueueGenericCreateStatic+0x5c>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10b      	bne.n	800a2e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	623b      	str	r3, [r7, #32]
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	e7fd      	b.n	800a2e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <xQueueGenericCreateStatic+0x84>
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <xQueueGenericCreateStatic+0x88>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e000      	b.n	800a2fa <xQueueGenericCreateStatic+0x8a>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10b      	bne.n	800a316 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	61fb      	str	r3, [r7, #28]
}
 800a310:	bf00      	nop
 800a312:	bf00      	nop
 800a314:	e7fd      	b.n	800a312 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a316:	2350      	movs	r3, #80	@ 0x50
 800a318:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b50      	cmp	r3, #80	@ 0x50
 800a31e:	d00b      	beq.n	800a338 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	61bb      	str	r3, [r7, #24]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a338:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00d      	beq.n	800a360 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a34c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	4613      	mov	r3, r2
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	68b9      	ldr	r1, [r7, #8]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 f805 	bl	800a36a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a362:	4618      	mov	r0, r3
 800a364:	3730      	adds	r7, #48	@ 0x30
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d103      	bne.n	800a386 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	e002      	b.n	800a38c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a398:	2101      	movs	r1, #1
 800a39a:	69b8      	ldr	r0, [r7, #24]
 800a39c:	f7ff fefe 	bl	800a19c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	78fa      	ldrb	r2, [r7, #3]
 800a3a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3a8:	bf00      	nop
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08e      	sub	sp, #56	@ 0x38
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10b      	bne.n	800a3e4 <xQueueGenericSend+0x34>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	e7fd      	b.n	800a3e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d103      	bne.n	800a3f2 <xQueueGenericSend+0x42>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <xQueueGenericSend+0x46>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e000      	b.n	800a3f8 <xQueueGenericSend+0x48>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10b      	bne.n	800a414 <xQueueGenericSend+0x64>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	e7fd      	b.n	800a410 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b02      	cmp	r3, #2
 800a418:	d103      	bne.n	800a422 <xQueueGenericSend+0x72>
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <xQueueGenericSend+0x76>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <xQueueGenericSend+0x78>
 800a426:	2300      	movs	r3, #0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10b      	bne.n	800a444 <xQueueGenericSend+0x94>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	623b      	str	r3, [r7, #32]
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	e7fd      	b.n	800a440 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a444:	f001 f9ce 	bl	800b7e4 <xTaskGetSchedulerState>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <xQueueGenericSend+0xa4>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <xQueueGenericSend+0xa8>
 800a454:	2301      	movs	r3, #1
 800a456:	e000      	b.n	800a45a <xQueueGenericSend+0xaa>
 800a458:	2300      	movs	r3, #0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10b      	bne.n	800a476 <xQueueGenericSend+0xc6>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	61fb      	str	r3, [r7, #28]
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	e7fd      	b.n	800a472 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a476:	f001 ff1f 	bl	800c2b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a482:	429a      	cmp	r2, r3
 800a484:	d302      	bcc.n	800a48c <xQueueGenericSend+0xdc>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d129      	bne.n	800a4e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a492:	f000 fa0f 	bl	800a8b4 <prvCopyDataToQueue>
 800a496:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d010      	beq.n	800a4c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a2:	3324      	adds	r3, #36	@ 0x24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 ffdd 	bl	800b464 <xTaskRemoveFromEventList>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d013      	beq.n	800a4d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a4b0:	4b3f      	ldr	r3, [pc, #252]	@ (800a5b0 <xQueueGenericSend+0x200>)
 800a4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4b6:	601a      	str	r2, [r3, #0]
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	e00a      	b.n	800a4d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d007      	beq.n	800a4d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4c8:	4b39      	ldr	r3, [pc, #228]	@ (800a5b0 <xQueueGenericSend+0x200>)
 800a4ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a4d8:	f001 ff20 	bl	800c31c <vPortExitCritical>
				return pdPASS;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e063      	b.n	800a5a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d103      	bne.n	800a4ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4e6:	f001 ff19 	bl	800c31c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e05c      	b.n	800a5a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4f4:	f107 0314 	add.w	r3, r7, #20
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f001 f817 	bl	800b52c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4fe:	2301      	movs	r3, #1
 800a500:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a502:	f001 ff0b 	bl	800c31c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a506:	f000 fd87 	bl	800b018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a50a:	f001 fed5 	bl	800c2b8 <vPortEnterCritical>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a514:	b25b      	sxtb	r3, r3
 800a516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51a:	d103      	bne.n	800a524 <xQueueGenericSend+0x174>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a52a:	b25b      	sxtb	r3, r3
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a530:	d103      	bne.n	800a53a <xQueueGenericSend+0x18a>
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a53a:	f001 feef 	bl	800c31c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a53e:	1d3a      	adds	r2, r7, #4
 800a540:	f107 0314 	add.w	r3, r7, #20
 800a544:	4611      	mov	r1, r2
 800a546:	4618      	mov	r0, r3
 800a548:	f001 f806 	bl	800b558 <xTaskCheckForTimeOut>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d124      	bne.n	800a59c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a554:	f000 faa6 	bl	800aaa4 <prvIsQueueFull>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d018      	beq.n	800a590 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a560:	3310      	adds	r3, #16
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	4611      	mov	r1, r2
 800a566:	4618      	mov	r0, r3
 800a568:	f000 ff2a 	bl	800b3c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a56c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a56e:	f000 fa31 	bl	800a9d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a572:	f000 fd5f 	bl	800b034 <xTaskResumeAll>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f47f af7c 	bne.w	800a476 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a57e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b0 <xQueueGenericSend+0x200>)
 800a580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	e772      	b.n	800a476 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a592:	f000 fa1f 	bl	800a9d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a596:	f000 fd4d 	bl	800b034 <xTaskResumeAll>
 800a59a:	e76c      	b.n	800a476 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a59c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a59e:	f000 fa19 	bl	800a9d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5a2:	f000 fd47 	bl	800b034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3738      	adds	r7, #56	@ 0x38
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	e000ed04 	.word	0xe000ed04

0800a5b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b090      	sub	sp, #64	@ 0x40
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
 800a5c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10b      	bne.n	800a5e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	e7fd      	b.n	800a5e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d103      	bne.n	800a5f2 <xQueueGenericSendFromISR+0x3e>
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <xQueueGenericSendFromISR+0x42>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <xQueueGenericSendFromISR+0x44>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10b      	bne.n	800a614 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b02      	cmp	r3, #2
 800a618:	d103      	bne.n	800a622 <xQueueGenericSendFromISR+0x6e>
 800a61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d101      	bne.n	800a626 <xQueueGenericSendFromISR+0x72>
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <xQueueGenericSendFromISR+0x74>
 800a626:	2300      	movs	r3, #0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10b      	bne.n	800a644 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	623b      	str	r3, [r7, #32]
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	e7fd      	b.n	800a640 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a644:	f001 ff18 	bl	800c478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a648:	f3ef 8211 	mrs	r2, BASEPRI
 800a64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	61fa      	str	r2, [r7, #28]
 800a65e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a660:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a662:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d302      	bcc.n	800a676 <xQueueGenericSendFromISR+0xc2>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d12f      	bne.n	800a6d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a67c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a684:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a68c:	f000 f912 	bl	800a8b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a690:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a698:	d112      	bne.n	800a6c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d016      	beq.n	800a6d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a4:	3324      	adds	r3, #36	@ 0x24
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fedc 	bl	800b464 <xTaskRemoveFromEventList>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00e      	beq.n	800a6d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00b      	beq.n	800a6d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e007      	b.n	800a6d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	b25a      	sxtb	r2, r3
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a6d4:	e001      	b.n	800a6da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a6e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3740      	adds	r7, #64	@ 0x40
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08c      	sub	sp, #48	@ 0x30
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <xQueueReceive+0x32>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	623b      	str	r3, [r7, #32]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d103      	bne.n	800a730 <xQueueReceive+0x40>
 800a728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <xQueueReceive+0x44>
 800a730:	2301      	movs	r3, #1
 800a732:	e000      	b.n	800a736 <xQueueReceive+0x46>
 800a734:	2300      	movs	r3, #0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10b      	bne.n	800a752 <xQueueReceive+0x62>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	61fb      	str	r3, [r7, #28]
}
 800a74c:	bf00      	nop
 800a74e:	bf00      	nop
 800a750:	e7fd      	b.n	800a74e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a752:	f001 f847 	bl	800b7e4 <xTaskGetSchedulerState>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d102      	bne.n	800a762 <xQueueReceive+0x72>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <xQueueReceive+0x76>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <xQueueReceive+0x78>
 800a766:	2300      	movs	r3, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10b      	bne.n	800a784 <xQueueReceive+0x94>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	61bb      	str	r3, [r7, #24]
}
 800a77e:	bf00      	nop
 800a780:	bf00      	nop
 800a782:	e7fd      	b.n	800a780 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a784:	f001 fd98 	bl	800c2b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a78c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	d01f      	beq.n	800a7d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a794:	68b9      	ldr	r1, [r7, #8]
 800a796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a798:	f000 f8f6 	bl	800a988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	1e5a      	subs	r2, r3, #1
 800a7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00f      	beq.n	800a7cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ae:	3310      	adds	r3, #16
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fe57 	bl	800b464 <xTaskRemoveFromEventList>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d007      	beq.n	800a7cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7bc:	4b3c      	ldr	r3, [pc, #240]	@ (800a8b0 <xQueueReceive+0x1c0>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7cc:	f001 fda6 	bl	800c31c <vPortExitCritical>
				return pdPASS;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e069      	b.n	800a8a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7da:	f001 fd9f 	bl	800c31c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e062      	b.n	800a8a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7e8:	f107 0310 	add.w	r3, r7, #16
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 fe9d 	bl	800b52c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7f6:	f001 fd91 	bl	800c31c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7fa:	f000 fc0d 	bl	800b018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7fe:	f001 fd5b 	bl	800c2b8 <vPortEnterCritical>
 800a802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80e:	d103      	bne.n	800a818 <xQueueReceive+0x128>
 800a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a81e:	b25b      	sxtb	r3, r3
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d103      	bne.n	800a82e <xQueueReceive+0x13e>
 800a826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a82e:	f001 fd75 	bl	800c31c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a832:	1d3a      	adds	r2, r7, #4
 800a834:	f107 0310 	add.w	r3, r7, #16
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fe8c 	bl	800b558 <xTaskCheckForTimeOut>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d123      	bne.n	800a88e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a848:	f000 f916 	bl	800aa78 <prvIsQueueEmpty>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d017      	beq.n	800a882 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a854:	3324      	adds	r3, #36	@ 0x24
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fdb0 	bl	800b3c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a862:	f000 f8b7 	bl	800a9d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a866:	f000 fbe5 	bl	800b034 <xTaskResumeAll>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d189      	bne.n	800a784 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a870:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b0 <xQueueReceive+0x1c0>)
 800a872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	e780      	b.n	800a784 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a884:	f000 f8a6 	bl	800a9d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a888:	f000 fbd4 	bl	800b034 <xTaskResumeAll>
 800a88c:	e77a      	b.n	800a784 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a88e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a890:	f000 f8a0 	bl	800a9d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a894:	f000 fbce 	bl	800b034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a89a:	f000 f8ed 	bl	800aa78 <prvIsQueueEmpty>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f43f af6f 	beq.w	800a784 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3730      	adds	r7, #48	@ 0x30
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10d      	bne.n	800a8ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d14d      	bne.n	800a976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 ff9e 	bl	800b820 <xTaskPriorityDisinherit>
 800a8e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	609a      	str	r2, [r3, #8]
 800a8ec:	e043      	b.n	800a976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d119      	bne.n	800a928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6858      	ldr	r0, [r3, #4]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	f002 fd2b 	bl	800d35a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a90c:	441a      	add	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d32b      	bcc.n	800a976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	605a      	str	r2, [r3, #4]
 800a926:	e026      	b.n	800a976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	68d8      	ldr	r0, [r3, #12]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a930:	461a      	mov	r2, r3
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	f002 fd11 	bl	800d35a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a940:	425b      	negs	r3, r3
 800a942:	441a      	add	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d207      	bcs.n	800a964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	689a      	ldr	r2, [r3, #8]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95c:	425b      	negs	r3, r3
 800a95e:	441a      	add	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b02      	cmp	r3, #2
 800a968:	d105      	bne.n	800a976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	3b01      	subs	r3, #1
 800a974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a97e:	697b      	ldr	r3, [r7, #20]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a996:	2b00      	cmp	r3, #0
 800a998:	d018      	beq.n	800a9cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a2:	441a      	add	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d303      	bcc.n	800a9bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68d9      	ldr	r1, [r3, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6838      	ldr	r0, [r7, #0]
 800a9c8:	f002 fcc7 	bl	800d35a <memcpy>
	}
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9dc:	f001 fc6c 	bl	800c2b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9e8:	e011      	b.n	800aa0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d012      	beq.n	800aa18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3324      	adds	r3, #36	@ 0x24
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fd34 	bl	800b464 <xTaskRemoveFromEventList>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa02:	f000 fe0d 	bl	800b620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dce9      	bgt.n	800a9ea <prvUnlockQueue+0x16>
 800aa16:	e000      	b.n	800aa1a <prvUnlockQueue+0x46>
					break;
 800aa18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	22ff      	movs	r2, #255	@ 0xff
 800aa1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aa22:	f001 fc7b 	bl	800c31c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa26:	f001 fc47 	bl	800c2b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa32:	e011      	b.n	800aa58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d012      	beq.n	800aa62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3310      	adds	r3, #16
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fd0f 	bl	800b464 <xTaskRemoveFromEventList>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa4c:	f000 fde8 	bl	800b620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dce9      	bgt.n	800aa34 <prvUnlockQueue+0x60>
 800aa60:	e000      	b.n	800aa64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	22ff      	movs	r2, #255	@ 0xff
 800aa68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa6c:	f001 fc56 	bl	800c31c <vPortExitCritical>
}
 800aa70:	bf00      	nop
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa80:	f001 fc1a 	bl	800c2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	e001      	b.n	800aa96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa96:	f001 fc41 	bl	800c31c <vPortExitCritical>

	return xReturn;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaac:	f001 fc04 	bl	800c2b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d102      	bne.n	800aac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aabc:	2301      	movs	r3, #1
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e001      	b.n	800aac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aac6:	f001 fc29 	bl	800c31c <vPortExitCritical>

	return xReturn;
 800aaca:	68fb      	ldr	r3, [r7, #12]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	e014      	b.n	800ab0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aae4:	4a0f      	ldr	r2, [pc, #60]	@ (800ab24 <vQueueAddToRegistry+0x50>)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10b      	bne.n	800ab08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aaf0:	490c      	ldr	r1, [pc, #48]	@ (800ab24 <vQueueAddToRegistry+0x50>)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aafa:	4a0a      	ldr	r2, [pc, #40]	@ (800ab24 <vQueueAddToRegistry+0x50>)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	4413      	add	r3, r2
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab06:	e006      	b.n	800ab16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2b07      	cmp	r3, #7
 800ab12:	d9e7      	bls.n	800aae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20003d50 	.word	0x20003d50

0800ab28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab38:	f001 fbbe 	bl	800c2b8 <vPortEnterCritical>
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab42:	b25b      	sxtb	r3, r3
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab48:	d103      	bne.n	800ab52 <vQueueWaitForMessageRestricted+0x2a>
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab58:	b25b      	sxtb	r3, r3
 800ab5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5e:	d103      	bne.n	800ab68 <vQueueWaitForMessageRestricted+0x40>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab68:	f001 fbd8 	bl	800c31c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d106      	bne.n	800ab82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	3324      	adds	r3, #36	@ 0x24
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	68b9      	ldr	r1, [r7, #8]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fc45 	bl	800b40c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab82:	6978      	ldr	r0, [r7, #20]
 800ab84:	f7ff ff26 	bl	800a9d4 <prvUnlockQueue>
	}
 800ab88:	bf00      	nop
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08e      	sub	sp, #56	@ 0x38
 800ab94:	af04      	add	r7, sp, #16
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10b      	bne.n	800abbc <xTaskCreateStatic+0x2c>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	623b      	str	r3, [r7, #32]
}
 800abb6:	bf00      	nop
 800abb8:	bf00      	nop
 800abba:	e7fd      	b.n	800abb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10b      	bne.n	800abda <xTaskCreateStatic+0x4a>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	61fb      	str	r3, [r7, #28]
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	e7fd      	b.n	800abd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abda:	235c      	movs	r3, #92	@ 0x5c
 800abdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b5c      	cmp	r3, #92	@ 0x5c
 800abe2:	d00b      	beq.n	800abfc <xTaskCreateStatic+0x6c>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	61bb      	str	r3, [r7, #24]
}
 800abf6:	bf00      	nop
 800abf8:	bf00      	nop
 800abfa:	e7fd      	b.n	800abf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01e      	beq.n	800ac42 <xTaskCreateStatic+0xb2>
 800ac04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d01b      	beq.n	800ac42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9303      	str	r3, [sp, #12]
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	9302      	str	r3, [sp, #8]
 800ac24:	f107 0314 	add.w	r3, r7, #20
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f000 f850 	bl	800acda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac3c:	f000 f8de 	bl	800adfc <prvAddNewTaskToReadyList>
 800ac40:	e001      	b.n	800ac46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac46:	697b      	ldr	r3, [r7, #20]
	}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3728      	adds	r7, #40	@ 0x28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08c      	sub	sp, #48	@ 0x30
 800ac54:	af04      	add	r7, sp, #16
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 fc49 	bl	800c4fc <pvPortMalloc>
 800ac6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00e      	beq.n	800ac90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac72:	205c      	movs	r0, #92	@ 0x5c
 800ac74:	f001 fc42 	bl	800c4fc <pvPortMalloc>
 800ac78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac86:	e005      	b.n	800ac94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac88:	6978      	ldr	r0, [r7, #20]
 800ac8a:	f001 fd05 	bl	800c698 <vPortFree>
 800ac8e:	e001      	b.n	800ac94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac90:	2300      	movs	r3, #0
 800ac92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d017      	beq.n	800acca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aca2:	88fa      	ldrh	r2, [r7, #6]
 800aca4:	2300      	movs	r3, #0
 800aca6:	9303      	str	r3, [sp, #12]
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	9302      	str	r3, [sp, #8]
 800acac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f000 f80e 	bl	800acda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acbe:	69f8      	ldr	r0, [r7, #28]
 800acc0:	f000 f89c 	bl	800adfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acc4:	2301      	movs	r3, #1
 800acc6:	61bb      	str	r3, [r7, #24]
 800acc8:	e002      	b.n	800acd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acca:	f04f 33ff 	mov.w	r3, #4294967295
 800acce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acd0:	69bb      	ldr	r3, [r7, #24]
	}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b088      	sub	sp, #32
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	607a      	str	r2, [r7, #4]
 800ace6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	461a      	mov	r2, r3
 800acf2:	21a5      	movs	r1, #165	@ 0xa5
 800acf4:	f002 fab6 	bl	800d264 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad02:	3b01      	subs	r3, #1
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	f023 0307 	bic.w	r3, r3, #7
 800ad10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	f003 0307 	and.w	r3, r3, #7
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	617b      	str	r3, [r7, #20]
}
 800ad2e:	bf00      	nop
 800ad30:	bf00      	nop
 800ad32:	e7fd      	b.n	800ad30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d01f      	beq.n	800ad7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61fb      	str	r3, [r7, #28]
 800ad3e:	e012      	b.n	800ad66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	4413      	add	r3, r2
 800ad46:	7819      	ldrb	r1, [r3, #0]
 800ad48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3334      	adds	r3, #52	@ 0x34
 800ad50:	460a      	mov	r2, r1
 800ad52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	4413      	add	r3, r2
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d006      	beq.n	800ad6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	3301      	adds	r3, #1
 800ad64:	61fb      	str	r3, [r7, #28]
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	2b0f      	cmp	r3, #15
 800ad6a:	d9e9      	bls.n	800ad40 <prvInitialiseNewTask+0x66>
 800ad6c:	e000      	b.n	800ad70 <prvInitialiseNewTask+0x96>
			{
				break;
 800ad6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad78:	e003      	b.n	800ad82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad84:	2b37      	cmp	r3, #55	@ 0x37
 800ad86:	d901      	bls.n	800ad8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad88:	2337      	movs	r3, #55	@ 0x37
 800ad8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad90:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada0:	3304      	adds	r3, #4
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7ff f966 	bl	800a074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ada8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adaa:	3318      	adds	r3, #24
 800adac:	4618      	mov	r0, r3
 800adae:	f7ff f961 	bl	800a074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adc6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adca:	2200      	movs	r2, #0
 800adcc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	68f9      	ldr	r1, [r7, #12]
 800adda:	69b8      	ldr	r0, [r7, #24]
 800addc:	f001 f93e 	bl	800c05c <pxPortInitialiseStack>
 800ade0:	4602      	mov	r2, r0
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ade6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adf2:	bf00      	nop
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae04:	f001 fa58 	bl	800c2b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae08:	4b2d      	ldr	r3, [pc, #180]	@ (800aec0 <prvAddNewTaskToReadyList+0xc4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	4a2c      	ldr	r2, [pc, #176]	@ (800aec0 <prvAddNewTaskToReadyList+0xc4>)
 800ae10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae12:	4b2c      	ldr	r3, [pc, #176]	@ (800aec4 <prvAddNewTaskToReadyList+0xc8>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae1a:	4a2a      	ldr	r2, [pc, #168]	@ (800aec4 <prvAddNewTaskToReadyList+0xc8>)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae20:	4b27      	ldr	r3, [pc, #156]	@ (800aec0 <prvAddNewTaskToReadyList+0xc4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d110      	bne.n	800ae4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae28:	f000 fc1e 	bl	800b668 <prvInitialiseTaskLists>
 800ae2c:	e00d      	b.n	800ae4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae2e:	4b26      	ldr	r3, [pc, #152]	@ (800aec8 <prvAddNewTaskToReadyList+0xcc>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae36:	4b23      	ldr	r3, [pc, #140]	@ (800aec4 <prvAddNewTaskToReadyList+0xc8>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d802      	bhi.n	800ae4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae44:	4a1f      	ldr	r2, [pc, #124]	@ (800aec4 <prvAddNewTaskToReadyList+0xc8>)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae4a:	4b20      	ldr	r3, [pc, #128]	@ (800aecc <prvAddNewTaskToReadyList+0xd0>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	4a1e      	ldr	r2, [pc, #120]	@ (800aecc <prvAddNewTaskToReadyList+0xd0>)
 800ae52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae54:	4b1d      	ldr	r3, [pc, #116]	@ (800aecc <prvAddNewTaskToReadyList+0xd0>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae60:	4b1b      	ldr	r3, [pc, #108]	@ (800aed0 <prvAddNewTaskToReadyList+0xd4>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d903      	bls.n	800ae70 <prvAddNewTaskToReadyList+0x74>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6c:	4a18      	ldr	r2, [pc, #96]	@ (800aed0 <prvAddNewTaskToReadyList+0xd4>)
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4a15      	ldr	r2, [pc, #84]	@ (800aed4 <prvAddNewTaskToReadyList+0xd8>)
 800ae7e:	441a      	add	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3304      	adds	r3, #4
 800ae84:	4619      	mov	r1, r3
 800ae86:	4610      	mov	r0, r2
 800ae88:	f7ff f901 	bl	800a08e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae8c:	f001 fa46 	bl	800c31c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae90:	4b0d      	ldr	r3, [pc, #52]	@ (800aec8 <prvAddNewTaskToReadyList+0xcc>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00e      	beq.n	800aeb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae98:	4b0a      	ldr	r3, [pc, #40]	@ (800aec4 <prvAddNewTaskToReadyList+0xc8>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d207      	bcs.n	800aeb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aea6:	4b0c      	ldr	r3, [pc, #48]	@ (800aed8 <prvAddNewTaskToReadyList+0xdc>)
 800aea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20004264 	.word	0x20004264
 800aec4:	20003d90 	.word	0x20003d90
 800aec8:	20004270 	.word	0x20004270
 800aecc:	20004280 	.word	0x20004280
 800aed0:	2000426c 	.word	0x2000426c
 800aed4:	20003d94 	.word	0x20003d94
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d018      	beq.n	800af20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aeee:	4b14      	ldr	r3, [pc, #80]	@ (800af40 <vTaskDelay+0x64>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <vTaskDelay+0x32>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	60bb      	str	r3, [r7, #8]
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	e7fd      	b.n	800af0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af0e:	f000 f883 	bl	800b018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af12:	2100      	movs	r1, #0
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fcf3 	bl	800b900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af1a:	f000 f88b 	bl	800b034 <xTaskResumeAll>
 800af1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d107      	bne.n	800af36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800af26:	4b07      	ldr	r3, [pc, #28]	@ (800af44 <vTaskDelay+0x68>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	2000428c 	.word	0x2000428c
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08a      	sub	sp, #40	@ 0x28
 800af4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af56:	463a      	mov	r2, r7
 800af58:	1d39      	adds	r1, r7, #4
 800af5a:	f107 0308 	add.w	r3, r7, #8
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff f834 	bl	8009fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	9202      	str	r2, [sp, #8]
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	2300      	movs	r3, #0
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	2300      	movs	r3, #0
 800af74:	460a      	mov	r2, r1
 800af76:	4922      	ldr	r1, [pc, #136]	@ (800b000 <vTaskStartScheduler+0xb8>)
 800af78:	4822      	ldr	r0, [pc, #136]	@ (800b004 <vTaskStartScheduler+0xbc>)
 800af7a:	f7ff fe09 	bl	800ab90 <xTaskCreateStatic>
 800af7e:	4603      	mov	r3, r0
 800af80:	4a21      	ldr	r2, [pc, #132]	@ (800b008 <vTaskStartScheduler+0xc0>)
 800af82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af84:	4b20      	ldr	r3, [pc, #128]	@ (800b008 <vTaskStartScheduler+0xc0>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af8c:	2301      	movs	r3, #1
 800af8e:	617b      	str	r3, [r7, #20]
 800af90:	e001      	b.n	800af96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d102      	bne.n	800afa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af9c:	f000 fd04 	bl	800b9a8 <xTimerCreateTimerTask>
 800afa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d116      	bne.n	800afd6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	613b      	str	r3, [r7, #16]
}
 800afba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afbc:	4b13      	ldr	r3, [pc, #76]	@ (800b00c <vTaskStartScheduler+0xc4>)
 800afbe:	f04f 32ff 	mov.w	r2, #4294967295
 800afc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afc4:	4b12      	ldr	r3, [pc, #72]	@ (800b010 <vTaskStartScheduler+0xc8>)
 800afc6:	2201      	movs	r2, #1
 800afc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afca:	4b12      	ldr	r3, [pc, #72]	@ (800b014 <vTaskStartScheduler+0xcc>)
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afd0:	f001 f8ce 	bl	800c170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afd4:	e00f      	b.n	800aff6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afdc:	d10b      	bne.n	800aff6 <vTaskStartScheduler+0xae>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	60fb      	str	r3, [r7, #12]
}
 800aff0:	bf00      	nop
 800aff2:	bf00      	nop
 800aff4:	e7fd      	b.n	800aff2 <vTaskStartScheduler+0xaa>
}
 800aff6:	bf00      	nop
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	0800e408 	.word	0x0800e408
 800b004:	0800b639 	.word	0x0800b639
 800b008:	20004288 	.word	0x20004288
 800b00c:	20004284 	.word	0x20004284
 800b010:	20004270 	.word	0x20004270
 800b014:	20004268 	.word	0x20004268

0800b018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b018:	b480      	push	{r7}
 800b01a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b01c:	4b04      	ldr	r3, [pc, #16]	@ (800b030 <vTaskSuspendAll+0x18>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	4a03      	ldr	r2, [pc, #12]	@ (800b030 <vTaskSuspendAll+0x18>)
 800b024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b026:	bf00      	nop
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	2000428c 	.word	0x2000428c

0800b034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b042:	4b42      	ldr	r3, [pc, #264]	@ (800b14c <xTaskResumeAll+0x118>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10b      	bne.n	800b062 <xTaskResumeAll+0x2e>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	603b      	str	r3, [r7, #0]
}
 800b05c:	bf00      	nop
 800b05e:	bf00      	nop
 800b060:	e7fd      	b.n	800b05e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b062:	f001 f929 	bl	800c2b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b066:	4b39      	ldr	r3, [pc, #228]	@ (800b14c <xTaskResumeAll+0x118>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	4a37      	ldr	r2, [pc, #220]	@ (800b14c <xTaskResumeAll+0x118>)
 800b06e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b070:	4b36      	ldr	r3, [pc, #216]	@ (800b14c <xTaskResumeAll+0x118>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d162      	bne.n	800b13e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b078:	4b35      	ldr	r3, [pc, #212]	@ (800b150 <xTaskResumeAll+0x11c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d05e      	beq.n	800b13e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b080:	e02f      	b.n	800b0e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b082:	4b34      	ldr	r3, [pc, #208]	@ (800b154 <xTaskResumeAll+0x120>)
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3318      	adds	r3, #24
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff f85a 	bl	800a148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3304      	adds	r3, #4
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff f855 	bl	800a148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a2:	4b2d      	ldr	r3, [pc, #180]	@ (800b158 <xTaskResumeAll+0x124>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d903      	bls.n	800b0b2 <xTaskResumeAll+0x7e>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b158 <xTaskResumeAll+0x124>)
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4a27      	ldr	r2, [pc, #156]	@ (800b15c <xTaskResumeAll+0x128>)
 800b0c0:	441a      	add	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	f7fe ffe0 	bl	800a08e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d2:	4b23      	ldr	r3, [pc, #140]	@ (800b160 <xTaskResumeAll+0x12c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d302      	bcc.n	800b0e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b0dc:	4b21      	ldr	r3, [pc, #132]	@ (800b164 <xTaskResumeAll+0x130>)
 800b0de:	2201      	movs	r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0e2:	4b1c      	ldr	r3, [pc, #112]	@ (800b154 <xTaskResumeAll+0x120>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1cb      	bne.n	800b082 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0f0:	f000 fb58 	bl	800b7a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b168 <xTaskResumeAll+0x134>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d010      	beq.n	800b122 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b100:	f000 f846 	bl	800b190 <xTaskIncrementTick>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b10a:	4b16      	ldr	r3, [pc, #88]	@ (800b164 <xTaskResumeAll+0x130>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3b01      	subs	r3, #1
 800b114:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1f1      	bne.n	800b100 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b11c:	4b12      	ldr	r3, [pc, #72]	@ (800b168 <xTaskResumeAll+0x134>)
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b122:	4b10      	ldr	r3, [pc, #64]	@ (800b164 <xTaskResumeAll+0x130>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d009      	beq.n	800b13e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b12a:	2301      	movs	r3, #1
 800b12c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b12e:	4b0f      	ldr	r3, [pc, #60]	@ (800b16c <xTaskResumeAll+0x138>)
 800b130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b13e:	f001 f8ed 	bl	800c31c <vPortExitCritical>

	return xAlreadyYielded;
 800b142:	68bb      	ldr	r3, [r7, #8]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	2000428c 	.word	0x2000428c
 800b150:	20004264 	.word	0x20004264
 800b154:	20004224 	.word	0x20004224
 800b158:	2000426c 	.word	0x2000426c
 800b15c:	20003d94 	.word	0x20003d94
 800b160:	20003d90 	.word	0x20003d90
 800b164:	20004278 	.word	0x20004278
 800b168:	20004274 	.word	0x20004274
 800b16c:	e000ed04 	.word	0xe000ed04

0800b170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b176:	4b05      	ldr	r3, [pc, #20]	@ (800b18c <xTaskGetTickCount+0x1c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b17c:	687b      	ldr	r3, [r7, #4]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	20004268 	.word	0x20004268

0800b190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b19a:	4b4f      	ldr	r3, [pc, #316]	@ (800b2d8 <xTaskIncrementTick+0x148>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f040 8090 	bne.w	800b2c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1a4:	4b4d      	ldr	r3, [pc, #308]	@ (800b2dc <xTaskIncrementTick+0x14c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1ac:	4a4b      	ldr	r2, [pc, #300]	@ (800b2dc <xTaskIncrementTick+0x14c>)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d121      	bne.n	800b1fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1b8:	4b49      	ldr	r3, [pc, #292]	@ (800b2e0 <xTaskIncrementTick+0x150>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00b      	beq.n	800b1da <xTaskIncrementTick+0x4a>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	603b      	str	r3, [r7, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop
 800b1d8:	e7fd      	b.n	800b1d6 <xTaskIncrementTick+0x46>
 800b1da:	4b41      	ldr	r3, [pc, #260]	@ (800b2e0 <xTaskIncrementTick+0x150>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	4b40      	ldr	r3, [pc, #256]	@ (800b2e4 <xTaskIncrementTick+0x154>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a3e      	ldr	r2, [pc, #248]	@ (800b2e0 <xTaskIncrementTick+0x150>)
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	4a3e      	ldr	r2, [pc, #248]	@ (800b2e4 <xTaskIncrementTick+0x154>)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	4b3e      	ldr	r3, [pc, #248]	@ (800b2e8 <xTaskIncrementTick+0x158>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	4a3c      	ldr	r2, [pc, #240]	@ (800b2e8 <xTaskIncrementTick+0x158>)
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	f000 fad4 	bl	800b7a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1fc:	4b3b      	ldr	r3, [pc, #236]	@ (800b2ec <xTaskIncrementTick+0x15c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	429a      	cmp	r2, r3
 800b204:	d349      	bcc.n	800b29a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b206:	4b36      	ldr	r3, [pc, #216]	@ (800b2e0 <xTaskIncrementTick+0x150>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d104      	bne.n	800b21a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b210:	4b36      	ldr	r3, [pc, #216]	@ (800b2ec <xTaskIncrementTick+0x15c>)
 800b212:	f04f 32ff 	mov.w	r2, #4294967295
 800b216:	601a      	str	r2, [r3, #0]
					break;
 800b218:	e03f      	b.n	800b29a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b21a:	4b31      	ldr	r3, [pc, #196]	@ (800b2e0 <xTaskIncrementTick+0x150>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d203      	bcs.n	800b23a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b232:	4a2e      	ldr	r2, [pc, #184]	@ (800b2ec <xTaskIncrementTick+0x15c>)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b238:	e02f      	b.n	800b29a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe ff82 	bl	800a148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3318      	adds	r3, #24
 800b250:	4618      	mov	r0, r3
 800b252:	f7fe ff79 	bl	800a148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b25a:	4b25      	ldr	r3, [pc, #148]	@ (800b2f0 <xTaskIncrementTick+0x160>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d903      	bls.n	800b26a <xTaskIncrementTick+0xda>
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	4a22      	ldr	r2, [pc, #136]	@ (800b2f0 <xTaskIncrementTick+0x160>)
 800b268:	6013      	str	r3, [r2, #0]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4a1f      	ldr	r2, [pc, #124]	@ (800b2f4 <xTaskIncrementTick+0x164>)
 800b278:	441a      	add	r2, r3
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	3304      	adds	r3, #4
 800b27e:	4619      	mov	r1, r3
 800b280:	4610      	mov	r0, r2
 800b282:	f7fe ff04 	bl	800a08e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b28a:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f8 <xTaskIncrementTick+0x168>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b290:	429a      	cmp	r2, r3
 800b292:	d3b8      	bcc.n	800b206 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b294:	2301      	movs	r3, #1
 800b296:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b298:	e7b5      	b.n	800b206 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b29a:	4b17      	ldr	r3, [pc, #92]	@ (800b2f8 <xTaskIncrementTick+0x168>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2a0:	4914      	ldr	r1, [pc, #80]	@ (800b2f4 <xTaskIncrementTick+0x164>)
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	440b      	add	r3, r1
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d901      	bls.n	800b2b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2b6:	4b11      	ldr	r3, [pc, #68]	@ (800b2fc <xTaskIncrementTick+0x16c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d007      	beq.n	800b2ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	e004      	b.n	800b2ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b300 <xTaskIncrementTick+0x170>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	4a0d      	ldr	r2, [pc, #52]	@ (800b300 <xTaskIncrementTick+0x170>)
 800b2cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2ce:	697b      	ldr	r3, [r7, #20]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	2000428c 	.word	0x2000428c
 800b2dc:	20004268 	.word	0x20004268
 800b2e0:	2000421c 	.word	0x2000421c
 800b2e4:	20004220 	.word	0x20004220
 800b2e8:	2000427c 	.word	0x2000427c
 800b2ec:	20004284 	.word	0x20004284
 800b2f0:	2000426c 	.word	0x2000426c
 800b2f4:	20003d94 	.word	0x20003d94
 800b2f8:	20003d90 	.word	0x20003d90
 800b2fc:	20004278 	.word	0x20004278
 800b300:	20004274 	.word	0x20004274

0800b304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b30a:	4b28      	ldr	r3, [pc, #160]	@ (800b3ac <vTaskSwitchContext+0xa8>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d003      	beq.n	800b31a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b312:	4b27      	ldr	r3, [pc, #156]	@ (800b3b0 <vTaskSwitchContext+0xac>)
 800b314:	2201      	movs	r2, #1
 800b316:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b318:	e042      	b.n	800b3a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b31a:	4b25      	ldr	r3, [pc, #148]	@ (800b3b0 <vTaskSwitchContext+0xac>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b320:	4b24      	ldr	r3, [pc, #144]	@ (800b3b4 <vTaskSwitchContext+0xb0>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	e011      	b.n	800b34c <vTaskSwitchContext+0x48>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10b      	bne.n	800b346 <vTaskSwitchContext+0x42>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	607b      	str	r3, [r7, #4]
}
 800b340:	bf00      	nop
 800b342:	bf00      	nop
 800b344:	e7fd      	b.n	800b342 <vTaskSwitchContext+0x3e>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3b01      	subs	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	491a      	ldr	r1, [pc, #104]	@ (800b3b8 <vTaskSwitchContext+0xb4>)
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	440b      	add	r3, r1
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d0e3      	beq.n	800b328 <vTaskSwitchContext+0x24>
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4a13      	ldr	r2, [pc, #76]	@ (800b3b8 <vTaskSwitchContext+0xb4>)
 800b36c:	4413      	add	r3, r2
 800b36e:	60bb      	str	r3, [r7, #8]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	605a      	str	r2, [r3, #4]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	3308      	adds	r3, #8
 800b382:	429a      	cmp	r2, r3
 800b384:	d104      	bne.n	800b390 <vTaskSwitchContext+0x8c>
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	685a      	ldr	r2, [r3, #4]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	605a      	str	r2, [r3, #4]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	4a09      	ldr	r2, [pc, #36]	@ (800b3bc <vTaskSwitchContext+0xb8>)
 800b398:	6013      	str	r3, [r2, #0]
 800b39a:	4a06      	ldr	r2, [pc, #24]	@ (800b3b4 <vTaskSwitchContext+0xb0>)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6013      	str	r3, [r2, #0]
}
 800b3a0:	bf00      	nop
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	2000428c 	.word	0x2000428c
 800b3b0:	20004278 	.word	0x20004278
 800b3b4:	2000426c 	.word	0x2000426c
 800b3b8:	20003d94 	.word	0x20003d94
 800b3bc:	20003d90 	.word	0x20003d90

0800b3c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10b      	bne.n	800b3e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60fb      	str	r3, [r7, #12]
}
 800b3e2:	bf00      	nop
 800b3e4:	bf00      	nop
 800b3e6:	e7fd      	b.n	800b3e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3e8:	4b07      	ldr	r3, [pc, #28]	@ (800b408 <vTaskPlaceOnEventList+0x48>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3318      	adds	r3, #24
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7fe fe70 	bl	800a0d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	6838      	ldr	r0, [r7, #0]
 800b3fa:	f000 fa81 	bl	800b900 <prvAddCurrentTaskToDelayedList>
}
 800b3fe:	bf00      	nop
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	20003d90 	.word	0x20003d90

0800b40c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10b      	bne.n	800b436 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	617b      	str	r3, [r7, #20]
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop
 800b434:	e7fd      	b.n	800b432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b436:	4b0a      	ldr	r3, [pc, #40]	@ (800b460 <vTaskPlaceOnEventListRestricted+0x54>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3318      	adds	r3, #24
 800b43c:	4619      	mov	r1, r3
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7fe fe25 	bl	800a08e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b44a:	f04f 33ff 	mov.w	r3, #4294967295
 800b44e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	68b8      	ldr	r0, [r7, #8]
 800b454:	f000 fa54 	bl	800b900 <prvAddCurrentTaskToDelayedList>
	}
 800b458:	bf00      	nop
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20003d90 	.word	0x20003d90

0800b464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	60fb      	str	r3, [r7, #12]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	3318      	adds	r3, #24
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fe56 	bl	800a148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b49c:	4b1d      	ldr	r3, [pc, #116]	@ (800b514 <xTaskRemoveFromEventList+0xb0>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d11d      	bne.n	800b4e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fe fe4d 	bl	800a148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b2:	4b19      	ldr	r3, [pc, #100]	@ (800b518 <xTaskRemoveFromEventList+0xb4>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d903      	bls.n	800b4c2 <xTaskRemoveFromEventList+0x5e>
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4be:	4a16      	ldr	r2, [pc, #88]	@ (800b518 <xTaskRemoveFromEventList+0xb4>)
 800b4c0:	6013      	str	r3, [r2, #0]
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4a13      	ldr	r2, [pc, #76]	@ (800b51c <xTaskRemoveFromEventList+0xb8>)
 800b4d0:	441a      	add	r2, r3
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4610      	mov	r0, r2
 800b4da:	f7fe fdd8 	bl	800a08e <vListInsertEnd>
 800b4de:	e005      	b.n	800b4ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	3318      	adds	r3, #24
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	480e      	ldr	r0, [pc, #56]	@ (800b520 <xTaskRemoveFromEventList+0xbc>)
 800b4e8:	f7fe fdd1 	bl	800a08e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b524 <xTaskRemoveFromEventList+0xc0>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d905      	bls.n	800b506 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b528 <xTaskRemoveFromEventList+0xc4>)
 800b500:	2201      	movs	r2, #1
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	e001      	b.n	800b50a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b506:	2300      	movs	r3, #0
 800b508:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b50a:	697b      	ldr	r3, [r7, #20]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	2000428c 	.word	0x2000428c
 800b518:	2000426c 	.word	0x2000426c
 800b51c:	20003d94 	.word	0x20003d94
 800b520:	20004224 	.word	0x20004224
 800b524:	20003d90 	.word	0x20003d90
 800b528:	20004278 	.word	0x20004278

0800b52c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b534:	4b06      	ldr	r3, [pc, #24]	@ (800b550 <vTaskInternalSetTimeOutState+0x24>)
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b53c:	4b05      	ldr	r3, [pc, #20]	@ (800b554 <vTaskInternalSetTimeOutState+0x28>)
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	605a      	str	r2, [r3, #4]
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	2000427c 	.word	0x2000427c
 800b554:	20004268 	.word	0x20004268

0800b558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10b      	bne.n	800b580 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	613b      	str	r3, [r7, #16]
}
 800b57a:	bf00      	nop
 800b57c:	bf00      	nop
 800b57e:	e7fd      	b.n	800b57c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10b      	bne.n	800b59e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	60fb      	str	r3, [r7, #12]
}
 800b598:	bf00      	nop
 800b59a:	bf00      	nop
 800b59c:	e7fd      	b.n	800b59a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b59e:	f000 fe8b 	bl	800c2b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5a2:	4b1d      	ldr	r3, [pc, #116]	@ (800b618 <xTaskCheckForTimeOut+0xc0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	69ba      	ldr	r2, [r7, #24]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ba:	d102      	bne.n	800b5c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	61fb      	str	r3, [r7, #28]
 800b5c0:	e023      	b.n	800b60a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	4b15      	ldr	r3, [pc, #84]	@ (800b61c <xTaskCheckForTimeOut+0xc4>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d007      	beq.n	800b5de <xTaskCheckForTimeOut+0x86>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	69ba      	ldr	r2, [r7, #24]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d302      	bcc.n	800b5de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	61fb      	str	r3, [r7, #28]
 800b5dc:	e015      	b.n	800b60a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d20b      	bcs.n	800b600 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	1ad2      	subs	r2, r2, r3
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff ff99 	bl	800b52c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	61fb      	str	r3, [r7, #28]
 800b5fe:	e004      	b.n	800b60a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b606:	2301      	movs	r3, #1
 800b608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b60a:	f000 fe87 	bl	800c31c <vPortExitCritical>

	return xReturn;
 800b60e:	69fb      	ldr	r3, [r7, #28]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3720      	adds	r7, #32
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20004268 	.word	0x20004268
 800b61c:	2000427c 	.word	0x2000427c

0800b620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b624:	4b03      	ldr	r3, [pc, #12]	@ (800b634 <vTaskMissedYield+0x14>)
 800b626:	2201      	movs	r2, #1
 800b628:	601a      	str	r2, [r3, #0]
}
 800b62a:	bf00      	nop
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	20004278 	.word	0x20004278

0800b638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b640:	f000 f852 	bl	800b6e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b644:	4b06      	ldr	r3, [pc, #24]	@ (800b660 <prvIdleTask+0x28>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d9f9      	bls.n	800b640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b64c:	4b05      	ldr	r3, [pc, #20]	@ (800b664 <prvIdleTask+0x2c>)
 800b64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b65c:	e7f0      	b.n	800b640 <prvIdleTask+0x8>
 800b65e:	bf00      	nop
 800b660:	20003d94 	.word	0x20003d94
 800b664:	e000ed04 	.word	0xe000ed04

0800b668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b66e:	2300      	movs	r3, #0
 800b670:	607b      	str	r3, [r7, #4]
 800b672:	e00c      	b.n	800b68e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	4613      	mov	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4a12      	ldr	r2, [pc, #72]	@ (800b6c8 <prvInitialiseTaskLists+0x60>)
 800b680:	4413      	add	r3, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fcd6 	bl	800a034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3301      	adds	r3, #1
 800b68c:	607b      	str	r3, [r7, #4]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b37      	cmp	r3, #55	@ 0x37
 800b692:	d9ef      	bls.n	800b674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b694:	480d      	ldr	r0, [pc, #52]	@ (800b6cc <prvInitialiseTaskLists+0x64>)
 800b696:	f7fe fccd 	bl	800a034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b69a:	480d      	ldr	r0, [pc, #52]	@ (800b6d0 <prvInitialiseTaskLists+0x68>)
 800b69c:	f7fe fcca 	bl	800a034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6a0:	480c      	ldr	r0, [pc, #48]	@ (800b6d4 <prvInitialiseTaskLists+0x6c>)
 800b6a2:	f7fe fcc7 	bl	800a034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6a6:	480c      	ldr	r0, [pc, #48]	@ (800b6d8 <prvInitialiseTaskLists+0x70>)
 800b6a8:	f7fe fcc4 	bl	800a034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6ac:	480b      	ldr	r0, [pc, #44]	@ (800b6dc <prvInitialiseTaskLists+0x74>)
 800b6ae:	f7fe fcc1 	bl	800a034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e0 <prvInitialiseTaskLists+0x78>)
 800b6b4:	4a05      	ldr	r2, [pc, #20]	@ (800b6cc <prvInitialiseTaskLists+0x64>)
 800b6b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e4 <prvInitialiseTaskLists+0x7c>)
 800b6ba:	4a05      	ldr	r2, [pc, #20]	@ (800b6d0 <prvInitialiseTaskLists+0x68>)
 800b6bc:	601a      	str	r2, [r3, #0]
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20003d94 	.word	0x20003d94
 800b6cc:	200041f4 	.word	0x200041f4
 800b6d0:	20004208 	.word	0x20004208
 800b6d4:	20004224 	.word	0x20004224
 800b6d8:	20004238 	.word	0x20004238
 800b6dc:	20004250 	.word	0x20004250
 800b6e0:	2000421c 	.word	0x2000421c
 800b6e4:	20004220 	.word	0x20004220

0800b6e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6ee:	e019      	b.n	800b724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6f0:	f000 fde2 	bl	800c2b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f4:	4b10      	ldr	r3, [pc, #64]	@ (800b738 <prvCheckTasksWaitingTermination+0x50>)
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3304      	adds	r3, #4
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fd21 	bl	800a148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b706:	4b0d      	ldr	r3, [pc, #52]	@ (800b73c <prvCheckTasksWaitingTermination+0x54>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	4a0b      	ldr	r2, [pc, #44]	@ (800b73c <prvCheckTasksWaitingTermination+0x54>)
 800b70e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b710:	4b0b      	ldr	r3, [pc, #44]	@ (800b740 <prvCheckTasksWaitingTermination+0x58>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3b01      	subs	r3, #1
 800b716:	4a0a      	ldr	r2, [pc, #40]	@ (800b740 <prvCheckTasksWaitingTermination+0x58>)
 800b718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b71a:	f000 fdff 	bl	800c31c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f810 	bl	800b744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b724:	4b06      	ldr	r3, [pc, #24]	@ (800b740 <prvCheckTasksWaitingTermination+0x58>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1e1      	bne.n	800b6f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b72c:	bf00      	nop
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20004238 	.word	0x20004238
 800b73c:	20004264 	.word	0x20004264
 800b740:	2000424c 	.word	0x2000424c

0800b744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b752:	2b00      	cmp	r3, #0
 800b754:	d108      	bne.n	800b768 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 ff9c 	bl	800c698 <vPortFree>
				vPortFree( pxTCB );
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 ff99 	bl	800c698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b766:	e019      	b.n	800b79c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d103      	bne.n	800b77a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 ff90 	bl	800c698 <vPortFree>
	}
 800b778:	e010      	b.n	800b79c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b780:	2b02      	cmp	r3, #2
 800b782:	d00b      	beq.n	800b79c <prvDeleteTCB+0x58>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	60fb      	str	r3, [r7, #12]
}
 800b796:	bf00      	nop
 800b798:	bf00      	nop
 800b79a:	e7fd      	b.n	800b798 <prvDeleteTCB+0x54>
	}
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b7dc <prvResetNextTaskUnblockTime+0x38>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d104      	bne.n	800b7be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7bc:	e008      	b.n	800b7d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7be:	4b07      	ldr	r3, [pc, #28]	@ (800b7dc <prvResetNextTaskUnblockTime+0x38>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	4a04      	ldr	r2, [pc, #16]	@ (800b7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ce:	6013      	str	r3, [r2, #0]
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	2000421c 	.word	0x2000421c
 800b7e0:	20004284 	.word	0x20004284

0800b7e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b818 <xTaskGetSchedulerState+0x34>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	607b      	str	r3, [r7, #4]
 800b7f6:	e008      	b.n	800b80a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7f8:	4b08      	ldr	r3, [pc, #32]	@ (800b81c <xTaskGetSchedulerState+0x38>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d102      	bne.n	800b806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b800:	2302      	movs	r3, #2
 800b802:	607b      	str	r3, [r7, #4]
 800b804:	e001      	b.n	800b80a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b806:	2300      	movs	r3, #0
 800b808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b80a:	687b      	ldr	r3, [r7, #4]
	}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	20004270 	.word	0x20004270
 800b81c:	2000428c 	.word	0x2000428c

0800b820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b82c:	2300      	movs	r3, #0
 800b82e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d058      	beq.n	800b8e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b836:	4b2f      	ldr	r3, [pc, #188]	@ (800b8f4 <xTaskPriorityDisinherit+0xd4>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d00b      	beq.n	800b858 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	60fb      	str	r3, [r7, #12]
}
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	e7fd      	b.n	800b854 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10b      	bne.n	800b878 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	60bb      	str	r3, [r7, #8]
}
 800b872:	bf00      	nop
 800b874:	bf00      	nop
 800b876:	e7fd      	b.n	800b874 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b87c:	1e5a      	subs	r2, r3, #1
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d02c      	beq.n	800b8e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b892:	2b00      	cmp	r3, #0
 800b894:	d128      	bne.n	800b8e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	3304      	adds	r3, #4
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fc54 	bl	800a148 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f8 <xTaskPriorityDisinherit+0xd8>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d903      	bls.n	800b8c8 <xTaskPriorityDisinherit+0xa8>
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b8f8 <xTaskPriorityDisinherit+0xd8>)
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4a09      	ldr	r2, [pc, #36]	@ (800b8fc <xTaskPriorityDisinherit+0xdc>)
 800b8d6:	441a      	add	r2, r3
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	3304      	adds	r3, #4
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4610      	mov	r0, r2
 800b8e0:	f7fe fbd5 	bl	800a08e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8e8:	697b      	ldr	r3, [r7, #20]
	}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20003d90 	.word	0x20003d90
 800b8f8:	2000426c 	.word	0x2000426c
 800b8fc:	20003d94 	.word	0x20003d94

0800b900 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b90a:	4b21      	ldr	r3, [pc, #132]	@ (800b990 <prvAddCurrentTaskToDelayedList+0x90>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b910:	4b20      	ldr	r3, [pc, #128]	@ (800b994 <prvAddCurrentTaskToDelayedList+0x94>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3304      	adds	r3, #4
 800b916:	4618      	mov	r0, r3
 800b918:	f7fe fc16 	bl	800a148 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b922:	d10a      	bne.n	800b93a <prvAddCurrentTaskToDelayedList+0x3a>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d007      	beq.n	800b93a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b92a:	4b1a      	ldr	r3, [pc, #104]	@ (800b994 <prvAddCurrentTaskToDelayedList+0x94>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3304      	adds	r3, #4
 800b930:	4619      	mov	r1, r3
 800b932:	4819      	ldr	r0, [pc, #100]	@ (800b998 <prvAddCurrentTaskToDelayedList+0x98>)
 800b934:	f7fe fbab 	bl	800a08e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b938:	e026      	b.n	800b988 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4413      	add	r3, r2
 800b940:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b942:	4b14      	ldr	r3, [pc, #80]	@ (800b994 <prvAddCurrentTaskToDelayedList+0x94>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d209      	bcs.n	800b966 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b952:	4b12      	ldr	r3, [pc, #72]	@ (800b99c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	4b0f      	ldr	r3, [pc, #60]	@ (800b994 <prvAddCurrentTaskToDelayedList+0x94>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4619      	mov	r1, r3
 800b95e:	4610      	mov	r0, r2
 800b960:	f7fe fbb9 	bl	800a0d6 <vListInsert>
}
 800b964:	e010      	b.n	800b988 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b966:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	4b0a      	ldr	r3, [pc, #40]	@ (800b994 <prvAddCurrentTaskToDelayedList+0x94>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3304      	adds	r3, #4
 800b970:	4619      	mov	r1, r3
 800b972:	4610      	mov	r0, r2
 800b974:	f7fe fbaf 	bl	800a0d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b978:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d202      	bcs.n	800b988 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b982:	4a08      	ldr	r2, [pc, #32]	@ (800b9a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	6013      	str	r3, [r2, #0]
}
 800b988:	bf00      	nop
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	20004268 	.word	0x20004268
 800b994:	20003d90 	.word	0x20003d90
 800b998:	20004250 	.word	0x20004250
 800b99c:	20004220 	.word	0x20004220
 800b9a0:	2000421c 	.word	0x2000421c
 800b9a4:	20004284 	.word	0x20004284

0800b9a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	@ 0x28
 800b9ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9b2:	f000 fb13 	bl	800bfdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9b6:	4b1d      	ldr	r3, [pc, #116]	@ (800ba2c <xTimerCreateTimerTask+0x84>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d021      	beq.n	800ba02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9c6:	1d3a      	adds	r2, r7, #4
 800b9c8:	f107 0108 	add.w	r1, r7, #8
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fe fb15 	bl	800a000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	9202      	str	r2, [sp, #8]
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	460a      	mov	r2, r1
 800b9e8:	4911      	ldr	r1, [pc, #68]	@ (800ba30 <xTimerCreateTimerTask+0x88>)
 800b9ea:	4812      	ldr	r0, [pc, #72]	@ (800ba34 <xTimerCreateTimerTask+0x8c>)
 800b9ec:	f7ff f8d0 	bl	800ab90 <xTaskCreateStatic>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	4a11      	ldr	r2, [pc, #68]	@ (800ba38 <xTimerCreateTimerTask+0x90>)
 800b9f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9f6:	4b10      	ldr	r3, [pc, #64]	@ (800ba38 <xTimerCreateTimerTask+0x90>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10b      	bne.n	800ba20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	613b      	str	r3, [r7, #16]
}
 800ba1a:	bf00      	nop
 800ba1c:	bf00      	nop
 800ba1e:	e7fd      	b.n	800ba1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba20:	697b      	ldr	r3, [r7, #20]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200042c0 	.word	0x200042c0
 800ba30:	0800e410 	.word	0x0800e410
 800ba34:	0800bb75 	.word	0x0800bb75
 800ba38:	200042c4 	.word	0x200042c4

0800ba3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08a      	sub	sp, #40	@ 0x28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
 800ba48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10b      	bne.n	800ba6c <xTimerGenericCommand+0x30>
	__asm volatile
 800ba54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	623b      	str	r3, [r7, #32]
}
 800ba66:	bf00      	nop
 800ba68:	bf00      	nop
 800ba6a:	e7fd      	b.n	800ba68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba6c:	4b19      	ldr	r3, [pc, #100]	@ (800bad4 <xTimerGenericCommand+0x98>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d02a      	beq.n	800baca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	dc18      	bgt.n	800bab8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba86:	f7ff fead 	bl	800b7e4 <xTaskGetSchedulerState>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d109      	bne.n	800baa4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba90:	4b10      	ldr	r3, [pc, #64]	@ (800bad4 <xTimerGenericCommand+0x98>)
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	f107 0110 	add.w	r1, r7, #16
 800ba98:	2300      	movs	r3, #0
 800ba9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba9c:	f7fe fc88 	bl	800a3b0 <xQueueGenericSend>
 800baa0:	6278      	str	r0, [r7, #36]	@ 0x24
 800baa2:	e012      	b.n	800baca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baa4:	4b0b      	ldr	r3, [pc, #44]	@ (800bad4 <xTimerGenericCommand+0x98>)
 800baa6:	6818      	ldr	r0, [r3, #0]
 800baa8:	f107 0110 	add.w	r1, r7, #16
 800baac:	2300      	movs	r3, #0
 800baae:	2200      	movs	r2, #0
 800bab0:	f7fe fc7e 	bl	800a3b0 <xQueueGenericSend>
 800bab4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bab6:	e008      	b.n	800baca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bab8:	4b06      	ldr	r3, [pc, #24]	@ (800bad4 <xTimerGenericCommand+0x98>)
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	f107 0110 	add.w	r1, r7, #16
 800bac0:	2300      	movs	r3, #0
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	f7fe fd76 	bl	800a5b4 <xQueueGenericSendFromISR>
 800bac8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800baca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3728      	adds	r7, #40	@ 0x28
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	200042c0 	.word	0x200042c0

0800bad8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af02      	add	r7, sp, #8
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bae2:	4b23      	ldr	r3, [pc, #140]	@ (800bb70 <prvProcessExpiredTimer+0x98>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	3304      	adds	r3, #4
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe fb29 	bl	800a148 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d023      	beq.n	800bb4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	699a      	ldr	r2, [r3, #24]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	18d1      	adds	r1, r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	6978      	ldr	r0, [r7, #20]
 800bb12:	f000 f8d5 	bl	800bcc0 <prvInsertTimerInActiveList>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d020      	beq.n	800bb5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	2300      	movs	r3, #0
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	2100      	movs	r1, #0
 800bb26:	6978      	ldr	r0, [r7, #20]
 800bb28:	f7ff ff88 	bl	800ba3c <xTimerGenericCommand>
 800bb2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d114      	bne.n	800bb5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	60fb      	str	r3, [r7, #12]
}
 800bb46:	bf00      	nop
 800bb48:	bf00      	nop
 800bb4a:	e7fd      	b.n	800bb48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb52:	f023 0301 	bic.w	r3, r3, #1
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	6978      	ldr	r0, [r7, #20]
 800bb64:	4798      	blx	r3
}
 800bb66:	bf00      	nop
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	200042b8 	.word	0x200042b8

0800bb74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb7c:	f107 0308 	add.w	r3, r7, #8
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 f859 	bl	800bc38 <prvGetNextExpireTime>
 800bb86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 f805 	bl	800bb9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb92:	f000 f8d7 	bl	800bd44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb96:	bf00      	nop
 800bb98:	e7f0      	b.n	800bb7c <prvTimerTask+0x8>
	...

0800bb9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bba6:	f7ff fa37 	bl	800b018 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbaa:	f107 0308 	add.w	r3, r7, #8
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f866 	bl	800bc80 <prvSampleTimeNow>
 800bbb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d130      	bne.n	800bc1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10a      	bne.n	800bbd8 <prvProcessTimerOrBlockTask+0x3c>
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d806      	bhi.n	800bbd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbca:	f7ff fa33 	bl	800b034 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbce:	68f9      	ldr	r1, [r7, #12]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff ff81 	bl	800bad8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbd6:	e024      	b.n	800bc22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d008      	beq.n	800bbf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbde:	4b13      	ldr	r3, [pc, #76]	@ (800bc2c <prvProcessTimerOrBlockTask+0x90>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <prvProcessTimerOrBlockTask+0x50>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <prvProcessTimerOrBlockTask+0x52>
 800bbec:	2300      	movs	r3, #0
 800bbee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bbf0:	4b0f      	ldr	r3, [pc, #60]	@ (800bc30 <prvProcessTimerOrBlockTask+0x94>)
 800bbf2:	6818      	ldr	r0, [r3, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	f7fe ff93 	bl	800ab28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc02:	f7ff fa17 	bl	800b034 <xTaskResumeAll>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10a      	bne.n	800bc22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc0c:	4b09      	ldr	r3, [pc, #36]	@ (800bc34 <prvProcessTimerOrBlockTask+0x98>)
 800bc0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc12:	601a      	str	r2, [r3, #0]
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	f3bf 8f6f 	isb	sy
}
 800bc1c:	e001      	b.n	800bc22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc1e:	f7ff fa09 	bl	800b034 <xTaskResumeAll>
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200042bc 	.word	0x200042bc
 800bc30:	200042c0 	.word	0x200042c0
 800bc34:	e000ed04 	.word	0xe000ed04

0800bc38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc40:	4b0e      	ldr	r3, [pc, #56]	@ (800bc7c <prvGetNextExpireTime+0x44>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <prvGetNextExpireTime+0x16>
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	e000      	b.n	800bc50 <prvGetNextExpireTime+0x18>
 800bc4e:	2200      	movs	r2, #0
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d105      	bne.n	800bc68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc5c:	4b07      	ldr	r3, [pc, #28]	@ (800bc7c <prvGetNextExpireTime+0x44>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	e001      	b.n	800bc6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	200042b8 	.word	0x200042b8

0800bc80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc88:	f7ff fa72 	bl	800b170 <xTaskGetTickCount>
 800bc8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <prvSampleTimeNow+0x3c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d205      	bcs.n	800bca4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc98:	f000 f93a 	bl	800bf10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcaa:	4a04      	ldr	r2, [pc, #16]	@ (800bcbc <prvSampleTimeNow+0x3c>)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	200042c8 	.word	0x200042c8

0800bcc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d812      	bhi.n	800bd0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d302      	bcc.n	800bcfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	617b      	str	r3, [r7, #20]
 800bcf8:	e01b      	b.n	800bd32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bcfa:	4b10      	ldr	r3, [pc, #64]	@ (800bd3c <prvInsertTimerInActiveList+0x7c>)
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3304      	adds	r3, #4
 800bd02:	4619      	mov	r1, r3
 800bd04:	4610      	mov	r0, r2
 800bd06:	f7fe f9e6 	bl	800a0d6 <vListInsert>
 800bd0a:	e012      	b.n	800bd32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d206      	bcs.n	800bd22 <prvInsertTimerInActiveList+0x62>
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d302      	bcc.n	800bd22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	e007      	b.n	800bd32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd22:	4b07      	ldr	r3, [pc, #28]	@ (800bd40 <prvInsertTimerInActiveList+0x80>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f7fe f9d2 	bl	800a0d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd32:	697b      	ldr	r3, [r7, #20]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	200042bc 	.word	0x200042bc
 800bd40:	200042b8 	.word	0x200042b8

0800bd44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b08e      	sub	sp, #56	@ 0x38
 800bd48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd4a:	e0ce      	b.n	800beea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	da19      	bge.n	800bd86 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd52:	1d3b      	adds	r3, r7, #4
 800bd54:	3304      	adds	r3, #4
 800bd56:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10b      	bne.n	800bd76 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	61fb      	str	r3, [r7, #28]
}
 800bd70:	bf00      	nop
 800bd72:	bf00      	nop
 800bd74:	e7fd      	b.n	800bd72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd7c:	6850      	ldr	r0, [r2, #4]
 800bd7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd80:	6892      	ldr	r2, [r2, #8]
 800bd82:	4611      	mov	r1, r2
 800bd84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f2c0 80ae 	blt.w	800beea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d004      	beq.n	800bda4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe f9d2 	bl	800a148 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bda4:	463b      	mov	r3, r7
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff ff6a 	bl	800bc80 <prvSampleTimeNow>
 800bdac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b09      	cmp	r3, #9
 800bdb2:	f200 8097 	bhi.w	800bee4 <prvProcessReceivedCommands+0x1a0>
 800bdb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdbc <prvProcessReceivedCommands+0x78>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800bde5 	.word	0x0800bde5
 800bdc0:	0800bde5 	.word	0x0800bde5
 800bdc4:	0800bde5 	.word	0x0800bde5
 800bdc8:	0800be5b 	.word	0x0800be5b
 800bdcc:	0800be6f 	.word	0x0800be6f
 800bdd0:	0800bebb 	.word	0x0800bebb
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800bde5 	.word	0x0800bde5
 800bddc:	0800be5b 	.word	0x0800be5b
 800bde0:	0800be6f 	.word	0x0800be6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdea:	f043 0301 	orr.w	r3, r3, #1
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	18d1      	adds	r1, r2, r3
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be04:	f7ff ff5c 	bl	800bcc0 <prvInsertTimerInActiveList>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d06c      	beq.n	800bee8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be1c:	f003 0304 	and.w	r3, r3, #4
 800be20:	2b00      	cmp	r3, #0
 800be22:	d061      	beq.n	800bee8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	441a      	add	r2, r3
 800be2c:	2300      	movs	r3, #0
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	2300      	movs	r3, #0
 800be32:	2100      	movs	r1, #0
 800be34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be36:	f7ff fe01 	bl	800ba3c <xTimerGenericCommand>
 800be3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d152      	bne.n	800bee8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	61bb      	str	r3, [r7, #24]
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	e7fd      	b.n	800be56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be60:	f023 0301 	bic.w	r3, r3, #1
 800be64:	b2da      	uxtb	r2, r3
 800be66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be6c:	e03d      	b.n	800beea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be74:	f043 0301 	orr.w	r3, r3, #1
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10b      	bne.n	800bea6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	617b      	str	r3, [r7, #20]
}
 800bea0:	bf00      	nop
 800bea2:	bf00      	nop
 800bea4:	e7fd      	b.n	800bea2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea8:	699a      	ldr	r2, [r3, #24]
 800beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beac:	18d1      	adds	r1, r2, r3
 800beae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800beb4:	f7ff ff04 	bl	800bcc0 <prvInsertTimerInActiveList>
					break;
 800beb8:	e017      	b.n	800beea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800beba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bec0:	f003 0302 	and.w	r3, r3, #2
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d103      	bne.n	800bed0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800beca:	f000 fbe5 	bl	800c698 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bece:	e00c      	b.n	800beea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bed6:	f023 0301 	bic.w	r3, r3, #1
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bede:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bee2:	e002      	b.n	800beea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bee4:	bf00      	nop
 800bee6:	e000      	b.n	800beea <prvProcessReceivedCommands+0x1a6>
					break;
 800bee8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800beea:	4b08      	ldr	r3, [pc, #32]	@ (800bf0c <prvProcessReceivedCommands+0x1c8>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	1d39      	adds	r1, r7, #4
 800bef0:	2200      	movs	r2, #0
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fbfc 	bl	800a6f0 <xQueueReceive>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	f47f af26 	bne.w	800bd4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf00:	bf00      	nop
 800bf02:	bf00      	nop
 800bf04:	3730      	adds	r7, #48	@ 0x30
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200042c0 	.word	0x200042c0

0800bf10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf16:	e049      	b.n	800bfac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf18:	4b2e      	ldr	r3, [pc, #184]	@ (800bfd4 <prvSwitchTimerLists+0xc4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf22:	4b2c      	ldr	r3, [pc, #176]	@ (800bfd4 <prvSwitchTimerLists+0xc4>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fe f909 	bl	800a148 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf44:	f003 0304 	and.w	r3, r3, #4
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d02f      	beq.n	800bfac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	4413      	add	r3, r2
 800bf54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d90e      	bls.n	800bf7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf6a:	4b1a      	ldr	r3, [pc, #104]	@ (800bfd4 <prvSwitchTimerLists+0xc4>)
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	3304      	adds	r3, #4
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7fe f8ae 	bl	800a0d6 <vListInsert>
 800bf7a:	e017      	b.n	800bfac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	2300      	movs	r3, #0
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	2100      	movs	r1, #0
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff fd58 	bl	800ba3c <xTimerGenericCommand>
 800bf8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10b      	bne.n	800bfac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	603b      	str	r3, [r7, #0]
}
 800bfa6:	bf00      	nop
 800bfa8:	bf00      	nop
 800bfaa:	e7fd      	b.n	800bfa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfac:	4b09      	ldr	r3, [pc, #36]	@ (800bfd4 <prvSwitchTimerLists+0xc4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1b0      	bne.n	800bf18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfb6:	4b07      	ldr	r3, [pc, #28]	@ (800bfd4 <prvSwitchTimerLists+0xc4>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <prvSwitchTimerLists+0xc8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a04      	ldr	r2, [pc, #16]	@ (800bfd4 <prvSwitchTimerLists+0xc4>)
 800bfc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfc4:	4a04      	ldr	r2, [pc, #16]	@ (800bfd8 <prvSwitchTimerLists+0xc8>)
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	6013      	str	r3, [r2, #0]
}
 800bfca:	bf00      	nop
 800bfcc:	3718      	adds	r7, #24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200042b8 	.word	0x200042b8
 800bfd8:	200042bc 	.word	0x200042bc

0800bfdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfe2:	f000 f969 	bl	800c2b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfe6:	4b15      	ldr	r3, [pc, #84]	@ (800c03c <prvCheckForValidListAndQueue+0x60>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d120      	bne.n	800c030 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bfee:	4814      	ldr	r0, [pc, #80]	@ (800c040 <prvCheckForValidListAndQueue+0x64>)
 800bff0:	f7fe f820 	bl	800a034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bff4:	4813      	ldr	r0, [pc, #76]	@ (800c044 <prvCheckForValidListAndQueue+0x68>)
 800bff6:	f7fe f81d 	bl	800a034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bffa:	4b13      	ldr	r3, [pc, #76]	@ (800c048 <prvCheckForValidListAndQueue+0x6c>)
 800bffc:	4a10      	ldr	r2, [pc, #64]	@ (800c040 <prvCheckForValidListAndQueue+0x64>)
 800bffe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c000:	4b12      	ldr	r3, [pc, #72]	@ (800c04c <prvCheckForValidListAndQueue+0x70>)
 800c002:	4a10      	ldr	r2, [pc, #64]	@ (800c044 <prvCheckForValidListAndQueue+0x68>)
 800c004:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c006:	2300      	movs	r3, #0
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	4b11      	ldr	r3, [pc, #68]	@ (800c050 <prvCheckForValidListAndQueue+0x74>)
 800c00c:	4a11      	ldr	r2, [pc, #68]	@ (800c054 <prvCheckForValidListAndQueue+0x78>)
 800c00e:	2110      	movs	r1, #16
 800c010:	200a      	movs	r0, #10
 800c012:	f7fe f92d 	bl	800a270 <xQueueGenericCreateStatic>
 800c016:	4603      	mov	r3, r0
 800c018:	4a08      	ldr	r2, [pc, #32]	@ (800c03c <prvCheckForValidListAndQueue+0x60>)
 800c01a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c01c:	4b07      	ldr	r3, [pc, #28]	@ (800c03c <prvCheckForValidListAndQueue+0x60>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c024:	4b05      	ldr	r3, [pc, #20]	@ (800c03c <prvCheckForValidListAndQueue+0x60>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	490b      	ldr	r1, [pc, #44]	@ (800c058 <prvCheckForValidListAndQueue+0x7c>)
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe fd52 	bl	800aad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c030:	f000 f974 	bl	800c31c <vPortExitCritical>
}
 800c034:	bf00      	nop
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	200042c0 	.word	0x200042c0
 800c040:	20004290 	.word	0x20004290
 800c044:	200042a4 	.word	0x200042a4
 800c048:	200042b8 	.word	0x200042b8
 800c04c:	200042bc 	.word	0x200042bc
 800c050:	2000436c 	.word	0x2000436c
 800c054:	200042cc 	.word	0x200042cc
 800c058:	0800e418 	.word	0x0800e418

0800c05c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3b04      	subs	r3, #4
 800c06c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3b04      	subs	r3, #4
 800c07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f023 0201 	bic.w	r2, r3, #1
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3b04      	subs	r3, #4
 800c08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c08c:	4a0c      	ldr	r2, [pc, #48]	@ (800c0c0 <pxPortInitialiseStack+0x64>)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3b14      	subs	r3, #20
 800c096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3b04      	subs	r3, #4
 800c0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f06f 0202 	mvn.w	r2, #2
 800c0aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	3b20      	subs	r3, #32
 800c0b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	0800c0c5 	.word	0x0800c0c5

0800c0c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0ce:	4b13      	ldr	r3, [pc, #76]	@ (800c11c <prvTaskExitError+0x58>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d6:	d00b      	beq.n	800c0f0 <prvTaskExitError+0x2c>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	60fb      	str	r3, [r7, #12]
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	e7fd      	b.n	800c0ec <prvTaskExitError+0x28>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60bb      	str	r3, [r7, #8]
}
 800c102:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c104:	bf00      	nop
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0fc      	beq.n	800c106 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	3714      	adds	r7, #20
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	20000a5c 	.word	0x20000a5c

0800c120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c120:	4b07      	ldr	r3, [pc, #28]	@ (800c140 <pxCurrentTCBConst2>)
 800c122:	6819      	ldr	r1, [r3, #0]
 800c124:	6808      	ldr	r0, [r1, #0]
 800c126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12a:	f380 8809 	msr	PSP, r0
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f04f 0000 	mov.w	r0, #0
 800c136:	f380 8811 	msr	BASEPRI, r0
 800c13a:	4770      	bx	lr
 800c13c:	f3af 8000 	nop.w

0800c140 <pxCurrentTCBConst2>:
 800c140:	20003d90 	.word	0x20003d90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop

0800c148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c148:	4808      	ldr	r0, [pc, #32]	@ (800c16c <prvPortStartFirstTask+0x24>)
 800c14a:	6800      	ldr	r0, [r0, #0]
 800c14c:	6800      	ldr	r0, [r0, #0]
 800c14e:	f380 8808 	msr	MSP, r0
 800c152:	f04f 0000 	mov.w	r0, #0
 800c156:	f380 8814 	msr	CONTROL, r0
 800c15a:	b662      	cpsie	i
 800c15c:	b661      	cpsie	f
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	df00      	svc	0
 800c168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c16a:	bf00      	nop
 800c16c:	e000ed08 	.word	0xe000ed08

0800c170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c176:	4b47      	ldr	r3, [pc, #284]	@ (800c294 <xPortStartScheduler+0x124>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a47      	ldr	r2, [pc, #284]	@ (800c298 <xPortStartScheduler+0x128>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d10b      	bne.n	800c198 <xPortStartScheduler+0x28>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	613b      	str	r3, [r7, #16]
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	e7fd      	b.n	800c194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c198:	4b3e      	ldr	r3, [pc, #248]	@ (800c294 <xPortStartScheduler+0x124>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a3f      	ldr	r2, [pc, #252]	@ (800c29c <xPortStartScheduler+0x12c>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d10b      	bne.n	800c1ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	60fb      	str	r3, [r7, #12]
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop
 800c1b8:	e7fd      	b.n	800c1b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1ba:	4b39      	ldr	r3, [pc, #228]	@ (800c2a0 <xPortStartScheduler+0x130>)
 800c1bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	22ff      	movs	r2, #255	@ 0xff
 800c1ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1d4:	78fb      	ldrb	r3, [r7, #3]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	4b31      	ldr	r3, [pc, #196]	@ (800c2a4 <xPortStartScheduler+0x134>)
 800c1e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1e2:	4b31      	ldr	r3, [pc, #196]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c1e4:	2207      	movs	r2, #7
 800c1e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1e8:	e009      	b.n	800c1fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c1f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1f4:	78fb      	ldrb	r3, [r7, #3]
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1fe:	78fb      	ldrb	r3, [r7, #3]
 800c200:	b2db      	uxtb	r3, r3
 800c202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c206:	2b80      	cmp	r3, #128	@ 0x80
 800c208:	d0ef      	beq.n	800c1ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c20a:	4b27      	ldr	r3, [pc, #156]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f1c3 0307 	rsb	r3, r3, #7
 800c212:	2b04      	cmp	r3, #4
 800c214:	d00b      	beq.n	800c22e <xPortStartScheduler+0xbe>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	60bb      	str	r3, [r7, #8]
}
 800c228:	bf00      	nop
 800c22a:	bf00      	nop
 800c22c:	e7fd      	b.n	800c22a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c22e:	4b1e      	ldr	r3, [pc, #120]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	021b      	lsls	r3, r3, #8
 800c234:	4a1c      	ldr	r2, [pc, #112]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c238:	4b1b      	ldr	r3, [pc, #108]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c240:	4a19      	ldr	r2, [pc, #100]	@ (800c2a8 <xPortStartScheduler+0x138>)
 800c242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	b2da      	uxtb	r2, r3
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c24c:	4b17      	ldr	r3, [pc, #92]	@ (800c2ac <xPortStartScheduler+0x13c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a16      	ldr	r2, [pc, #88]	@ (800c2ac <xPortStartScheduler+0x13c>)
 800c252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c258:	4b14      	ldr	r3, [pc, #80]	@ (800c2ac <xPortStartScheduler+0x13c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a13      	ldr	r2, [pc, #76]	@ (800c2ac <xPortStartScheduler+0x13c>)
 800c25e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c264:	f000 f8da 	bl	800c41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c268:	4b11      	ldr	r3, [pc, #68]	@ (800c2b0 <xPortStartScheduler+0x140>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c26e:	f000 f8f9 	bl	800c464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c272:	4b10      	ldr	r3, [pc, #64]	@ (800c2b4 <xPortStartScheduler+0x144>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a0f      	ldr	r2, [pc, #60]	@ (800c2b4 <xPortStartScheduler+0x144>)
 800c278:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c27c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c27e:	f7ff ff63 	bl	800c148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c282:	f7ff f83f 	bl	800b304 <vTaskSwitchContext>
	prvTaskExitError();
 800c286:	f7ff ff1d 	bl	800c0c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	e000ed00 	.word	0xe000ed00
 800c298:	410fc271 	.word	0x410fc271
 800c29c:	410fc270 	.word	0x410fc270
 800c2a0:	e000e400 	.word	0xe000e400
 800c2a4:	200043bc 	.word	0x200043bc
 800c2a8:	200043c0 	.word	0x200043c0
 800c2ac:	e000ed20 	.word	0xe000ed20
 800c2b0:	20000a5c 	.word	0x20000a5c
 800c2b4:	e000ef34 	.word	0xe000ef34

0800c2b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	607b      	str	r3, [r7, #4]
}
 800c2d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2d2:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <vPortEnterCritical+0x5c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c314 <vPortEnterCritical+0x5c>)
 800c2da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <vPortEnterCritical+0x5c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d110      	bne.n	800c306 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c318 <vPortEnterCritical+0x60>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00b      	beq.n	800c306 <vPortEnterCritical+0x4e>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	603b      	str	r3, [r7, #0]
}
 800c300:	bf00      	nop
 800c302:	bf00      	nop
 800c304:	e7fd      	b.n	800c302 <vPortEnterCritical+0x4a>
	}
}
 800c306:	bf00      	nop
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20000a5c 	.word	0x20000a5c
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c322:	4b12      	ldr	r3, [pc, #72]	@ (800c36c <vPortExitCritical+0x50>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10b      	bne.n	800c342 <vPortExitCritical+0x26>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	607b      	str	r3, [r7, #4]
}
 800c33c:	bf00      	nop
 800c33e:	bf00      	nop
 800c340:	e7fd      	b.n	800c33e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c342:	4b0a      	ldr	r3, [pc, #40]	@ (800c36c <vPortExitCritical+0x50>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3b01      	subs	r3, #1
 800c348:	4a08      	ldr	r2, [pc, #32]	@ (800c36c <vPortExitCritical+0x50>)
 800c34a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c34c:	4b07      	ldr	r3, [pc, #28]	@ (800c36c <vPortExitCritical+0x50>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d105      	bne.n	800c360 <vPortExitCritical+0x44>
 800c354:	2300      	movs	r3, #0
 800c356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f383 8811 	msr	BASEPRI, r3
}
 800c35e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	20000a5c 	.word	0x20000a5c

0800c370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c370:	f3ef 8009 	mrs	r0, PSP
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	4b15      	ldr	r3, [pc, #84]	@ (800c3d0 <pxCurrentTCBConst>)
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	f01e 0f10 	tst.w	lr, #16
 800c380:	bf08      	it	eq
 800c382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38a:	6010      	str	r0, [r2, #0]
 800c38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c394:	f380 8811 	msr	BASEPRI, r0
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f7fe ffb0 	bl	800b304 <vTaskSwitchContext>
 800c3a4:	f04f 0000 	mov.w	r0, #0
 800c3a8:	f380 8811 	msr	BASEPRI, r0
 800c3ac:	bc09      	pop	{r0, r3}
 800c3ae:	6819      	ldr	r1, [r3, #0]
 800c3b0:	6808      	ldr	r0, [r1, #0]
 800c3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b6:	f01e 0f10 	tst.w	lr, #16
 800c3ba:	bf08      	it	eq
 800c3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3c0:	f380 8809 	msr	PSP, r0
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	f3af 8000 	nop.w

0800c3d0 <pxCurrentTCBConst>:
 800c3d0:	20003d90 	.word	0x20003d90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop

0800c3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	607b      	str	r3, [r7, #4]
}
 800c3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3f2:	f7fe fecd 	bl	800b190 <xTaskIncrementTick>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d003      	beq.n	800c404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3fc:	4b06      	ldr	r3, [pc, #24]	@ (800c418 <xPortSysTickHandler+0x40>)
 800c3fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	2300      	movs	r3, #0
 800c406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	f383 8811 	msr	BASEPRI, r3
}
 800c40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c41c:	b480      	push	{r7}
 800c41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c420:	4b0b      	ldr	r3, [pc, #44]	@ (800c450 <vPortSetupTimerInterrupt+0x34>)
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c426:	4b0b      	ldr	r3, [pc, #44]	@ (800c454 <vPortSetupTimerInterrupt+0x38>)
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c42c:	4b0a      	ldr	r3, [pc, #40]	@ (800c458 <vPortSetupTimerInterrupt+0x3c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a0a      	ldr	r2, [pc, #40]	@ (800c45c <vPortSetupTimerInterrupt+0x40>)
 800c432:	fba2 2303 	umull	r2, r3, r2, r3
 800c436:	099b      	lsrs	r3, r3, #6
 800c438:	4a09      	ldr	r2, [pc, #36]	@ (800c460 <vPortSetupTimerInterrupt+0x44>)
 800c43a:	3b01      	subs	r3, #1
 800c43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c43e:	4b04      	ldr	r3, [pc, #16]	@ (800c450 <vPortSetupTimerInterrupt+0x34>)
 800c440:	2207      	movs	r2, #7
 800c442:	601a      	str	r2, [r3, #0]
}
 800c444:	bf00      	nop
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	e000e010 	.word	0xe000e010
 800c454:	e000e018 	.word	0xe000e018
 800c458:	20000a0c 	.word	0x20000a0c
 800c45c:	10624dd3 	.word	0x10624dd3
 800c460:	e000e014 	.word	0xe000e014

0800c464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c474 <vPortEnableVFP+0x10>
 800c468:	6801      	ldr	r1, [r0, #0]
 800c46a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c46e:	6001      	str	r1, [r0, #0]
 800c470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c472:	bf00      	nop
 800c474:	e000ed88 	.word	0xe000ed88

0800c478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c47e:	f3ef 8305 	mrs	r3, IPSR
 800c482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b0f      	cmp	r3, #15
 800c488:	d915      	bls.n	800c4b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c48a:	4a18      	ldr	r2, [pc, #96]	@ (800c4ec <vPortValidateInterruptPriority+0x74>)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4413      	add	r3, r2
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c494:	4b16      	ldr	r3, [pc, #88]	@ (800c4f0 <vPortValidateInterruptPriority+0x78>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	7afa      	ldrb	r2, [r7, #11]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d20b      	bcs.n	800c4b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	607b      	str	r3, [r7, #4]
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	e7fd      	b.n	800c4b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f4 <vPortValidateInterruptPriority+0x7c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c4be:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f8 <vPortValidateInterruptPriority+0x80>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d90b      	bls.n	800c4de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	603b      	str	r3, [r7, #0]
}
 800c4d8:	bf00      	nop
 800c4da:	bf00      	nop
 800c4dc:	e7fd      	b.n	800c4da <vPortValidateInterruptPriority+0x62>
	}
 800c4de:	bf00      	nop
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	e000e3f0 	.word	0xe000e3f0
 800c4f0:	200043bc 	.word	0x200043bc
 800c4f4:	e000ed0c 	.word	0xe000ed0c
 800c4f8:	200043c0 	.word	0x200043c0

0800c4fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	@ 0x28
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c504:	2300      	movs	r3, #0
 800c506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c508:	f7fe fd86 	bl	800b018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c50c:	4b5c      	ldr	r3, [pc, #368]	@ (800c680 <pvPortMalloc+0x184>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c514:	f000 f924 	bl	800c760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c518:	4b5a      	ldr	r3, [pc, #360]	@ (800c684 <pvPortMalloc+0x188>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4013      	ands	r3, r2
 800c520:	2b00      	cmp	r3, #0
 800c522:	f040 8095 	bne.w	800c650 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d01e      	beq.n	800c56a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c52c:	2208      	movs	r2, #8
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4413      	add	r3, r2
 800c532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f003 0307 	and.w	r3, r3, #7
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d015      	beq.n	800c56a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f023 0307 	bic.w	r3, r3, #7
 800c544:	3308      	adds	r3, #8
 800c546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <pvPortMalloc+0x6e>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	617b      	str	r3, [r7, #20]
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop
 800c568:	e7fd      	b.n	800c566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d06f      	beq.n	800c650 <pvPortMalloc+0x154>
 800c570:	4b45      	ldr	r3, [pc, #276]	@ (800c688 <pvPortMalloc+0x18c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	429a      	cmp	r2, r3
 800c578:	d86a      	bhi.n	800c650 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c57a:	4b44      	ldr	r3, [pc, #272]	@ (800c68c <pvPortMalloc+0x190>)
 800c57c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c57e:	4b43      	ldr	r3, [pc, #268]	@ (800c68c <pvPortMalloc+0x190>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c584:	e004      	b.n	800c590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	d903      	bls.n	800c5a2 <pvPortMalloc+0xa6>
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1f1      	bne.n	800c586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5a2:	4b37      	ldr	r3, [pc, #220]	@ (800c680 <pvPortMalloc+0x184>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d051      	beq.n	800c650 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	4413      	add	r3, r2
 800c5b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	1ad2      	subs	r2, r2, r3
 800c5c6:	2308      	movs	r3, #8
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d920      	bls.n	800c610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	f003 0307 	and.w	r3, r3, #7
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00b      	beq.n	800c5f8 <pvPortMalloc+0xfc>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	613b      	str	r3, [r7, #16]
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	e7fd      	b.n	800c5f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c60a:	69b8      	ldr	r0, [r7, #24]
 800c60c:	f000 f90a 	bl	800c824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c610:	4b1d      	ldr	r3, [pc, #116]	@ (800c688 <pvPortMalloc+0x18c>)
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	4a1b      	ldr	r2, [pc, #108]	@ (800c688 <pvPortMalloc+0x18c>)
 800c61c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c61e:	4b1a      	ldr	r3, [pc, #104]	@ (800c688 <pvPortMalloc+0x18c>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	4b1b      	ldr	r3, [pc, #108]	@ (800c690 <pvPortMalloc+0x194>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	429a      	cmp	r2, r3
 800c628:	d203      	bcs.n	800c632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c62a:	4b17      	ldr	r3, [pc, #92]	@ (800c688 <pvPortMalloc+0x18c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a18      	ldr	r2, [pc, #96]	@ (800c690 <pvPortMalloc+0x194>)
 800c630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	4b13      	ldr	r3, [pc, #76]	@ (800c684 <pvPortMalloc+0x188>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c642:	2200      	movs	r2, #0
 800c644:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c646:	4b13      	ldr	r3, [pc, #76]	@ (800c694 <pvPortMalloc+0x198>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3301      	adds	r3, #1
 800c64c:	4a11      	ldr	r2, [pc, #68]	@ (800c694 <pvPortMalloc+0x198>)
 800c64e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c650:	f7fe fcf0 	bl	800b034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	f003 0307 	and.w	r3, r3, #7
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00b      	beq.n	800c676 <pvPortMalloc+0x17a>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60fb      	str	r3, [r7, #12]
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	e7fd      	b.n	800c672 <pvPortMalloc+0x176>
	return pvReturn;
 800c676:	69fb      	ldr	r3, [r7, #28]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3728      	adds	r7, #40	@ 0x28
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20004f84 	.word	0x20004f84
 800c684:	20004f98 	.word	0x20004f98
 800c688:	20004f88 	.word	0x20004f88
 800c68c:	20004f7c 	.word	0x20004f7c
 800c690:	20004f8c 	.word	0x20004f8c
 800c694:	20004f90 	.word	0x20004f90

0800c698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d04f      	beq.n	800c74a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6aa:	2308      	movs	r3, #8
 800c6ac:	425b      	negs	r3, r3
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	4b25      	ldr	r3, [pc, #148]	@ (800c754 <vPortFree+0xbc>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10b      	bne.n	800c6de <vPortFree+0x46>
	__asm volatile
 800c6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ca:	f383 8811 	msr	BASEPRI, r3
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	60fb      	str	r3, [r7, #12]
}
 800c6d8:	bf00      	nop
 800c6da:	bf00      	nop
 800c6dc:	e7fd      	b.n	800c6da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00b      	beq.n	800c6fe <vPortFree+0x66>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	60bb      	str	r3, [r7, #8]
}
 800c6f8:	bf00      	nop
 800c6fa:	bf00      	nop
 800c6fc:	e7fd      	b.n	800c6fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	685a      	ldr	r2, [r3, #4]
 800c702:	4b14      	ldr	r3, [pc, #80]	@ (800c754 <vPortFree+0xbc>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4013      	ands	r3, r2
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d01e      	beq.n	800c74a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d11a      	bne.n	800c74a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	4b0e      	ldr	r3, [pc, #56]	@ (800c754 <vPortFree+0xbc>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	43db      	mvns	r3, r3
 800c71e:	401a      	ands	r2, r3
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c724:	f7fe fc78 	bl	800b018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	4b0a      	ldr	r3, [pc, #40]	@ (800c758 <vPortFree+0xc0>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4413      	add	r3, r2
 800c732:	4a09      	ldr	r2, [pc, #36]	@ (800c758 <vPortFree+0xc0>)
 800c734:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c736:	6938      	ldr	r0, [r7, #16]
 800c738:	f000 f874 	bl	800c824 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c73c:	4b07      	ldr	r3, [pc, #28]	@ (800c75c <vPortFree+0xc4>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	4a06      	ldr	r2, [pc, #24]	@ (800c75c <vPortFree+0xc4>)
 800c744:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c746:	f7fe fc75 	bl	800b034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c74a:	bf00      	nop
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	20004f98 	.word	0x20004f98
 800c758:	20004f88 	.word	0x20004f88
 800c75c:	20004f94 	.word	0x20004f94

0800c760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c766:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c76a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c76c:	4b27      	ldr	r3, [pc, #156]	@ (800c80c <prvHeapInit+0xac>)
 800c76e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00c      	beq.n	800c794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3307      	adds	r3, #7
 800c77e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 0307 	bic.w	r3, r3, #7
 800c786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	4a1f      	ldr	r2, [pc, #124]	@ (800c80c <prvHeapInit+0xac>)
 800c790:	4413      	add	r3, r2
 800c792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c798:	4a1d      	ldr	r2, [pc, #116]	@ (800c810 <prvHeapInit+0xb0>)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c79e:	4b1c      	ldr	r3, [pc, #112]	@ (800c810 <prvHeapInit+0xb0>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7ac:	2208      	movs	r2, #8
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	1a9b      	subs	r3, r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	4a15      	ldr	r2, [pc, #84]	@ (800c814 <prvHeapInit+0xb4>)
 800c7c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7c2:	4b14      	ldr	r3, [pc, #80]	@ (800c814 <prvHeapInit+0xb4>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7ca:	4b12      	ldr	r3, [pc, #72]	@ (800c814 <prvHeapInit+0xb4>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	1ad2      	subs	r2, r2, r3
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c814 <prvHeapInit+0xb4>)
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c818 <prvHeapInit+0xb8>)
 800c7ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	4a09      	ldr	r2, [pc, #36]	@ (800c81c <prvHeapInit+0xbc>)
 800c7f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7f8:	4b09      	ldr	r3, [pc, #36]	@ (800c820 <prvHeapInit+0xc0>)
 800c7fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c7fe:	601a      	str	r2, [r3, #0]
}
 800c800:	bf00      	nop
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	200043c4 	.word	0x200043c4
 800c810:	20004f7c 	.word	0x20004f7c
 800c814:	20004f84 	.word	0x20004f84
 800c818:	20004f8c 	.word	0x20004f8c
 800c81c:	20004f88 	.word	0x20004f88
 800c820:	20004f98 	.word	0x20004f98

0800c824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c82c:	4b28      	ldr	r3, [pc, #160]	@ (800c8d0 <prvInsertBlockIntoFreeList+0xac>)
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e002      	b.n	800c838 <prvInsertBlockIntoFreeList+0x14>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d8f7      	bhi.n	800c832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	4413      	add	r3, r2
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	d108      	bne.n	800c866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	441a      	add	r2, r3
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d118      	bne.n	800c8ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	4b15      	ldr	r3, [pc, #84]	@ (800c8d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d00d      	beq.n	800c8a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685a      	ldr	r2, [r3, #4]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	441a      	add	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	e008      	b.n	800c8b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c8d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e003      	b.n	800c8b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d002      	beq.n	800c8c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8c2:	bf00      	nop
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	20004f7c 	.word	0x20004f7c
 800c8d4:	20004f84 	.word	0x20004f84

0800c8d8 <arm_fir_init_f32>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	9c04      	ldr	r4, [sp, #16]
 800c8dc:	6082      	str	r2, [r0, #8]
 800c8de:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800c8e2:	3c01      	subs	r4, #1
 800c8e4:	440c      	add	r4, r1
 800c8e6:	8001      	strh	r1, [r0, #0]
 800c8e8:	4605      	mov	r5, r0
 800c8ea:	00a2      	lsls	r2, r4, #2
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	f000 fcb8 	bl	800d264 <memset>
 800c8f4:	6068      	str	r0, [r5, #4]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}

0800c8f8 <arm_fir_f32>:
 800c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	ed2d 8b10 	vpush	{d8-d15}
 800c900:	b08b      	sub	sp, #44	@ 0x2c
 800c902:	f8b0 8000 	ldrh.w	r8, [r0]
 800c906:	9003      	str	r0, [sp, #12]
 800c908:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800c90c:	461e      	mov	r6, r3
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 800c914:	3b01      	subs	r3, #1
 800c916:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800c91a:	08f3      	lsrs	r3, r6, #3
 800c91c:	9002      	str	r0, [sp, #8]
 800c91e:	9500      	str	r5, [sp, #0]
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	f000 81f1 	beq.w	800cd08 <arm_fir_f32+0x410>
 800c926:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800c92a:	f100 0620 	add.w	r6, r0, #32
 800c92e:	9405      	str	r4, [sp, #20]
 800c930:	0164      	lsls	r4, r4, #5
 800c932:	4420      	add	r0, r4
 800c934:	f008 0a07 	and.w	sl, r8, #7
 800c938:	9607      	str	r6, [sp, #28]
 800c93a:	9006      	str	r0, [sp, #24]
 800c93c:	469c      	mov	ip, r3
 800c93e:	4650      	mov	r0, sl
 800c940:	4623      	mov	r3, r4
 800c942:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c946:	f8cd 8020 	str.w	r8, [sp, #32]
 800c94a:	1937      	adds	r7, r6, r4
 800c94c:	f109 0b1c 	add.w	fp, r9, #28
 800c950:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c954:	9209      	str	r2, [sp, #36]	@ 0x24
 800c956:	f8cd 9014 	str.w	r9, [sp, #20]
 800c95a:	f101 0620 	add.w	r6, r1, #32
 800c95e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c962:	9106      	str	r1, [sp, #24]
 800c964:	3520      	adds	r5, #32
 800c966:	f102 0420 	add.w	r4, r2, #32
 800c96a:	4698      	mov	r8, r3
 800c96c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800c970:	f845 3c20 	str.w	r3, [r5, #-32]
 800c974:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800c978:	f845 3c1c 	str.w	r3, [r5, #-28]
 800c97c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800c980:	f845 3c18 	str.w	r3, [r5, #-24]
 800c984:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800c988:	f845 3c14 	str.w	r3, [r5, #-20]
 800c98c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800c990:	f845 3c10 	str.w	r3, [r5, #-16]
 800c994:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800c998:	f845 3c0c 	str.w	r3, [r5, #-12]
 800c99c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c9a0:	f845 3c08 	str.w	r3, [r5, #-8]
 800c9a4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c9a8:	f845 3c04 	str.w	r3, [r5, #-4]
 800c9ac:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 800c9b0:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800c9b4:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800c9b8:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800c9bc:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800c9c0:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800c9c4:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800c9c8:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800cda0 <arm_fir_f32+0x4a8>
 800c9cc:	465a      	mov	r2, fp
 800c9ce:	f1be 0f00 	cmp.w	lr, #0
 800c9d2:	f000 81fe 	beq.w	800cdd2 <arm_fir_f32+0x4da>
 800c9d6:	f10b 0120 	add.w	r1, fp, #32
 800c9da:	eef0 ba66 	vmov.f32	s23, s13
 800c9de:	eeb0 6a66 	vmov.f32	s12, s13
 800c9e2:	eeb0 9a66 	vmov.f32	s18, s13
 800c9e6:	eef0 9a66 	vmov.f32	s19, s13
 800c9ea:	eeb0 aa66 	vmov.f32	s20, s13
 800c9ee:	eef0 aa66 	vmov.f32	s21, s13
 800c9f2:	eeb0 ba66 	vmov.f32	s22, s13
 800c9f6:	460a      	mov	r2, r1
 800c9f8:	4653      	mov	r3, sl
 800c9fa:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800c9fe:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800ca02:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800ca06:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800ca0a:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800ca0e:	ed53 ca04 	vldr	s25, [r3, #-16]
 800ca12:	ed53 2a03 	vldr	s5, [r3, #-12]
 800ca16:	ed13 4a02 	vldr	s8, [r3, #-8]
 800ca1a:	ed13 5a01 	vldr	s10, [r3, #-4]
 800ca1e:	ee67 fa02 	vmul.f32	s31, s14, s4
 800ca22:	ee27 da21 	vmul.f32	s26, s14, s3
 800ca26:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800ca2a:	ee27 ca01 	vmul.f32	s24, s14, s2
 800ca2e:	ee27 3a20 	vmul.f32	s6, s14, s1
 800ca32:	ee67 3a00 	vmul.f32	s7, s14, s0
 800ca36:	ee67 5a08 	vmul.f32	s11, s14, s16
 800ca3a:	ee27 fa28 	vmul.f32	s30, s14, s17
 800ca3e:	ee67 7a24 	vmul.f32	s15, s14, s9
 800ca42:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800ca46:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ca4a:	ee6e faa1 	vmul.f32	s31, s29, s3
 800ca4e:	ee2e da81 	vmul.f32	s26, s29, s2
 800ca52:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800ca56:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ca5a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ca5e:	ee2e caa0 	vmul.f32	s24, s29, s1
 800ca62:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800ca66:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ca6a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ca6e:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800ca72:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800ca76:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800ca7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7e:	ee24 faae 	vmul.f32	s30, s9, s29
 800ca82:	ee6e ea82 	vmul.f32	s29, s29, s4
 800ca86:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800ca8a:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800ca8e:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800ca92:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ca96:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ca9a:	ee2e da20 	vmul.f32	s26, s28, s1
 800ca9e:	ee2e ca00 	vmul.f32	s24, s28, s0
 800caa2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800caa6:	ee33 9a89 	vadd.f32	s18, s7, s18
 800caaa:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800caae:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800cab2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cab6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800caba:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800cabe:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800cac2:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800cac6:	ee2e ea21 	vmul.f32	s28, s28, s3
 800caca:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800cace:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800cad2:	ed52 0a04 	vldr	s1, [r2, #-16]
 800cad6:	ee2d da80 	vmul.f32	s26, s27, s0
 800cada:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800cade:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cae2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cae6:	ee2d ca88 	vmul.f32	s24, s27, s16
 800caea:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800caee:	ee33 9a89 	vadd.f32	s18, s7, s18
 800caf2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800caf6:	ee64 3aad 	vmul.f32	s7, s9, s27
 800cafa:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800cafe:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800cb02:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800cb06:	ee21 faad 	vmul.f32	s30, s3, s27
 800cb0a:	ee6d da81 	vmul.f32	s27, s27, s2
 800cb0e:	ee6c fa80 	vmul.f32	s31, s25, s0
 800cb12:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800cb16:	ed12 0a03 	vldr	s0, [r2, #-12]
 800cb1a:	ee3d da2a 	vadd.f32	s26, s26, s21
 800cb1e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cb22:	ee6c aa88 	vmul.f32	s21, s25, s16
 800cb26:	ee2c caa8 	vmul.f32	s24, s25, s17
 800cb2a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cb2e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cb32:	ee24 3aac 	vmul.f32	s6, s9, s25
 800cb36:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800cb3a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cb3e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800cb42:	ee61 5aac 	vmul.f32	s11, s3, s25
 800cb46:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800cb4a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800cb4e:	ee6c caa0 	vmul.f32	s25, s25, s1
 800cb52:	ee62 ea88 	vmul.f32	s29, s5, s16
 800cb56:	ee3a da8d 	vadd.f32	s26, s21, s26
 800cb5a:	ed12 8a02 	vldr	s16, [r2, #-8]
 800cb5e:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800cb62:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800cb66:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cb6a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cb6e:	ee24 caa2 	vmul.f32	s24, s9, s5
 800cb72:	ee22 3a22 	vmul.f32	s6, s4, s5
 800cb76:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cb7a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cb7e:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800cb82:	ee61 5a22 	vmul.f32	s11, s2, s5
 800cb86:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800cb8a:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800cb8e:	ee20 faa2 	vmul.f32	s30, s1, s5
 800cb92:	ee62 2a80 	vmul.f32	s5, s5, s0
 800cb96:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800cb9a:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800cb9e:	ee24 ba28 	vmul.f32	s22, s8, s17
 800cba2:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800cba6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cbaa:	ee24 da84 	vmul.f32	s26, s9, s8
 800cbae:	ee22 ca04 	vmul.f32	s24, s4, s8
 800cbb2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cbb6:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cbba:	ee21 3a84 	vmul.f32	s6, s3, s8
 800cbbe:	ee61 3a04 	vmul.f32	s7, s2, s8
 800cbc2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cbc6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800cbca:	ee60 5a84 	vmul.f32	s11, s1, s8
 800cbce:	ee20 7a04 	vmul.f32	s14, s0, s8
 800cbd2:	ee64 6a08 	vmul.f32	s13, s8, s16
 800cbd6:	ed52 8a01 	vldr	s17, [r2, #-4]
 800cbda:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cbde:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cbe2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cbe6:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800cbea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cbee:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800cbf2:	ee64 4a85 	vmul.f32	s9, s9, s10
 800cbf6:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800cbfa:	ee22 4a05 	vmul.f32	s8, s4, s10
 800cbfe:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800cc02:	ee61 2a85 	vmul.f32	s5, s3, s10
 800cc06:	ee21 3a05 	vmul.f32	s6, s2, s10
 800cc0a:	ee60 3a85 	vmul.f32	s7, s1, s10
 800cc0e:	ee60 5a05 	vmul.f32	s11, s0, s10
 800cc12:	ee68 ba05 	vmul.f32	s23, s16, s10
 800cc16:	ee65 7a28 	vmul.f32	s15, s10, s17
 800cc1a:	3320      	adds	r3, #32
 800cc1c:	429f      	cmp	r7, r3
 800cc1e:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800cc22:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800cc26:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800cc2a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800cc2e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800cc32:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cc36:	ee7b ba87 	vadd.f32	s23, s23, s14
 800cc3a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800cc3e:	f102 0220 	add.w	r2, r2, #32
 800cc42:	f47f aeda 	bne.w	800c9fa <arm_fir_f32+0x102>
 800cc46:	eb0b 0208 	add.w	r2, fp, r8
 800cc4a:	46cb      	mov	fp, r9
 800cc4c:	b3a0      	cbz	r0, 800ccb8 <arm_fir_f32+0x3c0>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	ecfb 7a01 	vldmia	fp!, {s15}
 800cc54:	ecf2 5a01 	vldmia	r2!, {s11}
 800cc58:	ee27 2a82 	vmul.f32	s4, s15, s4
 800cc5c:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800cc60:	ee27 3a81 	vmul.f32	s6, s15, s2
 800cc64:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800cc68:	ee27 4a80 	vmul.f32	s8, s15, s0
 800cc6c:	ee67 4a88 	vmul.f32	s9, s15, s16
 800cc70:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800cc74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	ee3b ba02 	vadd.f32	s22, s22, s4
 800cc7e:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800cc82:	eeb0 2a61 	vmov.f32	s4, s3
 800cc86:	ee3a aa03 	vadd.f32	s20, s20, s6
 800cc8a:	eef0 1a41 	vmov.f32	s3, s2
 800cc8e:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800cc92:	eeb0 1a60 	vmov.f32	s2, s1
 800cc96:	ee39 9a04 	vadd.f32	s18, s18, s8
 800cc9a:	eef0 0a40 	vmov.f32	s1, s0
 800cc9e:	ee36 6a24 	vadd.f32	s12, s12, s9
 800cca2:	eeb0 0a48 	vmov.f32	s0, s16
 800cca6:	ee7b ba85 	vadd.f32	s23, s23, s10
 800ccaa:	eeb0 8a68 	vmov.f32	s16, s17
 800ccae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ccb2:	eef0 8a65 	vmov.f32	s17, s11
 800ccb6:	d1cb      	bne.n	800cc50 <arm_fir_f32+0x358>
 800ccb8:	f1bc 0c01 	subs.w	ip, ip, #1
 800ccbc:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800ccc0:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800ccc4:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800ccc8:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 800cccc:	ed04 9a04 	vstr	s18, [r4, #-16]
 800ccd0:	ed04 6a03 	vstr	s12, [r4, #-12]
 800ccd4:	ed44 ba02 	vstr	s23, [r4, #-8]
 800ccd8:	ed44 6a01 	vstr	s13, [r4, #-4]
 800ccdc:	f106 0620 	add.w	r6, r6, #32
 800cce0:	f105 0520 	add.w	r5, r5, #32
 800cce4:	f104 0420 	add.w	r4, r4, #32
 800cce8:	468b      	mov	fp, r1
 800ccea:	f47f ae3f 	bne.w	800c96c <arm_fir_f32+0x74>
 800ccee:	9b01      	ldr	r3, [sp, #4]
 800ccf0:	9800      	ldr	r0, [sp, #0]
 800ccf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccf8:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800ccfc:	015b      	lsls	r3, r3, #5
 800ccfe:	4418      	add	r0, r3
 800cd00:	4419      	add	r1, r3
 800cd02:	441a      	add	r2, r3
 800cd04:	4499      	add	r9, r3
 800cd06:	9000      	str	r0, [sp, #0]
 800cd08:	9b04      	ldr	r3, [sp, #16]
 800cd0a:	f013 0707 	ands.w	r7, r3, #7
 800cd0e:	d020      	beq.n	800cd52 <arm_fir_f32+0x45a>
 800cd10:	00bf      	lsls	r7, r7, #2
 800cd12:	9e00      	ldr	r6, [sp, #0]
 800cd14:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cd18:	eb01 0c07 	add.w	ip, r1, r7
 800cd1c:	464d      	mov	r5, r9
 800cd1e:	f851 3b04 	ldr.w	r3, [r1], #4
 800cd22:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800cda0 <arm_fir_f32+0x4a8>
 800cd26:	f846 3b04 	str.w	r3, [r6], #4
 800cd2a:	4674      	mov	r4, lr
 800cd2c:	4643      	mov	r3, r8
 800cd2e:	4628      	mov	r0, r5
 800cd30:	ecf0 7a01 	vldmia	r0!, {s15}
 800cd34:	ecf4 6a01 	vldmia	r4!, {s13}
 800cd38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd42:	d1f5      	bne.n	800cd30 <arm_fir_f32+0x438>
 800cd44:	4561      	cmp	r1, ip
 800cd46:	eca2 7a01 	vstmia	r2!, {s14}
 800cd4a:	f105 0504 	add.w	r5, r5, #4
 800cd4e:	d1e6      	bne.n	800cd1e <arm_fir_f32+0x426>
 800cd50:	44b9      	add	r9, r7
 800cd52:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800cd5c:	685d      	ldr	r5, [r3, #4]
 800cd5e:	d021      	beq.n	800cda4 <arm_fir_f32+0x4ac>
 800cd60:	f109 0210 	add.w	r2, r9, #16
 800cd64:	f105 0310 	add.w	r3, r5, #16
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800cd6e:	f843 0c10 	str.w	r0, [r3, #-16]
 800cd72:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800cd76:	f843 0c0c 	str.w	r0, [r3, #-12]
 800cd7a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800cd7e:	f843 0c08 	str.w	r0, [r3, #-8]
 800cd82:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cd86:	f843 0c04 	str.w	r0, [r3, #-4]
 800cd8a:	3901      	subs	r1, #1
 800cd8c:	f102 0210 	add.w	r2, r2, #16
 800cd90:	f103 0310 	add.w	r3, r3, #16
 800cd94:	d1e9      	bne.n	800cd6a <arm_fir_f32+0x472>
 800cd96:	0124      	lsls	r4, r4, #4
 800cd98:	44a1      	add	r9, r4
 800cd9a:	4425      	add	r5, r4
 800cd9c:	e002      	b.n	800cda4 <arm_fir_f32+0x4ac>
 800cd9e:	bf00      	nop
 800cda0:	00000000 	.word	0x00000000
 800cda4:	f018 0803 	ands.w	r8, r8, #3
 800cda8:	d00e      	beq.n	800cdc8 <arm_fir_f32+0x4d0>
 800cdaa:	f8d9 3000 	ldr.w	r3, [r9]
 800cdae:	602b      	str	r3, [r5, #0]
 800cdb0:	f1b8 0801 	subs.w	r8, r8, #1
 800cdb4:	d008      	beq.n	800cdc8 <arm_fir_f32+0x4d0>
 800cdb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cdba:	606b      	str	r3, [r5, #4]
 800cdbc:	f1b8 0f01 	cmp.w	r8, #1
 800cdc0:	bf1c      	itt	ne
 800cdc2:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800cdc6:	60ab      	strne	r3, [r5, #8]
 800cdc8:	b00b      	add	sp, #44	@ 0x2c
 800cdca:	ecbd 8b10 	vpop	{d8-d15}
 800cdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd2:	eef0 ba66 	vmov.f32	s23, s13
 800cdd6:	eeb0 6a66 	vmov.f32	s12, s13
 800cdda:	eeb0 9a66 	vmov.f32	s18, s13
 800cdde:	eef0 9a66 	vmov.f32	s19, s13
 800cde2:	eeb0 aa66 	vmov.f32	s20, s13
 800cde6:	eef0 aa66 	vmov.f32	s21, s13
 800cdea:	eeb0 ba66 	vmov.f32	s22, s13
 800cdee:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cdf2:	f102 0120 	add.w	r1, r2, #32
 800cdf6:	e729      	b.n	800cc4c <arm_fir_f32+0x354>

0800cdf8 <rand>:
 800cdf8:	4b16      	ldr	r3, [pc, #88]	@ (800ce54 <rand+0x5c>)
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	681c      	ldr	r4, [r3, #0]
 800cdfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce00:	b9b3      	cbnz	r3, 800ce30 <rand+0x38>
 800ce02:	2018      	movs	r0, #24
 800ce04:	f000 fb20 	bl	800d448 <malloc>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ce0c:	b920      	cbnz	r0, 800ce18 <rand+0x20>
 800ce0e:	4b12      	ldr	r3, [pc, #72]	@ (800ce58 <rand+0x60>)
 800ce10:	4812      	ldr	r0, [pc, #72]	@ (800ce5c <rand+0x64>)
 800ce12:	2152      	movs	r1, #82	@ 0x52
 800ce14:	f000 fab0 	bl	800d378 <__assert_func>
 800ce18:	4911      	ldr	r1, [pc, #68]	@ (800ce60 <rand+0x68>)
 800ce1a:	4b12      	ldr	r3, [pc, #72]	@ (800ce64 <rand+0x6c>)
 800ce1c:	e9c0 1300 	strd	r1, r3, [r0]
 800ce20:	4b11      	ldr	r3, [pc, #68]	@ (800ce68 <rand+0x70>)
 800ce22:	6083      	str	r3, [r0, #8]
 800ce24:	230b      	movs	r3, #11
 800ce26:	8183      	strh	r3, [r0, #12]
 800ce28:	2100      	movs	r1, #0
 800ce2a:	2001      	movs	r0, #1
 800ce2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ce30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ce32:	480e      	ldr	r0, [pc, #56]	@ (800ce6c <rand+0x74>)
 800ce34:	690b      	ldr	r3, [r1, #16]
 800ce36:	694c      	ldr	r4, [r1, #20]
 800ce38:	4a0d      	ldr	r2, [pc, #52]	@ (800ce70 <rand+0x78>)
 800ce3a:	4358      	muls	r0, r3
 800ce3c:	fb02 0004 	mla	r0, r2, r4, r0
 800ce40:	fba3 3202 	umull	r3, r2, r3, r2
 800ce44:	3301      	adds	r3, #1
 800ce46:	eb40 0002 	adc.w	r0, r0, r2
 800ce4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ce4e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ce52:	bd10      	pop	{r4, pc}
 800ce54:	20000a6c 	.word	0x20000a6c
 800ce58:	0800e55c 	.word	0x0800e55c
 800ce5c:	0800e573 	.word	0x0800e573
 800ce60:	abcd330e 	.word	0xabcd330e
 800ce64:	e66d1234 	.word	0xe66d1234
 800ce68:	0005deec 	.word	0x0005deec
 800ce6c:	5851f42d 	.word	0x5851f42d
 800ce70:	4c957f2d 	.word	0x4c957f2d

0800ce74 <std>:
 800ce74:	2300      	movs	r3, #0
 800ce76:	b510      	push	{r4, lr}
 800ce78:	4604      	mov	r4, r0
 800ce7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce82:	6083      	str	r3, [r0, #8]
 800ce84:	8181      	strh	r1, [r0, #12]
 800ce86:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce88:	81c2      	strh	r2, [r0, #14]
 800ce8a:	6183      	str	r3, [r0, #24]
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	2208      	movs	r2, #8
 800ce90:	305c      	adds	r0, #92	@ 0x5c
 800ce92:	f000 f9e7 	bl	800d264 <memset>
 800ce96:	4b0d      	ldr	r3, [pc, #52]	@ (800cecc <std+0x58>)
 800ce98:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ced0 <std+0x5c>)
 800ce9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ced4 <std+0x60>)
 800cea0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cea2:	4b0d      	ldr	r3, [pc, #52]	@ (800ced8 <std+0x64>)
 800cea4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cea6:	4b0d      	ldr	r3, [pc, #52]	@ (800cedc <std+0x68>)
 800cea8:	6224      	str	r4, [r4, #32]
 800ceaa:	429c      	cmp	r4, r3
 800ceac:	d006      	beq.n	800cebc <std+0x48>
 800ceae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ceb2:	4294      	cmp	r4, r2
 800ceb4:	d002      	beq.n	800cebc <std+0x48>
 800ceb6:	33d0      	adds	r3, #208	@ 0xd0
 800ceb8:	429c      	cmp	r4, r3
 800ceba:	d105      	bne.n	800cec8 <std+0x54>
 800cebc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cec4:	f000 ba46 	b.w	800d354 <__retarget_lock_init_recursive>
 800cec8:	bd10      	pop	{r4, pc}
 800ceca:	bf00      	nop
 800cecc:	0800d0b5 	.word	0x0800d0b5
 800ced0:	0800d0d7 	.word	0x0800d0d7
 800ced4:	0800d10f 	.word	0x0800d10f
 800ced8:	0800d133 	.word	0x0800d133
 800cedc:	20004f9c 	.word	0x20004f9c

0800cee0 <stdio_exit_handler>:
 800cee0:	4a02      	ldr	r2, [pc, #8]	@ (800ceec <stdio_exit_handler+0xc>)
 800cee2:	4903      	ldr	r1, [pc, #12]	@ (800cef0 <stdio_exit_handler+0x10>)
 800cee4:	4803      	ldr	r0, [pc, #12]	@ (800cef4 <stdio_exit_handler+0x14>)
 800cee6:	f000 b869 	b.w	800cfbc <_fwalk_sglue>
 800ceea:	bf00      	nop
 800ceec:	20000a60 	.word	0x20000a60
 800cef0:	0800d6bd 	.word	0x0800d6bd
 800cef4:	20000a70 	.word	0x20000a70

0800cef8 <cleanup_stdio>:
 800cef8:	6841      	ldr	r1, [r0, #4]
 800cefa:	4b0c      	ldr	r3, [pc, #48]	@ (800cf2c <cleanup_stdio+0x34>)
 800cefc:	4299      	cmp	r1, r3
 800cefe:	b510      	push	{r4, lr}
 800cf00:	4604      	mov	r4, r0
 800cf02:	d001      	beq.n	800cf08 <cleanup_stdio+0x10>
 800cf04:	f000 fbda 	bl	800d6bc <_fflush_r>
 800cf08:	68a1      	ldr	r1, [r4, #8]
 800cf0a:	4b09      	ldr	r3, [pc, #36]	@ (800cf30 <cleanup_stdio+0x38>)
 800cf0c:	4299      	cmp	r1, r3
 800cf0e:	d002      	beq.n	800cf16 <cleanup_stdio+0x1e>
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 fbd3 	bl	800d6bc <_fflush_r>
 800cf16:	68e1      	ldr	r1, [r4, #12]
 800cf18:	4b06      	ldr	r3, [pc, #24]	@ (800cf34 <cleanup_stdio+0x3c>)
 800cf1a:	4299      	cmp	r1, r3
 800cf1c:	d004      	beq.n	800cf28 <cleanup_stdio+0x30>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf24:	f000 bbca 	b.w	800d6bc <_fflush_r>
 800cf28:	bd10      	pop	{r4, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20004f9c 	.word	0x20004f9c
 800cf30:	20005004 	.word	0x20005004
 800cf34:	2000506c 	.word	0x2000506c

0800cf38 <global_stdio_init.part.0>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf68 <global_stdio_init.part.0+0x30>)
 800cf3c:	4c0b      	ldr	r4, [pc, #44]	@ (800cf6c <global_stdio_init.part.0+0x34>)
 800cf3e:	4a0c      	ldr	r2, [pc, #48]	@ (800cf70 <global_stdio_init.part.0+0x38>)
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	4620      	mov	r0, r4
 800cf44:	2200      	movs	r2, #0
 800cf46:	2104      	movs	r1, #4
 800cf48:	f7ff ff94 	bl	800ce74 <std>
 800cf4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf50:	2201      	movs	r2, #1
 800cf52:	2109      	movs	r1, #9
 800cf54:	f7ff ff8e 	bl	800ce74 <std>
 800cf58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf62:	2112      	movs	r1, #18
 800cf64:	f7ff bf86 	b.w	800ce74 <std>
 800cf68:	200050d4 	.word	0x200050d4
 800cf6c:	20004f9c 	.word	0x20004f9c
 800cf70:	0800cee1 	.word	0x0800cee1

0800cf74 <__sfp_lock_acquire>:
 800cf74:	4801      	ldr	r0, [pc, #4]	@ (800cf7c <__sfp_lock_acquire+0x8>)
 800cf76:	f000 b9ee 	b.w	800d356 <__retarget_lock_acquire_recursive>
 800cf7a:	bf00      	nop
 800cf7c:	200050dd 	.word	0x200050dd

0800cf80 <__sfp_lock_release>:
 800cf80:	4801      	ldr	r0, [pc, #4]	@ (800cf88 <__sfp_lock_release+0x8>)
 800cf82:	f000 b9e9 	b.w	800d358 <__retarget_lock_release_recursive>
 800cf86:	bf00      	nop
 800cf88:	200050dd 	.word	0x200050dd

0800cf8c <__sinit>:
 800cf8c:	b510      	push	{r4, lr}
 800cf8e:	4604      	mov	r4, r0
 800cf90:	f7ff fff0 	bl	800cf74 <__sfp_lock_acquire>
 800cf94:	6a23      	ldr	r3, [r4, #32]
 800cf96:	b11b      	cbz	r3, 800cfa0 <__sinit+0x14>
 800cf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf9c:	f7ff bff0 	b.w	800cf80 <__sfp_lock_release>
 800cfa0:	4b04      	ldr	r3, [pc, #16]	@ (800cfb4 <__sinit+0x28>)
 800cfa2:	6223      	str	r3, [r4, #32]
 800cfa4:	4b04      	ldr	r3, [pc, #16]	@ (800cfb8 <__sinit+0x2c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f5      	bne.n	800cf98 <__sinit+0xc>
 800cfac:	f7ff ffc4 	bl	800cf38 <global_stdio_init.part.0>
 800cfb0:	e7f2      	b.n	800cf98 <__sinit+0xc>
 800cfb2:	bf00      	nop
 800cfb4:	0800cef9 	.word	0x0800cef9
 800cfb8:	200050d4 	.word	0x200050d4

0800cfbc <_fwalk_sglue>:
 800cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	4688      	mov	r8, r1
 800cfc4:	4614      	mov	r4, r2
 800cfc6:	2600      	movs	r6, #0
 800cfc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfcc:	f1b9 0901 	subs.w	r9, r9, #1
 800cfd0:	d505      	bpl.n	800cfde <_fwalk_sglue+0x22>
 800cfd2:	6824      	ldr	r4, [r4, #0]
 800cfd4:	2c00      	cmp	r4, #0
 800cfd6:	d1f7      	bne.n	800cfc8 <_fwalk_sglue+0xc>
 800cfd8:	4630      	mov	r0, r6
 800cfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfde:	89ab      	ldrh	r3, [r5, #12]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d907      	bls.n	800cff4 <_fwalk_sglue+0x38>
 800cfe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	d003      	beq.n	800cff4 <_fwalk_sglue+0x38>
 800cfec:	4629      	mov	r1, r5
 800cfee:	4638      	mov	r0, r7
 800cff0:	47c0      	blx	r8
 800cff2:	4306      	orrs	r6, r0
 800cff4:	3568      	adds	r5, #104	@ 0x68
 800cff6:	e7e9      	b.n	800cfcc <_fwalk_sglue+0x10>

0800cff8 <_puts_r>:
 800cff8:	6a03      	ldr	r3, [r0, #32]
 800cffa:	b570      	push	{r4, r5, r6, lr}
 800cffc:	6884      	ldr	r4, [r0, #8]
 800cffe:	4605      	mov	r5, r0
 800d000:	460e      	mov	r6, r1
 800d002:	b90b      	cbnz	r3, 800d008 <_puts_r+0x10>
 800d004:	f7ff ffc2 	bl	800cf8c <__sinit>
 800d008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d00a:	07db      	lsls	r3, r3, #31
 800d00c:	d405      	bmi.n	800d01a <_puts_r+0x22>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	0598      	lsls	r0, r3, #22
 800d012:	d402      	bmi.n	800d01a <_puts_r+0x22>
 800d014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d016:	f000 f99e 	bl	800d356 <__retarget_lock_acquire_recursive>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	0719      	lsls	r1, r3, #28
 800d01e:	d502      	bpl.n	800d026 <_puts_r+0x2e>
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d135      	bne.n	800d092 <_puts_r+0x9a>
 800d026:	4621      	mov	r1, r4
 800d028:	4628      	mov	r0, r5
 800d02a:	f000 f8c5 	bl	800d1b8 <__swsetup_r>
 800d02e:	b380      	cbz	r0, 800d092 <_puts_r+0x9a>
 800d030:	f04f 35ff 	mov.w	r5, #4294967295
 800d034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d036:	07da      	lsls	r2, r3, #31
 800d038:	d405      	bmi.n	800d046 <_puts_r+0x4e>
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	059b      	lsls	r3, r3, #22
 800d03e:	d402      	bmi.n	800d046 <_puts_r+0x4e>
 800d040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d042:	f000 f989 	bl	800d358 <__retarget_lock_release_recursive>
 800d046:	4628      	mov	r0, r5
 800d048:	bd70      	pop	{r4, r5, r6, pc}
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	da04      	bge.n	800d058 <_puts_r+0x60>
 800d04e:	69a2      	ldr	r2, [r4, #24]
 800d050:	429a      	cmp	r2, r3
 800d052:	dc17      	bgt.n	800d084 <_puts_r+0x8c>
 800d054:	290a      	cmp	r1, #10
 800d056:	d015      	beq.n	800d084 <_puts_r+0x8c>
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	6022      	str	r2, [r4, #0]
 800d05e:	7019      	strb	r1, [r3, #0]
 800d060:	68a3      	ldr	r3, [r4, #8]
 800d062:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d066:	3b01      	subs	r3, #1
 800d068:	60a3      	str	r3, [r4, #8]
 800d06a:	2900      	cmp	r1, #0
 800d06c:	d1ed      	bne.n	800d04a <_puts_r+0x52>
 800d06e:	2b00      	cmp	r3, #0
 800d070:	da11      	bge.n	800d096 <_puts_r+0x9e>
 800d072:	4622      	mov	r2, r4
 800d074:	210a      	movs	r1, #10
 800d076:	4628      	mov	r0, r5
 800d078:	f000 f85f 	bl	800d13a <__swbuf_r>
 800d07c:	3001      	adds	r0, #1
 800d07e:	d0d7      	beq.n	800d030 <_puts_r+0x38>
 800d080:	250a      	movs	r5, #10
 800d082:	e7d7      	b.n	800d034 <_puts_r+0x3c>
 800d084:	4622      	mov	r2, r4
 800d086:	4628      	mov	r0, r5
 800d088:	f000 f857 	bl	800d13a <__swbuf_r>
 800d08c:	3001      	adds	r0, #1
 800d08e:	d1e7      	bne.n	800d060 <_puts_r+0x68>
 800d090:	e7ce      	b.n	800d030 <_puts_r+0x38>
 800d092:	3e01      	subs	r6, #1
 800d094:	e7e4      	b.n	800d060 <_puts_r+0x68>
 800d096:	6823      	ldr	r3, [r4, #0]
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	6022      	str	r2, [r4, #0]
 800d09c:	220a      	movs	r2, #10
 800d09e:	701a      	strb	r2, [r3, #0]
 800d0a0:	e7ee      	b.n	800d080 <_puts_r+0x88>
	...

0800d0a4 <puts>:
 800d0a4:	4b02      	ldr	r3, [pc, #8]	@ (800d0b0 <puts+0xc>)
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	6818      	ldr	r0, [r3, #0]
 800d0aa:	f7ff bfa5 	b.w	800cff8 <_puts_r>
 800d0ae:	bf00      	nop
 800d0b0:	20000a6c 	.word	0x20000a6c

0800d0b4 <__sread>:
 800d0b4:	b510      	push	{r4, lr}
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0bc:	f000 f8fc 	bl	800d2b8 <_read_r>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	bfab      	itete	ge
 800d0c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0c8:	181b      	addge	r3, r3, r0
 800d0ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0ce:	bfac      	ite	ge
 800d0d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0d2:	81a3      	strhlt	r3, [r4, #12]
 800d0d4:	bd10      	pop	{r4, pc}

0800d0d6 <__swrite>:
 800d0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0da:	461f      	mov	r7, r3
 800d0dc:	898b      	ldrh	r3, [r1, #12]
 800d0de:	05db      	lsls	r3, r3, #23
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	4616      	mov	r6, r2
 800d0e6:	d505      	bpl.n	800d0f4 <__swrite+0x1e>
 800d0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f000 f8d0 	bl	800d294 <_lseek_r>
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	4632      	mov	r2, r6
 800d102:	463b      	mov	r3, r7
 800d104:	4628      	mov	r0, r5
 800d106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d10a:	f000 b8e7 	b.w	800d2dc <_write_r>

0800d10e <__sseek>:
 800d10e:	b510      	push	{r4, lr}
 800d110:	460c      	mov	r4, r1
 800d112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d116:	f000 f8bd 	bl	800d294 <_lseek_r>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	bf15      	itete	ne
 800d120:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d12a:	81a3      	strheq	r3, [r4, #12]
 800d12c:	bf18      	it	ne
 800d12e:	81a3      	strhne	r3, [r4, #12]
 800d130:	bd10      	pop	{r4, pc}

0800d132 <__sclose>:
 800d132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d136:	f000 b89d 	b.w	800d274 <_close_r>

0800d13a <__swbuf_r>:
 800d13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13c:	460e      	mov	r6, r1
 800d13e:	4614      	mov	r4, r2
 800d140:	4605      	mov	r5, r0
 800d142:	b118      	cbz	r0, 800d14c <__swbuf_r+0x12>
 800d144:	6a03      	ldr	r3, [r0, #32]
 800d146:	b90b      	cbnz	r3, 800d14c <__swbuf_r+0x12>
 800d148:	f7ff ff20 	bl	800cf8c <__sinit>
 800d14c:	69a3      	ldr	r3, [r4, #24]
 800d14e:	60a3      	str	r3, [r4, #8]
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	071a      	lsls	r2, r3, #28
 800d154:	d501      	bpl.n	800d15a <__swbuf_r+0x20>
 800d156:	6923      	ldr	r3, [r4, #16]
 800d158:	b943      	cbnz	r3, 800d16c <__swbuf_r+0x32>
 800d15a:	4621      	mov	r1, r4
 800d15c:	4628      	mov	r0, r5
 800d15e:	f000 f82b 	bl	800d1b8 <__swsetup_r>
 800d162:	b118      	cbz	r0, 800d16c <__swbuf_r+0x32>
 800d164:	f04f 37ff 	mov.w	r7, #4294967295
 800d168:	4638      	mov	r0, r7
 800d16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	6922      	ldr	r2, [r4, #16]
 800d170:	1a98      	subs	r0, r3, r2
 800d172:	6963      	ldr	r3, [r4, #20]
 800d174:	b2f6      	uxtb	r6, r6
 800d176:	4283      	cmp	r3, r0
 800d178:	4637      	mov	r7, r6
 800d17a:	dc05      	bgt.n	800d188 <__swbuf_r+0x4e>
 800d17c:	4621      	mov	r1, r4
 800d17e:	4628      	mov	r0, r5
 800d180:	f000 fa9c 	bl	800d6bc <_fflush_r>
 800d184:	2800      	cmp	r0, #0
 800d186:	d1ed      	bne.n	800d164 <__swbuf_r+0x2a>
 800d188:	68a3      	ldr	r3, [r4, #8]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	60a3      	str	r3, [r4, #8]
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	6022      	str	r2, [r4, #0]
 800d194:	701e      	strb	r6, [r3, #0]
 800d196:	6962      	ldr	r2, [r4, #20]
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d004      	beq.n	800d1a8 <__swbuf_r+0x6e>
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	07db      	lsls	r3, r3, #31
 800d1a2:	d5e1      	bpl.n	800d168 <__swbuf_r+0x2e>
 800d1a4:	2e0a      	cmp	r6, #10
 800d1a6:	d1df      	bne.n	800d168 <__swbuf_r+0x2e>
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f000 fa86 	bl	800d6bc <_fflush_r>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d0d9      	beq.n	800d168 <__swbuf_r+0x2e>
 800d1b4:	e7d6      	b.n	800d164 <__swbuf_r+0x2a>
	...

0800d1b8 <__swsetup_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4b29      	ldr	r3, [pc, #164]	@ (800d260 <__swsetup_r+0xa8>)
 800d1bc:	4605      	mov	r5, r0
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	b118      	cbz	r0, 800d1cc <__swsetup_r+0x14>
 800d1c4:	6a03      	ldr	r3, [r0, #32]
 800d1c6:	b90b      	cbnz	r3, 800d1cc <__swsetup_r+0x14>
 800d1c8:	f7ff fee0 	bl	800cf8c <__sinit>
 800d1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1d0:	0719      	lsls	r1, r3, #28
 800d1d2:	d422      	bmi.n	800d21a <__swsetup_r+0x62>
 800d1d4:	06da      	lsls	r2, r3, #27
 800d1d6:	d407      	bmi.n	800d1e8 <__swsetup_r+0x30>
 800d1d8:	2209      	movs	r2, #9
 800d1da:	602a      	str	r2, [r5, #0]
 800d1dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1e0:	81a3      	strh	r3, [r4, #12]
 800d1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e6:	e033      	b.n	800d250 <__swsetup_r+0x98>
 800d1e8:	0758      	lsls	r0, r3, #29
 800d1ea:	d512      	bpl.n	800d212 <__swsetup_r+0x5a>
 800d1ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1ee:	b141      	cbz	r1, 800d202 <__swsetup_r+0x4a>
 800d1f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1f4:	4299      	cmp	r1, r3
 800d1f6:	d002      	beq.n	800d1fe <__swsetup_r+0x46>
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f000 f8db 	bl	800d3b4 <_free_r>
 800d1fe:	2300      	movs	r3, #0
 800d200:	6363      	str	r3, [r4, #52]	@ 0x34
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	2300      	movs	r3, #0
 800d20c:	6063      	str	r3, [r4, #4]
 800d20e:	6923      	ldr	r3, [r4, #16]
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f043 0308 	orr.w	r3, r3, #8
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	6923      	ldr	r3, [r4, #16]
 800d21c:	b94b      	cbnz	r3, 800d232 <__swsetup_r+0x7a>
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d228:	d003      	beq.n	800d232 <__swsetup_r+0x7a>
 800d22a:	4621      	mov	r1, r4
 800d22c:	4628      	mov	r0, r5
 800d22e:	f000 faa5 	bl	800d77c <__smakebuf_r>
 800d232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d236:	f013 0201 	ands.w	r2, r3, #1
 800d23a:	d00a      	beq.n	800d252 <__swsetup_r+0x9a>
 800d23c:	2200      	movs	r2, #0
 800d23e:	60a2      	str	r2, [r4, #8]
 800d240:	6962      	ldr	r2, [r4, #20]
 800d242:	4252      	negs	r2, r2
 800d244:	61a2      	str	r2, [r4, #24]
 800d246:	6922      	ldr	r2, [r4, #16]
 800d248:	b942      	cbnz	r2, 800d25c <__swsetup_r+0xa4>
 800d24a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d24e:	d1c5      	bne.n	800d1dc <__swsetup_r+0x24>
 800d250:	bd38      	pop	{r3, r4, r5, pc}
 800d252:	0799      	lsls	r1, r3, #30
 800d254:	bf58      	it	pl
 800d256:	6962      	ldrpl	r2, [r4, #20]
 800d258:	60a2      	str	r2, [r4, #8]
 800d25a:	e7f4      	b.n	800d246 <__swsetup_r+0x8e>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e7f7      	b.n	800d250 <__swsetup_r+0x98>
 800d260:	20000a6c 	.word	0x20000a6c

0800d264 <memset>:
 800d264:	4402      	add	r2, r0
 800d266:	4603      	mov	r3, r0
 800d268:	4293      	cmp	r3, r2
 800d26a:	d100      	bne.n	800d26e <memset+0xa>
 800d26c:	4770      	bx	lr
 800d26e:	f803 1b01 	strb.w	r1, [r3], #1
 800d272:	e7f9      	b.n	800d268 <memset+0x4>

0800d274 <_close_r>:
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	4d06      	ldr	r5, [pc, #24]	@ (800d290 <_close_r+0x1c>)
 800d278:	2300      	movs	r3, #0
 800d27a:	4604      	mov	r4, r0
 800d27c:	4608      	mov	r0, r1
 800d27e:	602b      	str	r3, [r5, #0]
 800d280:	f7f5 fc90 	bl	8002ba4 <_close>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_close_r+0x1a>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_close_r+0x1a>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	200050d8 	.word	0x200050d8

0800d294 <_lseek_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d07      	ldr	r5, [pc, #28]	@ (800d2b4 <_lseek_r+0x20>)
 800d298:	4604      	mov	r4, r0
 800d29a:	4608      	mov	r0, r1
 800d29c:	4611      	mov	r1, r2
 800d29e:	2200      	movs	r2, #0
 800d2a0:	602a      	str	r2, [r5, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	f7f5 fca5 	bl	8002bf2 <_lseek>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_lseek_r+0x1e>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_lseek_r+0x1e>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	200050d8 	.word	0x200050d8

0800d2b8 <_read_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4d07      	ldr	r5, [pc, #28]	@ (800d2d8 <_read_r+0x20>)
 800d2bc:	4604      	mov	r4, r0
 800d2be:	4608      	mov	r0, r1
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	602a      	str	r2, [r5, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	f7f5 fc33 	bl	8002b32 <_read>
 800d2cc:	1c43      	adds	r3, r0, #1
 800d2ce:	d102      	bne.n	800d2d6 <_read_r+0x1e>
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	b103      	cbz	r3, 800d2d6 <_read_r+0x1e>
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	bd38      	pop	{r3, r4, r5, pc}
 800d2d8:	200050d8 	.word	0x200050d8

0800d2dc <_write_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	4d07      	ldr	r5, [pc, #28]	@ (800d2fc <_write_r+0x20>)
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	4608      	mov	r0, r1
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	602a      	str	r2, [r5, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	f7f5 fc3e 	bl	8002b6c <_write>
 800d2f0:	1c43      	adds	r3, r0, #1
 800d2f2:	d102      	bne.n	800d2fa <_write_r+0x1e>
 800d2f4:	682b      	ldr	r3, [r5, #0]
 800d2f6:	b103      	cbz	r3, 800d2fa <_write_r+0x1e>
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	200050d8 	.word	0x200050d8

0800d300 <__errno>:
 800d300:	4b01      	ldr	r3, [pc, #4]	@ (800d308 <__errno+0x8>)
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	20000a6c 	.word	0x20000a6c

0800d30c <__libc_init_array>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	4d0d      	ldr	r5, [pc, #52]	@ (800d344 <__libc_init_array+0x38>)
 800d310:	4c0d      	ldr	r4, [pc, #52]	@ (800d348 <__libc_init_array+0x3c>)
 800d312:	1b64      	subs	r4, r4, r5
 800d314:	10a4      	asrs	r4, r4, #2
 800d316:	2600      	movs	r6, #0
 800d318:	42a6      	cmp	r6, r4
 800d31a:	d109      	bne.n	800d330 <__libc_init_array+0x24>
 800d31c:	4d0b      	ldr	r5, [pc, #44]	@ (800d34c <__libc_init_array+0x40>)
 800d31e:	4c0c      	ldr	r4, [pc, #48]	@ (800d350 <__libc_init_array+0x44>)
 800d320:	f001 f840 	bl	800e3a4 <_init>
 800d324:	1b64      	subs	r4, r4, r5
 800d326:	10a4      	asrs	r4, r4, #2
 800d328:	2600      	movs	r6, #0
 800d32a:	42a6      	cmp	r6, r4
 800d32c:	d105      	bne.n	800d33a <__libc_init_array+0x2e>
 800d32e:	bd70      	pop	{r4, r5, r6, pc}
 800d330:	f855 3b04 	ldr.w	r3, [r5], #4
 800d334:	4798      	blx	r3
 800d336:	3601      	adds	r6, #1
 800d338:	e7ee      	b.n	800d318 <__libc_init_array+0xc>
 800d33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d33e:	4798      	blx	r3
 800d340:	3601      	adds	r6, #1
 800d342:	e7f2      	b.n	800d32a <__libc_init_array+0x1e>
 800d344:	0800e644 	.word	0x0800e644
 800d348:	0800e644 	.word	0x0800e644
 800d34c:	0800e644 	.word	0x0800e644
 800d350:	0800e648 	.word	0x0800e648

0800d354 <__retarget_lock_init_recursive>:
 800d354:	4770      	bx	lr

0800d356 <__retarget_lock_acquire_recursive>:
 800d356:	4770      	bx	lr

0800d358 <__retarget_lock_release_recursive>:
 800d358:	4770      	bx	lr

0800d35a <memcpy>:
 800d35a:	440a      	add	r2, r1
 800d35c:	4291      	cmp	r1, r2
 800d35e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d362:	d100      	bne.n	800d366 <memcpy+0xc>
 800d364:	4770      	bx	lr
 800d366:	b510      	push	{r4, lr}
 800d368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d36c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d370:	4291      	cmp	r1, r2
 800d372:	d1f9      	bne.n	800d368 <memcpy+0xe>
 800d374:	bd10      	pop	{r4, pc}
	...

0800d378 <__assert_func>:
 800d378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d37a:	4614      	mov	r4, r2
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <__assert_func+0x2c>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4605      	mov	r5, r0
 800d384:	68d8      	ldr	r0, [r3, #12]
 800d386:	b954      	cbnz	r4, 800d39e <__assert_func+0x26>
 800d388:	4b07      	ldr	r3, [pc, #28]	@ (800d3a8 <__assert_func+0x30>)
 800d38a:	461c      	mov	r4, r3
 800d38c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d390:	9100      	str	r1, [sp, #0]
 800d392:	462b      	mov	r3, r5
 800d394:	4905      	ldr	r1, [pc, #20]	@ (800d3ac <__assert_func+0x34>)
 800d396:	f000 f9b9 	bl	800d70c <fiprintf>
 800d39a:	f000 fa5d 	bl	800d858 <abort>
 800d39e:	4b04      	ldr	r3, [pc, #16]	@ (800d3b0 <__assert_func+0x38>)
 800d3a0:	e7f4      	b.n	800d38c <__assert_func+0x14>
 800d3a2:	bf00      	nop
 800d3a4:	20000a6c 	.word	0x20000a6c
 800d3a8:	0800e606 	.word	0x0800e606
 800d3ac:	0800e5d8 	.word	0x0800e5d8
 800d3b0:	0800e5cb 	.word	0x0800e5cb

0800d3b4 <_free_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	4605      	mov	r5, r0
 800d3b8:	2900      	cmp	r1, #0
 800d3ba:	d041      	beq.n	800d440 <_free_r+0x8c>
 800d3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3c0:	1f0c      	subs	r4, r1, #4
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	bfb8      	it	lt
 800d3c6:	18e4      	addlt	r4, r4, r3
 800d3c8:	f000 f8e8 	bl	800d59c <__malloc_lock>
 800d3cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d444 <_free_r+0x90>)
 800d3ce:	6813      	ldr	r3, [r2, #0]
 800d3d0:	b933      	cbnz	r3, 800d3e0 <_free_r+0x2c>
 800d3d2:	6063      	str	r3, [r4, #4]
 800d3d4:	6014      	str	r4, [r2, #0]
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3dc:	f000 b8e4 	b.w	800d5a8 <__malloc_unlock>
 800d3e0:	42a3      	cmp	r3, r4
 800d3e2:	d908      	bls.n	800d3f6 <_free_r+0x42>
 800d3e4:	6820      	ldr	r0, [r4, #0]
 800d3e6:	1821      	adds	r1, r4, r0
 800d3e8:	428b      	cmp	r3, r1
 800d3ea:	bf01      	itttt	eq
 800d3ec:	6819      	ldreq	r1, [r3, #0]
 800d3ee:	685b      	ldreq	r3, [r3, #4]
 800d3f0:	1809      	addeq	r1, r1, r0
 800d3f2:	6021      	streq	r1, [r4, #0]
 800d3f4:	e7ed      	b.n	800d3d2 <_free_r+0x1e>
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	b10b      	cbz	r3, 800d400 <_free_r+0x4c>
 800d3fc:	42a3      	cmp	r3, r4
 800d3fe:	d9fa      	bls.n	800d3f6 <_free_r+0x42>
 800d400:	6811      	ldr	r1, [r2, #0]
 800d402:	1850      	adds	r0, r2, r1
 800d404:	42a0      	cmp	r0, r4
 800d406:	d10b      	bne.n	800d420 <_free_r+0x6c>
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	4401      	add	r1, r0
 800d40c:	1850      	adds	r0, r2, r1
 800d40e:	4283      	cmp	r3, r0
 800d410:	6011      	str	r1, [r2, #0]
 800d412:	d1e0      	bne.n	800d3d6 <_free_r+0x22>
 800d414:	6818      	ldr	r0, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	6053      	str	r3, [r2, #4]
 800d41a:	4408      	add	r0, r1
 800d41c:	6010      	str	r0, [r2, #0]
 800d41e:	e7da      	b.n	800d3d6 <_free_r+0x22>
 800d420:	d902      	bls.n	800d428 <_free_r+0x74>
 800d422:	230c      	movs	r3, #12
 800d424:	602b      	str	r3, [r5, #0]
 800d426:	e7d6      	b.n	800d3d6 <_free_r+0x22>
 800d428:	6820      	ldr	r0, [r4, #0]
 800d42a:	1821      	adds	r1, r4, r0
 800d42c:	428b      	cmp	r3, r1
 800d42e:	bf04      	itt	eq
 800d430:	6819      	ldreq	r1, [r3, #0]
 800d432:	685b      	ldreq	r3, [r3, #4]
 800d434:	6063      	str	r3, [r4, #4]
 800d436:	bf04      	itt	eq
 800d438:	1809      	addeq	r1, r1, r0
 800d43a:	6021      	streq	r1, [r4, #0]
 800d43c:	6054      	str	r4, [r2, #4]
 800d43e:	e7ca      	b.n	800d3d6 <_free_r+0x22>
 800d440:	bd38      	pop	{r3, r4, r5, pc}
 800d442:	bf00      	nop
 800d444:	200050e4 	.word	0x200050e4

0800d448 <malloc>:
 800d448:	4b02      	ldr	r3, [pc, #8]	@ (800d454 <malloc+0xc>)
 800d44a:	4601      	mov	r1, r0
 800d44c:	6818      	ldr	r0, [r3, #0]
 800d44e:	f000 b825 	b.w	800d49c <_malloc_r>
 800d452:	bf00      	nop
 800d454:	20000a6c 	.word	0x20000a6c

0800d458 <sbrk_aligned>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	4e0f      	ldr	r6, [pc, #60]	@ (800d498 <sbrk_aligned+0x40>)
 800d45c:	460c      	mov	r4, r1
 800d45e:	6831      	ldr	r1, [r6, #0]
 800d460:	4605      	mov	r5, r0
 800d462:	b911      	cbnz	r1, 800d46a <sbrk_aligned+0x12>
 800d464:	f000 f9e8 	bl	800d838 <_sbrk_r>
 800d468:	6030      	str	r0, [r6, #0]
 800d46a:	4621      	mov	r1, r4
 800d46c:	4628      	mov	r0, r5
 800d46e:	f000 f9e3 	bl	800d838 <_sbrk_r>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	d103      	bne.n	800d47e <sbrk_aligned+0x26>
 800d476:	f04f 34ff 	mov.w	r4, #4294967295
 800d47a:	4620      	mov	r0, r4
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
 800d47e:	1cc4      	adds	r4, r0, #3
 800d480:	f024 0403 	bic.w	r4, r4, #3
 800d484:	42a0      	cmp	r0, r4
 800d486:	d0f8      	beq.n	800d47a <sbrk_aligned+0x22>
 800d488:	1a21      	subs	r1, r4, r0
 800d48a:	4628      	mov	r0, r5
 800d48c:	f000 f9d4 	bl	800d838 <_sbrk_r>
 800d490:	3001      	adds	r0, #1
 800d492:	d1f2      	bne.n	800d47a <sbrk_aligned+0x22>
 800d494:	e7ef      	b.n	800d476 <sbrk_aligned+0x1e>
 800d496:	bf00      	nop
 800d498:	200050e0 	.word	0x200050e0

0800d49c <_malloc_r>:
 800d49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a0:	1ccd      	adds	r5, r1, #3
 800d4a2:	f025 0503 	bic.w	r5, r5, #3
 800d4a6:	3508      	adds	r5, #8
 800d4a8:	2d0c      	cmp	r5, #12
 800d4aa:	bf38      	it	cc
 800d4ac:	250c      	movcc	r5, #12
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	db01      	blt.n	800d4b8 <_malloc_r+0x1c>
 800d4b4:	42a9      	cmp	r1, r5
 800d4b6:	d904      	bls.n	800d4c2 <_malloc_r+0x26>
 800d4b8:	230c      	movs	r3, #12
 800d4ba:	6033      	str	r3, [r6, #0]
 800d4bc:	2000      	movs	r0, #0
 800d4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d598 <_malloc_r+0xfc>
 800d4c6:	f000 f869 	bl	800d59c <__malloc_lock>
 800d4ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ce:	461c      	mov	r4, r3
 800d4d0:	bb44      	cbnz	r4, 800d524 <_malloc_r+0x88>
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7ff ffbf 	bl	800d458 <sbrk_aligned>
 800d4da:	1c43      	adds	r3, r0, #1
 800d4dc:	4604      	mov	r4, r0
 800d4de:	d158      	bne.n	800d592 <_malloc_r+0xf6>
 800d4e0:	f8d8 4000 	ldr.w	r4, [r8]
 800d4e4:	4627      	mov	r7, r4
 800d4e6:	2f00      	cmp	r7, #0
 800d4e8:	d143      	bne.n	800d572 <_malloc_r+0xd6>
 800d4ea:	2c00      	cmp	r4, #0
 800d4ec:	d04b      	beq.n	800d586 <_malloc_r+0xea>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	eb04 0903 	add.w	r9, r4, r3
 800d4f8:	f000 f99e 	bl	800d838 <_sbrk_r>
 800d4fc:	4581      	cmp	r9, r0
 800d4fe:	d142      	bne.n	800d586 <_malloc_r+0xea>
 800d500:	6821      	ldr	r1, [r4, #0]
 800d502:	1a6d      	subs	r5, r5, r1
 800d504:	4629      	mov	r1, r5
 800d506:	4630      	mov	r0, r6
 800d508:	f7ff ffa6 	bl	800d458 <sbrk_aligned>
 800d50c:	3001      	adds	r0, #1
 800d50e:	d03a      	beq.n	800d586 <_malloc_r+0xea>
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	442b      	add	r3, r5
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	f8d8 3000 	ldr.w	r3, [r8]
 800d51a:	685a      	ldr	r2, [r3, #4]
 800d51c:	bb62      	cbnz	r2, 800d578 <_malloc_r+0xdc>
 800d51e:	f8c8 7000 	str.w	r7, [r8]
 800d522:	e00f      	b.n	800d544 <_malloc_r+0xa8>
 800d524:	6822      	ldr	r2, [r4, #0]
 800d526:	1b52      	subs	r2, r2, r5
 800d528:	d420      	bmi.n	800d56c <_malloc_r+0xd0>
 800d52a:	2a0b      	cmp	r2, #11
 800d52c:	d917      	bls.n	800d55e <_malloc_r+0xc2>
 800d52e:	1961      	adds	r1, r4, r5
 800d530:	42a3      	cmp	r3, r4
 800d532:	6025      	str	r5, [r4, #0]
 800d534:	bf18      	it	ne
 800d536:	6059      	strne	r1, [r3, #4]
 800d538:	6863      	ldr	r3, [r4, #4]
 800d53a:	bf08      	it	eq
 800d53c:	f8c8 1000 	streq.w	r1, [r8]
 800d540:	5162      	str	r2, [r4, r5]
 800d542:	604b      	str	r3, [r1, #4]
 800d544:	4630      	mov	r0, r6
 800d546:	f000 f82f 	bl	800d5a8 <__malloc_unlock>
 800d54a:	f104 000b 	add.w	r0, r4, #11
 800d54e:	1d23      	adds	r3, r4, #4
 800d550:	f020 0007 	bic.w	r0, r0, #7
 800d554:	1ac2      	subs	r2, r0, r3
 800d556:	bf1c      	itt	ne
 800d558:	1a1b      	subne	r3, r3, r0
 800d55a:	50a3      	strne	r3, [r4, r2]
 800d55c:	e7af      	b.n	800d4be <_malloc_r+0x22>
 800d55e:	6862      	ldr	r2, [r4, #4]
 800d560:	42a3      	cmp	r3, r4
 800d562:	bf0c      	ite	eq
 800d564:	f8c8 2000 	streq.w	r2, [r8]
 800d568:	605a      	strne	r2, [r3, #4]
 800d56a:	e7eb      	b.n	800d544 <_malloc_r+0xa8>
 800d56c:	4623      	mov	r3, r4
 800d56e:	6864      	ldr	r4, [r4, #4]
 800d570:	e7ae      	b.n	800d4d0 <_malloc_r+0x34>
 800d572:	463c      	mov	r4, r7
 800d574:	687f      	ldr	r7, [r7, #4]
 800d576:	e7b6      	b.n	800d4e6 <_malloc_r+0x4a>
 800d578:	461a      	mov	r2, r3
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	d1fb      	bne.n	800d578 <_malloc_r+0xdc>
 800d580:	2300      	movs	r3, #0
 800d582:	6053      	str	r3, [r2, #4]
 800d584:	e7de      	b.n	800d544 <_malloc_r+0xa8>
 800d586:	230c      	movs	r3, #12
 800d588:	6033      	str	r3, [r6, #0]
 800d58a:	4630      	mov	r0, r6
 800d58c:	f000 f80c 	bl	800d5a8 <__malloc_unlock>
 800d590:	e794      	b.n	800d4bc <_malloc_r+0x20>
 800d592:	6005      	str	r5, [r0, #0]
 800d594:	e7d6      	b.n	800d544 <_malloc_r+0xa8>
 800d596:	bf00      	nop
 800d598:	200050e4 	.word	0x200050e4

0800d59c <__malloc_lock>:
 800d59c:	4801      	ldr	r0, [pc, #4]	@ (800d5a4 <__malloc_lock+0x8>)
 800d59e:	f7ff beda 	b.w	800d356 <__retarget_lock_acquire_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	200050dc 	.word	0x200050dc

0800d5a8 <__malloc_unlock>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	@ (800d5b0 <__malloc_unlock+0x8>)
 800d5aa:	f7ff bed5 	b.w	800d358 <__retarget_lock_release_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	200050dc 	.word	0x200050dc

0800d5b4 <__sflush_r>:
 800d5b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5bc:	0716      	lsls	r6, r2, #28
 800d5be:	4605      	mov	r5, r0
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	d454      	bmi.n	800d66e <__sflush_r+0xba>
 800d5c4:	684b      	ldr	r3, [r1, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	dc02      	bgt.n	800d5d0 <__sflush_r+0x1c>
 800d5ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	dd48      	ble.n	800d662 <__sflush_r+0xae>
 800d5d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5d2:	2e00      	cmp	r6, #0
 800d5d4:	d045      	beq.n	800d662 <__sflush_r+0xae>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5dc:	682f      	ldr	r7, [r5, #0]
 800d5de:	6a21      	ldr	r1, [r4, #32]
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	d030      	beq.n	800d646 <__sflush_r+0x92>
 800d5e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5e6:	89a3      	ldrh	r3, [r4, #12]
 800d5e8:	0759      	lsls	r1, r3, #29
 800d5ea:	d505      	bpl.n	800d5f8 <__sflush_r+0x44>
 800d5ec:	6863      	ldr	r3, [r4, #4]
 800d5ee:	1ad2      	subs	r2, r2, r3
 800d5f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5f2:	b10b      	cbz	r3, 800d5f8 <__sflush_r+0x44>
 800d5f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5fc:	6a21      	ldr	r1, [r4, #32]
 800d5fe:	4628      	mov	r0, r5
 800d600:	47b0      	blx	r6
 800d602:	1c43      	adds	r3, r0, #1
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	d106      	bne.n	800d616 <__sflush_r+0x62>
 800d608:	6829      	ldr	r1, [r5, #0]
 800d60a:	291d      	cmp	r1, #29
 800d60c:	d82b      	bhi.n	800d666 <__sflush_r+0xb2>
 800d60e:	4a2a      	ldr	r2, [pc, #168]	@ (800d6b8 <__sflush_r+0x104>)
 800d610:	410a      	asrs	r2, r1
 800d612:	07d6      	lsls	r6, r2, #31
 800d614:	d427      	bmi.n	800d666 <__sflush_r+0xb2>
 800d616:	2200      	movs	r2, #0
 800d618:	6062      	str	r2, [r4, #4]
 800d61a:	04d9      	lsls	r1, r3, #19
 800d61c:	6922      	ldr	r2, [r4, #16]
 800d61e:	6022      	str	r2, [r4, #0]
 800d620:	d504      	bpl.n	800d62c <__sflush_r+0x78>
 800d622:	1c42      	adds	r2, r0, #1
 800d624:	d101      	bne.n	800d62a <__sflush_r+0x76>
 800d626:	682b      	ldr	r3, [r5, #0]
 800d628:	b903      	cbnz	r3, 800d62c <__sflush_r+0x78>
 800d62a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d62c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d62e:	602f      	str	r7, [r5, #0]
 800d630:	b1b9      	cbz	r1, 800d662 <__sflush_r+0xae>
 800d632:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d636:	4299      	cmp	r1, r3
 800d638:	d002      	beq.n	800d640 <__sflush_r+0x8c>
 800d63a:	4628      	mov	r0, r5
 800d63c:	f7ff feba 	bl	800d3b4 <_free_r>
 800d640:	2300      	movs	r3, #0
 800d642:	6363      	str	r3, [r4, #52]	@ 0x34
 800d644:	e00d      	b.n	800d662 <__sflush_r+0xae>
 800d646:	2301      	movs	r3, #1
 800d648:	4628      	mov	r0, r5
 800d64a:	47b0      	blx	r6
 800d64c:	4602      	mov	r2, r0
 800d64e:	1c50      	adds	r0, r2, #1
 800d650:	d1c9      	bne.n	800d5e6 <__sflush_r+0x32>
 800d652:	682b      	ldr	r3, [r5, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d0c6      	beq.n	800d5e6 <__sflush_r+0x32>
 800d658:	2b1d      	cmp	r3, #29
 800d65a:	d001      	beq.n	800d660 <__sflush_r+0xac>
 800d65c:	2b16      	cmp	r3, #22
 800d65e:	d11e      	bne.n	800d69e <__sflush_r+0xea>
 800d660:	602f      	str	r7, [r5, #0]
 800d662:	2000      	movs	r0, #0
 800d664:	e022      	b.n	800d6ac <__sflush_r+0xf8>
 800d666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d66a:	b21b      	sxth	r3, r3
 800d66c:	e01b      	b.n	800d6a6 <__sflush_r+0xf2>
 800d66e:	690f      	ldr	r7, [r1, #16]
 800d670:	2f00      	cmp	r7, #0
 800d672:	d0f6      	beq.n	800d662 <__sflush_r+0xae>
 800d674:	0793      	lsls	r3, r2, #30
 800d676:	680e      	ldr	r6, [r1, #0]
 800d678:	bf08      	it	eq
 800d67a:	694b      	ldreq	r3, [r1, #20]
 800d67c:	600f      	str	r7, [r1, #0]
 800d67e:	bf18      	it	ne
 800d680:	2300      	movne	r3, #0
 800d682:	eba6 0807 	sub.w	r8, r6, r7
 800d686:	608b      	str	r3, [r1, #8]
 800d688:	f1b8 0f00 	cmp.w	r8, #0
 800d68c:	dde9      	ble.n	800d662 <__sflush_r+0xae>
 800d68e:	6a21      	ldr	r1, [r4, #32]
 800d690:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d692:	4643      	mov	r3, r8
 800d694:	463a      	mov	r2, r7
 800d696:	4628      	mov	r0, r5
 800d698:	47b0      	blx	r6
 800d69a:	2800      	cmp	r0, #0
 800d69c:	dc08      	bgt.n	800d6b0 <__sflush_r+0xfc>
 800d69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6a6:	81a3      	strh	r3, [r4, #12]
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b0:	4407      	add	r7, r0
 800d6b2:	eba8 0800 	sub.w	r8, r8, r0
 800d6b6:	e7e7      	b.n	800d688 <__sflush_r+0xd4>
 800d6b8:	dfbffffe 	.word	0xdfbffffe

0800d6bc <_fflush_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	690b      	ldr	r3, [r1, #16]
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	b913      	cbnz	r3, 800d6cc <_fflush_r+0x10>
 800d6c6:	2500      	movs	r5, #0
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	b118      	cbz	r0, 800d6d6 <_fflush_r+0x1a>
 800d6ce:	6a03      	ldr	r3, [r0, #32]
 800d6d0:	b90b      	cbnz	r3, 800d6d6 <_fflush_r+0x1a>
 800d6d2:	f7ff fc5b 	bl	800cf8c <__sinit>
 800d6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d0f3      	beq.n	800d6c6 <_fflush_r+0xa>
 800d6de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6e0:	07d0      	lsls	r0, r2, #31
 800d6e2:	d404      	bmi.n	800d6ee <_fflush_r+0x32>
 800d6e4:	0599      	lsls	r1, r3, #22
 800d6e6:	d402      	bmi.n	800d6ee <_fflush_r+0x32>
 800d6e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6ea:	f7ff fe34 	bl	800d356 <__retarget_lock_acquire_recursive>
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	f7ff ff5f 	bl	800d5b4 <__sflush_r>
 800d6f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6f8:	07da      	lsls	r2, r3, #31
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	d4e4      	bmi.n	800d6c8 <_fflush_r+0xc>
 800d6fe:	89a3      	ldrh	r3, [r4, #12]
 800d700:	059b      	lsls	r3, r3, #22
 800d702:	d4e1      	bmi.n	800d6c8 <_fflush_r+0xc>
 800d704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d706:	f7ff fe27 	bl	800d358 <__retarget_lock_release_recursive>
 800d70a:	e7dd      	b.n	800d6c8 <_fflush_r+0xc>

0800d70c <fiprintf>:
 800d70c:	b40e      	push	{r1, r2, r3}
 800d70e:	b503      	push	{r0, r1, lr}
 800d710:	4601      	mov	r1, r0
 800d712:	ab03      	add	r3, sp, #12
 800d714:	4805      	ldr	r0, [pc, #20]	@ (800d72c <fiprintf+0x20>)
 800d716:	f853 2b04 	ldr.w	r2, [r3], #4
 800d71a:	6800      	ldr	r0, [r0, #0]
 800d71c:	9301      	str	r3, [sp, #4]
 800d71e:	f000 f8cb 	bl	800d8b8 <_vfiprintf_r>
 800d722:	b002      	add	sp, #8
 800d724:	f85d eb04 	ldr.w	lr, [sp], #4
 800d728:	b003      	add	sp, #12
 800d72a:	4770      	bx	lr
 800d72c:	20000a6c 	.word	0x20000a6c

0800d730 <__swhatbuf_r>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	460c      	mov	r4, r1
 800d734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d738:	2900      	cmp	r1, #0
 800d73a:	b096      	sub	sp, #88	@ 0x58
 800d73c:	4615      	mov	r5, r2
 800d73e:	461e      	mov	r6, r3
 800d740:	da0d      	bge.n	800d75e <__swhatbuf_r+0x2e>
 800d742:	89a3      	ldrh	r3, [r4, #12]
 800d744:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d748:	f04f 0100 	mov.w	r1, #0
 800d74c:	bf14      	ite	ne
 800d74e:	2340      	movne	r3, #64	@ 0x40
 800d750:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d754:	2000      	movs	r0, #0
 800d756:	6031      	str	r1, [r6, #0]
 800d758:	602b      	str	r3, [r5, #0]
 800d75a:	b016      	add	sp, #88	@ 0x58
 800d75c:	bd70      	pop	{r4, r5, r6, pc}
 800d75e:	466a      	mov	r2, sp
 800d760:	f000 f848 	bl	800d7f4 <_fstat_r>
 800d764:	2800      	cmp	r0, #0
 800d766:	dbec      	blt.n	800d742 <__swhatbuf_r+0x12>
 800d768:	9901      	ldr	r1, [sp, #4]
 800d76a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d76e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d772:	4259      	negs	r1, r3
 800d774:	4159      	adcs	r1, r3
 800d776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d77a:	e7eb      	b.n	800d754 <__swhatbuf_r+0x24>

0800d77c <__smakebuf_r>:
 800d77c:	898b      	ldrh	r3, [r1, #12]
 800d77e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d780:	079d      	lsls	r5, r3, #30
 800d782:	4606      	mov	r6, r0
 800d784:	460c      	mov	r4, r1
 800d786:	d507      	bpl.n	800d798 <__smakebuf_r+0x1c>
 800d788:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	6123      	str	r3, [r4, #16]
 800d790:	2301      	movs	r3, #1
 800d792:	6163      	str	r3, [r4, #20]
 800d794:	b003      	add	sp, #12
 800d796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d798:	ab01      	add	r3, sp, #4
 800d79a:	466a      	mov	r2, sp
 800d79c:	f7ff ffc8 	bl	800d730 <__swhatbuf_r>
 800d7a0:	9f00      	ldr	r7, [sp, #0]
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	f7ff fe78 	bl	800d49c <_malloc_r>
 800d7ac:	b948      	cbnz	r0, 800d7c2 <__smakebuf_r+0x46>
 800d7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b2:	059a      	lsls	r2, r3, #22
 800d7b4:	d4ee      	bmi.n	800d794 <__smakebuf_r+0x18>
 800d7b6:	f023 0303 	bic.w	r3, r3, #3
 800d7ba:	f043 0302 	orr.w	r3, r3, #2
 800d7be:	81a3      	strh	r3, [r4, #12]
 800d7c0:	e7e2      	b.n	800d788 <__smakebuf_r+0xc>
 800d7c2:	89a3      	ldrh	r3, [r4, #12]
 800d7c4:	6020      	str	r0, [r4, #0]
 800d7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7ca:	81a3      	strh	r3, [r4, #12]
 800d7cc:	9b01      	ldr	r3, [sp, #4]
 800d7ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7d2:	b15b      	cbz	r3, 800d7ec <__smakebuf_r+0x70>
 800d7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f000 f81d 	bl	800d818 <_isatty_r>
 800d7de:	b128      	cbz	r0, 800d7ec <__smakebuf_r+0x70>
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	f023 0303 	bic.w	r3, r3, #3
 800d7e6:	f043 0301 	orr.w	r3, r3, #1
 800d7ea:	81a3      	strh	r3, [r4, #12]
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	431d      	orrs	r5, r3
 800d7f0:	81a5      	strh	r5, [r4, #12]
 800d7f2:	e7cf      	b.n	800d794 <__smakebuf_r+0x18>

0800d7f4 <_fstat_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d07      	ldr	r5, [pc, #28]	@ (800d814 <_fstat_r+0x20>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	4611      	mov	r1, r2
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	f7f5 f9db 	bl	8002bbc <_fstat>
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	d102      	bne.n	800d810 <_fstat_r+0x1c>
 800d80a:	682b      	ldr	r3, [r5, #0]
 800d80c:	b103      	cbz	r3, 800d810 <_fstat_r+0x1c>
 800d80e:	6023      	str	r3, [r4, #0]
 800d810:	bd38      	pop	{r3, r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	200050d8 	.word	0x200050d8

0800d818 <_isatty_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d06      	ldr	r5, [pc, #24]	@ (800d834 <_isatty_r+0x1c>)
 800d81c:	2300      	movs	r3, #0
 800d81e:	4604      	mov	r4, r0
 800d820:	4608      	mov	r0, r1
 800d822:	602b      	str	r3, [r5, #0]
 800d824:	f7f5 f9da 	bl	8002bdc <_isatty>
 800d828:	1c43      	adds	r3, r0, #1
 800d82a:	d102      	bne.n	800d832 <_isatty_r+0x1a>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b103      	cbz	r3, 800d832 <_isatty_r+0x1a>
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	200050d8 	.word	0x200050d8

0800d838 <_sbrk_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d06      	ldr	r5, [pc, #24]	@ (800d854 <_sbrk_r+0x1c>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	4604      	mov	r4, r0
 800d840:	4608      	mov	r0, r1
 800d842:	602b      	str	r3, [r5, #0]
 800d844:	f7f5 f9e2 	bl	8002c0c <_sbrk>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d102      	bne.n	800d852 <_sbrk_r+0x1a>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	b103      	cbz	r3, 800d852 <_sbrk_r+0x1a>
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	200050d8 	.word	0x200050d8

0800d858 <abort>:
 800d858:	b508      	push	{r3, lr}
 800d85a:	2006      	movs	r0, #6
 800d85c:	f000 fafa 	bl	800de54 <raise>
 800d860:	2001      	movs	r0, #1
 800d862:	f7f5 f95b 	bl	8002b1c <_exit>

0800d866 <__sfputc_r>:
 800d866:	6893      	ldr	r3, [r2, #8]
 800d868:	3b01      	subs	r3, #1
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	b410      	push	{r4}
 800d86e:	6093      	str	r3, [r2, #8]
 800d870:	da08      	bge.n	800d884 <__sfputc_r+0x1e>
 800d872:	6994      	ldr	r4, [r2, #24]
 800d874:	42a3      	cmp	r3, r4
 800d876:	db01      	blt.n	800d87c <__sfputc_r+0x16>
 800d878:	290a      	cmp	r1, #10
 800d87a:	d103      	bne.n	800d884 <__sfputc_r+0x1e>
 800d87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d880:	f7ff bc5b 	b.w	800d13a <__swbuf_r>
 800d884:	6813      	ldr	r3, [r2, #0]
 800d886:	1c58      	adds	r0, r3, #1
 800d888:	6010      	str	r0, [r2, #0]
 800d88a:	7019      	strb	r1, [r3, #0]
 800d88c:	4608      	mov	r0, r1
 800d88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <__sfputs_r>:
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	4614      	mov	r4, r2
 800d89c:	18d5      	adds	r5, r2, r3
 800d89e:	42ac      	cmp	r4, r5
 800d8a0:	d101      	bne.n	800d8a6 <__sfputs_r+0x12>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e007      	b.n	800d8b6 <__sfputs_r+0x22>
 800d8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8aa:	463a      	mov	r2, r7
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f7ff ffda 	bl	800d866 <__sfputc_r>
 800d8b2:	1c43      	adds	r3, r0, #1
 800d8b4:	d1f3      	bne.n	800d89e <__sfputs_r+0xa>
 800d8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d8b8 <_vfiprintf_r>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	460d      	mov	r5, r1
 800d8be:	b09d      	sub	sp, #116	@ 0x74
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	4698      	mov	r8, r3
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	b118      	cbz	r0, 800d8d0 <_vfiprintf_r+0x18>
 800d8c8:	6a03      	ldr	r3, [r0, #32]
 800d8ca:	b90b      	cbnz	r3, 800d8d0 <_vfiprintf_r+0x18>
 800d8cc:	f7ff fb5e 	bl	800cf8c <__sinit>
 800d8d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8d2:	07d9      	lsls	r1, r3, #31
 800d8d4:	d405      	bmi.n	800d8e2 <_vfiprintf_r+0x2a>
 800d8d6:	89ab      	ldrh	r3, [r5, #12]
 800d8d8:	059a      	lsls	r2, r3, #22
 800d8da:	d402      	bmi.n	800d8e2 <_vfiprintf_r+0x2a>
 800d8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8de:	f7ff fd3a 	bl	800d356 <__retarget_lock_acquire_recursive>
 800d8e2:	89ab      	ldrh	r3, [r5, #12]
 800d8e4:	071b      	lsls	r3, r3, #28
 800d8e6:	d501      	bpl.n	800d8ec <_vfiprintf_r+0x34>
 800d8e8:	692b      	ldr	r3, [r5, #16]
 800d8ea:	b99b      	cbnz	r3, 800d914 <_vfiprintf_r+0x5c>
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f7ff fc62 	bl	800d1b8 <__swsetup_r>
 800d8f4:	b170      	cbz	r0, 800d914 <_vfiprintf_r+0x5c>
 800d8f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8f8:	07dc      	lsls	r4, r3, #31
 800d8fa:	d504      	bpl.n	800d906 <_vfiprintf_r+0x4e>
 800d8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d900:	b01d      	add	sp, #116	@ 0x74
 800d902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d906:	89ab      	ldrh	r3, [r5, #12]
 800d908:	0598      	lsls	r0, r3, #22
 800d90a:	d4f7      	bmi.n	800d8fc <_vfiprintf_r+0x44>
 800d90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d90e:	f7ff fd23 	bl	800d358 <__retarget_lock_release_recursive>
 800d912:	e7f3      	b.n	800d8fc <_vfiprintf_r+0x44>
 800d914:	2300      	movs	r3, #0
 800d916:	9309      	str	r3, [sp, #36]	@ 0x24
 800d918:	2320      	movs	r3, #32
 800d91a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d922:	2330      	movs	r3, #48	@ 0x30
 800d924:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dad4 <_vfiprintf_r+0x21c>
 800d928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d92c:	f04f 0901 	mov.w	r9, #1
 800d930:	4623      	mov	r3, r4
 800d932:	469a      	mov	sl, r3
 800d934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d938:	b10a      	cbz	r2, 800d93e <_vfiprintf_r+0x86>
 800d93a:	2a25      	cmp	r2, #37	@ 0x25
 800d93c:	d1f9      	bne.n	800d932 <_vfiprintf_r+0x7a>
 800d93e:	ebba 0b04 	subs.w	fp, sl, r4
 800d942:	d00b      	beq.n	800d95c <_vfiprintf_r+0xa4>
 800d944:	465b      	mov	r3, fp
 800d946:	4622      	mov	r2, r4
 800d948:	4629      	mov	r1, r5
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7ff ffa2 	bl	800d894 <__sfputs_r>
 800d950:	3001      	adds	r0, #1
 800d952:	f000 80a7 	beq.w	800daa4 <_vfiprintf_r+0x1ec>
 800d956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d958:	445a      	add	r2, fp
 800d95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d95c:	f89a 3000 	ldrb.w	r3, [sl]
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 809f 	beq.w	800daa4 <_vfiprintf_r+0x1ec>
 800d966:	2300      	movs	r3, #0
 800d968:	f04f 32ff 	mov.w	r2, #4294967295
 800d96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d970:	f10a 0a01 	add.w	sl, sl, #1
 800d974:	9304      	str	r3, [sp, #16]
 800d976:	9307      	str	r3, [sp, #28]
 800d978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d97c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d97e:	4654      	mov	r4, sl
 800d980:	2205      	movs	r2, #5
 800d982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d986:	4853      	ldr	r0, [pc, #332]	@ (800dad4 <_vfiprintf_r+0x21c>)
 800d988:	f7f2 fc2a 	bl	80001e0 <memchr>
 800d98c:	9a04      	ldr	r2, [sp, #16]
 800d98e:	b9d8      	cbnz	r0, 800d9c8 <_vfiprintf_r+0x110>
 800d990:	06d1      	lsls	r1, r2, #27
 800d992:	bf44      	itt	mi
 800d994:	2320      	movmi	r3, #32
 800d996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d99a:	0713      	lsls	r3, r2, #28
 800d99c:	bf44      	itt	mi
 800d99e:	232b      	movmi	r3, #43	@ 0x2b
 800d9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9aa:	d015      	beq.n	800d9d8 <_vfiprintf_r+0x120>
 800d9ac:	9a07      	ldr	r2, [sp, #28]
 800d9ae:	4654      	mov	r4, sl
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	f04f 0c0a 	mov.w	ip, #10
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9bc:	3b30      	subs	r3, #48	@ 0x30
 800d9be:	2b09      	cmp	r3, #9
 800d9c0:	d94b      	bls.n	800da5a <_vfiprintf_r+0x1a2>
 800d9c2:	b1b0      	cbz	r0, 800d9f2 <_vfiprintf_r+0x13a>
 800d9c4:	9207      	str	r2, [sp, #28]
 800d9c6:	e014      	b.n	800d9f2 <_vfiprintf_r+0x13a>
 800d9c8:	eba0 0308 	sub.w	r3, r0, r8
 800d9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	9304      	str	r3, [sp, #16]
 800d9d4:	46a2      	mov	sl, r4
 800d9d6:	e7d2      	b.n	800d97e <_vfiprintf_r+0xc6>
 800d9d8:	9b03      	ldr	r3, [sp, #12]
 800d9da:	1d19      	adds	r1, r3, #4
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	9103      	str	r1, [sp, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	bfbb      	ittet	lt
 800d9e4:	425b      	neglt	r3, r3
 800d9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d9ea:	9307      	strge	r3, [sp, #28]
 800d9ec:	9307      	strlt	r3, [sp, #28]
 800d9ee:	bfb8      	it	lt
 800d9f0:	9204      	strlt	r2, [sp, #16]
 800d9f2:	7823      	ldrb	r3, [r4, #0]
 800d9f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9f6:	d10a      	bne.n	800da0e <_vfiprintf_r+0x156>
 800d9f8:	7863      	ldrb	r3, [r4, #1]
 800d9fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9fc:	d132      	bne.n	800da64 <_vfiprintf_r+0x1ac>
 800d9fe:	9b03      	ldr	r3, [sp, #12]
 800da00:	1d1a      	adds	r2, r3, #4
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	9203      	str	r2, [sp, #12]
 800da06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da0a:	3402      	adds	r4, #2
 800da0c:	9305      	str	r3, [sp, #20]
 800da0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dae4 <_vfiprintf_r+0x22c>
 800da12:	7821      	ldrb	r1, [r4, #0]
 800da14:	2203      	movs	r2, #3
 800da16:	4650      	mov	r0, sl
 800da18:	f7f2 fbe2 	bl	80001e0 <memchr>
 800da1c:	b138      	cbz	r0, 800da2e <_vfiprintf_r+0x176>
 800da1e:	9b04      	ldr	r3, [sp, #16]
 800da20:	eba0 000a 	sub.w	r0, r0, sl
 800da24:	2240      	movs	r2, #64	@ 0x40
 800da26:	4082      	lsls	r2, r0
 800da28:	4313      	orrs	r3, r2
 800da2a:	3401      	adds	r4, #1
 800da2c:	9304      	str	r3, [sp, #16]
 800da2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da32:	4829      	ldr	r0, [pc, #164]	@ (800dad8 <_vfiprintf_r+0x220>)
 800da34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da38:	2206      	movs	r2, #6
 800da3a:	f7f2 fbd1 	bl	80001e0 <memchr>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d03f      	beq.n	800dac2 <_vfiprintf_r+0x20a>
 800da42:	4b26      	ldr	r3, [pc, #152]	@ (800dadc <_vfiprintf_r+0x224>)
 800da44:	bb1b      	cbnz	r3, 800da8e <_vfiprintf_r+0x1d6>
 800da46:	9b03      	ldr	r3, [sp, #12]
 800da48:	3307      	adds	r3, #7
 800da4a:	f023 0307 	bic.w	r3, r3, #7
 800da4e:	3308      	adds	r3, #8
 800da50:	9303      	str	r3, [sp, #12]
 800da52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da54:	443b      	add	r3, r7
 800da56:	9309      	str	r3, [sp, #36]	@ 0x24
 800da58:	e76a      	b.n	800d930 <_vfiprintf_r+0x78>
 800da5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800da5e:	460c      	mov	r4, r1
 800da60:	2001      	movs	r0, #1
 800da62:	e7a8      	b.n	800d9b6 <_vfiprintf_r+0xfe>
 800da64:	2300      	movs	r3, #0
 800da66:	3401      	adds	r4, #1
 800da68:	9305      	str	r3, [sp, #20]
 800da6a:	4619      	mov	r1, r3
 800da6c:	f04f 0c0a 	mov.w	ip, #10
 800da70:	4620      	mov	r0, r4
 800da72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da76:	3a30      	subs	r2, #48	@ 0x30
 800da78:	2a09      	cmp	r2, #9
 800da7a:	d903      	bls.n	800da84 <_vfiprintf_r+0x1cc>
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d0c6      	beq.n	800da0e <_vfiprintf_r+0x156>
 800da80:	9105      	str	r1, [sp, #20]
 800da82:	e7c4      	b.n	800da0e <_vfiprintf_r+0x156>
 800da84:	fb0c 2101 	mla	r1, ip, r1, r2
 800da88:	4604      	mov	r4, r0
 800da8a:	2301      	movs	r3, #1
 800da8c:	e7f0      	b.n	800da70 <_vfiprintf_r+0x1b8>
 800da8e:	ab03      	add	r3, sp, #12
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	462a      	mov	r2, r5
 800da94:	4b12      	ldr	r3, [pc, #72]	@ (800dae0 <_vfiprintf_r+0x228>)
 800da96:	a904      	add	r1, sp, #16
 800da98:	4630      	mov	r0, r6
 800da9a:	f3af 8000 	nop.w
 800da9e:	4607      	mov	r7, r0
 800daa0:	1c78      	adds	r0, r7, #1
 800daa2:	d1d6      	bne.n	800da52 <_vfiprintf_r+0x19a>
 800daa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daa6:	07d9      	lsls	r1, r3, #31
 800daa8:	d405      	bmi.n	800dab6 <_vfiprintf_r+0x1fe>
 800daaa:	89ab      	ldrh	r3, [r5, #12]
 800daac:	059a      	lsls	r2, r3, #22
 800daae:	d402      	bmi.n	800dab6 <_vfiprintf_r+0x1fe>
 800dab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dab2:	f7ff fc51 	bl	800d358 <__retarget_lock_release_recursive>
 800dab6:	89ab      	ldrh	r3, [r5, #12]
 800dab8:	065b      	lsls	r3, r3, #25
 800daba:	f53f af1f 	bmi.w	800d8fc <_vfiprintf_r+0x44>
 800dabe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dac0:	e71e      	b.n	800d900 <_vfiprintf_r+0x48>
 800dac2:	ab03      	add	r3, sp, #12
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	462a      	mov	r2, r5
 800dac8:	4b05      	ldr	r3, [pc, #20]	@ (800dae0 <_vfiprintf_r+0x228>)
 800daca:	a904      	add	r1, sp, #16
 800dacc:	4630      	mov	r0, r6
 800dace:	f000 f879 	bl	800dbc4 <_printf_i>
 800dad2:	e7e4      	b.n	800da9e <_vfiprintf_r+0x1e6>
 800dad4:	0800e607 	.word	0x0800e607
 800dad8:	0800e611 	.word	0x0800e611
 800dadc:	00000000 	.word	0x00000000
 800dae0:	0800d895 	.word	0x0800d895
 800dae4:	0800e60d 	.word	0x0800e60d

0800dae8 <_printf_common>:
 800dae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daec:	4616      	mov	r6, r2
 800daee:	4698      	mov	r8, r3
 800daf0:	688a      	ldr	r2, [r1, #8]
 800daf2:	690b      	ldr	r3, [r1, #16]
 800daf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800daf8:	4293      	cmp	r3, r2
 800dafa:	bfb8      	it	lt
 800dafc:	4613      	movlt	r3, r2
 800dafe:	6033      	str	r3, [r6, #0]
 800db00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db04:	4607      	mov	r7, r0
 800db06:	460c      	mov	r4, r1
 800db08:	b10a      	cbz	r2, 800db0e <_printf_common+0x26>
 800db0a:	3301      	adds	r3, #1
 800db0c:	6033      	str	r3, [r6, #0]
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	0699      	lsls	r1, r3, #26
 800db12:	bf42      	ittt	mi
 800db14:	6833      	ldrmi	r3, [r6, #0]
 800db16:	3302      	addmi	r3, #2
 800db18:	6033      	strmi	r3, [r6, #0]
 800db1a:	6825      	ldr	r5, [r4, #0]
 800db1c:	f015 0506 	ands.w	r5, r5, #6
 800db20:	d106      	bne.n	800db30 <_printf_common+0x48>
 800db22:	f104 0a19 	add.w	sl, r4, #25
 800db26:	68e3      	ldr	r3, [r4, #12]
 800db28:	6832      	ldr	r2, [r6, #0]
 800db2a:	1a9b      	subs	r3, r3, r2
 800db2c:	42ab      	cmp	r3, r5
 800db2e:	dc26      	bgt.n	800db7e <_printf_common+0x96>
 800db30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db34:	6822      	ldr	r2, [r4, #0]
 800db36:	3b00      	subs	r3, #0
 800db38:	bf18      	it	ne
 800db3a:	2301      	movne	r3, #1
 800db3c:	0692      	lsls	r2, r2, #26
 800db3e:	d42b      	bmi.n	800db98 <_printf_common+0xb0>
 800db40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db44:	4641      	mov	r1, r8
 800db46:	4638      	mov	r0, r7
 800db48:	47c8      	blx	r9
 800db4a:	3001      	adds	r0, #1
 800db4c:	d01e      	beq.n	800db8c <_printf_common+0xa4>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	6922      	ldr	r2, [r4, #16]
 800db52:	f003 0306 	and.w	r3, r3, #6
 800db56:	2b04      	cmp	r3, #4
 800db58:	bf02      	ittt	eq
 800db5a:	68e5      	ldreq	r5, [r4, #12]
 800db5c:	6833      	ldreq	r3, [r6, #0]
 800db5e:	1aed      	subeq	r5, r5, r3
 800db60:	68a3      	ldr	r3, [r4, #8]
 800db62:	bf0c      	ite	eq
 800db64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db68:	2500      	movne	r5, #0
 800db6a:	4293      	cmp	r3, r2
 800db6c:	bfc4      	itt	gt
 800db6e:	1a9b      	subgt	r3, r3, r2
 800db70:	18ed      	addgt	r5, r5, r3
 800db72:	2600      	movs	r6, #0
 800db74:	341a      	adds	r4, #26
 800db76:	42b5      	cmp	r5, r6
 800db78:	d11a      	bne.n	800dbb0 <_printf_common+0xc8>
 800db7a:	2000      	movs	r0, #0
 800db7c:	e008      	b.n	800db90 <_printf_common+0xa8>
 800db7e:	2301      	movs	r3, #1
 800db80:	4652      	mov	r2, sl
 800db82:	4641      	mov	r1, r8
 800db84:	4638      	mov	r0, r7
 800db86:	47c8      	blx	r9
 800db88:	3001      	adds	r0, #1
 800db8a:	d103      	bne.n	800db94 <_printf_common+0xac>
 800db8c:	f04f 30ff 	mov.w	r0, #4294967295
 800db90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db94:	3501      	adds	r5, #1
 800db96:	e7c6      	b.n	800db26 <_printf_common+0x3e>
 800db98:	18e1      	adds	r1, r4, r3
 800db9a:	1c5a      	adds	r2, r3, #1
 800db9c:	2030      	movs	r0, #48	@ 0x30
 800db9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dba2:	4422      	add	r2, r4
 800dba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dbac:	3302      	adds	r3, #2
 800dbae:	e7c7      	b.n	800db40 <_printf_common+0x58>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	4622      	mov	r2, r4
 800dbb4:	4641      	mov	r1, r8
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	47c8      	blx	r9
 800dbba:	3001      	adds	r0, #1
 800dbbc:	d0e6      	beq.n	800db8c <_printf_common+0xa4>
 800dbbe:	3601      	adds	r6, #1
 800dbc0:	e7d9      	b.n	800db76 <_printf_common+0x8e>
	...

0800dbc4 <_printf_i>:
 800dbc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc8:	7e0f      	ldrb	r7, [r1, #24]
 800dbca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbcc:	2f78      	cmp	r7, #120	@ 0x78
 800dbce:	4691      	mov	r9, r2
 800dbd0:	4680      	mov	r8, r0
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	469a      	mov	sl, r3
 800dbd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dbda:	d807      	bhi.n	800dbec <_printf_i+0x28>
 800dbdc:	2f62      	cmp	r7, #98	@ 0x62
 800dbde:	d80a      	bhi.n	800dbf6 <_printf_i+0x32>
 800dbe0:	2f00      	cmp	r7, #0
 800dbe2:	f000 80d2 	beq.w	800dd8a <_printf_i+0x1c6>
 800dbe6:	2f58      	cmp	r7, #88	@ 0x58
 800dbe8:	f000 80b9 	beq.w	800dd5e <_printf_i+0x19a>
 800dbec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbf4:	e03a      	b.n	800dc6c <_printf_i+0xa8>
 800dbf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbfa:	2b15      	cmp	r3, #21
 800dbfc:	d8f6      	bhi.n	800dbec <_printf_i+0x28>
 800dbfe:	a101      	add	r1, pc, #4	@ (adr r1, 800dc04 <_printf_i+0x40>)
 800dc00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc04:	0800dc5d 	.word	0x0800dc5d
 800dc08:	0800dc71 	.word	0x0800dc71
 800dc0c:	0800dbed 	.word	0x0800dbed
 800dc10:	0800dbed 	.word	0x0800dbed
 800dc14:	0800dbed 	.word	0x0800dbed
 800dc18:	0800dbed 	.word	0x0800dbed
 800dc1c:	0800dc71 	.word	0x0800dc71
 800dc20:	0800dbed 	.word	0x0800dbed
 800dc24:	0800dbed 	.word	0x0800dbed
 800dc28:	0800dbed 	.word	0x0800dbed
 800dc2c:	0800dbed 	.word	0x0800dbed
 800dc30:	0800dd71 	.word	0x0800dd71
 800dc34:	0800dc9b 	.word	0x0800dc9b
 800dc38:	0800dd2b 	.word	0x0800dd2b
 800dc3c:	0800dbed 	.word	0x0800dbed
 800dc40:	0800dbed 	.word	0x0800dbed
 800dc44:	0800dd93 	.word	0x0800dd93
 800dc48:	0800dbed 	.word	0x0800dbed
 800dc4c:	0800dc9b 	.word	0x0800dc9b
 800dc50:	0800dbed 	.word	0x0800dbed
 800dc54:	0800dbed 	.word	0x0800dbed
 800dc58:	0800dd33 	.word	0x0800dd33
 800dc5c:	6833      	ldr	r3, [r6, #0]
 800dc5e:	1d1a      	adds	r2, r3, #4
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6032      	str	r2, [r6, #0]
 800dc64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e09d      	b.n	800ddac <_printf_i+0x1e8>
 800dc70:	6833      	ldr	r3, [r6, #0]
 800dc72:	6820      	ldr	r0, [r4, #0]
 800dc74:	1d19      	adds	r1, r3, #4
 800dc76:	6031      	str	r1, [r6, #0]
 800dc78:	0606      	lsls	r6, r0, #24
 800dc7a:	d501      	bpl.n	800dc80 <_printf_i+0xbc>
 800dc7c:	681d      	ldr	r5, [r3, #0]
 800dc7e:	e003      	b.n	800dc88 <_printf_i+0xc4>
 800dc80:	0645      	lsls	r5, r0, #25
 800dc82:	d5fb      	bpl.n	800dc7c <_printf_i+0xb8>
 800dc84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc88:	2d00      	cmp	r5, #0
 800dc8a:	da03      	bge.n	800dc94 <_printf_i+0xd0>
 800dc8c:	232d      	movs	r3, #45	@ 0x2d
 800dc8e:	426d      	negs	r5, r5
 800dc90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc94:	4859      	ldr	r0, [pc, #356]	@ (800ddfc <_printf_i+0x238>)
 800dc96:	230a      	movs	r3, #10
 800dc98:	e011      	b.n	800dcbe <_printf_i+0xfa>
 800dc9a:	6821      	ldr	r1, [r4, #0]
 800dc9c:	6833      	ldr	r3, [r6, #0]
 800dc9e:	0608      	lsls	r0, r1, #24
 800dca0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dca4:	d402      	bmi.n	800dcac <_printf_i+0xe8>
 800dca6:	0649      	lsls	r1, r1, #25
 800dca8:	bf48      	it	mi
 800dcaa:	b2ad      	uxthmi	r5, r5
 800dcac:	2f6f      	cmp	r7, #111	@ 0x6f
 800dcae:	4853      	ldr	r0, [pc, #332]	@ (800ddfc <_printf_i+0x238>)
 800dcb0:	6033      	str	r3, [r6, #0]
 800dcb2:	bf14      	ite	ne
 800dcb4:	230a      	movne	r3, #10
 800dcb6:	2308      	moveq	r3, #8
 800dcb8:	2100      	movs	r1, #0
 800dcba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dcbe:	6866      	ldr	r6, [r4, #4]
 800dcc0:	60a6      	str	r6, [r4, #8]
 800dcc2:	2e00      	cmp	r6, #0
 800dcc4:	bfa2      	ittt	ge
 800dcc6:	6821      	ldrge	r1, [r4, #0]
 800dcc8:	f021 0104 	bicge.w	r1, r1, #4
 800dccc:	6021      	strge	r1, [r4, #0]
 800dcce:	b90d      	cbnz	r5, 800dcd4 <_printf_i+0x110>
 800dcd0:	2e00      	cmp	r6, #0
 800dcd2:	d04b      	beq.n	800dd6c <_printf_i+0x1a8>
 800dcd4:	4616      	mov	r6, r2
 800dcd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800dcda:	fb03 5711 	mls	r7, r3, r1, r5
 800dcde:	5dc7      	ldrb	r7, [r0, r7]
 800dce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dce4:	462f      	mov	r7, r5
 800dce6:	42bb      	cmp	r3, r7
 800dce8:	460d      	mov	r5, r1
 800dcea:	d9f4      	bls.n	800dcd6 <_printf_i+0x112>
 800dcec:	2b08      	cmp	r3, #8
 800dcee:	d10b      	bne.n	800dd08 <_printf_i+0x144>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	07df      	lsls	r7, r3, #31
 800dcf4:	d508      	bpl.n	800dd08 <_printf_i+0x144>
 800dcf6:	6923      	ldr	r3, [r4, #16]
 800dcf8:	6861      	ldr	r1, [r4, #4]
 800dcfa:	4299      	cmp	r1, r3
 800dcfc:	bfde      	ittt	le
 800dcfe:	2330      	movle	r3, #48	@ 0x30
 800dd00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd08:	1b92      	subs	r2, r2, r6
 800dd0a:	6122      	str	r2, [r4, #16]
 800dd0c:	f8cd a000 	str.w	sl, [sp]
 800dd10:	464b      	mov	r3, r9
 800dd12:	aa03      	add	r2, sp, #12
 800dd14:	4621      	mov	r1, r4
 800dd16:	4640      	mov	r0, r8
 800dd18:	f7ff fee6 	bl	800dae8 <_printf_common>
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d14a      	bne.n	800ddb6 <_printf_i+0x1f2>
 800dd20:	f04f 30ff 	mov.w	r0, #4294967295
 800dd24:	b004      	add	sp, #16
 800dd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	f043 0320 	orr.w	r3, r3, #32
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	4833      	ldr	r0, [pc, #204]	@ (800de00 <_printf_i+0x23c>)
 800dd34:	2778      	movs	r7, #120	@ 0x78
 800dd36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	6831      	ldr	r1, [r6, #0]
 800dd3e:	061f      	lsls	r7, r3, #24
 800dd40:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd44:	d402      	bmi.n	800dd4c <_printf_i+0x188>
 800dd46:	065f      	lsls	r7, r3, #25
 800dd48:	bf48      	it	mi
 800dd4a:	b2ad      	uxthmi	r5, r5
 800dd4c:	6031      	str	r1, [r6, #0]
 800dd4e:	07d9      	lsls	r1, r3, #31
 800dd50:	bf44      	itt	mi
 800dd52:	f043 0320 	orrmi.w	r3, r3, #32
 800dd56:	6023      	strmi	r3, [r4, #0]
 800dd58:	b11d      	cbz	r5, 800dd62 <_printf_i+0x19e>
 800dd5a:	2310      	movs	r3, #16
 800dd5c:	e7ac      	b.n	800dcb8 <_printf_i+0xf4>
 800dd5e:	4827      	ldr	r0, [pc, #156]	@ (800ddfc <_printf_i+0x238>)
 800dd60:	e7e9      	b.n	800dd36 <_printf_i+0x172>
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	f023 0320 	bic.w	r3, r3, #32
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	e7f6      	b.n	800dd5a <_printf_i+0x196>
 800dd6c:	4616      	mov	r6, r2
 800dd6e:	e7bd      	b.n	800dcec <_printf_i+0x128>
 800dd70:	6833      	ldr	r3, [r6, #0]
 800dd72:	6825      	ldr	r5, [r4, #0]
 800dd74:	6961      	ldr	r1, [r4, #20]
 800dd76:	1d18      	adds	r0, r3, #4
 800dd78:	6030      	str	r0, [r6, #0]
 800dd7a:	062e      	lsls	r6, r5, #24
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	d501      	bpl.n	800dd84 <_printf_i+0x1c0>
 800dd80:	6019      	str	r1, [r3, #0]
 800dd82:	e002      	b.n	800dd8a <_printf_i+0x1c6>
 800dd84:	0668      	lsls	r0, r5, #25
 800dd86:	d5fb      	bpl.n	800dd80 <_printf_i+0x1bc>
 800dd88:	8019      	strh	r1, [r3, #0]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	6123      	str	r3, [r4, #16]
 800dd8e:	4616      	mov	r6, r2
 800dd90:	e7bc      	b.n	800dd0c <_printf_i+0x148>
 800dd92:	6833      	ldr	r3, [r6, #0]
 800dd94:	1d1a      	adds	r2, r3, #4
 800dd96:	6032      	str	r2, [r6, #0]
 800dd98:	681e      	ldr	r6, [r3, #0]
 800dd9a:	6862      	ldr	r2, [r4, #4]
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	4630      	mov	r0, r6
 800dda0:	f7f2 fa1e 	bl	80001e0 <memchr>
 800dda4:	b108      	cbz	r0, 800ddaa <_printf_i+0x1e6>
 800dda6:	1b80      	subs	r0, r0, r6
 800dda8:	6060      	str	r0, [r4, #4]
 800ddaa:	6863      	ldr	r3, [r4, #4]
 800ddac:	6123      	str	r3, [r4, #16]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddb4:	e7aa      	b.n	800dd0c <_printf_i+0x148>
 800ddb6:	6923      	ldr	r3, [r4, #16]
 800ddb8:	4632      	mov	r2, r6
 800ddba:	4649      	mov	r1, r9
 800ddbc:	4640      	mov	r0, r8
 800ddbe:	47d0      	blx	sl
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d0ad      	beq.n	800dd20 <_printf_i+0x15c>
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	079b      	lsls	r3, r3, #30
 800ddc8:	d413      	bmi.n	800ddf2 <_printf_i+0x22e>
 800ddca:	68e0      	ldr	r0, [r4, #12]
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	4298      	cmp	r0, r3
 800ddd0:	bfb8      	it	lt
 800ddd2:	4618      	movlt	r0, r3
 800ddd4:	e7a6      	b.n	800dd24 <_printf_i+0x160>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	4632      	mov	r2, r6
 800ddda:	4649      	mov	r1, r9
 800dddc:	4640      	mov	r0, r8
 800ddde:	47d0      	blx	sl
 800dde0:	3001      	adds	r0, #1
 800dde2:	d09d      	beq.n	800dd20 <_printf_i+0x15c>
 800dde4:	3501      	adds	r5, #1
 800dde6:	68e3      	ldr	r3, [r4, #12]
 800dde8:	9903      	ldr	r1, [sp, #12]
 800ddea:	1a5b      	subs	r3, r3, r1
 800ddec:	42ab      	cmp	r3, r5
 800ddee:	dcf2      	bgt.n	800ddd6 <_printf_i+0x212>
 800ddf0:	e7eb      	b.n	800ddca <_printf_i+0x206>
 800ddf2:	2500      	movs	r5, #0
 800ddf4:	f104 0619 	add.w	r6, r4, #25
 800ddf8:	e7f5      	b.n	800dde6 <_printf_i+0x222>
 800ddfa:	bf00      	nop
 800ddfc:	0800e618 	.word	0x0800e618
 800de00:	0800e629 	.word	0x0800e629

0800de04 <_raise_r>:
 800de04:	291f      	cmp	r1, #31
 800de06:	b538      	push	{r3, r4, r5, lr}
 800de08:	4605      	mov	r5, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	d904      	bls.n	800de18 <_raise_r+0x14>
 800de0e:	2316      	movs	r3, #22
 800de10:	6003      	str	r3, [r0, #0]
 800de12:	f04f 30ff 	mov.w	r0, #4294967295
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de1a:	b112      	cbz	r2, 800de22 <_raise_r+0x1e>
 800de1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de20:	b94b      	cbnz	r3, 800de36 <_raise_r+0x32>
 800de22:	4628      	mov	r0, r5
 800de24:	f000 f830 	bl	800de88 <_getpid_r>
 800de28:	4622      	mov	r2, r4
 800de2a:	4601      	mov	r1, r0
 800de2c:	4628      	mov	r0, r5
 800de2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de32:	f000 b817 	b.w	800de64 <_kill_r>
 800de36:	2b01      	cmp	r3, #1
 800de38:	d00a      	beq.n	800de50 <_raise_r+0x4c>
 800de3a:	1c59      	adds	r1, r3, #1
 800de3c:	d103      	bne.n	800de46 <_raise_r+0x42>
 800de3e:	2316      	movs	r3, #22
 800de40:	6003      	str	r3, [r0, #0]
 800de42:	2001      	movs	r0, #1
 800de44:	e7e7      	b.n	800de16 <_raise_r+0x12>
 800de46:	2100      	movs	r1, #0
 800de48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de4c:	4620      	mov	r0, r4
 800de4e:	4798      	blx	r3
 800de50:	2000      	movs	r0, #0
 800de52:	e7e0      	b.n	800de16 <_raise_r+0x12>

0800de54 <raise>:
 800de54:	4b02      	ldr	r3, [pc, #8]	@ (800de60 <raise+0xc>)
 800de56:	4601      	mov	r1, r0
 800de58:	6818      	ldr	r0, [r3, #0]
 800de5a:	f7ff bfd3 	b.w	800de04 <_raise_r>
 800de5e:	bf00      	nop
 800de60:	20000a6c 	.word	0x20000a6c

0800de64 <_kill_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d07      	ldr	r5, [pc, #28]	@ (800de84 <_kill_r+0x20>)
 800de68:	2300      	movs	r3, #0
 800de6a:	4604      	mov	r4, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	4611      	mov	r1, r2
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	f7f4 fe43 	bl	8002afc <_kill>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	d102      	bne.n	800de80 <_kill_r+0x1c>
 800de7a:	682b      	ldr	r3, [r5, #0]
 800de7c:	b103      	cbz	r3, 800de80 <_kill_r+0x1c>
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	bd38      	pop	{r3, r4, r5, pc}
 800de82:	bf00      	nop
 800de84:	200050d8 	.word	0x200050d8

0800de88 <_getpid_r>:
 800de88:	f7f4 be30 	b.w	8002aec <_getpid>
 800de8c:	0000      	movs	r0, r0
	...

0800de90 <log10>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	ed2d 8b02 	vpush	{d8}
 800de96:	ec55 4b10 	vmov	r4, r5, d0
 800de9a:	f000 f841 	bl	800df20 <__ieee754_log10>
 800de9e:	4622      	mov	r2, r4
 800dea0:	462b      	mov	r3, r5
 800dea2:	4620      	mov	r0, r4
 800dea4:	4629      	mov	r1, r5
 800dea6:	eeb0 8a40 	vmov.f32	s16, s0
 800deaa:	eef0 8a60 	vmov.f32	s17, s1
 800deae:	f7f2 fe3d 	bl	8000b2c <__aeabi_dcmpun>
 800deb2:	b998      	cbnz	r0, 800dedc <log10+0x4c>
 800deb4:	2200      	movs	r2, #0
 800deb6:	2300      	movs	r3, #0
 800deb8:	4620      	mov	r0, r4
 800deba:	4629      	mov	r1, r5
 800debc:	f7f2 fe18 	bl	8000af0 <__aeabi_dcmple>
 800dec0:	b160      	cbz	r0, 800dedc <log10+0x4c>
 800dec2:	2200      	movs	r2, #0
 800dec4:	2300      	movs	r3, #0
 800dec6:	4620      	mov	r0, r4
 800dec8:	4629      	mov	r1, r5
 800deca:	f7f2 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800dece:	b160      	cbz	r0, 800deea <log10+0x5a>
 800ded0:	f7ff fa16 	bl	800d300 <__errno>
 800ded4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800df00 <log10+0x70>
 800ded8:	2322      	movs	r3, #34	@ 0x22
 800deda:	6003      	str	r3, [r0, #0]
 800dedc:	eeb0 0a48 	vmov.f32	s0, s16
 800dee0:	eef0 0a68 	vmov.f32	s1, s17
 800dee4:	ecbd 8b02 	vpop	{d8}
 800dee8:	bd38      	pop	{r3, r4, r5, pc}
 800deea:	f7ff fa09 	bl	800d300 <__errno>
 800deee:	ecbd 8b02 	vpop	{d8}
 800def2:	2321      	movs	r3, #33	@ 0x21
 800def4:	6003      	str	r3, [r0, #0]
 800def6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800defa:	4803      	ldr	r0, [pc, #12]	@ (800df08 <log10+0x78>)
 800defc:	f000 b808 	b.w	800df10 <nan>
 800df00:	00000000 	.word	0x00000000
 800df04:	fff00000 	.word	0xfff00000
 800df08:	0800e606 	.word	0x0800e606
 800df0c:	00000000 	.word	0x00000000

0800df10 <nan>:
 800df10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800df18 <nan+0x8>
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	00000000 	.word	0x00000000
 800df1c:	7ff80000 	.word	0x7ff80000

0800df20 <__ieee754_log10>:
 800df20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df24:	ec55 4b10 	vmov	r4, r5, d0
 800df28:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800df2c:	ed2d 8b02 	vpush	{d8}
 800df30:	462b      	mov	r3, r5
 800df32:	da2e      	bge.n	800df92 <__ieee754_log10+0x72>
 800df34:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800df38:	4322      	orrs	r2, r4
 800df3a:	d10b      	bne.n	800df54 <__ieee754_log10+0x34>
 800df3c:	493a      	ldr	r1, [pc, #232]	@ (800e028 <__ieee754_log10+0x108>)
 800df3e:	2200      	movs	r2, #0
 800df40:	2300      	movs	r3, #0
 800df42:	2000      	movs	r0, #0
 800df44:	f7f2 fc82 	bl	800084c <__aeabi_ddiv>
 800df48:	ecbd 8b02 	vpop	{d8}
 800df4c:	ec41 0b10 	vmov	d0, r0, r1
 800df50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df54:	2d00      	cmp	r5, #0
 800df56:	da07      	bge.n	800df68 <__ieee754_log10+0x48>
 800df58:	4622      	mov	r2, r4
 800df5a:	4620      	mov	r0, r4
 800df5c:	4629      	mov	r1, r5
 800df5e:	f7f2 f993 	bl	8000288 <__aeabi_dsub>
 800df62:	2200      	movs	r2, #0
 800df64:	2300      	movs	r3, #0
 800df66:	e7ed      	b.n	800df44 <__ieee754_log10+0x24>
 800df68:	4b30      	ldr	r3, [pc, #192]	@ (800e02c <__ieee754_log10+0x10c>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	4620      	mov	r0, r4
 800df6e:	4629      	mov	r1, r5
 800df70:	f7f2 fb42 	bl	80005f8 <__aeabi_dmul>
 800df74:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800df78:	4604      	mov	r4, r0
 800df7a:	460d      	mov	r5, r1
 800df7c:	460b      	mov	r3, r1
 800df7e:	492c      	ldr	r1, [pc, #176]	@ (800e030 <__ieee754_log10+0x110>)
 800df80:	428b      	cmp	r3, r1
 800df82:	dd08      	ble.n	800df96 <__ieee754_log10+0x76>
 800df84:	4622      	mov	r2, r4
 800df86:	462b      	mov	r3, r5
 800df88:	4620      	mov	r0, r4
 800df8a:	4629      	mov	r1, r5
 800df8c:	f7f2 f97e 	bl	800028c <__adddf3>
 800df90:	e7da      	b.n	800df48 <__ieee754_log10+0x28>
 800df92:	2200      	movs	r2, #0
 800df94:	e7f3      	b.n	800df7e <__ieee754_log10+0x5e>
 800df96:	1518      	asrs	r0, r3, #20
 800df98:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800df9c:	4410      	add	r0, r2
 800df9e:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800dfa2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800dfa6:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800dfaa:	f7f2 fabb 	bl	8000524 <__aeabi_i2d>
 800dfae:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800dfb2:	3303      	adds	r3, #3
 800dfb4:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800dfb8:	a315      	add	r3, pc, #84	@ (adr r3, 800e010 <__ieee754_log10+0xf0>)
 800dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbe:	ec45 4b18 	vmov	d8, r4, r5
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	f7f2 fb17 	bl	80005f8 <__aeabi_dmul>
 800dfca:	eeb0 0a48 	vmov.f32	s0, s16
 800dfce:	eef0 0a68 	vmov.f32	s1, s17
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	460d      	mov	r5, r1
 800dfd6:	f000 f82f 	bl	800e038 <__ieee754_log>
 800dfda:	a30f      	add	r3, pc, #60	@ (adr r3, 800e018 <__ieee754_log10+0xf8>)
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	ec51 0b10 	vmov	r0, r1, d0
 800dfe4:	f7f2 fb08 	bl	80005f8 <__aeabi_dmul>
 800dfe8:	4622      	mov	r2, r4
 800dfea:	462b      	mov	r3, r5
 800dfec:	f7f2 f94e 	bl	800028c <__adddf3>
 800dff0:	a30b      	add	r3, pc, #44	@ (adr r3, 800e020 <__ieee754_log10+0x100>)
 800dff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff6:	4604      	mov	r4, r0
 800dff8:	460d      	mov	r5, r1
 800dffa:	4630      	mov	r0, r6
 800dffc:	4639      	mov	r1, r7
 800dffe:	f7f2 fafb 	bl	80005f8 <__aeabi_dmul>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4620      	mov	r0, r4
 800e008:	4629      	mov	r1, r5
 800e00a:	e7bf      	b.n	800df8c <__ieee754_log10+0x6c>
 800e00c:	f3af 8000 	nop.w
 800e010:	11f12b36 	.word	0x11f12b36
 800e014:	3d59fef3 	.word	0x3d59fef3
 800e018:	1526e50e 	.word	0x1526e50e
 800e01c:	3fdbcb7b 	.word	0x3fdbcb7b
 800e020:	509f6000 	.word	0x509f6000
 800e024:	3fd34413 	.word	0x3fd34413
 800e028:	c3500000 	.word	0xc3500000
 800e02c:	43500000 	.word	0x43500000
 800e030:	7fefffff 	.word	0x7fefffff
 800e034:	00000000 	.word	0x00000000

0800e038 <__ieee754_log>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	ec51 0b10 	vmov	r0, r1, d0
 800e040:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800e044:	b087      	sub	sp, #28
 800e046:	460d      	mov	r5, r1
 800e048:	da26      	bge.n	800e098 <__ieee754_log+0x60>
 800e04a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e04e:	4303      	orrs	r3, r0
 800e050:	4602      	mov	r2, r0
 800e052:	d10a      	bne.n	800e06a <__ieee754_log+0x32>
 800e054:	49ce      	ldr	r1, [pc, #824]	@ (800e390 <__ieee754_log+0x358>)
 800e056:	2200      	movs	r2, #0
 800e058:	2300      	movs	r3, #0
 800e05a:	2000      	movs	r0, #0
 800e05c:	f7f2 fbf6 	bl	800084c <__aeabi_ddiv>
 800e060:	ec41 0b10 	vmov	d0, r0, r1
 800e064:	b007      	add	sp, #28
 800e066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06a:	2900      	cmp	r1, #0
 800e06c:	da05      	bge.n	800e07a <__ieee754_log+0x42>
 800e06e:	460b      	mov	r3, r1
 800e070:	f7f2 f90a 	bl	8000288 <__aeabi_dsub>
 800e074:	2200      	movs	r2, #0
 800e076:	2300      	movs	r3, #0
 800e078:	e7f0      	b.n	800e05c <__ieee754_log+0x24>
 800e07a:	4bc6      	ldr	r3, [pc, #792]	@ (800e394 <__ieee754_log+0x35c>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	f7f2 fabb 	bl	80005f8 <__aeabi_dmul>
 800e082:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800e086:	460d      	mov	r5, r1
 800e088:	4ac3      	ldr	r2, [pc, #780]	@ (800e398 <__ieee754_log+0x360>)
 800e08a:	4295      	cmp	r5, r2
 800e08c:	dd06      	ble.n	800e09c <__ieee754_log+0x64>
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	f7f2 f8fb 	bl	800028c <__adddf3>
 800e096:	e7e3      	b.n	800e060 <__ieee754_log+0x28>
 800e098:	2300      	movs	r3, #0
 800e09a:	e7f5      	b.n	800e088 <__ieee754_log+0x50>
 800e09c:	152c      	asrs	r4, r5, #20
 800e09e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800e0a2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e0a6:	441c      	add	r4, r3
 800e0a8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800e0ac:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800e0b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0b4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800e0b8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800e0bc:	ea42 0105 	orr.w	r1, r2, r5
 800e0c0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	4bb5      	ldr	r3, [pc, #724]	@ (800e39c <__ieee754_log+0x364>)
 800e0c8:	f7f2 f8de 	bl	8000288 <__aeabi_dsub>
 800e0cc:	1cab      	adds	r3, r5, #2
 800e0ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	4682      	mov	sl, r0
 800e0d6:	468b      	mov	fp, r1
 800e0d8:	f04f 0200 	mov.w	r2, #0
 800e0dc:	dc53      	bgt.n	800e186 <__ieee754_log+0x14e>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f7f2 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0e4:	b1d0      	cbz	r0, 800e11c <__ieee754_log+0xe4>
 800e0e6:	2c00      	cmp	r4, #0
 800e0e8:	f000 8120 	beq.w	800e32c <__ieee754_log+0x2f4>
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f7f2 fa19 	bl	8000524 <__aeabi_i2d>
 800e0f2:	a391      	add	r3, pc, #580	@ (adr r3, 800e338 <__ieee754_log+0x300>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	460f      	mov	r7, r1
 800e0fc:	f7f2 fa7c 	bl	80005f8 <__aeabi_dmul>
 800e100:	a38f      	add	r3, pc, #572	@ (adr r3, 800e340 <__ieee754_log+0x308>)
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	4630      	mov	r0, r6
 800e10c:	4639      	mov	r1, r7
 800e10e:	f7f2 fa73 	bl	80005f8 <__aeabi_dmul>
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	4620      	mov	r0, r4
 800e118:	4629      	mov	r1, r5
 800e11a:	e7ba      	b.n	800e092 <__ieee754_log+0x5a>
 800e11c:	a38a      	add	r3, pc, #552	@ (adr r3, 800e348 <__ieee754_log+0x310>)
 800e11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e122:	4650      	mov	r0, sl
 800e124:	4659      	mov	r1, fp
 800e126:	f7f2 fa67 	bl	80005f8 <__aeabi_dmul>
 800e12a:	4602      	mov	r2, r0
 800e12c:	460b      	mov	r3, r1
 800e12e:	2000      	movs	r0, #0
 800e130:	499b      	ldr	r1, [pc, #620]	@ (800e3a0 <__ieee754_log+0x368>)
 800e132:	f7f2 f8a9 	bl	8000288 <__aeabi_dsub>
 800e136:	4652      	mov	r2, sl
 800e138:	4606      	mov	r6, r0
 800e13a:	460f      	mov	r7, r1
 800e13c:	465b      	mov	r3, fp
 800e13e:	4650      	mov	r0, sl
 800e140:	4659      	mov	r1, fp
 800e142:	f7f2 fa59 	bl	80005f8 <__aeabi_dmul>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	4630      	mov	r0, r6
 800e14c:	4639      	mov	r1, r7
 800e14e:	f7f2 fa53 	bl	80005f8 <__aeabi_dmul>
 800e152:	4606      	mov	r6, r0
 800e154:	460f      	mov	r7, r1
 800e156:	b914      	cbnz	r4, 800e15e <__ieee754_log+0x126>
 800e158:	4632      	mov	r2, r6
 800e15a:	463b      	mov	r3, r7
 800e15c:	e0a0      	b.n	800e2a0 <__ieee754_log+0x268>
 800e15e:	4620      	mov	r0, r4
 800e160:	f7f2 f9e0 	bl	8000524 <__aeabi_i2d>
 800e164:	a374      	add	r3, pc, #464	@ (adr r3, 800e338 <__ieee754_log+0x300>)
 800e166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16a:	4680      	mov	r8, r0
 800e16c:	4689      	mov	r9, r1
 800e16e:	f7f2 fa43 	bl	80005f8 <__aeabi_dmul>
 800e172:	a373      	add	r3, pc, #460	@ (adr r3, 800e340 <__ieee754_log+0x308>)
 800e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e178:	4604      	mov	r4, r0
 800e17a:	460d      	mov	r5, r1
 800e17c:	4640      	mov	r0, r8
 800e17e:	4649      	mov	r1, r9
 800e180:	f7f2 fa3a 	bl	80005f8 <__aeabi_dmul>
 800e184:	e0a5      	b.n	800e2d2 <__ieee754_log+0x29a>
 800e186:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e18a:	f7f2 f87f 	bl	800028c <__adddf3>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	4650      	mov	r0, sl
 800e194:	4659      	mov	r1, fp
 800e196:	f7f2 fb59 	bl	800084c <__aeabi_ddiv>
 800e19a:	e9cd 0100 	strd	r0, r1, [sp]
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7f2 f9c0 	bl	8000524 <__aeabi_i2d>
 800e1a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	f7f2 fa22 	bl	80005f8 <__aeabi_dmul>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1bc:	f7f2 fa1c 	bl	80005f8 <__aeabi_dmul>
 800e1c0:	a363      	add	r3, pc, #396	@ (adr r3, 800e350 <__ieee754_log+0x318>)
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	4680      	mov	r8, r0
 800e1c8:	4689      	mov	r9, r1
 800e1ca:	f7f2 fa15 	bl	80005f8 <__aeabi_dmul>
 800e1ce:	a362      	add	r3, pc, #392	@ (adr r3, 800e358 <__ieee754_log+0x320>)
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	f7f2 f85a 	bl	800028c <__adddf3>
 800e1d8:	4642      	mov	r2, r8
 800e1da:	464b      	mov	r3, r9
 800e1dc:	f7f2 fa0c 	bl	80005f8 <__aeabi_dmul>
 800e1e0:	a35f      	add	r3, pc, #380	@ (adr r3, 800e360 <__ieee754_log+0x328>)
 800e1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e6:	f7f2 f851 	bl	800028c <__adddf3>
 800e1ea:	4642      	mov	r2, r8
 800e1ec:	464b      	mov	r3, r9
 800e1ee:	f7f2 fa03 	bl	80005f8 <__aeabi_dmul>
 800e1f2:	a35d      	add	r3, pc, #372	@ (adr r3, 800e368 <__ieee754_log+0x330>)
 800e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f8:	f7f2 f848 	bl	800028c <__adddf3>
 800e1fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e200:	f7f2 f9fa 	bl	80005f8 <__aeabi_dmul>
 800e204:	a35a      	add	r3, pc, #360	@ (adr r3, 800e370 <__ieee754_log+0x338>)
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e20e:	4640      	mov	r0, r8
 800e210:	4649      	mov	r1, r9
 800e212:	f7f2 f9f1 	bl	80005f8 <__aeabi_dmul>
 800e216:	a358      	add	r3, pc, #352	@ (adr r3, 800e378 <__ieee754_log+0x340>)
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	f7f2 f836 	bl	800028c <__adddf3>
 800e220:	4642      	mov	r2, r8
 800e222:	464b      	mov	r3, r9
 800e224:	f7f2 f9e8 	bl	80005f8 <__aeabi_dmul>
 800e228:	a355      	add	r3, pc, #340	@ (adr r3, 800e380 <__ieee754_log+0x348>)
 800e22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22e:	f7f2 f82d 	bl	800028c <__adddf3>
 800e232:	4642      	mov	r2, r8
 800e234:	464b      	mov	r3, r9
 800e236:	f7f2 f9df 	bl	80005f8 <__aeabi_dmul>
 800e23a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800e246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e24a:	f7f2 f81f 	bl	800028c <__adddf3>
 800e24e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800e252:	3551      	adds	r5, #81	@ 0x51
 800e254:	4335      	orrs	r5, r6
 800e256:	2d00      	cmp	r5, #0
 800e258:	4680      	mov	r8, r0
 800e25a:	4689      	mov	r9, r1
 800e25c:	dd48      	ble.n	800e2f0 <__ieee754_log+0x2b8>
 800e25e:	4b50      	ldr	r3, [pc, #320]	@ (800e3a0 <__ieee754_log+0x368>)
 800e260:	2200      	movs	r2, #0
 800e262:	4650      	mov	r0, sl
 800e264:	4659      	mov	r1, fp
 800e266:	f7f2 f9c7 	bl	80005f8 <__aeabi_dmul>
 800e26a:	4652      	mov	r2, sl
 800e26c:	465b      	mov	r3, fp
 800e26e:	f7f2 f9c3 	bl	80005f8 <__aeabi_dmul>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4606      	mov	r6, r0
 800e278:	460f      	mov	r7, r1
 800e27a:	4640      	mov	r0, r8
 800e27c:	4649      	mov	r1, r9
 800e27e:	f7f2 f805 	bl	800028c <__adddf3>
 800e282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e286:	f7f2 f9b7 	bl	80005f8 <__aeabi_dmul>
 800e28a:	4680      	mov	r8, r0
 800e28c:	4689      	mov	r9, r1
 800e28e:	b964      	cbnz	r4, 800e2aa <__ieee754_log+0x272>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4630      	mov	r0, r6
 800e296:	4639      	mov	r1, r7
 800e298:	f7f1 fff6 	bl	8000288 <__aeabi_dsub>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	4659      	mov	r1, fp
 800e2a4:	f7f1 fff0 	bl	8000288 <__aeabi_dsub>
 800e2a8:	e6da      	b.n	800e060 <__ieee754_log+0x28>
 800e2aa:	a323      	add	r3, pc, #140	@ (adr r3, 800e338 <__ieee754_log+0x300>)
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2b4:	f7f2 f9a0 	bl	80005f8 <__aeabi_dmul>
 800e2b8:	a321      	add	r3, pc, #132	@ (adr r3, 800e340 <__ieee754_log+0x308>)
 800e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2be:	4604      	mov	r4, r0
 800e2c0:	460d      	mov	r5, r1
 800e2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2c6:	f7f2 f997 	bl	80005f8 <__aeabi_dmul>
 800e2ca:	4642      	mov	r2, r8
 800e2cc:	464b      	mov	r3, r9
 800e2ce:	f7f1 ffdd 	bl	800028c <__adddf3>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	4639      	mov	r1, r7
 800e2da:	f7f1 ffd5 	bl	8000288 <__aeabi_dsub>
 800e2de:	4652      	mov	r2, sl
 800e2e0:	465b      	mov	r3, fp
 800e2e2:	f7f1 ffd1 	bl	8000288 <__aeabi_dsub>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	e7d9      	b.n	800e2a4 <__ieee754_log+0x26c>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4650      	mov	r0, sl
 800e2f6:	4659      	mov	r1, fp
 800e2f8:	f7f1 ffc6 	bl	8000288 <__aeabi_dsub>
 800e2fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e300:	f7f2 f97a 	bl	80005f8 <__aeabi_dmul>
 800e304:	4606      	mov	r6, r0
 800e306:	460f      	mov	r7, r1
 800e308:	2c00      	cmp	r4, #0
 800e30a:	f43f af25 	beq.w	800e158 <__ieee754_log+0x120>
 800e30e:	a30a      	add	r3, pc, #40	@ (adr r3, 800e338 <__ieee754_log+0x300>)
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e318:	f7f2 f96e 	bl	80005f8 <__aeabi_dmul>
 800e31c:	a308      	add	r3, pc, #32	@ (adr r3, 800e340 <__ieee754_log+0x308>)
 800e31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e322:	4604      	mov	r4, r0
 800e324:	460d      	mov	r5, r1
 800e326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e32a:	e729      	b.n	800e180 <__ieee754_log+0x148>
 800e32c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e388 <__ieee754_log+0x350>
 800e330:	e698      	b.n	800e064 <__ieee754_log+0x2c>
 800e332:	bf00      	nop
 800e334:	f3af 8000 	nop.w
 800e338:	fee00000 	.word	0xfee00000
 800e33c:	3fe62e42 	.word	0x3fe62e42
 800e340:	35793c76 	.word	0x35793c76
 800e344:	3dea39ef 	.word	0x3dea39ef
 800e348:	55555555 	.word	0x55555555
 800e34c:	3fd55555 	.word	0x3fd55555
 800e350:	df3e5244 	.word	0xdf3e5244
 800e354:	3fc2f112 	.word	0x3fc2f112
 800e358:	96cb03de 	.word	0x96cb03de
 800e35c:	3fc74664 	.word	0x3fc74664
 800e360:	94229359 	.word	0x94229359
 800e364:	3fd24924 	.word	0x3fd24924
 800e368:	55555593 	.word	0x55555593
 800e36c:	3fe55555 	.word	0x3fe55555
 800e370:	d078c69f 	.word	0xd078c69f
 800e374:	3fc39a09 	.word	0x3fc39a09
 800e378:	1d8e78af 	.word	0x1d8e78af
 800e37c:	3fcc71c5 	.word	0x3fcc71c5
 800e380:	9997fa04 	.word	0x9997fa04
 800e384:	3fd99999 	.word	0x3fd99999
	...
 800e390:	c3500000 	.word	0xc3500000
 800e394:	43500000 	.word	0x43500000
 800e398:	7fefffff 	.word	0x7fefffff
 800e39c:	3ff00000 	.word	0x3ff00000
 800e3a0:	3fe00000 	.word	0x3fe00000

0800e3a4 <_init>:
 800e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a6:	bf00      	nop
 800e3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3aa:	bc08      	pop	{r3}
 800e3ac:	469e      	mov	lr, r3
 800e3ae:	4770      	bx	lr

0800e3b0 <_fini>:
 800e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b2:	bf00      	nop
 800e3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b6:	bc08      	pop	{r3}
 800e3b8:	469e      	mov	lr, r3
 800e3ba:	4770      	bx	lr
